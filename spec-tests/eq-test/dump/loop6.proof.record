==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--symbol.1_end #b11001000000000000000000110010011)
(= input.memlabel-mem--symbol.1_begin #b11001000000000000000000000000100)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= dst_symbol_addr.1 #b11001000000000000000000000000100)
(= symbol.1 #b11001000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000001100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000001100000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000001100000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00800248)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x008003d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffe4f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00800248)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00800248)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32) (_ bv2147484047 32))
(define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun dst_symbol_addr.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun symbol.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147484051 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let (($x126 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x112 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x128 (= $x127 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x91 (bvand symbol.1 (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x27 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x33 (= input.memlabel-mem--symbol.1_end ?x27)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (and $x50 $x33)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x6 $x40)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (and $x62 $x60)))
 (let (($x86 (not $x69)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (and $x52 $x68)))
 (let (($x79 (and (not $x24) $x86)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x38 $x44)))
 (let (($x32 (not $x14)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x83 $x10)))
 (let (($x87 (and (not $x34) $x32)))
 (let (($x100 (and (and (and (and (and (and $x87 $x79) $x57) $x17) $x42) $x90) $x92)))
 (let (($x101 (and $x100 $x94)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x102 (and $x75 $x101)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x61 $x19)))))))
 (let (($x103 (and $x54 $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (= $x70 true)))
 (let (($x66 (= $x80 true)))
 (let (($x13 (= $x66 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x56 (concat ?x59 (concat ?x46 ?x23)))))
 (let (($x76 (= ?x72 input.dst.llvm-%n)))
 (let (($x88 (= $x76 true)))
 (let (($x28 (= $x88 true)))
 (let (($x25 (and $x28 $x13)))
 (let (($x107 (and $x25 $x106)))
 (let (($x129 (and $x107 $x128)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x39 $x129)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x16 $x130)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x11 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let (($x126 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x112 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x128 (= $x127 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x91 (bvand symbol.1 (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x27 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x33 (= input.memlabel-mem--symbol.1_end ?x27)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (and $x50 $x33)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x6 $x40)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (and $x62 $x60)))
 (let (($x86 (not $x69)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (and $x52 $x68)))
 (let (($x79 (and (not $x24) $x86)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x38 $x44)))
 (let (($x32 (not $x14)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x83 $x10)))
 (let (($x87 (and (not $x34) $x32)))
 (let (($x100 (and (and (and (and (and (and $x87 $x79) $x57) $x17) $x42) $x90) $x92)))
 (let (($x101 (and $x100 $x94)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x102 (and $x75 $x101)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x61 $x19)))))))
 (let (($x103 (and $x54 $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (= $x70 true)))
 (let (($x66 (= $x80 true)))
 (let (($x13 (= $x66 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x56 (concat ?x59 (concat ?x46 ?x23)))))
 (let (($x76 (= ?x72 input.dst.llvm-%n)))
 (let (($x88 (= $x76 true)))
 (let (($x28 (= $x88 true)))
 (let (($x25 (and $x28 $x13)))
 (let (($x107 (and $x25 $x106)))
 (let (($x129 (and $x107 $x128)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x39 $x129)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x16 $x130)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x11 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x118 (= $x122 true)))
 (let (($x51 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x124 false)))
 ))
 (let (($x113 (and $x128 $x51)))
 (let (($x121 (= $x113 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x104 (concat ?x101 (concat ?x92 ?x99)))))
 (let (($x106 (= ?x105 input.dst.llvm-%n)))
 (let (($x107 (= $x106 true)))
 (let (($x111 (= $x107 true)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (= $x27 true)))
 (let (($x40 (= $x33 true)))
 (let (($x42 (= $x40 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x24)))
 (let ((?x52 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x34 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x22 (= input.memlabel-mem--symbol.1_end ?x34)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x83 $x22)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x75 $x38)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x53 $x19)))
 (let (($x73 (not $x49)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x30 $x81)))
 (let (($x71 (and (not $x61) $x73)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x9 $x82)))
 (let (($x37 (not $x64)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x74 $x65)))
 (let (($x7 (and (not $x26) $x37)))
 (let (($x95 (and (and (and (and (and (and $x7 $x71) $x54) $x55) $x44) $x87) $x68)))
 (let (($x57 (and $x95 $x77)))
 (let (($x25 (= symbol.1 dst_symbol_addr.1)))
 (let (($x96 (and $x25 $x57)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x31 $x76)))))))
 (let (($x17 (and $x13 $x96)))
 (let (($x97 (= $x17 true)))
 (let (($x6 (= $x97 true)))
 (let (($x50 (= $x6 true)))
 (let (($x98 (and $x50 $x42)))
 (let (($x112 (and $x98 $x111)))
 (let (($x119 (and $x112 $x121)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x20 $x119)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x110 (and $x16 $x108)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x43 $x110)))
 (let (($x123 (=> $x114 $x118)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x118 (= $x122 true)))
 (let (($x51 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x124 false)))
 ))
 (let (($x113 (and $x128 $x51)))
 (let (($x121 (= $x113 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x104 (concat ?x101 (concat ?x92 ?x99)))))
 (let (($x106 (= ?x105 input.dst.llvm-%n)))
 (let (($x107 (= $x106 true)))
 (let (($x111 (= $x107 true)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (= $x27 true)))
 (let (($x40 (= $x33 true)))
 (let (($x42 (= $x40 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x24)))
 (let ((?x52 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x34 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x22 (= input.memlabel-mem--symbol.1_end ?x34)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x83 $x22)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x75 $x38)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x53 $x19)))
 (let (($x73 (not $x49)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x30 $x81)))
 (let (($x71 (and (not $x61) $x73)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x9 $x82)))
 (let (($x37 (not $x64)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x74 $x65)))
 (let (($x7 (and (not $x26) $x37)))
 (let (($x95 (and (and (and (and (and (and $x7 $x71) $x54) $x55) $x44) $x87) $x68)))
 (let (($x57 (and $x95 $x77)))
 (let (($x25 (= symbol.1 dst_symbol_addr.1)))
 (let (($x96 (and $x25 $x57)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x31 $x76)))))))
 (let (($x17 (and $x13 $x96)))
 (let (($x97 (= $x17 true)))
 (let (($x6 (= $x97 true)))
 (let (($x50 (= $x6 true)))
 (let (($x98 (and $x50 $x42)))
 (let (($x112 (and $x98 $x111)))
 (let (($x119 (and $x112 $x121)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x20 $x119)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x110 (and $x16 $x108)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x43 $x110)))
 (let (($x123 (=> $x114 $x118)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1a75018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1a74fffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x130)))
 (let (($x117 (= ?x135 input.dst.llvm-%n)))
 (let (($x137 (= $x117 true)))
 (let (($x90 (forall ((input.ind-%var81X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var81X)))
 (=> $x45 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var81X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var80X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var80X)))
 (= $x45 false)))
 ))
 (let (($x125 (and $x119 $x90)))
 (let (($x133 (= $x125 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x107 (concat ?x102 (concat ?x91 ?x94)))))
 (let (($x112 (= ?x111 input.dst.llvm-%n)))
 (let (($x120 (= $x112 true)))
 (let (($x124 (= $x120 true)))
 (let (($x40 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x42 (= $x40 true)))
 (let (($x98 (= $x42 true)))
 (let (($x89 (= $x98 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x79)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x32)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x34 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (and $x75 $x34)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x69 $x22)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x19 $x49)))
 (let (($x71 (not $x73)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x61 $x84)))
 (let (($x54 (and (not $x53) $x71)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x82 $x64)))
 (let (($x7 (not $x37)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x26 $x12)))
 (let (($x81 (and (not $x9) $x7)))
 (let (($x96 (and (and (and (and (and (and $x81 $x54) $x60) $x55) $x38) $x14) $x87)))
 (let (($x17 (and $x96 $x52)))
 (let (($x65 (= symbol.1 dst_symbol_addr.1)))
 (let (($x97 (and $x65 $x17)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x31 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x28 $x70)))))))
 (let (($x6 (and $x74 $x97)))
 (let (($x50 (= $x6 true)))
 (let (($x48 (= $x50 true)))
 (let (($x27 (= $x48 true)))
 (let (($x103 (and $x27 $x89)))
 (let (($x127 (and $x103 $x124)))
 (let (($x131 (and $x127 $x133)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x20 $x131)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x15 $x115)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x11 $x116)))
 (let (($x138 (=> $x126 $x137)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x130)))
 (let (($x117 (= ?x135 input.dst.llvm-%n)))
 (let (($x137 (= $x117 true)))
 (let (($x90 (forall ((input.ind-%var81X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var81X)))
 (=> $x45 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var81X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var80X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var80X)))
 (= $x45 false)))
 ))
 (let (($x125 (and $x119 $x90)))
 (let (($x133 (= $x125 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x107 (concat ?x102 (concat ?x91 ?x94)))))
 (let (($x112 (= ?x111 input.dst.llvm-%n)))
 (let (($x120 (= $x112 true)))
 (let (($x124 (= $x120 true)))
 (let (($x40 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x42 (= $x40 true)))
 (let (($x98 (= $x42 true)))
 (let (($x89 (= $x98 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x79)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x32)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x34 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (and $x75 $x34)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x69 $x22)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x19 $x49)))
 (let (($x71 (not $x73)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x61 $x84)))
 (let (($x54 (and (not $x53) $x71)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x82 $x64)))
 (let (($x7 (not $x37)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x26 $x12)))
 (let (($x81 (and (not $x9) $x7)))
 (let (($x96 (and (and (and (and (and (and $x81 $x54) $x60) $x55) $x38) $x14) $x87)))
 (let (($x17 (and $x96 $x52)))
 (let (($x65 (= symbol.1 dst_symbol_addr.1)))
 (let (($x97 (and $x65 $x17)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x31 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x28 $x70)))))))
 (let (($x6 (and $x74 $x97)))
 (let (($x50 (= $x6 true)))
 (let (($x48 (= $x50 true)))
 (let (($x27 (= $x48 true)))
 (let (($x103 (and $x27 $x89)))
 (let (($x127 (and $x103 $x124)))
 (let (($x131 (and $x127 $x133)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x20 $x131)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x15 $x115)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x11 $x116)))
 (let (($x138 (=> $x126 $x137)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x132)))
 (let (($x123 (= ?x113 input.spec-%var-n-1)))
 (let (($x110 (= $x123 true)))
 (let (($x138 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x133 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x39 false)))
 ))
 (let (($x139 (and $x133 $x138)))
 (let (($x56 (= $x139 true)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (= $x120 true)))
 (let (($x127 (= $x124 true)))
 (let (($x136 (= $x127 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x89)))
 (let ((?x42 (bvand symbol.1 (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x42)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x50 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (and $x17 $x50)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x52 $x48)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x44 $x86)))
 (let (($x57 (not $x14)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x22 $x38)))
 (let (($x87 (and (not $x77) $x57)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x24 $x69)))
 (let (($x83 (not $x75)))
 (let (($x18 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x95 $x18)))
 (let (($x34 (and (not $x55) $x83)))
 (let (($x102 (and (and (and (and (and (and $x34 $x87) $x96) $x79) $x27) $x40) $x98)))
 (let (($x101 (and $x102 $x103)))
 (let (($x60 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x60 $x101)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x53 $x62)))))))
 (let (($x94 (and $x68 $x91)))
 (let (($x92 (= $x94 true)))
 (let (($x105 (= $x92 true)))
 (let (($x111 (= $x105 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x70 (concat ?x72 (concat ?x21 ?x85)))))
 (let (($x36 (= ?x80 input.dst.llvm-%n)))
 (let (($x63 (= $x36 true)))
 (let (($x74 (= $x63 true)))
 (let (($x112 (and $x74 $x111)))
 (let (($x45 (and $x112 $x136)))
 (let (($x93 (and $x45 $x56)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x29 $x93)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x43 $x51)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x8 $x118)))
 (let (($x109 (=> $x114 $x110)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x132)))
 (let (($x123 (= ?x113 input.spec-%var-n-1)))
 (let (($x110 (= $x123 true)))
 (let (($x138 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x133 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x39 false)))
 ))
 (let (($x139 (and $x133 $x138)))
 (let (($x56 (= $x139 true)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (= $x120 true)))
 (let (($x127 (= $x124 true)))
 (let (($x136 (= $x127 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x89)))
 (let ((?x42 (bvand symbol.1 (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x42)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x50 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (and $x17 $x50)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x52 $x48)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x44 $x86)))
 (let (($x57 (not $x14)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x22 $x38)))
 (let (($x87 (and (not $x77) $x57)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x24 $x69)))
 (let (($x83 (not $x75)))
 (let (($x18 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x95 $x18)))
 (let (($x34 (and (not $x55) $x83)))
 (let (($x102 (and (and (and (and (and (and $x34 $x87) $x96) $x79) $x27) $x40) $x98)))
 (let (($x101 (and $x102 $x103)))
 (let (($x60 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x60 $x101)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x53 $x62)))))))
 (let (($x94 (and $x68 $x91)))
 (let (($x92 (= $x94 true)))
 (let (($x105 (= $x92 true)))
 (let (($x111 (= $x105 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x70 (concat ?x72 (concat ?x21 ?x85)))))
 (let (($x36 (= ?x80 input.dst.llvm-%n)))
 (let (($x63 (= $x36 true)))
 (let (($x74 (= $x63 true)))
 (let (($x112 (and $x74 $x111)))
 (let (($x45 (and $x112 $x136)))
 (let (($x93 (and $x45 $x56)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x29 $x93)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x43 $x51)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x8 $x118)))
 (let (($x109 (=> $x114 $x110)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x90 (= $x119 true)))
 (let (($x130 (= $x90 true)))
 (let (($x109 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x117 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x117 false)))
 ))
 (let (($x129 (and $x56 $x109)))
 (let (($x66 (= $x129 true)))
 (let (($x127 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x136 (= $x127 true)))
 (let (($x45 (= $x136 true)))
 (let (($x122 (= $x45 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x100)))
 (let ((?x33 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x33)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x97 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x97)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x52 $x6)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x107 $x50)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x86 $x14)))
 (let (($x87 (not $x57)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x77 $x32)))
 (let (($x96 (and (not $x44) $x87)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x69 $x75)))
 (let (($x34 (not $x83)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x55 $x10)))
 (let (($x38 (and (not $x24) $x34)))
 (let (($x91 (and (and (and (and (and (and $x38 $x96) $x106) $x79) $x48) $x99) $x40)))
 (let (($x94 (and $x91 $x42)))
 (let (($x18 (= symbol.1 dst_symbol_addr.1)))
 (let (($x92 (and $x18 $x94)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x53 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x53) (or $x49 $x73)))))))
 (let (($x105 (and $x95 $x92)))
 (let (($x111 (= $x105 true)))
 (let (($x112 (= $x111 true)))
 (let (($x120 (= $x112 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x80 (concat ?x21 (concat ?x41 ?x88)))))
 (let (($x63 (= ?x13 input.dst.llvm-%n)))
 (let (($x74 (= $x63 true)))
 (let (($x26 (= $x74 true)))
 (let (($x124 (and $x26 $x120)))
 (let (($x39 (and $x124 $x122)))
 (let (($x5 (and $x39 $x66)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x16 $x5)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x58 $x35)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x59 $x134)))
 (let (($x115 (=> $x116 $x130)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x90 (= $x119 true)))
 (let (($x130 (= $x90 true)))
 (let (($x109 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x117 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x117 false)))
 ))
 (let (($x129 (and $x56 $x109)))
 (let (($x66 (= $x129 true)))
 (let (($x127 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x136 (= $x127 true)))
 (let (($x45 (= $x136 true)))
 (let (($x122 (= $x45 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x100)))
 (let ((?x33 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x33)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x97 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x97)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x52 $x6)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x107 $x50)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x86 $x14)))
 (let (($x87 (not $x57)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x77 $x32)))
 (let (($x96 (and (not $x44) $x87)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x69 $x75)))
 (let (($x34 (not $x83)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x55 $x10)))
 (let (($x38 (and (not $x24) $x34)))
 (let (($x91 (and (and (and (and (and (and $x38 $x96) $x106) $x79) $x48) $x99) $x40)))
 (let (($x94 (and $x91 $x42)))
 (let (($x18 (= symbol.1 dst_symbol_addr.1)))
 (let (($x92 (and $x18 $x94)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x53 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x53) (or $x49 $x73)))))))
 (let (($x105 (and $x95 $x92)))
 (let (($x111 (= $x105 true)))
 (let (($x112 (= $x111 true)))
 (let (($x120 (= $x112 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x80 (concat ?x21 (concat ?x41 ?x88)))))
 (let (($x63 (= ?x13 input.dst.llvm-%n)))
 (let (($x74 (= $x63 true)))
 (let (($x26 (= $x74 true)))
 (let (($x124 (and $x26 $x120)))
 (let (($x39 (and $x124 $x122)))
 (let (($x5 (and $x39 $x66)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x16 $x5)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x58 $x35)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x59 $x134)))
 (let (($x115 (=> $x116 $x130)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x132 (= $x138 true)))
 (let (($x51 (= $x132 true)))
 (let (($x135 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x123 false)))
 ))
 (let (($x12 (and $x66 $x135)))
 (let (($x25 (= $x12 true)))
 (let (($x45 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x122 (= $x45 true)))
 (let (($x39 (= $x122 true)))
 (let (($x126 (= $x39 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x101)))
 (let ((?x27 (bvand symbol.1 (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x27)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x97 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (and $x107 $x97)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x89 $x6)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x14 $x57)))
 (let (($x96 (not $x87)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x44 $x104)))
 (let (($x106 (and (not $x86) $x96)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x75 $x83)))
 (let (($x38 (not $x34)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x24 $x22)))
 (let (($x32 (and (not $x69) $x38)))
 (let (($x92 (and (and (and (and (and (and $x32 $x106) $x102) $x79) $x50) $x103) $x99)))
 (let (($x105 (and $x92 $x33)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x111 (and $x10 $x105)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x53) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x68 $x67)))))))
 (let (($x112 (and $x55 $x111)))
 (let (($x120 (= $x112 true)))
 (let (($x124 (= $x120 true)))
 (let (($x127 (= $x124 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x13 (concat ?x41 (concat ?x72 ?x76)))))
 (let (($x74 (= ?x36 input.dst.llvm-%n)))
 (let (($x26 (= $x74 true)))
 (let (($x82 (= $x26 true)))
 (let (($x136 (and $x82 $x127)))
 (let (($x117 (and $x136 $x126)))
 (let (($x137 (and $x117 $x25)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and $x15 $x137)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x78 $x128)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x125 (and $x20 $x118)))
 (let (($x113 (=> $x125 $x51)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x132 (= $x138 true)))
 (let (($x51 (= $x132 true)))
 (let (($x135 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x123 false)))
 ))
 (let (($x12 (and $x66 $x135)))
 (let (($x25 (= $x12 true)))
 (let (($x45 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x122 (= $x45 true)))
 (let (($x39 (= $x122 true)))
 (let (($x126 (= $x39 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x101)))
 (let ((?x27 (bvand symbol.1 (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x27)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x97 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (and $x107 $x97)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x89 $x6)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x14 $x57)))
 (let (($x96 (not $x87)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x44 $x104)))
 (let (($x106 (and (not $x86) $x96)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x75 $x83)))
 (let (($x38 (not $x34)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x24 $x22)))
 (let (($x32 (and (not $x69) $x38)))
 (let (($x92 (and (and (and (and (and (and $x32 $x106) $x102) $x79) $x50) $x103) $x99)))
 (let (($x105 (and $x92 $x33)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x111 (and $x10 $x105)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x53) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x68 $x67)))))))
 (let (($x112 (and $x55 $x111)))
 (let (($x120 (= $x112 true)))
 (let (($x124 (= $x120 true)))
 (let (($x127 (= $x124 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x13 (concat ?x41 (concat ?x72 ?x76)))))
 (let (($x74 (= ?x36 input.dst.llvm-%n)))
 (let (($x26 (= $x74 true)))
 (let (($x82 (= $x26 true)))
 (let (($x136 (and $x82 $x127)))
 (let (($x117 (and $x136 $x126)))
 (let (($x137 (and $x117 $x25)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and $x15 $x137)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x78 $x128)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x125 (and $x20 $x118)))
 (let (($x113 (=> $x125 $x51)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x109 (= $x56 true)))
 (let (($x119 (= $x109 true)))
 (let (($x131 (forall ((input.ind-%var121X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var121X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var121X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var120X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var120X)))
 (= $x130 false)))
 ))
 (let (($x64 (and $x25 $x131)))
 (let (($x28 (= $x64 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x122 (concat ?x127 (concat ?x111 ?x33)))))
 (let (($x126 (= ?x39 input.dst.llvm-%n)))
 (let (($x117 (= $x126 true)))
 (let (($x114 (= $x117 true)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x96)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x57)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x83 $x32)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x75 $x44)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x9 $x55)))
 (let (($x30 (not $x60)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x65 $x95)))
 (let (($x24 (and (not $x54) $x30)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x49 $x19)))
 (let (($x68 (not $x73)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x84 $x61)))
 (let (($x67 (and (not $x62) $x68)))
 (let (($x89 (and (and (and (and (and (and $x67 $x24) $x22) $x77) $x104) $x14) $x87)))
 (let (($x107 (and $x89 $x106)))
 (let (($x53 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x53 $x107)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x41) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x63 $x74)))))))
 (let (($x17 (and $x37 $x52)))
 (let (($x97 (= $x17 true)))
 (let (($x6 (= $x97 true)))
 (let (($x50 (= $x6 true)))
 (let (($x99 (and $x50 $x27)))
 (let (($x123 (and $x99 $x114)))
 (let (($x110 (and $x123 $x28)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x43 $x110)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x11 $x121)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x139 (and $x29 $x134)))
 (let (($x35 (=> $x139 $x119)))
 (not $x35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x109 (= $x56 true)))
 (let (($x119 (= $x109 true)))
 (let (($x131 (forall ((input.ind-%var121X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var121X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var121X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var120X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var120X)))
 (= $x130 false)))
 ))
 (let (($x64 (and $x25 $x131)))
 (let (($x28 (= $x64 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x122 (concat ?x127 (concat ?x111 ?x33)))))
 (let (($x126 (= ?x39 input.dst.llvm-%n)))
 (let (($x117 (= $x126 true)))
 (let (($x114 (= $x117 true)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x96)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x57)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x83 $x32)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x75 $x44)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x9 $x55)))
 (let (($x30 (not $x60)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x65 $x95)))
 (let (($x24 (and (not $x54) $x30)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x49 $x19)))
 (let (($x68 (not $x73)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x84 $x61)))
 (let (($x67 (and (not $x62) $x68)))
 (let (($x89 (and (and (and (and (and (and $x67 $x24) $x22) $x77) $x104) $x14) $x87)))
 (let (($x107 (and $x89 $x106)))
 (let (($x53 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x53 $x107)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x41) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x63 $x74)))))))
 (let (($x17 (and $x37 $x52)))
 (let (($x97 (= $x17 true)))
 (let (($x6 (= $x97 true)))
 (let (($x50 (= $x6 true)))
 (let (($x99 (and $x50 $x27)))
 (let (($x123 (and $x99 $x114)))
 (let (($x110 (and $x123 $x28)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x43 $x110)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x11 $x121)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x139 (and $x29 $x134)))
 (let (($x35 (=> $x139 $x119)))
 (not $x35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x173 (concat ?x172 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32)))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x150 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var139X)))
 (let (($x132 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var139X)))
 (=> $x132 (= ?x150 (concat ?x178 (concat ?x175 ?x173)))))))))))
 ))
 (let (($x146 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var138X)))
 (= $x132 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv0 32))))))
 ))
 (let (($x183 (and $x146 $x182)))
 (let (($x135 (= true true)))
 (let (($x184 (and $x135 $x183)))
 (let (($x185 (= $x184 true)))
 (let (($x16 (forall ((input.ind-%var131X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var131X)))
 (=> $x51 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var131X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var130X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var130X)))
 (= $x51 false)))
 ))
 (let (($x101 (and $x28 $x16)))
 (let (($x115 (= $x101 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x45)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x50 $x103)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x6 $x94)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (and $x87 $x89)))
 (let (($x106 (not $x96)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x14 $x100)))
 (let (($x52 (and (not $x57) $x106)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x32 $x44)))
 (let (($x79 (not $x104)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x83 $x34)))
 (let (($x98 (and (not $x38) $x79)))
 (let (($x136 (and (and (and (and (and (and $x98 $x52) $x17) $x97) $x27) $x92) $x122)))
 (let (($x39 (and $x136 $x124)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x75 $x39)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x10 (or (bvugt input.memlabel-mem--symbol.1_begin ?x65) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x10) (or $x30 $x24)))))))
 (let (($x117 (and $x91 $x126)))
 (let (($x114 (= $x117 true)))
 (let (($x123 (= $x114 true)))
 (let (($x116 (= $x123 true)))
 (let (($x46 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x31 (= $x46 true)))
 (let (($x53 (= $x31 true)))
 (let (($x84 (= $x53 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x74 (concat ?x23 (concat ?x80 ?x21)))))
 (let (($x7 (= ?x26 input.dst.llvm-%n)))
 (let (($x81 (= $x7 true)))
 (let (($x37 (= $x81 true)))
 (let (($x61 (and $x37 $x84)))
 (let (($x130 (and $x61 $x116)))
 (let (($x133 (and $x130 $x115)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x58 $x133)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x8 $x118)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x29 $x129)))
 (let (($x186 (=> $x66 $x185)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x173 (concat ?x172 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32)))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var139X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x150 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var139X)))
 (let (($x132 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var139X)))
 (=> $x132 (= ?x150 (concat ?x178 (concat ?x175 ?x173)))))))))))
 ))
 (let (($x146 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var138X)))
 (= $x132 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv0 32))))))
 ))
 (let (($x183 (and $x146 $x182)))
 (let (($x135 (= true true)))
 (let (($x184 (and $x135 $x183)))
 (let (($x185 (= $x184 true)))
 (let (($x16 (forall ((input.ind-%var131X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var131X)))
 (=> $x51 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var131X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var130X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var130X)))
 (= $x51 false)))
 ))
 (let (($x101 (and $x28 $x16)))
 (let (($x115 (= $x101 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x45)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x50 $x103)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x6 $x94)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (and $x87 $x89)))
 (let (($x106 (not $x96)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x14 $x100)))
 (let (($x52 (and (not $x57) $x106)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x32 $x44)))
 (let (($x79 (not $x104)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x83 $x34)))
 (let (($x98 (and (not $x38) $x79)))
 (let (($x136 (and (and (and (and (and (and $x98 $x52) $x17) $x97) $x27) $x92) $x122)))
 (let (($x39 (and $x136 $x124)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x75 $x39)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x10 (or (bvugt input.memlabel-mem--symbol.1_begin ?x65) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x10) (or $x30 $x24)))))))
 (let (($x117 (and $x91 $x126)))
 (let (($x114 (= $x117 true)))
 (let (($x123 (= $x114 true)))
 (let (($x116 (= $x123 true)))
 (let (($x46 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x31 (= $x46 true)))
 (let (($x53 (= $x31 true)))
 (let (($x84 (= $x53 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x74 (concat ?x23 (concat ?x80 ?x21)))))
 (let (($x7 (= ?x26 input.dst.llvm-%n)))
 (let (($x81 (= $x7 true)))
 (let (($x37 (= $x81 true)))
 (let (($x61 (and $x37 $x84)))
 (let (($x130 (and $x61 $x116)))
 (let (($x133 (and $x130 $x115)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x58 $x133)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x8 $x118)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x29 $x129)))
 (let (($x186 (=> $x66 $x185)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var139X!1 () (_ BitVec 32)
    #x19252a42)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x2000018f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x20000000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8494a90a) #x40
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var138X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var139X!1 () (_ BitVec 32)
    #x00000080)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe02820ab)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xe01082db)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xe010814c)
  (define-fun symbol.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (forall ((input.ind-%var171X (_ BitVec 32)) )(let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x156 (concat ?x158 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32)))))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x85 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var171X)))
 (let (($x171 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var171X)))
 (=> $x171 (= ?x85 (concat ?x109 (concat ?x162 ?x156)))))))))))
 ))
 (let (($x184 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var170X)))
 (= $x171 (and (bvule (_ bv0 32) input.ind-%var170X) (bvult input.ind-%var170X input.dst.llvm-%n)))))
 ))
 (let (($x119 (and $x184 $x121)))
 (let (($x178 (= true true)))
 (let (($x166 (and $x178 $x119)))
 (let (($x148 (= $x166 true)))
 (let (($x145 (forall ((input.ind-%var165X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var165X)))
 (=> $x35 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var165X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var164X)))
 (= $x35 false)))
 ))
 (let (($x146 (and $x115 $x145)))
 (let (($x150 (= $x146 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x114 (concat ?x39 (concat ?x122 ?x112)))))
 (let (($x116 (= ?x123 input.dst.llvm-%n)))
 (let (($x130 (= $x116 true)))
 (let (($x125 (= $x130 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x106)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x89)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x79 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x79)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x44 $x98)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x32 $x14)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x69 $x91)))
 (let (($x49 (not $x71)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (and $x40 $x22)))
 (let (($x83 (and (not $x102) $x49)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x10 $x9)))
 (let (($x30 (not $x55)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x95 $x67)))
 (let (($x24 (and (not $x54) $x30)))
 (let (($x6 (and (and (and (and (and (and $x24 $x83) $x34) $x86) $x100) $x87) $x96)))
 (let (($x50 (and $x6 $x52)))
 (let (($x65 (= symbol.1 dst_symbol_addr.1)))
 (let (($x42 (and $x65 $x50)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x88) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x31 $x53)))))))
 (let (($x48 (and $x68 $x42)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (= $x43 true)))
 (let (($x63 (= $x18 true)))
 (let (($x36 (= $x63 true)))
 (let (($x33 (and $x36 $x27)))
 (let (($x51 (and $x33 $x125)))
 (let (($x153 (and $x51 $x150)))
 (let (($x78 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x78 $x153)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x59 $x168)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x47 $x169)))
 (let (($x167 (=> $x177 $x148)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (forall ((input.ind-%var171X (_ BitVec 32)) )(let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x156 (concat ?x158 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32)))))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var171X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x85 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var171X)))
 (let (($x171 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var171X)))
 (=> $x171 (= ?x85 (concat ?x109 (concat ?x162 ?x156)))))))))))
 ))
 (let (($x184 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var170X)))
 (= $x171 (and (bvule (_ bv0 32) input.ind-%var170X) (bvult input.ind-%var170X input.dst.llvm-%n)))))
 ))
 (let (($x119 (and $x184 $x121)))
 (let (($x178 (= true true)))
 (let (($x166 (and $x178 $x119)))
 (let (($x148 (= $x166 true)))
 (let (($x145 (forall ((input.ind-%var165X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var165X)))
 (=> $x35 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var165X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var164X)))
 (= $x35 false)))
 ))
 (let (($x146 (and $x115 $x145)))
 (let (($x150 (= $x146 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x114 (concat ?x39 (concat ?x122 ?x112)))))
 (let (($x116 (= ?x123 input.dst.llvm-%n)))
 (let (($x130 (= $x116 true)))
 (let (($x125 (= $x130 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x106)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x89)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x79 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x79)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x44 $x98)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x32 $x14)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x69 $x91)))
 (let (($x49 (not $x71)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (and $x40 $x22)))
 (let (($x83 (and (not $x102) $x49)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x10 $x9)))
 (let (($x30 (not $x55)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x95 $x67)))
 (let (($x24 (and (not $x54) $x30)))
 (let (($x6 (and (and (and (and (and (and $x24 $x83) $x34) $x86) $x100) $x87) $x96)))
 (let (($x50 (and $x6 $x52)))
 (let (($x65 (= symbol.1 dst_symbol_addr.1)))
 (let (($x42 (and $x65 $x50)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x88) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x31 $x53)))))))
 (let (($x48 (and $x68 $x42)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (= $x43 true)))
 (let (($x63 (= $x18 true)))
 (let (($x36 (= $x63 true)))
 (let (($x33 (and $x36 $x27)))
 (let (($x51 (and $x33 $x125)))
 (let (($x153 (and $x51 $x150)))
 (let (($x78 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x78 $x153)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x59 $x168)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x47 $x169)))
 (let (($x167 (=> $x177 $x148)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var171X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var170X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var171X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffe68) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (forall ((input.ind-%var199X (_ BitVec 32)) )(let ((?x56 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x110 (concat ?x56 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32)))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x5 (concat ?x108 ?x110)))))))))
 ))
 (let (($x141 (forall ((input.ind-%var198X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var198X) (bvult input.ind-%var198X (_ bv0 32)))))
 ))
 (let (($x154 (and $x141 $x138)))
 (let (($x109 (= true true)))
 (let (($x16 (and $x109 $x154)))
 (let (($x132 (= $x16 true)))
 (let (($x183 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var193X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x150 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var192X)))
 (= $x142 false)))
 ))
 (let (($x184 (and $x150 $x183)))
 (let (($x85 (= $x184 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let ((?x117 (bvand symbol.1 (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x117)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x50 $x103)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x52 $x94)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x57 $x107)))
 (let (($x111 (not $x87)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x14 $x100)))
 (let (($x96 (and (not $x97) $x111)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x105 $x32)))
 (let (($x104 (not $x44)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x17 $x38)))
 (let (($x98 (and (not $x86) $x104)))
 (let (($x126 (and (and (and (and (and (and $x98 $x96) $x6) $x106) $x27) $x99) $x114)))
 (let (($x123 (and $x126 $x124)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x116 (and $x34 $x123)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x30 (or (bvugt input.memlabel-mem--symbol.1_begin ?x10) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x30) (or $x102 $x75)))))))
 (let (($x130 (and $x127 $x116)))
 (let (($x125 (= $x130 true)))
 (let (($x51 (= $x125 true)))
 (let (($x139 (= $x51 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x61 (= $x84 true)))
 (let (($x19 (= $x61 true)))
 (let (($x73 (= $x19 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x7 (concat ?x88 (concat ?x41 ?x63)))))
 (let (($x31 (= ?x81 input.dst.llvm-%n)))
 (let (($x46 (= $x31 true)))
 (let (($x53 (= $x46 true)))
 (let (($x68 (and $x53 $x73)))
 (let (($x35 (and $x68 $x139)))
 (let (($x113 (and $x35 $x85)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x11 $x113)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x20 $x164)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x29 $x160)))
 (let (($x175 (=> $x131 $x132)))
 (not $x175)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (forall ((input.ind-%var199X (_ BitVec 32)) )(let ((?x56 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x110 (concat ?x56 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32)))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var199X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x5 (concat ?x108 ?x110)))))))))
 ))
 (let (($x141 (forall ((input.ind-%var198X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var198X) (bvult input.ind-%var198X (_ bv0 32)))))
 ))
 (let (($x154 (and $x141 $x138)))
 (let (($x109 (= true true)))
 (let (($x16 (and $x109 $x154)))
 (let (($x132 (= $x16 true)))
 (let (($x183 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var193X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x150 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var192X)))
 (= $x142 false)))
 ))
 (let (($x184 (and $x150 $x183)))
 (let (($x85 (= $x184 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let ((?x117 (bvand symbol.1 (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x117)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x50 $x103)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x52 $x94)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x57 $x107)))
 (let (($x111 (not $x87)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x14 $x100)))
 (let (($x96 (and (not $x97) $x111)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x105 $x32)))
 (let (($x104 (not $x44)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x17 $x38)))
 (let (($x98 (and (not $x86) $x104)))
 (let (($x126 (and (and (and (and (and (and $x98 $x96) $x6) $x106) $x27) $x99) $x114)))
 (let (($x123 (and $x126 $x124)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x116 (and $x34 $x123)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x30 (or (bvugt input.memlabel-mem--symbol.1_begin ?x10) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x30) (or $x102 $x75)))))))
 (let (($x130 (and $x127 $x116)))
 (let (($x125 (= $x130 true)))
 (let (($x51 (= $x125 true)))
 (let (($x139 (= $x51 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x61 (= $x84 true)))
 (let (($x19 (= $x61 true)))
 (let (($x73 (= $x19 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x7 (concat ?x88 (concat ?x41 ?x63)))))
 (let (($x31 (= ?x81 input.dst.llvm-%n)))
 (let (($x46 (= $x31 true)))
 (let (($x53 (= $x46 true)))
 (let (($x68 (and $x53 $x73)))
 (let (($x35 (and $x68 $x139)))
 (let (($x113 (and $x35 $x85)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x11 $x113)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x20 $x164)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x29 $x160)))
 (let (($x175 (=> $x131 $x132)))
 (not $x175)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (forall ((input.ind-%var211X (_ BitVec 32)) )(let ((?x74 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x72 (concat ?x74 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32)))))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x145 (concat ?x92 ?x72)))))))))
 ))
 (let (($x154 (forall ((input.ind-%var210X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var210X) (bvult input.ind-%var210X input.dst.llvm-%n))))
 ))
 (let (($x168 (and $x154 $x161)))
 (let (($x108 (= true true)))
 (let (($x181 (and $x108 $x168)))
 (let (($x187 (= $x181 true)))
 (let (($x141 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var205X)))
 (=> $x180 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var205X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var204X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var204X)))
 (= $x180 false)))
 ))
 (let (($x166 (and $x85 $x141)))
 (let (($x170 (= $x166 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x125 (concat ?x123 (concat ?x114 ?x136)))))
 (let (($x139 (= ?x51 input.dst.llvm-%n)))
 (let (($x35 (= $x139 true)))
 (let (($x66 (= $x35 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x111)))
 (let ((?x107 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x107)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x32 $x98)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x105 $x14)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x49 $x127)))
 (let (($x65 (not $x23)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x69 $x91)))
 (let (($x17 (and (not $x71) $x65)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x30 $x24)))
 (let (($x102 (not $x40)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x9 $x60)))
 (let (($x75 (and (not $x55) $x102)))
 (let (($x52 (and (and (and (and (and (and $x75 $x17) $x38) $x79) $x100) $x57) $x87)))
 (let (($x50 (and $x52 $x96)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x42 (and $x10 $x50)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x31 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x61 $x19)))))))
 (let (($x48 (and $x54 $x42)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let (($x78 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (= $x78 true)))
 (let (($x70 (= $x18 true)))
 (let (($x82 (= $x70 true)))
 (let (($x112 (and $x82 $x27)))
 (let (($x142 (and $x112 $x66)))
 (let (($x173 (and $x142 $x170)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x8 $x173)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x152 $x149)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x93 (and $x47 $x5)))
 (let (($x174 (=> $x93 $x187)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (forall ((input.ind-%var211X (_ BitVec 32)) )(let ((?x74 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x72 (concat ?x74 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32)))))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var211X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x145 (concat ?x92 ?x72)))))))))
 ))
 (let (($x154 (forall ((input.ind-%var210X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var210X) (bvult input.ind-%var210X input.dst.llvm-%n))))
 ))
 (let (($x168 (and $x154 $x161)))
 (let (($x108 (= true true)))
 (let (($x181 (and $x108 $x168)))
 (let (($x187 (= $x181 true)))
 (let (($x141 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var205X)))
 (=> $x180 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var205X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var204X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var204X)))
 (= $x180 false)))
 ))
 (let (($x166 (and $x85 $x141)))
 (let (($x170 (= $x166 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x125 (concat ?x123 (concat ?x114 ?x136)))))
 (let (($x139 (= ?x51 input.dst.llvm-%n)))
 (let (($x35 (= $x139 true)))
 (let (($x66 (= $x35 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x111)))
 (let ((?x107 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x107)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x32 $x98)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x105 $x14)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x49 $x127)))
 (let (($x65 (not $x23)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x69 $x91)))
 (let (($x17 (and (not $x71) $x65)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x30 $x24)))
 (let (($x102 (not $x40)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x9 $x60)))
 (let (($x75 (and (not $x55) $x102)))
 (let (($x52 (and (and (and (and (and (and $x75 $x17) $x38) $x79) $x100) $x57) $x87)))
 (let (($x50 (and $x52 $x96)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x42 (and $x10 $x50)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x31 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x61 $x19)))))))
 (let (($x48 (and $x54 $x42)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let (($x78 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (= $x78 true)))
 (let (($x70 (= $x18 true)))
 (let (($x82 (= $x70 true)))
 (let (($x112 (and $x82 $x27)))
 (let (($x142 (and $x112 $x66)))
 (let (($x173 (and $x142 $x170)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x8 $x173)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x152 $x149)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x93 (and $x47 $x5)))
 (let (($x174 (=> $x93 $x187)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var210X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var210X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (= false true)))
 (let (($x135 (= $x92 true)))
 (let (($x154 (forall ((input.ind-%var225X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var225X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var225X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var224X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var224X)))
 (= $x128 false)))
 ))
 (let (($x175 (and $x170 $x154)))
 (let (($x62 (= $x175 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let ((?x130 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x130)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x50 $x103)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x96 $x94)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x97 $x89)))
 (let (($x122 (not $x57)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x14 $x100)))
 (let (($x87 (and (not $x106) $x122)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x45 $x105)))
 (let (($x44 (not $x32)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x6 $x86)))
 (let (($x98 (and (not $x79) $x44)))
 (let (($x116 (and (and (and (and (and (and $x98 $x87) $x52) $x111) $x27) $x33) $x125)))
 (let (($x51 (and $x116 $x124)))
 (let (($x38 (= symbol.1 dst_symbol_addr.1)))
 (let (($x139 (and $x38 $x51)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x102 (or (bvugt input.memlabel-mem--symbol.1_begin ?x30) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x71 $x34)))))))
 (let (($x35 (and $x39 $x139)))
 (let (($x66 (= $x35 true)))
 (let (($x142 (= $x66 true)))
 (let (($x177 (= $x142 true)))
 (let (($x73 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (= $x73 true)))
 (let (($x95 (= $x68 true)))
 (let (($x67 (= $x95 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x31 (concat ?x26 (concat ?x36 ?x70)))))
 (let (($x61 (= ?x46 input.dst.llvm-%n)))
 (let (($x84 (= $x61 true)))
 (let (($x19 (= $x84 true)))
 (let (($x54 (and $x19 $x67)))
 (let (($x180 (and $x54 $x177)))
 (let (($x133 (and $x180 $x62)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x59 $x133)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x13 $x129)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x29 $x145)))
 (let (($x74 (=> $x137 $x135)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (= false true)))
 (let (($x135 (= $x92 true)))
 (let (($x154 (forall ((input.ind-%var225X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var225X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var225X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var224X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var224X)))
 (= $x128 false)))
 ))
 (let (($x175 (and $x170 $x154)))
 (let (($x62 (= $x175 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let ((?x130 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x130)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x50 $x103)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x96 $x94)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x97 $x89)))
 (let (($x122 (not $x57)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x14 $x100)))
 (let (($x87 (and (not $x106) $x122)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x45 $x105)))
 (let (($x44 (not $x32)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x6 $x86)))
 (let (($x98 (and (not $x79) $x44)))
 (let (($x116 (and (and (and (and (and (and $x98 $x87) $x52) $x111) $x27) $x33) $x125)))
 (let (($x51 (and $x116 $x124)))
 (let (($x38 (= symbol.1 dst_symbol_addr.1)))
 (let (($x139 (and $x38 $x51)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x102 (or (bvugt input.memlabel-mem--symbol.1_begin ?x30) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x71 $x34)))))))
 (let (($x35 (and $x39 $x139)))
 (let (($x66 (= $x35 true)))
 (let (($x142 (= $x66 true)))
 (let (($x177 (= $x142 true)))
 (let (($x73 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (= $x73 true)))
 (let (($x95 (= $x68 true)))
 (let (($x67 (= $x95 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x31 (concat ?x26 (concat ?x36 ?x70)))))
 (let (($x61 (= ?x46 input.dst.llvm-%n)))
 (let (($x84 (= $x61 true)))
 (let (($x19 (= $x84 true)))
 (let (($x54 (and $x19 $x67)))
 (let (($x180 (and $x54 $x177)))
 (let (($x133 (and $x180 $x62)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x59 $x133)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x13 $x129)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x29 $x145)))
 (let (($x74 (=> $x137 $x135)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x149 (= $x134 true)))
 (let (($x78 (forall ((input.ind-%var239X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var239X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var239X) (_ bv0 32)))))
 ))
 (let (($x62 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var238X)))
 (= $x25 false)))
 ))
 (let (($x140 (and $x62 $x78)))
 (let (($x108 (= $x140 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x66 (concat ?x51 (concat ?x125 ?x126)))))
 (let (($x177 (= ?x142 input.dst.llvm-%n)))
 (let (($x180 (= $x177 true)))
 (let (($x131 (= $x180 true)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x14 (bvand symbol.1 (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x14)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x79 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x79)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x6 $x104)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x38 $x45)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x91 $x34)))
 (let (($x127 (not $x49)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x75 $x69)))
 (let (($x65 (and (not $x71) $x127)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x55 $x30)))
 (let (($x22 (not $x24)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x9 $x60)))
 (let (($x102 (and (not $x17) $x22)))
 (let (($x123 (and (and (and (and (and (and $x102 $x65) $x39) $x10) $x105) $x98) $x100)))
 (let (($x52 (and $x123 $x107)))
 (let (($x54 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x54 $x52)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x70 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x70) (or $x53 $x61)))))))
 (let (($x111 (and $x67 $x117)))
 (let (($x114 (= $x111 true)))
 (let (($x96 (= $x114 true)))
 (let (($x50 (= $x96 true)))
 (let (($x136 (and $x50 $x27)))
 (let (($x128 (and $x136 $x131)))
 (let (($x5 (and $x128 $x108)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x20 $x5)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x119 $x184)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x15 $x85)))
 (let (($x12 (=> $x141 $x149)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x149 (= $x134 true)))
 (let (($x78 (forall ((input.ind-%var239X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var239X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var239X) (_ bv0 32)))))
 ))
 (let (($x62 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var238X)))
 (= $x25 false)))
 ))
 (let (($x140 (and $x62 $x78)))
 (let (($x108 (= $x140 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x66 (concat ?x51 (concat ?x125 ?x126)))))
 (let (($x177 (= ?x142 input.dst.llvm-%n)))
 (let (($x180 (= $x177 true)))
 (let (($x131 (= $x180 true)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x103 (= $x48 true)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x14 (bvand symbol.1 (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x14)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x79 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x79)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x6 $x104)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x38 $x45)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x91 $x34)))
 (let (($x127 (not $x49)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x75 $x69)))
 (let (($x65 (and (not $x71) $x127)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x55 $x30)))
 (let (($x22 (not $x24)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x9 $x60)))
 (let (($x102 (and (not $x17) $x22)))
 (let (($x123 (and (and (and (and (and (and $x102 $x65) $x39) $x10) $x105) $x98) $x100)))
 (let (($x52 (and $x123 $x107)))
 (let (($x54 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x54 $x52)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x70 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x70) (or $x53 $x61)))))))
 (let (($x111 (and $x67 $x117)))
 (let (($x114 (= $x111 true)))
 (let (($x96 (= $x114 true)))
 (let (($x50 (= $x96 true)))
 (let (($x136 (and $x50 $x27)))
 (let (($x128 (and $x136 $x131)))
 (let (($x5 (and $x128 $x108)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x20 $x5)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x119 $x184)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x15 $x85)))
 (let (($x12 (=> $x141 $x149)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1a75018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1a74fffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x129)))
 (let (($x173 (= ?x74 input.dst.llvm-%n)))
 (let (($x72 (= $x173 true)))
 (let (($x33 (forall ((input.ind-%var253X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var253X)))
 (=> $x90 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var253X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var252X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var252X)))
 (= $x90 false)))
 ))
 (let (($x138 (and $x108 $x33)))
 (let (($x92 (= $x138 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x177 (concat ?x116 (concat ?x51 ?x120)))))
 (let (($x131 (= ?x180 input.dst.llvm-%n)))
 (let (($x128 (= $x131 true)))
 (let (($x93 (= $x128 true)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let (($x136 (= $x27 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x98)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x32)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x79 (and $x57 $x86)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x10 $x79)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x91 $x34)))
 (let (($x127 (not $x49)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x69 $x71)))
 (let (($x97 (and (not $x23) $x127)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x55 $x30)))
 (let (($x22 (not $x24)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x60 $x17)))
 (let (($x75 (and (not $x40) $x22)))
 (let (($x52 (and (and (and (and (and (and $x75 $x97) $x39) $x88) $x104) $x122) $x44)))
 (let (($x117 (and $x52 $x87)))
 (let (($x9 (= symbol.1 dst_symbol_addr.1)))
 (let (($x111 (and $x9 $x117)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x36) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x84 $x19)))))))
 (let (($x114 (and $x54 $x111)))
 (let (($x96 (= $x114 true)))
 (let (($x50 (= $x96 true)))
 (let (($x42 (= $x50 true)))
 (let (($x112 (and $x42 $x136)))
 (let (($x25 (and $x112 $x93)))
 (let (($x145 (and $x25 $x92)))
 (let (($x152 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x152 $x145)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x132 $x166)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x29 $x170)))
 (let (($x172 (=> $x154 $x72)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x129)))
 (let (($x173 (= ?x74 input.dst.llvm-%n)))
 (let (($x72 (= $x173 true)))
 (let (($x33 (forall ((input.ind-%var253X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var253X)))
 (=> $x90 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var253X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var252X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var252X)))
 (= $x90 false)))
 ))
 (let (($x138 (and $x108 $x33)))
 (let (($x92 (= $x138 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x177 (concat ?x116 (concat ?x51 ?x120)))))
 (let (($x131 (= ?x180 input.dst.llvm-%n)))
 (let (($x128 (= $x131 true)))
 (let (($x93 (= $x128 true)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x27 (= $x94 true)))
 (let (($x136 (= $x27 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x98)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x32)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x79 (and $x57 $x86)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x10 $x79)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x91 $x34)))
 (let (($x127 (not $x49)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x69 $x71)))
 (let (($x97 (and (not $x23) $x127)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x55 $x30)))
 (let (($x22 (not $x24)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x60 $x17)))
 (let (($x75 (and (not $x40) $x22)))
 (let (($x52 (and (and (and (and (and (and $x75 $x97) $x39) $x88) $x104) $x122) $x44)))
 (let (($x117 (and $x52 $x87)))
 (let (($x9 (= symbol.1 dst_symbol_addr.1)))
 (let (($x111 (and $x9 $x117)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x36) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x84 $x19)))))))
 (let (($x114 (and $x54 $x111)))
 (let (($x96 (= $x114 true)))
 (let (($x50 (= $x96 true)))
 (let (($x42 (= $x50 true)))
 (let (($x112 (and $x42 $x136)))
 (let (($x25 (and $x112 $x93)))
 (let (($x145 (and $x25 $x92)))
 (let (($x152 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x152 $x145)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x132 $x166)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x29 $x170)))
 (let (($x172 (=> $x154 $x72)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x78 (= $x62 true)))
 (let (($x149 (= $x78 true)))
 (let (($x172 (forall ((input.ind-%var259X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var259X)))
 (=> $x16 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var259X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var258X)))
 (= $x16 false)))
 ))
 (let (($x171 (and $x92 $x172)))
 (let (($x37 (= $x171 true)))
 (let (($x128 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x93 (= $x128 true)))
 (let (($x25 (= $x93 true)))
 (let (($x137 (= $x25 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x94)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x114 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x114)))
 (let (($x117 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x117 $x96)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x87 $x50)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (and $x45 $x105)))
 (let (($x107 (not $x122)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x79 $x104)))
 (let (($x44 (and (not $x106) $x107)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x123 $x10)))
 (let (($x38 (not $x57)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x100 $x89)))
 (let (($x86 (and (not $x88) $x38)))
 (let (($x116 (and (and (and (and (and (and $x86 $x44) $x52) $x98) $x42) $x103) $x27)))
 (let (($x124 (and $x116 $x112)))
 (let (($x39 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x39 $x124)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x22 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x22) (or $x23 $x65)))))))
 (let (($x120 (and $x14 $x51)))
 (let (($x130 (= $x120 true)))
 (let (($x139 (= $x130 true)))
 (let (($x180 (= $x139 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x19 (concat ?x53 (concat ?x70 ?x82)))))
 (let (($x67 (= ?x73 input.dst.llvm-%n)))
 (let (($x18 (= $x67 true)))
 (let (($x54 (= $x18 true)))
 (let (($x131 (and $x54 $x180)))
 (let (($x90 (and $x131 $x137)))
 (let (($x66 (and $x90 $x37)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x13 $x66)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x47 $x21)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x15 $x134)))
 (let (($x184 (=> $x85 $x149)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x78 (= $x62 true)))
 (let (($x149 (= $x78 true)))
 (let (($x172 (forall ((input.ind-%var259X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var259X)))
 (=> $x16 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var259X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var258X)))
 (= $x16 false)))
 ))
 (let (($x171 (and $x92 $x172)))
 (let (($x37 (= $x171 true)))
 (let (($x128 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x93 (= $x128 true)))
 (let (($x25 (= $x93 true)))
 (let (($x137 (= $x25 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x94)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x114 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x114)))
 (let (($x117 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x117 $x96)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x87 $x50)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (and $x45 $x105)))
 (let (($x107 (not $x122)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x79 $x104)))
 (let (($x44 (and (not $x106) $x107)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x123 $x10)))
 (let (($x38 (not $x57)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x100 $x89)))
 (let (($x86 (and (not $x88) $x38)))
 (let (($x116 (and (and (and (and (and (and $x86 $x44) $x52) $x98) $x42) $x103) $x27)))
 (let (($x124 (and $x116 $x112)))
 (let (($x39 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x39 $x124)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x22 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x22) (or $x23 $x65)))))))
 (let (($x120 (and $x14 $x51)))
 (let (($x130 (= $x120 true)))
 (let (($x139 (= $x130 true)))
 (let (($x180 (= $x139 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x19 (concat ?x53 (concat ?x70 ?x82)))))
 (let (($x67 (= ?x73 input.dst.llvm-%n)))
 (let (($x18 (= $x67 true)))
 (let (($x54 (= $x18 true)))
 (let (($x131 (and $x54 $x180)))
 (let (($x90 (and $x131 $x137)))
 (let (($x66 (and $x90 $x37)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x13 $x66)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x47 $x21)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x15 $x134)))
 (let (($x184 (=> $x85 $x149)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x129 (= $x33 true)))
 (let (($x166 (= $x129 true)))
 (let (($x12 (forall ((input.ind-%var273X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var273X)))
 (=> $x173 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var273X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var272X)))
 (= $x173 false)))
 ))
 (let (($x31 (and $x37 $x12)))
 (let (($x26 (= $x31 true)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x137 (= $x25 true)))
 (let (($x90 (= $x137 true)))
 (let (($x141 (= $x90 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x126)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x48)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x111 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x114 (= input.memlabel-mem--symbol.1_end ?x111)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x96 (and $x87 $x114)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x177 $x96)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x105 $x122)))
 (let (($x44 (not $x107)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x106 $x32)))
 (let (($x52 (and (not $x45) $x44)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x10 $x57)))
 (let (($x86 (not $x38)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x88 $x6)))
 (let (($x104 (and (not $x123) $x86)))
 (let (($x51 (and (and (and (and (and (and $x104 $x52) $x142) $x98) $x50) $x125) $x103)))
 (let (($x120 (and $x51 $x94)))
 (let (($x89 (= symbol.1 dst_symbol_addr.1)))
 (let (($x130 (and $x89 $x120)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x34 $x49)))))))
 (let (($x139 (and $x100 $x130)))
 (let (($x180 (= $x139 true)))
 (let (($x131 (= $x180 true)))
 (let (($x128 (= $x131 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x73 (concat ?x70 (concat ?x41 ?x61)))))
 (let (($x18 (= ?x68 input.dst.llvm-%n)))
 (let (($x54 (= $x18 true)))
 (let (($x60 (= $x54 true)))
 (let (($x93 (and $x60 $x128)))
 (let (($x16 (and $x93 $x141)))
 (let (($x8 (and $x16 $x26)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x119 $x8)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x59 $x135)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x29 $x170)))
 (let (($x74 (=> $x140 $x166)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x129 (= $x33 true)))
 (let (($x166 (= $x129 true)))
 (let (($x12 (forall ((input.ind-%var273X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var273X)))
 (=> $x173 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var273X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var272X)))
 (= $x173 false)))
 ))
 (let (($x31 (and $x37 $x12)))
 (let (($x26 (= $x31 true)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x137 (= $x25 true)))
 (let (($x90 (= $x137 true)))
 (let (($x141 (= $x90 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x126)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x48)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x111 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x114 (= input.memlabel-mem--symbol.1_end ?x111)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x96 (and $x87 $x114)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x177 $x96)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x105 $x122)))
 (let (($x44 (not $x107)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x106 $x32)))
 (let (($x52 (and (not $x45) $x44)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x10 $x57)))
 (let (($x86 (not $x38)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x88 $x6)))
 (let (($x104 (and (not $x123) $x86)))
 (let (($x51 (and (and (and (and (and (and $x104 $x52) $x142) $x98) $x50) $x125) $x103)))
 (let (($x120 (and $x51 $x94)))
 (let (($x89 (= symbol.1 dst_symbol_addr.1)))
 (let (($x130 (and $x89 $x120)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x34 $x49)))))))
 (let (($x139 (and $x100 $x130)))
 (let (($x180 (= $x139 true)))
 (let (($x131 (= $x180 true)))
 (let (($x128 (= $x131 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x73 (concat ?x70 (concat ?x41 ?x61)))))
 (let (($x18 (= ?x68 input.dst.llvm-%n)))
 (let (($x54 (= $x18 true)))
 (let (($x60 (= $x54 true)))
 (let (($x93 (and $x60 $x128)))
 (let (($x16 (and $x93 $x141)))
 (let (($x8 (and $x16 $x26)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x119 $x8)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x59 $x135)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x29 $x170)))
 (let (($x74 (=> $x140 $x166)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x172 (= $x92 true)))
 (let (($x62 (= $x172 true)))
 (let (($x5 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var287X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var287X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var286X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var286X)))
 (= $x149 false)))
 ))
 (let (($x17 (and $x26 $x5)))
 (let (($x80 (= $x17 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x137 (concat ?x128 (concat ?x130 ?x94)))))
 (let (($x141 (= ?x90 input.dst.llvm-%n)))
 (let (($x16 (= $x141 true)))
 (let (($x154 (= $x16 true)))
 (let (($x42 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (= $x42 true)))
 (let (($x124 (= $x125 true)))
 (let (($x48 (= $x124 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x44)))
 (let ((?x122 (bvand symbol.1 (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x122)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x86 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x86)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x57 $x104)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x10 $x106)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x9 $x100)))
 (let (($x40 (not $x97)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x95 (and $x127 $x14)))
 (let (($x88 (and (not $x95) $x40)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x23 $x71)))
 (let (($x34 (not $x65)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x75 $x24)))
 (let (($x49 (and (not $x69) $x34)))
 (let (($x177 (and (and (and (and (and (and $x49 $x88) $x6) $x79) $x32) $x105) $x107)))
 (let (($x87 (and $x177 $x52)))
 (let (($x22 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x22 $x87)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x61 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x61) (or $x67 $x18)))))))
 (let (($x111 (and $x102 $x117)))
 (let (($x114 (= $x111 true)))
 (let (($x96 (= $x114 true)))
 (let (($x50 (= $x96 true)))
 (let (($x103 (and $x50 $x48)))
 (let (($x173 (and $x103 $x154)))
 (let (($x72 (and $x173 $x80)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x132 $x72)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x20 $x175)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x138 (and $x15 $x134)))
 (let (($x21 (=> $x138 $x62)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x172 (= $x92 true)))
 (let (($x62 (= $x172 true)))
 (let (($x5 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var287X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var287X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var286X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var286X)))
 (= $x149 false)))
 ))
 (let (($x17 (and $x26 $x5)))
 (let (($x80 (= $x17 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x137 (concat ?x128 (concat ?x130 ?x94)))))
 (let (($x141 (= ?x90 input.dst.llvm-%n)))
 (let (($x16 (= $x141 true)))
 (let (($x154 (= $x16 true)))
 (let (($x42 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (= $x42 true)))
 (let (($x124 (= $x125 true)))
 (let (($x48 (= $x124 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x44)))
 (let ((?x122 (bvand symbol.1 (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x122)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x86 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x86)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x57 $x104)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x10 $x106)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x9 $x100)))
 (let (($x40 (not $x97)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x95 (and $x127 $x14)))
 (let (($x88 (and (not $x95) $x40)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x23 $x71)))
 (let (($x34 (not $x65)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x75 $x24)))
 (let (($x49 (and (not $x69) $x34)))
 (let (($x177 (and (and (and (and (and (and $x49 $x88) $x6) $x79) $x32) $x105) $x107)))
 (let (($x87 (and $x177 $x52)))
 (let (($x22 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x22 $x87)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x61 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x61) (or $x67 $x18)))))))
 (let (($x111 (and $x102 $x117)))
 (let (($x114 (= $x111 true)))
 (let (($x96 (= $x114 true)))
 (let (($x50 (= $x96 true)))
 (let (($x103 (and $x50 $x48)))
 (let (($x173 (and $x103 $x154)))
 (let (($x72 (and $x173 $x80)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x132 $x72)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x20 $x175)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x138 (and $x15 $x134)))
 (let (($x21 (=> $x138 $x62)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (forall ((input.ind-%var299X (_ BitVec 32)) )(let ((?x165 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x64 (concat ?x165 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32)))))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x99 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var299X)))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var299X)))
 (=> $x129 (= ?x99 (concat ?x101 (concat ?x151 ?x64)))))))))))
 ))
 (let (($x174 (forall ((input.ind-%var298X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var298X)))
 (= $x129 (and (bvule (_ bv0 32) input.ind-%var298X) (bvult input.ind-%var298X (_ bv0 32))))))
 ))
 (let (($x143 (and $x174 $x118)))
 (let (($x12 (= true true)))
 (let (($x155 (and $x12 $x143)))
 (let (($x186 (= $x155 true)))
 (let (($x13 (forall ((input.ind-%var293X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var293X)))
 (=> $x166 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var293X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var292X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var292X)))
 (= $x166 false)))
 ))
 (let (($x126 (and $x80 $x13)))
 (let (($x184 (= $x126 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x180)))
 (let ((?x25 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x25)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x42 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x42)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x50 $x125)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x96 $x124)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x107 $x177)))
 (let (($x52 (not $x44)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (and $x105 $x136)))
 (let (($x117 (and (not $x122) $x52)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x104 $x106)))
 (let (($x98 (not $x32)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x57 $x38)))
 (let (($x35 (and (not $x86) $x98)))
 (let (($x93 (and (and (and (and (and (and $x35 $x117) $x111) $x114) $x48) $x51) $x137)))
 (let (($x90 (and $x93 $x131)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x141 (and $x10 $x90)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x89 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x89) (or $x40 $x88)))))))
 (let (($x16 (and $x116 $x141)))
 (let (($x154 (= $x16 true)))
 (let (($x173 (= $x154 true)))
 (let (($x85 (= $x173 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (= $x84 true)))
 (let (($x22 (= $x63 true)))
 (let (($x75 (= $x22 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x18 (concat ?x81 (concat ?x19 ?x53)))))
 (let (($x55 (= ?x54 input.dst.llvm-%n)))
 (let (($x30 (= $x55 true)))
 (let (($x102 (= $x30 true)))
 (let (($x24 (and $x102 $x75)))
 (let (($x149 (and $x24 $x85)))
 (let (($x108 (and $x149 $x184)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x47 $x108)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x83 $x170)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x29 $x171)))
 (let (($x163 (=> $x37 $x186)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (forall ((input.ind-%var299X (_ BitVec 32)) )(let ((?x165 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x64 (concat ?x165 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32)))))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var299X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x99 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var299X)))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var299X)))
 (=> $x129 (= ?x99 (concat ?x101 (concat ?x151 ?x64)))))))))))
 ))
 (let (($x174 (forall ((input.ind-%var298X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var298X)))
 (= $x129 (and (bvule (_ bv0 32) input.ind-%var298X) (bvult input.ind-%var298X (_ bv0 32))))))
 ))
 (let (($x143 (and $x174 $x118)))
 (let (($x12 (= true true)))
 (let (($x155 (and $x12 $x143)))
 (let (($x186 (= $x155 true)))
 (let (($x13 (forall ((input.ind-%var293X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var293X)))
 (=> $x166 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var293X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var292X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var292X)))
 (= $x166 false)))
 ))
 (let (($x126 (and $x80 $x13)))
 (let (($x184 (= $x126 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x180)))
 (let ((?x25 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x25)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x42 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x42)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x50 $x125)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x96 $x124)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x107 $x177)))
 (let (($x52 (not $x44)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (and $x105 $x136)))
 (let (($x117 (and (not $x122) $x52)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x104 $x106)))
 (let (($x98 (not $x32)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x57 $x38)))
 (let (($x35 (and (not $x86) $x98)))
 (let (($x93 (and (and (and (and (and (and $x35 $x117) $x111) $x114) $x48) $x51) $x137)))
 (let (($x90 (and $x93 $x131)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x141 (and $x10 $x90)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x89 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x89) (or $x40 $x88)))))))
 (let (($x16 (and $x116 $x141)))
 (let (($x154 (= $x16 true)))
 (let (($x173 (= $x154 true)))
 (let (($x85 (= $x173 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (= $x84 true)))
 (let (($x22 (= $x63 true)))
 (let (($x75 (= $x22 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x18 (concat ?x81 (concat ?x19 ?x53)))))
 (let (($x55 (= ?x54 input.dst.llvm-%n)))
 (let (($x30 (= $x55 true)))
 (let (($x102 (= $x30 true)))
 (let (($x24 (and $x102 $x75)))
 (let (($x149 (and $x24 $x85)))
 (let (($x108 (and $x149 $x184)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x47 $x108)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x83 $x170)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x29 $x171)))
 (let (($x163 (=> $x37 $x186)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var299X!1 () (_ BitVec 32)
    #x19252a42)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x2000018f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x20000000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8494a90a) #x40
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var299X!1 () (_ BitVec 32)
    #x00000080)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.ind-%var298X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe02820ab)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xe01082db)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xe010814c)
  (define-fun symbol.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (forall ((input.ind-%var327X (_ BitVec 32)) )(let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x56 (concat ?x58 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32)))))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x46 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var327X)))
 (let (($x183 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var327X)))
 (=> $x183 (= ?x46 (concat ?x172 (concat ?x148 ?x56)))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var326X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var326X)))
 (= $x183 (and (bvule (_ bv0 32) input.ind-%var326X) (bvult input.ind-%var326X input.dst.llvm-%n)))))
 ))
 (let (($x62 (and $x155 $x175)))
 (let (($x101 (= true true)))
 (let (($x144 (and $x101 $x62)))
 (let (($x7 (= $x144 true)))
 (let (($x187 (forall ((input.ind-%var321X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var321X)))
 (=> $x21 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var321X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var320X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var320X)))
 (= $x21 false)))
 ))
 (let (($x174 (and $x184 $x187)))
 (let (($x99 (= $x174 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x154 (concat ?x90 (concat ?x137 ?x139)))))
 (let (($x85 (= ?x173 input.dst.llvm-%n)))
 (let (($x149 (= $x85 true)))
 (let (($x140 (= $x149 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x52)))
 (let ((?x177 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x177)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x98 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x35 (= input.memlabel-mem--symbol.1_end ?x98)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (and $x106 $x35)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x104 $x105)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x123 $x116)))
 (let (($x23 (not $x91)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x27 $x6)))
 (let (($x57 (and (not $x142) $x23)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x89 $x9)))
 (let (($x40 (not $x100)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x14 $x49)))
 (let (($x88 (and (not $x95) $x40)))
 (let (($x96 (and (and (and (and (and (and $x88 $x57) $x38) $x45) $x136) $x107) $x44)))
 (let (($x50 (and $x96 $x117)))
 (let (($x127 (= symbol.1 dst_symbol_addr.1)))
 (let (($x112 (and $x127 $x50)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x63 $x22)))))))
 (let (($x42 (and $x34 $x112)))
 (let (($x125 (= $x42 true)))
 (let (($x124 (= $x125 true)))
 (let (($x48 (= $x124 true)))
 (let (($x132 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x39 (= $x132 true)))
 (let (($x67 (= $x39 true)))
 (let (($x68 (= $x67 true)))
 (let (($x94 (and $x68 $x48)))
 (let (($x166 (and $x94 $x140)))
 (let (($x113 (and $x166 $x99)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and $x59 $x113)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x152 $x178)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x15 $x159)))
 (let (($x76 (=> $x156 $x7)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (forall ((input.ind-%var327X (_ BitVec 32)) )(let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x56 (concat ?x58 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32)))))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var327X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x46 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var327X)))
 (let (($x183 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var327X)))
 (=> $x183 (= ?x46 (concat ?x172 (concat ?x148 ?x56)))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var326X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var326X)))
 (= $x183 (and (bvule (_ bv0 32) input.ind-%var326X) (bvult input.ind-%var326X input.dst.llvm-%n)))))
 ))
 (let (($x62 (and $x155 $x175)))
 (let (($x101 (= true true)))
 (let (($x144 (and $x101 $x62)))
 (let (($x7 (= $x144 true)))
 (let (($x187 (forall ((input.ind-%var321X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var321X)))
 (=> $x21 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var321X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var320X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var320X)))
 (= $x21 false)))
 ))
 (let (($x174 (and $x184 $x187)))
 (let (($x99 (= $x174 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x154 (concat ?x90 (concat ?x137 ?x139)))))
 (let (($x85 (= ?x173 input.dst.llvm-%n)))
 (let (($x149 (= $x85 true)))
 (let (($x140 (= $x149 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x52)))
 (let ((?x177 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x177)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x98 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x35 (= input.memlabel-mem--symbol.1_end ?x98)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (and $x106 $x35)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x104 $x105)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x123 $x116)))
 (let (($x23 (not $x91)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x27 $x6)))
 (let (($x57 (and (not $x142) $x23)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x89 $x9)))
 (let (($x40 (not $x100)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x14 $x49)))
 (let (($x88 (and (not $x95) $x40)))
 (let (($x96 (and (and (and (and (and (and $x88 $x57) $x38) $x45) $x136) $x107) $x44)))
 (let (($x50 (and $x96 $x117)))
 (let (($x127 (= symbol.1 dst_symbol_addr.1)))
 (let (($x112 (and $x127 $x50)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x63 $x22)))))))
 (let (($x42 (and $x34 $x112)))
 (let (($x125 (= $x42 true)))
 (let (($x124 (= $x125 true)))
 (let (($x48 (= $x124 true)))
 (let (($x132 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x39 (= $x132 true)))
 (let (($x67 (= $x39 true)))
 (let (($x68 (= $x67 true)))
 (let (($x94 (and $x68 $x48)))
 (let (($x166 (and $x94 $x140)))
 (let (($x113 (and $x166 $x99)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and $x59 $x113)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x152 $x178)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x15 $x159)))
 (let (($x76 (=> $x156 $x7)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var327X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var327X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.ind-%var326X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffe68) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= false true)))
 (let (($x146 (= $x172 true)))
 (let (($x143 (forall ((input.ind-%var349X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var349X)))
 (=> $x161 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var349X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var348X)))
 (= $x161 false)))
 ))
 (let (($x155 (and $x99 $x143)))
 (let (($x46 (= $x155 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x180)))
 (let ((?x16 (bvand symbol.1 (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x16)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x42 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x42)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x50 $x125)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x117 $x124)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x122 $x87)))
 (let (($x130 (not $x107)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (and $x105 $x136)))
 (let (($x44 (and (not $x114) $x130)))
 (let (($x104 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x120 $x104)))
 (let (($x32 (not $x106)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x111 $x86)))
 (let (($x35 (and (not $x45) $x32)))
 (let (($x141 (and (and (and (and (and (and $x35 $x44) $x96) $x52) $x48) $x103) $x154)))
 (let (($x173 (and $x141 $x131)))
 (let (($x38 (= symbol.1 dst_symbol_addr.1)))
 (let (($x85 (and $x38 $x173)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x40 (or (bvugt input.memlabel-mem--symbol.1_begin ?x89) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x40) (or $x142 $x10)))))))
 (let (($x149 (and $x128 $x85)))
 (let (($x140 (= $x149 true)))
 (let (($x166 (= $x140 true)))
 (let (($x138 (= $x166 true)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x24 (= $x75 true)))
 (let (($x71 (= $x24 true)))
 (let (($x65 (= $x71 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x55 (concat ?x82 (concat ?x70 ?x67)))))
 (let (($x63 (= ?x30 input.dst.llvm-%n)))
 (let (($x84 (= $x63 true)))
 (let (($x22 (= $x84 true)))
 (let (($x34 (and $x22 $x65)))
 (let (($x21 (and $x34 $x138)))
 (let (($x74 (and $x21 $x46)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x20 $x74)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x119 $x169)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x29 $x150)))
 (let (($x148 (=> $x5 $x146)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= false true)))
 (let (($x146 (= $x172 true)))
 (let (($x143 (forall ((input.ind-%var349X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var349X)))
 (=> $x161 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var349X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var348X)))
 (= $x161 false)))
 ))
 (let (($x155 (and $x99 $x143)))
 (let (($x46 (= $x155 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x180)))
 (let ((?x16 (bvand symbol.1 (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x16)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x42 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x42)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x50 $x125)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x117 $x124)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x122 $x87)))
 (let (($x130 (not $x107)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (and $x105 $x136)))
 (let (($x44 (and (not $x114) $x130)))
 (let (($x104 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x120 $x104)))
 (let (($x32 (not $x106)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x111 $x86)))
 (let (($x35 (and (not $x45) $x32)))
 (let (($x141 (and (and (and (and (and (and $x35 $x44) $x96) $x52) $x48) $x103) $x154)))
 (let (($x173 (and $x141 $x131)))
 (let (($x38 (= symbol.1 dst_symbol_addr.1)))
 (let (($x85 (and $x38 $x173)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x40 (or (bvugt input.memlabel-mem--symbol.1_begin ?x89) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x40) (or $x142 $x10)))))))
 (let (($x149 (and $x128 $x85)))
 (let (($x140 (= $x149 true)))
 (let (($x166 (= $x140 true)))
 (let (($x138 (= $x166 true)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x24 (= $x75 true)))
 (let (($x71 (= $x24 true)))
 (let (($x65 (= $x71 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x55 (concat ?x82 (concat ?x70 ?x67)))))
 (let (($x63 (= ?x30 input.dst.llvm-%n)))
 (let (($x84 (= $x63 true)))
 (let (($x22 (= $x84 true)))
 (let (($x34 (and $x22 $x65)))
 (let (($x21 (and $x34 $x138)))
 (let (($x74 (and $x21 $x46)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x20 $x74)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x119 $x169)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x29 $x150)))
 (let (($x148 (=> $x5 $x146)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (= $x125 false)))
 (let (($x80 (= $x17 true)))
 (let (($x69 (forall ((input.ind-%var363X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var363X)))
 (=> $x157 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var363X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var362X)))
 (= $x157 false)))
 ))
 (let (($x108 (and $x144 $x69)))
 (let (($x171 (= $x108 true)))
 (let ((?x183 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x183)))
 (let (($x179 (= ?x178 input.dst.llvm-%n)))
 (let (($x186 (= $x179 true)))
 (let (($x58 (= $x186 true)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x101 true)))
 (let (($x126 (= $x159 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x148 true)))
 (let (($x61 (= $x176 true)))
 (let (($x132 (= $x61 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x169 true)))
 (let (($x5 (= $x150 true)))
 (let (($x172 (= $x5 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x118 true)))
 (let (($x155 (= $x143 true)))
 (let (($x46 (= $x155 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x99 (= $x174 true)))
 (let (($x156 (= $x99 true)))
 (let ((?x48 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd symbol.1 ?x48)))
 (let (($x173 (and (bvule input.memlabel-mem--symbol.1_begin ?x139) (bvule (bvadd ?x139 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x166 (=> (bvule ?x139 (bvsub (bvadd ?x139 (_ bv4 32)) (_ bv1 32))) (or false (or false $x173)))))
 (let (($x103 (=> (and $x125 (bvule ?x139 (bvsub (bvadd ?x139 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x173)))))
 (let (($x93 (= $x103 true)))
 (let (($x138 (= $x93 true)))
 (let (($x21 (= $x138 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x114)))
 (let ((?x105 (bvand symbol.1 (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x105)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x45 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x45)))
 (let (($x111 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (and $x111 $x98)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x38 $x120)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x6 $x10)))
 (let (($x116 (not $x123)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x88 $x27)))
 (let (($x23 (and (not $x142) $x116)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x95 $x89)))
 (let (($x97 (not $x9)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x14 $x49)))
 (let (($x40 (and (not $x57) $x97)))
 (let (($x90 (and (and (and (and (and (and $x40 $x23) $x128) $x127) $x104) $x35) $x136)))
 (let (($x96 (and $x90 $x177)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x25 (and $x34 $x96)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x67 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x67) (or $x102 $x63)))))))
 (let (($x52 (and $x65 $x25)))
 (let (($x137 (= $x52 true)))
 (let (($x117 (= $x137 true)))
 (let (($x50 (= $x117 true)))
 (let (($x37 (and $x50 $x21)))
 (let (($x121 (and $x37 $x156)))
 (let (($x74 (and $x121 $x46)))
 (let (($x146 (and $x74 $x172)))
 (let (($x181 (and $x146 $x132)))
 (let (($x184 (and $x181 $x126)))
 (let (($x162 (and $x184 $x58)))
 (let (($x147 (and $x162 $x171)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x119 $x147)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x167 (and $x73 $x110)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x29 $x167)))
 (let (($x92 (=> $x64 $x80)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (= $x125 false)))
 (let (($x80 (= $x17 true)))
 (let (($x69 (forall ((input.ind-%var363X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var363X)))
 (=> $x157 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var363X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var362X)))
 (= $x157 false)))
 ))
 (let (($x108 (and $x144 $x69)))
 (let (($x171 (= $x108 true)))
 (let ((?x183 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x183)))
 (let (($x179 (= ?x178 input.dst.llvm-%n)))
 (let (($x186 (= $x179 true)))
 (let (($x58 (= $x186 true)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x101 true)))
 (let (($x126 (= $x159 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x148 true)))
 (let (($x61 (= $x176 true)))
 (let (($x132 (= $x61 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x169 true)))
 (let (($x5 (= $x150 true)))
 (let (($x172 (= $x5 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x118 true)))
 (let (($x155 (= $x143 true)))
 (let (($x46 (= $x155 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x99 (= $x174 true)))
 (let (($x156 (= $x99 true)))
 (let ((?x48 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd symbol.1 ?x48)))
 (let (($x173 (and (bvule input.memlabel-mem--symbol.1_begin ?x139) (bvule (bvadd ?x139 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x166 (=> (bvule ?x139 (bvsub (bvadd ?x139 (_ bv4 32)) (_ bv1 32))) (or false (or false $x173)))))
 (let (($x103 (=> (and $x125 (bvule ?x139 (bvsub (bvadd ?x139 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x173)))))
 (let (($x93 (= $x103 true)))
 (let (($x138 (= $x93 true)))
 (let (($x21 (= $x138 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x114)))
 (let ((?x105 (bvand symbol.1 (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x105)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x45 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x45)))
 (let (($x111 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (and $x111 $x98)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x38 $x120)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x6 $x10)))
 (let (($x116 (not $x123)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x88 $x27)))
 (let (($x23 (and (not $x142) $x116)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x95 $x89)))
 (let (($x97 (not $x9)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x14 $x49)))
 (let (($x40 (and (not $x57) $x97)))
 (let (($x90 (and (and (and (and (and (and $x40 $x23) $x128) $x127) $x104) $x35) $x136)))
 (let (($x96 (and $x90 $x177)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x25 (and $x34 $x96)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x67 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x67) (or $x102 $x63)))))))
 (let (($x52 (and $x65 $x25)))
 (let (($x137 (= $x52 true)))
 (let (($x117 (= $x137 true)))
 (let (($x50 (= $x117 true)))
 (let (($x37 (and $x50 $x21)))
 (let (($x121 (and $x37 $x156)))
 (let (($x74 (and $x121 $x46)))
 (let (($x146 (and $x74 $x172)))
 (let (($x181 (and $x146 $x132)))
 (let (($x184 (and $x181 $x126)))
 (let (($x162 (and $x184 $x58)))
 (let (($x147 (and $x162 $x171)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x119 $x147)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x167 (and $x73 $x110)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x29 $x167)))
 (let (($x92 (=> $x64 $x80)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x08f3c007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x08f3be78)
  (define-fun symbol.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x186)))
 (let (($x162 (= ?x58 input.dst.llvm-%n)))
 (let (($x135 (= $x162 true)))
 (let (($x101 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var377X)))
 (=> $x143 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var377X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var376X)))
 (= $x143 false)))
 ))
 (let (($x159 (and $x169 $x101)))
 (let (($x126 (= $x159 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x138 (concat ?x166 (concat ?x131 ?x141)))))
 (let (($x37 (= ?x21 input.dst.llvm-%n)))
 (let (($x161 (= $x37 true)))
 (let (($x174 (= $x161 true)))
 (let (($x125 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (= $x125 true)))
 (let (($x48 (= $x124 true)))
 (let (($x139 (= $x48 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x35)))
 (let ((?x106 (bvand symbol.1 (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x106)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x111 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x111)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x107 $x86)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x127 $x45)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x6 $x10)))
 (let (($x116 (not $x123)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x27 $x142)))
 (let (($x122 (and (not $x91) $x116)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x95 $x89)))
 (let (($x97 (not $x9)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x49 $x57)))
 (let (($x88 (and (not $x100) $x97)))
 (let (($x96 (and (and (and (and (and (and $x88 $x122) $x128) $x81) $x98) $x130) $x32)))
 (let (($x25 (and $x96 $x44)))
 (let (($x14 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x14 $x25)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x54 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x54) (or $x84 $x22)))))))
 (let (($x137 (and $x34 $x52)))
 (let (($x117 (= $x137 true)))
 (let (($x50 (= $x117 true)))
 (let (($x112 (= $x50 true)))
 (let (($x16 (and $x112 $x139)))
 (let (($x99 (and $x16 $x174)))
 (let (($x184 (and $x99 $x126)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and $x73 $x184)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x119 $x187)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x109 $x183)))
 (let (($x157 (=> $x178 $x135)))
 (not $x157)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x186)))
 (let (($x162 (= ?x58 input.dst.llvm-%n)))
 (let (($x135 (= $x162 true)))
 (let (($x101 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var377X)))
 (=> $x143 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var377X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var376X)))
 (= $x143 false)))
 ))
 (let (($x159 (and $x169 $x101)))
 (let (($x126 (= $x159 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x138 (concat ?x166 (concat ?x131 ?x141)))))
 (let (($x37 (= ?x21 input.dst.llvm-%n)))
 (let (($x161 (= $x37 true)))
 (let (($x174 (= $x161 true)))
 (let (($x125 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (= $x125 true)))
 (let (($x48 (= $x124 true)))
 (let (($x139 (= $x48 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x35)))
 (let ((?x106 (bvand symbol.1 (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x106)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x111 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x111)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x107 $x86)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x127 $x45)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x6 $x10)))
 (let (($x116 (not $x123)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x27 $x142)))
 (let (($x122 (and (not $x91) $x116)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x95 $x89)))
 (let (($x97 (not $x9)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x49 $x57)))
 (let (($x88 (and (not $x100) $x97)))
 (let (($x96 (and (and (and (and (and (and $x88 $x122) $x128) $x81) $x98) $x130) $x32)))
 (let (($x25 (and $x96 $x44)))
 (let (($x14 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x14 $x25)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x54 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x54) (or $x84 $x22)))))))
 (let (($x137 (and $x34 $x52)))
 (let (($x117 (= $x137 true)))
 (let (($x50 (= $x117 true)))
 (let (($x112 (= $x50 true)))
 (let (($x16 (and $x112 $x139)))
 (let (($x99 (and $x16 $x174)))
 (let (($x184 (and $x99 $x126)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and $x73 $x184)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x119 $x187)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x109 $x183)))
 (let (($x157 (=> $x178 $x135)))
 (not $x157)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x121)))
 (let (($x176 (= ?x46 input.spec-%var-n-1)))
 (let (($x5 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var383X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var383X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var383X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var382X)))
 (= $x132 false)))
 ))
 (let (($x62 (and $x126 $x157)))
 (let (($x60 (= $x62 true)))
 (let (($x161 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x99 (= $x174 true)))
 (let (($x118 (= $x99 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x139)))
 (let ((?x124 (bvand symbol.1 (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x124)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x137 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x117 (= input.memlabel-mem--symbol.1_end ?x137)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x25 $x117)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x44 $x50)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (and $x120 $x104)))
 (let (($x177 (not $x130)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (and $x45 $x98)))
 (let (($x32 (and (not $x114) $x177)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x90 $x127)))
 (let (($x38 (not $x107)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x136 $x87)))
 (let (($x86 (and (not $x81) $x38)))
 (let (($x166 (and (and (and (and (and (and $x86 $x32) $x96) $x35) $x112) $x125) $x48)))
 (let (($x180 (and $x166 $x16)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x131 (and $x128 $x180)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x97 (or (bvugt input.memlabel-mem--symbol.1_begin ?x95) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x97) (or $x91 $x23)))))))
 (let (($x141 (and $x105 $x131)))
 (let (($x173 (= $x141 true)))
 (let (($x103 (= $x173 true)))
 (let (($x21 (= $x103 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x22 (concat ?x102 (concat ?x67 ?x68)))))
 (let (($x65 (= ?x75 input.dst.llvm-%n)))
 (let (($x39 (= $x65 true)))
 (let (($x34 (= $x39 true)))
 (let (($x37 (and $x34 $x21)))
 (let (($x143 (and $x37 $x118)))
 (let (($x140 (and $x143 $x60)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and $x15 $x140)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x29 $x155)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x47 $x148)))
 (let (($x61 (=> $x172 $x5)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x121)))
 (let (($x176 (= ?x46 input.spec-%var-n-1)))
 (let (($x5 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var383X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var383X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var383X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var382X)))
 (= $x132 false)))
 ))
 (let (($x62 (and $x126 $x157)))
 (let (($x60 (= $x62 true)))
 (let (($x161 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x99 (= $x174 true)))
 (let (($x118 (= $x99 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x139)))
 (let ((?x124 (bvand symbol.1 (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x124)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x137 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x117 (= input.memlabel-mem--symbol.1_end ?x137)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x25 $x117)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x44 $x50)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (and $x120 $x104)))
 (let (($x177 (not $x130)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (and $x45 $x98)))
 (let (($x32 (and (not $x114) $x177)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x90 $x127)))
 (let (($x38 (not $x107)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x136 $x87)))
 (let (($x86 (and (not $x81) $x38)))
 (let (($x166 (and (and (and (and (and (and $x86 $x32) $x96) $x35) $x112) $x125) $x48)))
 (let (($x180 (and $x166 $x16)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x131 (and $x128 $x180)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x97 (or (bvugt input.memlabel-mem--symbol.1_begin ?x95) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x97) (or $x91 $x23)))))))
 (let (($x141 (and $x105 $x131)))
 (let (($x173 (= $x141 true)))
 (let (($x103 (= $x173 true)))
 (let (($x21 (= $x103 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x22 (concat ?x102 (concat ?x67 ?x68)))))
 (let (($x65 (= ?x75 input.dst.llvm-%n)))
 (let (($x39 (= $x65 true)))
 (let (($x34 (= $x39 true)))
 (let (($x37 (and $x34 $x21)))
 (let (($x143 (and $x37 $x118)))
 (let (($x140 (and $x143 $x60)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and $x15 $x140)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x29 $x155)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x47 $x148)))
 (let (($x61 (=> $x172 $x5)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x169 (= $x74 true)))
 (let (($x101 (= $x169 true)))
 (let (($x61 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var389X)))
 (=> $x162 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var388X)))
 (= $x162 false)))
 ))
 (let (($x7 (and $x60 $x61)))
 (let (($x55 (= $x7 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x174 (concat ?x21 (concat ?x131 ?x16)))))
 (let (($x118 (= ?x99 input.dst.llvm-%n)))
 (let (($x143 (= $x118 true)))
 (let (($x146 (= $x143 true)))
 (let (($x42 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (= $x42 true)))
 (let (($x149 (= $x125 true)))
 (let (($x124 (= $x149 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x177)))
 (let ((?x104 (bvand symbol.1 (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x104)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x127 $x86)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x90 $x45)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x116 $x105)))
 (let (($x14 (not $x71)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x6 $x10)))
 (let (($x136 (and (not $x123) $x14)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x97 $x88)))
 (let (($x91 (not $x27)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x89 $x40)))
 (let (($x23 (and (not $x9) $x91)))
 (let (($x44 (and (and (and (and (and (and $x23 $x136) $x87) $x111) $x98) $x120) $x130)))
 (let (($x25 (and $x44 $x32)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x95 $x25)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x68 (or (bvugt input.memlabel-mem--symbol.1_begin ?x102) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x68) (or $x24 $x65)))))))
 (let (($x137 (and $x100 $x52)))
 (let (($x117 (= $x137 true)))
 (let (($x50 (= $x117 true)))
 (let (($x112 (= $x50 true)))
 (let (($x48 (and $x112 $x124)))
 (let (($x132 (and $x48 $x146)))
 (let (($x82 (and $x132 $x55)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x83 $x82)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x152 $x181)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x183 (and $x109 $x179)))
 (let (($x186 (=> $x183 $x101)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x169 (= $x74 true)))
 (let (($x101 (= $x169 true)))
 (let (($x61 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var389X)))
 (=> $x162 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var388X)))
 (= $x162 false)))
 ))
 (let (($x7 (and $x60 $x61)))
 (let (($x55 (= $x7 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x174 (concat ?x21 (concat ?x131 ?x16)))))
 (let (($x118 (= ?x99 input.dst.llvm-%n)))
 (let (($x143 (= $x118 true)))
 (let (($x146 (= $x143 true)))
 (let (($x42 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (= $x42 true)))
 (let (($x149 (= $x125 true)))
 (let (($x124 (= $x149 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x177)))
 (let ((?x104 (bvand symbol.1 (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x104)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x127 $x86)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x90 $x45)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x116 $x105)))
 (let (($x14 (not $x71)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x6 $x10)))
 (let (($x136 (and (not $x123) $x14)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x97 $x88)))
 (let (($x91 (not $x27)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x89 $x40)))
 (let (($x23 (and (not $x9) $x91)))
 (let (($x44 (and (and (and (and (and (and $x23 $x136) $x87) $x111) $x98) $x120) $x130)))
 (let (($x25 (and $x44 $x32)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x95 $x25)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x68 (or (bvugt input.memlabel-mem--symbol.1_begin ?x102) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x68) (or $x24 $x65)))))))
 (let (($x137 (and $x100 $x52)))
 (let (($x117 (= $x137 true)))
 (let (($x50 (= $x117 true)))
 (let (($x112 (= $x50 true)))
 (let (($x48 (and $x112 $x124)))
 (let (($x132 (and $x48 $x146)))
 (let (($x82 (and $x132 $x55)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x83 $x82)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x152 $x181)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x183 (and $x109 $x179)))
 (let (($x186 (=> $x183 $x101)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (forall ((input.ind-%var401X (_ BitVec 32)) )(let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x113 (concat ?x78 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32)))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x72 (concat ?x26 ?x113)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var400X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var400X) (bvult input.ind-%var400X (_ bv0 32)))))
 ))
 (let (($x160 (and $x165 $x133)))
 (let (($x157 (= true true)))
 (let (($x13 (and $x157 $x160)))
 (let (($x129 (= $x13 true)))
 (let (($x73 (forall ((input.ind-%var395X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var395X)))
 (=> $x176 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var395X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var394X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var394X)))
 (= $x176 false)))
 ))
 (let (($x139 (and $x55 $x73)))
 (let (($x135 (= $x139 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x173)))
 (let ((?x161 (bvand symbol.1 (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x161)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x42 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x42)))
 (let (($x112 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x149 (and $x112 $x125)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x50 $x149)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (and $x130 $x44)))
 (let (($x32 (not $x177)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x120 $x138)))
 (let (($x52 (and (not $x104) $x32)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x86 $x45)))
 (let (($x35 (not $x98)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x127 $x107)))
 (let (($x106 (and (not $x38) $x35)))
 (let (($x37 (and (and (and (and (and (and $x106 $x52) $x137) $x117) $x124) $x166) $x174)))
 (let (($x99 (and $x37 $x103)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x118 (and $x90 $x99)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x128 (or (bvugt input.memlabel-mem--symbol.1_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x128) (or $x14 $x136)))))))
 (let (($x143 (and $x93 $x118)))
 (let (($x146 (= $x143 true)))
 (let (($x132 (= $x146 true)))
 (let (($x178 (= $x132 true)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x84 (= $x36 true)))
 (let (($x95 (= $x84 true)))
 (let (($x89 (= $x95 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x65 (concat ?x53 (concat ?x70 ?x19)))))
 (let (($x49 (= ?x39 input.dst.llvm-%n)))
 (let (($x57 (= $x49 true)))
 (let (($x100 (= $x57 true)))
 (let (($x40 (and $x100 $x89)))
 (let (($x162 (and $x40 $x178)))
 (let (($x156 (and $x162 $x135)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (and $x119 $x156)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x11 $x148)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x47 $x159)))
 (let (($x151 (=> $x126 $x129)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (forall ((input.ind-%var401X (_ BitVec 32)) )(let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x113 (concat ?x78 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32)))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var401X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x72 (concat ?x26 ?x113)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var400X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var400X) (bvult input.ind-%var400X (_ bv0 32)))))
 ))
 (let (($x160 (and $x165 $x133)))
 (let (($x157 (= true true)))
 (let (($x13 (and $x157 $x160)))
 (let (($x129 (= $x13 true)))
 (let (($x73 (forall ((input.ind-%var395X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var395X)))
 (=> $x176 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var395X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var394X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var394X)))
 (= $x176 false)))
 ))
 (let (($x139 (and $x55 $x73)))
 (let (($x135 (= $x139 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x173)))
 (let ((?x161 (bvand symbol.1 (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x161)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x42 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x42)))
 (let (($x112 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x149 (and $x112 $x125)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x50 $x149)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (and $x130 $x44)))
 (let (($x32 (not $x177)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x120 $x138)))
 (let (($x52 (and (not $x104) $x32)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x86 $x45)))
 (let (($x35 (not $x98)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x127 $x107)))
 (let (($x106 (and (not $x38) $x35)))
 (let (($x37 (and (and (and (and (and (and $x106 $x52) $x137) $x117) $x124) $x166) $x174)))
 (let (($x99 (and $x37 $x103)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x118 (and $x90 $x99)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x128 (or (bvugt input.memlabel-mem--symbol.1_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x128) (or $x14 $x136)))))))
 (let (($x143 (and $x93 $x118)))
 (let (($x146 (= $x143 true)))
 (let (($x132 (= $x146 true)))
 (let (($x178 (= $x132 true)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x84 (= $x36 true)))
 (let (($x95 (= $x84 true)))
 (let (($x89 (= $x95 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x65 (concat ?x53 (concat ?x70 ?x19)))))
 (let (($x49 (= ?x39 input.dst.llvm-%n)))
 (let (($x57 (= $x49 true)))
 (let (($x100 (= $x57 true)))
 (let (($x40 (and $x100 $x89)))
 (let (($x162 (and $x40 $x178)))
 (let (($x156 (and $x162 $x135)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (and $x119 $x156)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x11 $x148)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x47 $x159)))
 (let (($x151 (=> $x126 $x129)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x139 false)))
 (let (($x270 (= $x269 true)))
 (let (($x262 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var431X)))
 (=> $x17 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var430X)))
 (= $x17 false)))
 ))
 (let (($x263 (and $x256 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x249 (forall ((input.ind-%var425X (_ BitVec 32)) )(let ((?x236 (bvadd symbol.1 (bvmul input.ind-%var425X (_ bv4 32)))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x236))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv2 32))) ?x240)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv3 32))) ?x243)))
 (let ((?x194 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var425X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x153 (= ?x194 ?x246)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var424X) (bvult input.ind-%var424X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x153 $x212))))
 ))
 (let (($x250 (and $x214 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x200 (forall ((input.ind-%var419X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var419X)))
 (=> $x153 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var419X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var418X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var418X)))
 (= $x153 false)))
 ))
 (let (($x201 (and $x190 $x200)))
 (let (($x202 (= $x201 true)))
 (let (($x140 (forall ((input.ind-%var411X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var411X)))
 (=> $x17 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var411X) (_ bv0 32)))))
 ))
 (let (($x41 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var410X)))
 (= $x17 false)))
 ))
 (let (($x115 (and $x41 $x140)))
 (let (($x170 (= $x115 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x83)))
 (let (($x62 (= ?x122 input.dst.llvm-%n)))
 (let (($x60 (= $x62 true)))
 (let (($x59 (= $x60 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x121 true)))
 (let (($x147 (= $x155 true)))
 (let (($x22 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x5 (= $x22 true)))
 (let (($x74 (= $x5 true)))
 (let (($x82 (= $x74 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (= $x129 true)))
 (let (($x164 (= $x151 true)))
 (let (($x63 (= $x164 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x182 true)))
 (let (($x133 (= $x77 true)))
 (let (($x160 (= $x133 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x51 (= $x78 true)))
 (let (($x113 (= $x51 true)))
 (let (($x33 (= $x113 true)))
 (let ((?x156 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvadd symbol.1 ?x156)))
 (let (($x171 (and (bvule input.memlabel-mem--symbol.1_begin ?x148) (bvule (bvadd ?x148 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) (or false (or false $x171)))))
 (let (($x126 (=> (and $x139 (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x171)))))
 (let (($x157 (= $x126 true)))
 (let (($x31 (= $x157 true)))
 (let (($x26 (= $x31 true)))
 (let (($x7 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x55 (= $x7 true)))
 (let (($x183 (= $x55 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x141)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x48)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x112 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x112)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (and $x131 $x85)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x117 $x42)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x25 $x130)))
 (let (($x177 (not $x44)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x120 $x138)))
 (let (($x52 (and (not $x104) $x177)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x114 $x86)))
 (let (($x98 (not $x45)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x127 $x107)))
 (let (($x106 (and (not $x38) $x98)))
 (let (($x118 (and (and (and (and (and (and $x106 $x52) $x21) $x180) $x125) $x16) $x166)))
 (let (($x143 (and $x118 $x161)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x90 $x143)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x116 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x116) (or $x136 $x154)))))))
 (let (($x132 (and $x97 $x146)))
 (let (($x178 (= $x132 true)))
 (let (($x162 (= $x178 true)))
 (let (($x172 (= $x162 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x100 (= $x57 true)))
 (let (($x36 (= $x100 true)))
 (let (($x84 (= $x36 true)))
 (let (($x54 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x30 (= $x54 true)))
 (let (($x39 (= $x30 true)))
 (let (($x34 (= $x39 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x68 true)))
 (let (($x102 (= $x53 true)))
 (let (($x70 (= $x102 true)))
 (let (($x24 (= ?x122 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (= $x24 true)))
 (let (($x65 (= $x75 true)))
 (let (($x19 (and $x65 $x70)))
 (let (($x49 (and $x19 $x34)))
 (let (($x95 (and $x49 $x84)))
 (let (($x176 (and $x95 $x172)))
 (let (($x186 (and $x176 $x183)))
 (let (($x76 (and $x186 $x26)))
 (let (($x134 (and $x76 $x33)))
 (let (($x13 (and $x134 $x160)))
 (let (($x9 (and $x13 $x63)))
 (let (($x179 (and $x9 $x82)))
 (let (($x110 (and $x179 $x147)))
 (let (($x158 (and $x110 $x59)))
 (let (($x168 (and $x158 $x170)))
 (let (($x203 (and $x168 $x202)))
 (let (($x252 (and $x203 $x251)))
 (let (($x265 (and $x252 $x264)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x11 $x265)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x29 $x266)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x109 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x139 false)))
 (let (($x270 (= $x269 true)))
 (let (($x262 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var431X)))
 (=> $x17 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var430X)))
 (= $x17 false)))
 ))
 (let (($x263 (and $x256 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x249 (forall ((input.ind-%var425X (_ BitVec 32)) )(let ((?x236 (bvadd symbol.1 (bvmul input.ind-%var425X (_ bv4 32)))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x236))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv2 32))) ?x240)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv3 32))) ?x243)))
 (let ((?x194 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var425X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x153 (= ?x194 ?x246)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var424X) (bvult input.ind-%var424X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x153 $x212))))
 ))
 (let (($x250 (and $x214 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x200 (forall ((input.ind-%var419X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var419X)))
 (=> $x153 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var419X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var418X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var418X)))
 (= $x153 false)))
 ))
 (let (($x201 (and $x190 $x200)))
 (let (($x202 (= $x201 true)))
 (let (($x140 (forall ((input.ind-%var411X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var411X)))
 (=> $x17 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var411X) (_ bv0 32)))))
 ))
 (let (($x41 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var410X)))
 (= $x17 false)))
 ))
 (let (($x115 (and $x41 $x140)))
 (let (($x170 (= $x115 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x83)))
 (let (($x62 (= ?x122 input.dst.llvm-%n)))
 (let (($x60 (= $x62 true)))
 (let (($x59 (= $x60 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x121 true)))
 (let (($x147 (= $x155 true)))
 (let (($x22 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x5 (= $x22 true)))
 (let (($x74 (= $x5 true)))
 (let (($x82 (= $x74 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (= $x129 true)))
 (let (($x164 (= $x151 true)))
 (let (($x63 (= $x164 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x182 true)))
 (let (($x133 (= $x77 true)))
 (let (($x160 (= $x133 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x51 (= $x78 true)))
 (let (($x113 (= $x51 true)))
 (let (($x33 (= $x113 true)))
 (let ((?x156 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvadd symbol.1 ?x156)))
 (let (($x171 (and (bvule input.memlabel-mem--symbol.1_begin ?x148) (bvule (bvadd ?x148 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) (or false (or false $x171)))))
 (let (($x126 (=> (and $x139 (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x171)))))
 (let (($x157 (= $x126 true)))
 (let (($x31 (= $x157 true)))
 (let (($x26 (= $x31 true)))
 (let (($x7 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x55 (= $x7 true)))
 (let (($x183 (= $x55 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x141)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x48)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x112 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x112)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (and $x131 $x85)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x117 $x42)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x25 $x130)))
 (let (($x177 (not $x44)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x120 $x138)))
 (let (($x52 (and (not $x104) $x177)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x114 $x86)))
 (let (($x98 (not $x45)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x127 $x107)))
 (let (($x106 (and (not $x38) $x98)))
 (let (($x118 (and (and (and (and (and (and $x106 $x52) $x21) $x180) $x125) $x16) $x166)))
 (let (($x143 (and $x118 $x161)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x90 $x143)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x116 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x116) (or $x136 $x154)))))))
 (let (($x132 (and $x97 $x146)))
 (let (($x178 (= $x132 true)))
 (let (($x162 (= $x178 true)))
 (let (($x172 (= $x162 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x100 (= $x57 true)))
 (let (($x36 (= $x100 true)))
 (let (($x84 (= $x36 true)))
 (let (($x54 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x30 (= $x54 true)))
 (let (($x39 (= $x30 true)))
 (let (($x34 (= $x39 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x68 true)))
 (let (($x102 (= $x53 true)))
 (let (($x70 (= $x102 true)))
 (let (($x24 (= ?x122 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (= $x24 true)))
 (let (($x65 (= $x75 true)))
 (let (($x19 (and $x65 $x70)))
 (let (($x49 (and $x19 $x34)))
 (let (($x95 (and $x49 $x84)))
 (let (($x176 (and $x95 $x172)))
 (let (($x186 (and $x176 $x183)))
 (let (($x76 (and $x186 $x26)))
 (let (($x134 (and $x76 $x33)))
 (let (($x13 (and $x134 $x160)))
 (let (($x9 (and $x13 $x63)))
 (let (($x179 (and $x9 $x82)))
 (let (($x110 (and $x179 $x147)))
 (let (($x158 (and $x110 $x59)))
 (let (($x168 (and $x158 $x170)))
 (let (($x203 (and $x168 $x202)))
 (let (($x252 (and $x203 $x251)))
 (let (($x265 (and $x252 $x264)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x11 $x265)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x29 $x266)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x109 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0bfffec0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0bfffec3)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0bfffec0)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x7ffffe83 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffe82 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffe81 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffe80 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffef8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa100fefc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa100feff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000087)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa100fefc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffef8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffef8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x7ffffefb (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffefa (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffef9 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffef8 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (not $x292)))
 (let (($x11 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x11 $x293)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd symbol.1 ?x29)))
 (let ((?x45 (bvsub ?x109 ?x29)))
 (let (($x138 (ite (bvsge ?x29 (_ bv0 32)) (bvuge ?x109 ?x45) (bvult ?x109 ?x45))))
 (let ((?x38 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvmul (_ bv4 64) ?x38)))
 (let ((?x114 ((_ extract 63 32) ?x35)))
 (let (($x86 (= (_ bv0 32) ?x114)))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x25 (and (and (and true $x127) $x86) $x138)))
 (let (($x93 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let (($x130 (and $x93 $x25)))
 (let (($x44 (= true $x130)))
 (let (($x177 (=> $x11 $x44)))
 (let (($x295 (=> (and $x177 $x11) $x293)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let (($x284 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var551X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var551X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var550X)))
 (= $x235 false)))
 ))
 (let (($x285 (and $x278 $x284)))
 (let (($x286 (= $x285 true)))
 (let (($x261 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x188 (bvadd symbol.1 (bvmul input.ind-%var545X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x209)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x233)))
 (let ((?x270 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var545X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var545X)))
 (=> $x262 (= ?x270 ?x234)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x215 (and (bvule (_ bv0 32) input.ind-%var544X) (bvult input.ind-%var544X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var544X)))
 (= $x262 $x215))))
 ))
 (let (($x69 (and $x204 $x261)))
 (let (($x273 (= $x69 true)))
 (let (($x185 (forall ((input.ind-%var539X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var539X)))
 (=> $x262 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var539X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var538X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var538X)))
 (= $x262 false)))
 ))
 (let (($x195 (and $x266 $x185)))
 (let (($x167 (= $x195 true)))
 (let (($x248 (forall ((input.ind-%var533X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var533X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var533X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var532X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var532X)))
 (= $x235 false)))
 ))
 (let (($x249 (and $x226 $x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x194 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x194)))
 (let (($x203 (= ?x198 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x199 (= ?x198 input.dst.llvm-%n)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let ((?x115 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x115)))
 (let (($x168 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x168 true)))
 (let (($x189 (= $x153 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x121)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x82)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x63 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x129 $x63)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x13 $x9)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x78 $x51)))
 (let (($x33 (not $x113)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x31 $x26)))
 (let (($x182 (and (not $x76) $x33)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x171 $x43)))
 (let (($x72 (not $x175)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x18 $x12)))
 (let (($x157 (and (not $x165) $x72)))
 (let (($x158 (and (and (and (and (and (and $x157 $x182) $x77) $x160) $x22) $x74) $x179)))
 (let (($x64 (and $x158 $x155)))
 (let (($x132 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x132 $x64)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x73 $x139)))))))
 (let (($x94 (and $x145 $x17)))
 (let (($x41 (= $x94 true)))
 (let (($x184 (= $x41 true)))
 (let (($x8 (= $x184 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x166 (= $x48 true)))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x103 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x149 (= $x103 true)))
 (let (($x124 (= $x149 true)))
 (let (($x16 (= $x124 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x112 (= $x50 true)))
 (let (($x85 (= $x112 true)))
 (let (($x42 (= $x85 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x137 true)))
 (let (($x173 (= $x180 true)))
 (let (($x117 (= $x173 true)))
 (let (($x52 (= $x177 true)))
 (let (($x174 (= $x52 true)))
 (let (($x21 (= $x174 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x123 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x142 (= $x91 true)))
 (let (($x6 (= $x142 true)))
 (let (($x23 (= $x6 true)))
 (let (($x105 (and $x23 $x116)))
 (let (($x87 (and $x105 $x154)))
 (let (($x37 (and $x87 $x21)))
 (let (($x131 (and $x37 $x117)))
 (let (($x125 (and $x131 $x42)))
 (let (($x99 (and $x125 $x16)))
 (let (($x161 (and $x99 $x141)))
 (let (($x56 (and $x161 $x8)))
 (let (($x190 (and $x56 $x189)))
 (let (($x202 (and $x190 $x201)))
 (let (($x212 (and $x202 $x210)))
 (let (($x251 (and $x212 $x250)))
 (let (($x58 (and $x251 $x167)))
 (let (($x274 (and $x58 $x273)))
 (let (($x287 (and $x274 $x286)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x95 $x287)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x289 (and $x100 $x288)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x290 (and $x34 $x289)))
 (let (($x70 (and (bvule input.memlabel-mem--symbol.1_begin ?x109) (bvule (bvadd ?x109 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x15 (=> (and $x11 (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x70)))))
 (let (($x291 (and $x15 $x290)))
 (let (($x298 (=> $x291 $x297)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (not $x292)))
 (let (($x11 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x11 $x293)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd symbol.1 ?x29)))
 (let ((?x45 (bvsub ?x109 ?x29)))
 (let (($x138 (ite (bvsge ?x29 (_ bv0 32)) (bvuge ?x109 ?x45) (bvult ?x109 ?x45))))
 (let ((?x38 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvmul (_ bv4 64) ?x38)))
 (let ((?x114 ((_ extract 63 32) ?x35)))
 (let (($x86 (= (_ bv0 32) ?x114)))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x25 (and (and (and true $x127) $x86) $x138)))
 (let (($x93 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let (($x130 (and $x93 $x25)))
 (let (($x44 (= true $x130)))
 (let (($x177 (=> $x11 $x44)))
 (let (($x295 (=> (and $x177 $x11) $x293)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let (($x284 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var551X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var551X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var550X)))
 (= $x235 false)))
 ))
 (let (($x285 (and $x278 $x284)))
 (let (($x286 (= $x285 true)))
 (let (($x261 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x188 (bvadd symbol.1 (bvmul input.ind-%var545X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x209)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x233)))
 (let ((?x270 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var545X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var545X)))
 (=> $x262 (= ?x270 ?x234)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x215 (and (bvule (_ bv0 32) input.ind-%var544X) (bvult input.ind-%var544X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var544X)))
 (= $x262 $x215))))
 ))
 (let (($x69 (and $x204 $x261)))
 (let (($x273 (= $x69 true)))
 (let (($x185 (forall ((input.ind-%var539X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var539X)))
 (=> $x262 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var539X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var538X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var538X)))
 (= $x262 false)))
 ))
 (let (($x195 (and $x266 $x185)))
 (let (($x167 (= $x195 true)))
 (let (($x248 (forall ((input.ind-%var533X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var533X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var533X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var532X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var532X)))
 (= $x235 false)))
 ))
 (let (($x249 (and $x226 $x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x194 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x194)))
 (let (($x203 (= ?x198 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x199 (= ?x198 input.dst.llvm-%n)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let ((?x115 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x115)))
 (let (($x168 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x168 true)))
 (let (($x189 (= $x153 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x121)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x82)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x63 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x129 $x63)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x13 $x9)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x78 $x51)))
 (let (($x33 (not $x113)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x31 $x26)))
 (let (($x182 (and (not $x76) $x33)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x171 $x43)))
 (let (($x72 (not $x175)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x18 $x12)))
 (let (($x157 (and (not $x165) $x72)))
 (let (($x158 (and (and (and (and (and (and $x157 $x182) $x77) $x160) $x22) $x74) $x179)))
 (let (($x64 (and $x158 $x155)))
 (let (($x132 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x132 $x64)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x73 $x139)))))))
 (let (($x94 (and $x145 $x17)))
 (let (($x41 (= $x94 true)))
 (let (($x184 (= $x41 true)))
 (let (($x8 (= $x184 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x166 (= $x48 true)))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x103 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x149 (= $x103 true)))
 (let (($x124 (= $x149 true)))
 (let (($x16 (= $x124 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x112 (= $x50 true)))
 (let (($x85 (= $x112 true)))
 (let (($x42 (= $x85 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x137 true)))
 (let (($x173 (= $x180 true)))
 (let (($x117 (= $x173 true)))
 (let (($x52 (= $x177 true)))
 (let (($x174 (= $x52 true)))
 (let (($x21 (= $x174 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x123 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x142 (= $x91 true)))
 (let (($x6 (= $x142 true)))
 (let (($x23 (= $x6 true)))
 (let (($x105 (and $x23 $x116)))
 (let (($x87 (and $x105 $x154)))
 (let (($x37 (and $x87 $x21)))
 (let (($x131 (and $x37 $x117)))
 (let (($x125 (and $x131 $x42)))
 (let (($x99 (and $x125 $x16)))
 (let (($x161 (and $x99 $x141)))
 (let (($x56 (and $x161 $x8)))
 (let (($x190 (and $x56 $x189)))
 (let (($x202 (and $x190 $x201)))
 (let (($x212 (and $x202 $x210)))
 (let (($x251 (and $x212 $x250)))
 (let (($x58 (and $x251 $x167)))
 (let (($x274 (and $x58 $x273)))
 (let (($x287 (and $x274 $x286)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x95 $x287)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x289 (and $x100 $x288)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x290 (and $x34 $x289)))
 (let (($x70 (and (bvule input.memlabel-mem--symbol.1_begin ?x109) (bvule (bvadd ?x109 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x15 (=> (and $x11 (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x70)))))
 (let (($x291 (and $x15 $x290)))
 (let (($x298 (=> $x291 $x297)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x302 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x257 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x300 (bvmul (_ bv4294967295 32) ?x257)))
 (let ((?x301 (bvneg ?x300)))
 (let (($x303 (= ?x301 ?x302)))
 (let (($x304 (= $x303 true)))
 (let (($x193 (forall ((input.ind-%var575X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var575X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var575X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var574X)))
 (= $x262 false)))
 ))
 (let (($x268 (and $x275 $x193)))
 (let (($x89 (= $x268 true)))
 (let (($x259 (forall ((input.ind-%var569X (_ BitVec 32)) )(let ((?x61 (bvadd symbol.1 (bvmul input.ind-%var569X (_ bv4 32)))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x61))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv2 32))) ?x227)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv3 32))) ?x229)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var569X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var569X)))
 (=> $x225 (= ?x234 ?x224)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var568X) (bvult input.ind-%var568X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var568X)))
 (= $x225 $x294))))
 ))
 (let (($x205 (and $x296 $x259)))
 (let (($x281 (= $x205 true)))
 (let (($x274 (forall ((input.ind-%var563X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var563X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var562X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var562X)))
 (= $x225 false)))
 ))
 (let (($x278 (and $x196 $x274)))
 (let (($x284 (= $x278 true)))
 (let (($x204 (forall ((input.ind-%var557X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var557X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var557X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var556X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var556X)))
 (= $x262 false)))
 ))
 (let (($x221 (and $x159 $x204)))
 (let (($x254 (= $x221 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x245)))
 (let (($x239 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x199 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x153 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x153 true)))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x56 true)))
 (let (($x115 (= $x140 true)))
 (let (($x170 (= $x115 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x60 (bvsub ?x24 ?x47)))
 (let (($x82 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x60) (bvult ?x24 ?x60))))
 (let ((?x164 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x63 (bvmul (_ bv4 64) ?x164)))
 (let ((?x9 ((_ extract 63 32) ?x63)))
 (let (($x22 (= (_ bv0 32) ?x9)))
 (let (($x129 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x121 (and (and (and true $x129) $x22) $x82)))
 (let (($x110 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x155 (and $x110 $x121)))
 (let (($x64 (= true $x155)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (=> $x83 $x64)))
 (let (($x94 (= $x17 true)))
 (let (($x41 (= $x94 true)))
 (let (($x184 (= $x41 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x51 (= $x78 true)))
 (let (($x113 (= $x51 true)))
 (let (($x33 (= $x113 true)))
 (let (($x157 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x31 (= $x157 true)))
 (let (($x26 (= $x31 true)))
 (let (($x76 (= $x26 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x171 (= $x126 true)))
 (let (($x43 (= $x171 true)))
 (let (($x175 (= $x43 true)))
 (let (($x132 (= $x83 true)))
 (let (($x18 (= $x132 true)))
 (let (($x12 (= $x18 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x172)))
 (let ((?x162 (bvand symbol.1 (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x162)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x166 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x118 (and $x16 $x166)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x124 $x118)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x117 $x131)))
 (let (($x112 (not $x50)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x137 $x180)))
 (let (($x42 (and (not $x173) $x112)))
 (let (($x177 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x44 $x177)))
 (let (($x174 (not $x52)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x138 $x25)))
 (let (($x37 (and (not $x130) $x174)))
 (let (($x187 (and (and (and (and (and (and $x37 $x42) $x125) $x149) $x141) $x178) $x150)))
 (let (($x139 (and $x187 $x176)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x135 (and $x81 $x139)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x127 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x127) (or $x35 $x114)))))))
 (let (($x156 (and $x120 $x135)))
 (let (($x148 (= $x156 true)))
 (let (($x144 (= $x148 true)))
 (let (($x145 (= $x144 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x146 (and $x154 $x145)))
 (let (($x165 (and $x146 $x12)))
 (let (($x72 (and $x165 $x175)))
 (let (($x134 (and $x72 $x76)))
 (let (($x182 (and $x134 $x33)))
 (let (($x8 (and $x182 $x184)))
 (let (($x168 (and $x8 $x170)))
 (let (($x198 (and $x168 $x194)))
 (let (($x203 (and $x198 $x202)))
 (let (($x235 (and $x203 $x218)))
 (let (($x248 (and $x235 $x247)))
 (let (($x188 (and $x248 $x254)))
 (let (($x285 (and $x188 $x284)))
 (let (($x244 (and $x285 $x281)))
 (let (($x208 (and $x244 $x89)))
 (let (($x6 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x6) $x208)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x253 (and $x91 $x207)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x282 (and $x84 $x253)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x57 $x282)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x109 (=> (and $x83 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x283 (and $x109 $x280)))
 (let (($x305 (=> $x283 $x304)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x302 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x257 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x300 (bvmul (_ bv4294967295 32) ?x257)))
 (let ((?x301 (bvneg ?x300)))
 (let (($x303 (= ?x301 ?x302)))
 (let (($x304 (= $x303 true)))
 (let (($x193 (forall ((input.ind-%var575X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var575X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var575X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var574X)))
 (= $x262 false)))
 ))
 (let (($x268 (and $x275 $x193)))
 (let (($x89 (= $x268 true)))
 (let (($x259 (forall ((input.ind-%var569X (_ BitVec 32)) )(let ((?x61 (bvadd symbol.1 (bvmul input.ind-%var569X (_ bv4 32)))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x61))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv2 32))) ?x227)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv3 32))) ?x229)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var569X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var569X)))
 (=> $x225 (= ?x234 ?x224)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var568X) (bvult input.ind-%var568X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var568X)))
 (= $x225 $x294))))
 ))
 (let (($x205 (and $x296 $x259)))
 (let (($x281 (= $x205 true)))
 (let (($x274 (forall ((input.ind-%var563X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var563X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var562X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var562X)))
 (= $x225 false)))
 ))
 (let (($x278 (and $x196 $x274)))
 (let (($x284 (= $x278 true)))
 (let (($x204 (forall ((input.ind-%var557X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var557X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var557X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var556X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var556X)))
 (= $x262 false)))
 ))
 (let (($x221 (and $x159 $x204)))
 (let (($x254 (= $x221 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x245)))
 (let (($x239 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x199 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x153 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x153 true)))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x56 true)))
 (let (($x115 (= $x140 true)))
 (let (($x170 (= $x115 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x60 (bvsub ?x24 ?x47)))
 (let (($x82 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x60) (bvult ?x24 ?x60))))
 (let ((?x164 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x63 (bvmul (_ bv4 64) ?x164)))
 (let ((?x9 ((_ extract 63 32) ?x63)))
 (let (($x22 (= (_ bv0 32) ?x9)))
 (let (($x129 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x121 (and (and (and true $x129) $x22) $x82)))
 (let (($x110 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x155 (and $x110 $x121)))
 (let (($x64 (= true $x155)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (=> $x83 $x64)))
 (let (($x94 (= $x17 true)))
 (let (($x41 (= $x94 true)))
 (let (($x184 (= $x41 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x51 (= $x78 true)))
 (let (($x113 (= $x51 true)))
 (let (($x33 (= $x113 true)))
 (let (($x157 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x31 (= $x157 true)))
 (let (($x26 (= $x31 true)))
 (let (($x76 (= $x26 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x171 (= $x126 true)))
 (let (($x43 (= $x171 true)))
 (let (($x175 (= $x43 true)))
 (let (($x132 (= $x83 true)))
 (let (($x18 (= $x132 true)))
 (let (($x12 (= $x18 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x172)))
 (let ((?x162 (bvand symbol.1 (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x162)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let ((?x48 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x166 (= input.memlabel-mem--symbol.1_end ?x48)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x118 (and $x16 $x166)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x124 $x118)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x117 $x131)))
 (let (($x112 (not $x50)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x137 $x180)))
 (let (($x42 (and (not $x173) $x112)))
 (let (($x177 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x44 $x177)))
 (let (($x174 (not $x52)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x138 $x25)))
 (let (($x37 (and (not $x130) $x174)))
 (let (($x187 (and (and (and (and (and (and $x37 $x42) $x125) $x149) $x141) $x178) $x150)))
 (let (($x139 (and $x187 $x176)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x135 (and $x81 $x139)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x127 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x127) (or $x35 $x114)))))))
 (let (($x156 (and $x120 $x135)))
 (let (($x148 (= $x156 true)))
 (let (($x144 (= $x148 true)))
 (let (($x145 (= $x144 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x146 (and $x154 $x145)))
 (let (($x165 (and $x146 $x12)))
 (let (($x72 (and $x165 $x175)))
 (let (($x134 (and $x72 $x76)))
 (let (($x182 (and $x134 $x33)))
 (let (($x8 (and $x182 $x184)))
 (let (($x168 (and $x8 $x170)))
 (let (($x198 (and $x168 $x194)))
 (let (($x203 (and $x198 $x202)))
 (let (($x235 (and $x203 $x218)))
 (let (($x248 (and $x235 $x247)))
 (let (($x188 (and $x248 $x254)))
 (let (($x285 (and $x188 $x284)))
 (let (($x244 (and $x285 $x281)))
 (let (($x208 (and $x244 $x89)))
 (let (($x6 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x6) $x208)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x253 (and $x91 $x207)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x282 (and $x84 $x253)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x57 $x282)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x109 (=> (and $x83 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x283 (and $x109 $x280)))
 (let (($x305 (=> $x283 $x304)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x256 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x256 (_ bv3 32))))
 (let (($x298 (= $x240 true)))
 (let (($x206 (= $x298 true)))
 (let (($x290 (forall ((input.ind-%var599X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var599X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var599X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var598X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var598X)))
 (= $x167 false)))
 ))
 (let (($x46 (and $x269 $x290)))
 (let (($x191 (= $x46 true)))
 (let (($x214 (forall ((input.ind-%var593X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var593X)))
 (=> $x295 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var593X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var592X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var592X)))
 (= $x295 false)))
 ))
 (let (($x238 (and $x286 $x214)))
 (let (($x267 (= $x238 true)))
 (let (($x40 (forall ((input.ind-%var587X (_ BitVec 32)) )(let ((?x301 (bvadd symbol.1 (bvmul input.ind-%var587X (_ bv4 32)))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x301))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv2 32))) ?x305)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv3 32))) ?x79)))
 (let ((?x229 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var587X)))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var587X)))
 (=> $x295 (= ?x229 ?x260)))))))))
 ))
 (let (($x66 (forall ((input.ind-%var586X (_ BitVec 32)) )(let (($x80 (and (bvule (_ bv0 32) input.ind-%var586X) (bvult input.ind-%var586X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var586X)))
 (= $x295 $x80))))
 ))
 (let (($x195 (and $x66 $x40)))
 (let (($x169 (= $x195 true)))
 (let (($x278 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var581X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var581X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var580X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var580X)))
 (= $x167 false)))
 ))
 (let (($x284 (and $x221 $x278)))
 (let (($x285 (= $x284 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x226)))
 (let (($x246 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x200 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x82)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x74)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x63 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x63)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (and $x151 $x9)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x179 $x22)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x182 $x147)))
 (let (($x110 (not $x77)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x51 $x113)))
 (let (($x133 (and (not $x33) $x110)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x157 $x31)))
 (let (($x76 (not $x26)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x43 $x175)))
 (let (($x78 (and (not $x72) $x76)))
 (let (($x184 (and (and (and (and (and (and $x78 $x133) $x62) $x129) $x158) $x60) $x59)))
 (let (($x8 (and $x184 $x121)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x56 (and $x162 $x8)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x145 $x146)))))))
 (let (($x140 (and $x171 $x56)))
 (let (($x115 (= $x140 true)))
 (let (($x170 (= $x115 true)))
 (let (($x168 (= $x170 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x186 (= $x141 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x183 true)))
 (let (($x16 (= $x124 true)))
 (let (($x99 (= $x16 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x117)))
 (let (($x125 (= ?x131 input.dst.llvm-%n)))
 (let (($x55 (= $x125 true)))
 (let (($x103 (= $x55 true)))
 (let (($x50 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x50 true)))
 (let (($x42 (= $x112 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x120 (bvsub ?x24 ?x47)))
 (let (($x25 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x120) (bvult ?x24 ?x120))))
 (let ((?x86 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x32 (bvmul (_ bv4 64) ?x86)))
 (let ((?x98 ((_ extract 63 32) ?x32)))
 (let (($x45 (= (_ bv0 32) ?x98)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x44 (and (and (and true $x38) $x45) $x25)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x177 (and $x90 $x44)))
 (let (($x52 (= true $x177)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x219 $x52)))
 (let (($x37 (= $x174 true)))
 (let (($x137 (= $x37 true)))
 (let (($x180 (= $x137 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x219 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x173 (and $x106 $x180)))
 (let (($x7 (and $x173 $x42)))
 (let (($x149 (and $x7 $x103)))
 (let (($x48 (and $x149 $x99)))
 (let (($x161 (and $x48 $x186)))
 (let (($x153 (and $x161 $x168)))
 (let (($x199 (and $x153 $x198)))
 (let (($x211 (and $x199 $x203)))
 (let (($x245 (and $x211 $x235)))
 (let (($x251 (and $x245 $x248)))
 (let (($x293 (and $x251 $x285)))
 (let (($x233 (and $x293 $x169)))
 (let (($x271 (and $x233 $x267)))
 (let (($x197 (and $x271 $x191)))
 (let (($x277 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (and (not $x277) $x197)))
 (let (($x142 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and $x142 $x28)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x95 $x258)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x209 (and $x100 $x291)))
 (let (($x152 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x152)))))
 (let (($x68 (=> (and $x219 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x152)))))
 (let (($x261 (and $x68 $x209)))
 (let (($x243 (=> $x261 $x206)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x256 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x256 (_ bv3 32))))
 (let (($x298 (= $x240 true)))
 (let (($x206 (= $x298 true)))
 (let (($x290 (forall ((input.ind-%var599X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var599X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var599X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var598X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var598X)))
 (= $x167 false)))
 ))
 (let (($x46 (and $x269 $x290)))
 (let (($x191 (= $x46 true)))
 (let (($x214 (forall ((input.ind-%var593X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var593X)))
 (=> $x295 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var593X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var592X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var592X)))
 (= $x295 false)))
 ))
 (let (($x238 (and $x286 $x214)))
 (let (($x267 (= $x238 true)))
 (let (($x40 (forall ((input.ind-%var587X (_ BitVec 32)) )(let ((?x301 (bvadd symbol.1 (bvmul input.ind-%var587X (_ bv4 32)))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x301))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv2 32))) ?x305)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv3 32))) ?x79)))
 (let ((?x229 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var587X)))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var587X)))
 (=> $x295 (= ?x229 ?x260)))))))))
 ))
 (let (($x66 (forall ((input.ind-%var586X (_ BitVec 32)) )(let (($x80 (and (bvule (_ bv0 32) input.ind-%var586X) (bvult input.ind-%var586X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var586X)))
 (= $x295 $x80))))
 ))
 (let (($x195 (and $x66 $x40)))
 (let (($x169 (= $x195 true)))
 (let (($x278 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var581X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var581X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var580X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var580X)))
 (= $x167 false)))
 ))
 (let (($x284 (and $x221 $x278)))
 (let (($x285 (= $x284 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x226)))
 (let (($x246 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x200 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x82)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x74)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x63 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x63)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (and $x151 $x9)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x179 $x22)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x182 $x147)))
 (let (($x110 (not $x77)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x51 $x113)))
 (let (($x133 (and (not $x33) $x110)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x157 $x31)))
 (let (($x76 (not $x26)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x43 $x175)))
 (let (($x78 (and (not $x72) $x76)))
 (let (($x184 (and (and (and (and (and (and $x78 $x133) $x62) $x129) $x158) $x60) $x59)))
 (let (($x8 (and $x184 $x121)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x56 (and $x162 $x8)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x145 $x146)))))))
 (let (($x140 (and $x171 $x56)))
 (let (($x115 (= $x140 true)))
 (let (($x170 (= $x115 true)))
 (let (($x168 (= $x170 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x186 (= $x141 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x183 true)))
 (let (($x16 (= $x124 true)))
 (let (($x99 (= $x16 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x117)))
 (let (($x125 (= ?x131 input.dst.llvm-%n)))
 (let (($x55 (= $x125 true)))
 (let (($x103 (= $x55 true)))
 (let (($x50 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x50 true)))
 (let (($x42 (= $x112 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x120 (bvsub ?x24 ?x47)))
 (let (($x25 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x120) (bvult ?x24 ?x120))))
 (let ((?x86 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x32 (bvmul (_ bv4 64) ?x86)))
 (let ((?x98 ((_ extract 63 32) ?x32)))
 (let (($x45 (= (_ bv0 32) ?x98)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x44 (and (and (and true $x38) $x45) $x25)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x177 (and $x90 $x44)))
 (let (($x52 (= true $x177)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x219 $x52)))
 (let (($x37 (= $x174 true)))
 (let (($x137 (= $x37 true)))
 (let (($x180 (= $x137 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x219 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x173 (and $x106 $x180)))
 (let (($x7 (and $x173 $x42)))
 (let (($x149 (and $x7 $x103)))
 (let (($x48 (and $x149 $x99)))
 (let (($x161 (and $x48 $x186)))
 (let (($x153 (and $x161 $x168)))
 (let (($x199 (and $x153 $x198)))
 (let (($x211 (and $x199 $x203)))
 (let (($x245 (and $x211 $x235)))
 (let (($x251 (and $x245 $x248)))
 (let (($x293 (and $x251 $x285)))
 (let (($x233 (and $x293 $x169)))
 (let (($x271 (and $x233 $x267)))
 (let (($x197 (and $x271 $x191)))
 (let (($x277 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (and (not $x277) $x197)))
 (let (($x142 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and $x142 $x28)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x95 $x258)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x209 (and $x100 $x291)))
 (let (($x152 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x152)))))
 (let (($x68 (=> (and $x219 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x152)))))
 (let (($x261 (and $x68 $x209)))
 (let (($x243 (=> $x261 $x206)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x20 (bvsle ?x255 (_ bv3 32))))
 (let (($x163 (= $x20 true)))
 (let (($x242 (= $x163 true)))
 (let (($x263 (forall ((input.ind-%var623X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var623X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var623X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var622X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var622X)))
 (= $x101 false)))
 ))
 (let (($x232 (and $x294 $x263)))
 (let (($x188 (= $x232 true)))
 (let (($x193 (forall ((input.ind-%var617X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var617X)))
 (=> $x306 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var617X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var616X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var616X)))
 (= $x306 false)))
 ))
 (let (($x207 (and $x205 $x193)))
 (let (($x280 (= $x207 true)))
 (let (($x231 (forall ((input.ind-%var611X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var611X (_ bv4 32)))))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x11)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x296)))
 (let ((?x299 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var611X)))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var611X)))
 (=> $x306 (= ?x299 ?x196)))))))))
 ))
 (let (($x40 (forall ((input.ind-%var610X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var610X) (bvult input.ind-%var610X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var610X)))
 (= $x306 $x265))))
 ))
 (let (($x227 (and $x40 $x231)))
 (let (($x292 (= $x227 true)))
 (let (($x228 (forall ((input.ind-%var605X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var605X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var605X) (_ bv0 32)))))
 ))
 (let (($x284 (forall ((input.ind-%var604X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var604X)))
 (= $x101 false)))
 ))
 (let (($x300 (and $x284 $x228)))
 (let (($x301 (= $x300 true)))
 (let ((?x239 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x239)))
 (let (($x247 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x201 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x190 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x60)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x94)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (and $x17 $x164)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x129 $x63)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x182 $x147)))
 (let (($x110 (not $x77)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x113 $x33)))
 (let (($x155 (and (not $x160) $x110)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x157 $x31)))
 (let (($x76 (not $x26)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x175 $x72)))
 (let (($x51 (and (not $x134) $x76)))
 (let (($x8 (and (and (and (and (and (and $x51 $x155) $x62) $x13) $x9) $x158) $x5)))
 (let (($x56 (and $x8 $x41)))
 (let (($x126 (= symbol.1 dst_symbol_addr.1)))
 (let (($x140 (and $x126 $x56)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x139) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x132 $x18)))))))
 (let (($x115 (and $x43 $x140)))
 (let (($x170 (= $x115 true)))
 (let (($x168 (= $x170 true)))
 (let (($x153 (= $x168 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x186 (= $x141 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x183 true)))
 (let (($x16 (= $x124 true)))
 (let (($x99 (= $x16 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x117)))
 (let (($x125 (= ?x131 input.dst.llvm-%n)))
 (let (($x55 (= $x125 true)))
 (let (($x103 (= $x55 true)))
 (let (($x50 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x50 true)))
 (let (($x42 (= $x112 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x45 (bvsub ?x24 ?x47)))
 (let (($x81 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x45) (bvult ?x24 ?x45))))
 (let ((?x114 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvmul (_ bv4 64) ?x114)))
 (let ((?x32 ((_ extract 63 32) ?x86)))
 (let (($x98 (= (_ bv0 32) ?x32)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x44 (and (and (and true $x38) $x98) $x81)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x177 (and $x90 $x44)))
 (let (($x52 (= true $x177)))
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x122 $x52)))
 (let (($x37 (= $x174 true)))
 (let (($x137 (= $x37 true)))
 (let (($x180 (= $x137 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x122 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x173 (and $x106 $x180)))
 (let (($x7 (and $x173 $x42)))
 (let (($x149 (and $x7 $x103)))
 (let (($x48 (and $x149 $x99)))
 (let (($x161 (and $x48 $x186)))
 (let (($x189 (and $x161 $x153)))
 (let (($x200 (and $x189 $x199)))
 (let (($x210 (and $x200 $x211)))
 (let (($x226 (and $x210 $x245)))
 (let (($x159 (and $x226 $x251)))
 (let (($x87 (and $x159 $x301)))
 (let (($x230 (and $x87 $x292)))
 (let (($x288 (and $x230 $x280)))
 (let (($x69 (and $x288 $x188)))
 (let (($x185 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x185) $x69)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x6 $x250)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x111 $x92)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x36 $x257)))
 (let (($x109 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x109)))))
 (let (($x53 (=> (and $x122 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x109)))))
 (let (($x237 (and $x53 $x289)))
 (let (($x287 (=> $x237 $x242)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x20 (bvsle ?x255 (_ bv3 32))))
 (let (($x163 (= $x20 true)))
 (let (($x242 (= $x163 true)))
 (let (($x263 (forall ((input.ind-%var623X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var623X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var623X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var622X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var622X)))
 (= $x101 false)))
 ))
 (let (($x232 (and $x294 $x263)))
 (let (($x188 (= $x232 true)))
 (let (($x193 (forall ((input.ind-%var617X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var617X)))
 (=> $x306 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var617X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var616X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var616X)))
 (= $x306 false)))
 ))
 (let (($x207 (and $x205 $x193)))
 (let (($x280 (= $x207 true)))
 (let (($x231 (forall ((input.ind-%var611X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var611X (_ bv4 32)))))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x11)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x296)))
 (let ((?x299 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var611X)))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var611X)))
 (=> $x306 (= ?x299 ?x196)))))))))
 ))
 (let (($x40 (forall ((input.ind-%var610X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var610X) (bvult input.ind-%var610X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var610X)))
 (= $x306 $x265))))
 ))
 (let (($x227 (and $x40 $x231)))
 (let (($x292 (= $x227 true)))
 (let (($x228 (forall ((input.ind-%var605X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var605X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var605X) (_ bv0 32)))))
 ))
 (let (($x284 (forall ((input.ind-%var604X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var604X)))
 (= $x101 false)))
 ))
 (let (($x300 (and $x284 $x228)))
 (let (($x301 (= $x300 true)))
 (let ((?x239 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x239)))
 (let (($x247 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x201 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x190 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x60)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x94)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (and $x17 $x164)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x129 $x63)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x182 $x147)))
 (let (($x110 (not $x77)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x113 $x33)))
 (let (($x155 (and (not $x160) $x110)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x157 $x31)))
 (let (($x76 (not $x26)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x175 $x72)))
 (let (($x51 (and (not $x134) $x76)))
 (let (($x8 (and (and (and (and (and (and $x51 $x155) $x62) $x13) $x9) $x158) $x5)))
 (let (($x56 (and $x8 $x41)))
 (let (($x126 (= symbol.1 dst_symbol_addr.1)))
 (let (($x140 (and $x126 $x56)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x139) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x132 $x18)))))))
 (let (($x115 (and $x43 $x140)))
 (let (($x170 (= $x115 true)))
 (let (($x168 (= $x170 true)))
 (let (($x153 (= $x168 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x186 (= $x141 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x183 true)))
 (let (($x16 (= $x124 true)))
 (let (($x99 (= $x16 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x117)))
 (let (($x125 (= ?x131 input.dst.llvm-%n)))
 (let (($x55 (= $x125 true)))
 (let (($x103 (= $x55 true)))
 (let (($x50 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x50 true)))
 (let (($x42 (= $x112 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x45 (bvsub ?x24 ?x47)))
 (let (($x81 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x45) (bvult ?x24 ?x45))))
 (let ((?x114 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvmul (_ bv4 64) ?x114)))
 (let ((?x32 ((_ extract 63 32) ?x86)))
 (let (($x98 (= (_ bv0 32) ?x32)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x44 (and (and (and true $x38) $x98) $x81)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x177 (and $x90 $x44)))
 (let (($x52 (= true $x177)))
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x122 $x52)))
 (let (($x37 (= $x174 true)))
 (let (($x137 (= $x37 true)))
 (let (($x180 (= $x137 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x122 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x173 (and $x106 $x180)))
 (let (($x7 (and $x173 $x42)))
 (let (($x149 (and $x7 $x103)))
 (let (($x48 (and $x149 $x99)))
 (let (($x161 (and $x48 $x186)))
 (let (($x189 (and $x161 $x153)))
 (let (($x200 (and $x189 $x199)))
 (let (($x210 (and $x200 $x211)))
 (let (($x226 (and $x210 $x245)))
 (let (($x159 (and $x226 $x251)))
 (let (($x87 (and $x159 $x301)))
 (let (($x230 (and $x87 $x292)))
 (let (($x288 (and $x230 $x280)))
 (let (($x69 (and $x288 $x188)))
 (let (($x185 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x185) $x69)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x6 $x250)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x111 $x92)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x36 $x257)))
 (let (($x109 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x109)))))
 (let (($x53 (=> (and $x122 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x109)))))
 (let (($x237 (and $x53 $x289)))
 (let (($x287 (=> $x237 $x242)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x244 (bvsge ?x282 (_ bv0 32))))
 (let (($x249 (= $x244 true)))
 (let (($x234 (= $x249 true)))
 (let (($x266 (forall ((input.ind-%var647X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var647X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var647X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var646X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var646X)))
 (= $x241 false)))
 ))
 (let (($x305 (and $x268 $x266)))
 (let (($x293 (= $x305 true)))
 (let (($x290 (forall ((input.ind-%var641X (_ BitVec 32)) )(let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var641X)))
 (=> $x67 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var641X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var640X (_ BitVec 32)) )(let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var640X)))
 (= $x67 false)))
 ))
 (let (($x28 (and $x238 $x290)))
 (let (($x209 (= $x28 true)))
 (let (($x195 (forall ((input.ind-%var635X (_ BitVec 32)) )(let ((?x163 (bvadd symbol.1 (bvmul input.ind-%var635X (_ bv4 32)))))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x163))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv2 32))) ?x83)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv3 32))) ?x108)))
 (let ((?x259 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var635X)))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var635X)))
 (=> $x67 (= ?x259 ?x223)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var634X) (bvult input.ind-%var634X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var634X)))
 (= $x67 $x254))))
 ))
 (let (($x233 (and $x231 $x195)))
 (let (($x192 (= $x233 true)))
 (let (($x143 (forall ((input.ind-%var629X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var629X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var629X) (_ bv0 32)))))
 ))
 (let (($x300 (forall ((input.ind-%var628X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var628X)))
 (= $x241 false)))
 ))
 (let (($x240 (and $x300 $x143)))
 (let (($x298 (= $x240 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x246)))
 (let (($x248 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x158)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x82)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x151 (and $x184 $x179)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x13 $x151)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x182 $x147)))
 (let (($x110 (not $x77)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x33 $x160)))
 (let (($x74 (and (not $x133) $x110)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x157 $x31)))
 (let (($x76 (not $x26)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x72 $x134)))
 (let (($x113 (and (not $x78) $x76)))
 (let (($x56 (and (and (and (and (and (and $x113 $x74) $x62) $x64) $x164) $x9) $x22)))
 (let (($x140 (and $x56 $x121)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x162 $x140)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x144 (or (bvugt input.memlabel-mem--symbol.1_begin ?x156) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x144) (or $x12 $x165)))))))
 (let (($x170 (and $x175 $x115)))
 (let (($x168 (= $x170 true)))
 (let (($x153 (= $x168 true)))
 (let (($x189 (= $x153 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x186 (= $x141 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x183 true)))
 (let (($x16 (= $x124 true)))
 (let (($x99 (= $x16 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x117)))
 (let (($x125 (= ?x131 input.dst.llvm-%n)))
 (let (($x55 (= $x125 true)))
 (let (($x103 (= $x55 true)))
 (let (($x50 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x50 true)))
 (let (($x42 (= $x112 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x98 (bvsub ?x24 ?x47)))
 (let (($x96 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x98) (bvult ?x24 ?x98))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x130)))
 (let ((?x86 ((_ extract 63 32) ?x114)))
 (let (($x32 (= (_ bv0 32) ?x86)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x44 (and (and (and true $x38) $x32) $x96)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x177 (and $x90 $x44)))
 (let (($x52 (= true $x177)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x29 $x52)))
 (let (($x37 (= $x174 true)))
 (let (($x137 (= $x37 true)))
 (let (($x180 (= $x137 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x29 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x173 (and $x106 $x180)))
 (let (($x7 (and $x173 $x42)))
 (let (($x149 (and $x7 $x103)))
 (let (($x48 (and $x149 $x99)))
 (let (($x161 (and $x48 $x186)))
 (let (($x190 (and $x161 $x189)))
 (let (($x201 (and $x190 $x200)))
 (let (($x212 (and $x201 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x221 (and $x239 $x159)))
 (let (($x224 (and $x221 $x298)))
 (let (($x303 (and $x224 $x192)))
 (let (($x253 (and $x303 $x209)))
 (let (($x181 (and $x253 $x293)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and (not $x283) $x181)))
 (let (($x277 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x277 $x270)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x256 (and $x91 $x169)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x208 (and $x84 $x256)))
 (let (($x68 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x36 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x68)))))
 (let (($x70 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x68)))))
 (let (($x217 (and $x70 $x208)))
 (let (($x236 (=> $x217 $x234)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x244 (bvsge ?x282 (_ bv0 32))))
 (let (($x249 (= $x244 true)))
 (let (($x234 (= $x249 true)))
 (let (($x266 (forall ((input.ind-%var647X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var647X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var647X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var646X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var646X)))
 (= $x241 false)))
 ))
 (let (($x305 (and $x268 $x266)))
 (let (($x293 (= $x305 true)))
 (let (($x290 (forall ((input.ind-%var641X (_ BitVec 32)) )(let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var641X)))
 (=> $x67 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var641X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var640X (_ BitVec 32)) )(let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var640X)))
 (= $x67 false)))
 ))
 (let (($x28 (and $x238 $x290)))
 (let (($x209 (= $x28 true)))
 (let (($x195 (forall ((input.ind-%var635X (_ BitVec 32)) )(let ((?x163 (bvadd symbol.1 (bvmul input.ind-%var635X (_ bv4 32)))))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x163))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv2 32))) ?x83)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv3 32))) ?x108)))
 (let ((?x259 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var635X)))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var635X)))
 (=> $x67 (= ?x259 ?x223)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var634X) (bvult input.ind-%var634X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var634X)))
 (= $x67 $x254))))
 ))
 (let (($x233 (and $x231 $x195)))
 (let (($x192 (= $x233 true)))
 (let (($x143 (forall ((input.ind-%var629X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var629X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var629X) (_ bv0 32)))))
 ))
 (let (($x300 (forall ((input.ind-%var628X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var628X)))
 (= $x241 false)))
 ))
 (let (($x240 (and $x300 $x143)))
 (let (($x298 (= $x240 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x246)))
 (let (($x248 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x158)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x82)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x151 (and $x184 $x179)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x13 $x151)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x182 $x147)))
 (let (($x110 (not $x77)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x33 $x160)))
 (let (($x74 (and (not $x133) $x110)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x157 $x31)))
 (let (($x76 (not $x26)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x72 $x134)))
 (let (($x113 (and (not $x78) $x76)))
 (let (($x56 (and (and (and (and (and (and $x113 $x74) $x62) $x64) $x164) $x9) $x22)))
 (let (($x140 (and $x56 $x121)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x162 $x140)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x144 (or (bvugt input.memlabel-mem--symbol.1_begin ?x156) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x144) (or $x12 $x165)))))))
 (let (($x170 (and $x175 $x115)))
 (let (($x168 (= $x170 true)))
 (let (($x153 (= $x168 true)))
 (let (($x189 (= $x153 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x166 true)))
 (let (($x141 (= $x118 true)))
 (let (($x186 (= $x141 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x183 true)))
 (let (($x16 (= $x124 true)))
 (let (($x99 (= $x16 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x117)))
 (let (($x125 (= ?x131 input.dst.llvm-%n)))
 (let (($x55 (= $x125 true)))
 (let (($x103 (= $x55 true)))
 (let (($x50 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x50 true)))
 (let (($x42 (= $x112 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x98 (bvsub ?x24 ?x47)))
 (let (($x96 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x98) (bvult ?x24 ?x98))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x130)))
 (let ((?x86 ((_ extract 63 32) ?x114)))
 (let (($x32 (= (_ bv0 32) ?x86)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x44 (and (and (and true $x38) $x32) $x96)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x177 (and $x90 $x44)))
 (let (($x52 (= true $x177)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x29 $x52)))
 (let (($x37 (= $x174 true)))
 (let (($x137 (= $x37 true)))
 (let (($x180 (= $x137 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x29 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x173 (and $x106 $x180)))
 (let (($x7 (and $x173 $x42)))
 (let (($x149 (and $x7 $x103)))
 (let (($x48 (and $x149 $x99)))
 (let (($x161 (and $x48 $x186)))
 (let (($x190 (and $x161 $x189)))
 (let (($x201 (and $x190 $x200)))
 (let (($x212 (and $x201 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x221 (and $x239 $x159)))
 (let (($x224 (and $x221 $x298)))
 (let (($x303 (and $x224 $x192)))
 (let (($x253 (and $x303 $x209)))
 (let (($x181 (and $x253 $x293)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and (not $x283) $x181)))
 (let (($x277 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x277 $x270)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x256 (and $x91 $x169)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x208 (and $x84 $x256)))
 (let (($x68 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x36 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x68)))))
 (let (($x70 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x68)))))
 (let (($x217 (and $x70 $x208)))
 (let (($x236 (=> $x217 $x234)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (bvule ?x291 (_ bv3 32))))
 (let (($x262 (= $x271 true)))
 (let (($x80 (= $x262 true)))
 (let (($x297 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var671X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var671X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var670X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var670X)))
 (= $x260 false)))
 ))
 (let (($x11 (and $x46 $x297)))
 (let (($x87 (= $x11 true)))
 (let (($x263 (forall ((input.ind-%var665X (_ BitVec 32)) )(let ((?x243 (bvadd symbol.1 (bvmul input.ind-%var665X (_ bv4 32)))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x193)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x257)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var665X)))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var665X)))
 (=> $x34 (= ?x285 ?x288)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var664X (_ BitVec 32)) )(let (($x181 (and (bvule (_ bv0 32) input.ind-%var664X) (bvult input.ind-%var664X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var664X)))
 (= $x34 $x181))))
 ))
 (let (($x250 (and $x169 $x263)))
 (let (($x289 (= $x250 true)))
 (let (($x214 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var659X)))
 (=> $x34 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var658X)))
 (= $x34 false)))
 ))
 (let (($x238 (and $x242 $x214)))
 (let (($x269 (= $x238 true)))
 (let (($x275 (forall ((input.ind-%var653X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var653X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var653X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var652X)))
 (= $x260 false)))
 ))
 (let (($x20 (and $x240 $x275)))
 (let (($x163 (= $x20 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x247)))
 (let (($x251 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x158 (bvsub ?x24 ?x47)))
 (let (($x170 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x158) (bvult ?x24 ?x158))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x41)))
 (let ((?x22 ((_ extract 63 32) ?x82)))
 (let (($x56 (= (_ bv0 32) ?x22)))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x189 (and (and (and true $x63) $x56) $x170)))
 (let (($x17 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x190 (and $x17 $x189)))
 (let (($x194 (= true $x190)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x29 $x194)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x59 (= $x5 true)))
 (let (($x64 (= $x59 true)))
 (let (($x8 (= $x64 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x77 true)))
 (let (($x74 (= $x110 true)))
 (let (($x94 (= $x74 true)))
 (let (($x133 (= $x29 true)))
 (let (($x155 (= $x133 true)))
 (let (($x182 (= $x155 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x187)))
 (let ((?x73 (bvand symbol.1 (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x73)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x132 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x146 (= input.memlabel-mem--symbol.1_end ?x132)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x12 (and $x145 $x146)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x148 $x12)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x166 $x118)))
 (let (($x186 (not $x141)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (and $x16 $x99)))
 (let (($x139 (and (not $x48) $x186)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x125 $x55)))
 (let (($x149 (not $x103)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x112 $x42)))
 (let (($x124 (and (not $x7) $x149)))
 (let (($x51 (and (and (and (and (and (and $x124 $x139) $x135) $x156) $x18) $x171) $x43)))
 (let (($x157 (and $x51 $x175)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x31 (and $x81 $x157)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x44 (or (bvugt input.memlabel-mem--symbol.1_begin ?x21) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x44) (or $x37 $x137)))))))
 (let (($x26 (and $x50 $x31)))
 (let (($x76 (= $x26 true)))
 (let (($x113 (= $x76 true)))
 (let (($x33 (= $x113 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x38 true)))
 (let (($x138 (= $x120 true)))
 (let (($x130 (= $x138 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x88 (= ?x14 input.dst.llvm-%n)))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x27 (and $x93 $x97)))
 (let (($x35 (and $x27 $x107)))
 (let (($x114 (and $x35 $x130)))
 (let (($x160 (and $x114 $x33)))
 (let (($x147 (and $x160 $x182)))
 (let (($x62 (and $x147 $x94)))
 (let (($x13 (and $x62 $x8)))
 (let (($x202 (and $x13 $x201)))
 (let (($x218 (and $x202 $x212)))
 (let (($x246 (and $x218 $x239)))
 (let (($x284 (and $x246 $x221)))
 (let (($x286 (and $x284 $x163)))
 (let (($x267 (and $x286 $x269)))
 (let (($x258 (and $x267 $x289)))
 (let (($x58 (and $x258 $x87)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x204 (and (not $x261) $x58)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x292 (and $x185 $x204)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x142 $x292)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x95 $x255)))
 (let (($x53 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x53)))))
 (let (($x54 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x53)))))
 (let (($x274 (and $x54 $x197)))
 (let (($x216 (=> $x274 $x80)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (bvule ?x291 (_ bv3 32))))
 (let (($x262 (= $x271 true)))
 (let (($x80 (= $x262 true)))
 (let (($x297 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var671X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var671X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var670X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var670X)))
 (= $x260 false)))
 ))
 (let (($x11 (and $x46 $x297)))
 (let (($x87 (= $x11 true)))
 (let (($x263 (forall ((input.ind-%var665X (_ BitVec 32)) )(let ((?x243 (bvadd symbol.1 (bvmul input.ind-%var665X (_ bv4 32)))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x193)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x257)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var665X)))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var665X)))
 (=> $x34 (= ?x285 ?x288)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var664X (_ BitVec 32)) )(let (($x181 (and (bvule (_ bv0 32) input.ind-%var664X) (bvult input.ind-%var664X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var664X)))
 (= $x34 $x181))))
 ))
 (let (($x250 (and $x169 $x263)))
 (let (($x289 (= $x250 true)))
 (let (($x214 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var659X)))
 (=> $x34 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var658X)))
 (= $x34 false)))
 ))
 (let (($x238 (and $x242 $x214)))
 (let (($x269 (= $x238 true)))
 (let (($x275 (forall ((input.ind-%var653X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var653X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var653X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var652X)))
 (= $x260 false)))
 ))
 (let (($x20 (and $x240 $x275)))
 (let (($x163 (= $x20 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x247)))
 (let (($x251 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x158 (bvsub ?x24 ?x47)))
 (let (($x170 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x158) (bvult ?x24 ?x158))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x41)))
 (let ((?x22 ((_ extract 63 32) ?x82)))
 (let (($x56 (= (_ bv0 32) ?x22)))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x189 (and (and (and true $x63) $x56) $x170)))
 (let (($x17 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x190 (and $x17 $x189)))
 (let (($x194 (= true $x190)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x29 $x194)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x59 (= $x5 true)))
 (let (($x64 (= $x59 true)))
 (let (($x8 (= $x64 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x77 true)))
 (let (($x74 (= $x110 true)))
 (let (($x94 (= $x74 true)))
 (let (($x133 (= $x29 true)))
 (let (($x155 (= $x133 true)))
 (let (($x182 (= $x155 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x187)))
 (let ((?x73 (bvand symbol.1 (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x73)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x132 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x146 (= input.memlabel-mem--symbol.1_end ?x132)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x12 (and $x145 $x146)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x148 $x12)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x166 $x118)))
 (let (($x186 (not $x141)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (and $x16 $x99)))
 (let (($x139 (and (not $x48) $x186)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x125 $x55)))
 (let (($x149 (not $x103)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x112 $x42)))
 (let (($x124 (and (not $x7) $x149)))
 (let (($x51 (and (and (and (and (and (and $x124 $x139) $x135) $x156) $x18) $x171) $x43)))
 (let (($x157 (and $x51 $x175)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x31 (and $x81 $x157)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x44 (or (bvugt input.memlabel-mem--symbol.1_begin ?x21) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x44) (or $x37 $x137)))))))
 (let (($x26 (and $x50 $x31)))
 (let (($x76 (= $x26 true)))
 (let (($x113 (= $x76 true)))
 (let (($x33 (= $x113 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x38 true)))
 (let (($x138 (= $x120 true)))
 (let (($x130 (= $x138 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x88 (= ?x14 input.dst.llvm-%n)))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x27 (and $x93 $x97)))
 (let (($x35 (and $x27 $x107)))
 (let (($x114 (and $x35 $x130)))
 (let (($x160 (and $x114 $x33)))
 (let (($x147 (and $x160 $x182)))
 (let (($x62 (and $x147 $x94)))
 (let (($x13 (and $x62 $x8)))
 (let (($x202 (and $x13 $x201)))
 (let (($x218 (and $x202 $x212)))
 (let (($x246 (and $x218 $x239)))
 (let (($x284 (and $x246 $x221)))
 (let (($x286 (and $x284 $x163)))
 (let (($x267 (and $x286 $x269)))
 (let (($x258 (and $x267 $x289)))
 (let (($x58 (and $x258 $x87)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x204 (and (not $x261) $x58)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x292 (and $x185 $x204)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x142 $x292)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x95 $x255)))
 (let (($x53 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x53)))))
 (let (($x54 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x53)))))
 (let (($x274 (and $x54 $x197)))
 (let (($x216 (=> $x274 $x80)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (bvsle ?x208 (_ bv3 32))))
 (let (($x167 (= $x230 true)))
 (let (($x265 (= $x167 true)))
 (let (($x220 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x304 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x196 false)))
 ))
 (let (($x287 (and $x304 $x220)))
 (let (($x224 (= $x287 true)))
 (let (($x205 (forall ((input.ind-%var689X (_ BitVec 32)) )(let ((?x217 (bvadd symbol.1 (bvmul input.ind-%var689X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x209)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x232)))
 (let ((?x207 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var689X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x270 (= ?x207 ?x79)))))))))
 ))
 (let (($x292 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var688X) (bvult input.ind-%var688X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x270 $x58))))
 ))
 (let (($x252 (and $x292 $x205)))
 (let (($x219 (= $x252 true)))
 (let (($x257 (forall ((input.ind-%var683X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var683X)))
 (=> $x270 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var683X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var682X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var682X)))
 (= $x270 false)))
 ))
 (let (($x288 (and $x243 $x257)))
 (let (($x294 (= $x288 true)))
 (let (($x238 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var677X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var677X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var676X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var676X)))
 (= $x196 false)))
 ))
 (let (($x269 (and $x20 $x238)))
 (let (($x267 (= $x269 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x248)))
 (let (($x159 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x153 (bvsub ?x24 ?x47)))
 (let (($x115 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x153) (bvult ?x24 ?x153))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x41)))
 (let ((?x22 ((_ extract 63 32) ?x82)))
 (let (($x56 (= (_ bv0 32) ?x22)))
 (let (($x168 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x190 (and (and (and true $x168) $x56) $x115)))
 (let (($x151 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x194 (and $x151 $x190)))
 (let (($x198 (= true $x194)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x199 (=> $x29 $x198)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x64 (= $x59 true)))
 (let (($x8 (= $x64 true)))
 (let (($x13 (= $x8 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x74 (= $x110 true)))
 (let (($x94 (= $x74 true)))
 (let (($x62 (= $x94 true)))
 (let (($x155 (= $x29 true)))
 (let (($x182 (= $x155 true)))
 (let (($x147 (= $x182 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x171)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x134)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x145 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x145)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x132 (and $x72 $x144)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x156 $x132)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x166 $x118)))
 (let (($x186 (not $x141)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x99 $x48)))
 (let (($x176 (and (not $x161) $x186)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x125 $x55)))
 (let (($x149 (not $x103)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x42 $x7)))
 (let (($x16 (and (not $x183) $x149)))
 (let (($x157 (and (and (and (and (and (and $x16 $x176) $x135) $x126) $x146) $x18) $x165)))
 (let (($x31 (and $x157 $x78)))
 (let (($x131 (= symbol.1 dst_symbol_addr.1)))
 (let (($x26 (and $x131 $x31)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x96) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x180 $x173)))))))
 (let (($x76 (and $x112 $x26)))
 (let (($x113 (= $x76 true)))
 (let (($x33 (= $x113 true)))
 (let (($x160 (= $x33 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x38 true)))
 (let (($x138 (= $x120 true)))
 (let (($x130 (= $x138 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x88 (= ?x14 input.dst.llvm-%n)))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x27 (and $x93 $x97)))
 (let (($x35 (and $x27 $x107)))
 (let (($x114 (and $x35 $x130)))
 (let (($x133 (and $x114 $x160)))
 (let (($x77 (and $x133 $x147)))
 (let (($x5 (and $x77 $x62)))
 (let (($x184 (and $x5 $x13)))
 (let (($x203 (and $x184 $x202)))
 (let (($x235 (and $x203 $x218)))
 (let (($x247 (and $x235 $x246)))
 (let (($x300 (and $x247 $x284)))
 (let (($x293 (and $x300 $x267)))
 (let (($x280 (and $x293 $x294)))
 (let (($x236 (and $x280 $x219)))
 (let (($x225 (and $x236 $x224)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and (not $x237) $x225)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x283 $x266)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x6 $x108)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x227 (and $x111 $x233)))
 (let (($x70 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x15 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x70)))))
 (let (($x229 (and $x15 $x227)))
 (let (($x89 (=> $x229 $x265)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (bvsle ?x208 (_ bv3 32))))
 (let (($x167 (= $x230 true)))
 (let (($x265 (= $x167 true)))
 (let (($x220 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x304 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x196 false)))
 ))
 (let (($x287 (and $x304 $x220)))
 (let (($x224 (= $x287 true)))
 (let (($x205 (forall ((input.ind-%var689X (_ BitVec 32)) )(let ((?x217 (bvadd symbol.1 (bvmul input.ind-%var689X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x209)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x232)))
 (let ((?x207 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var689X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x270 (= ?x207 ?x79)))))))))
 ))
 (let (($x292 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var688X) (bvult input.ind-%var688X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x270 $x58))))
 ))
 (let (($x252 (and $x292 $x205)))
 (let (($x219 (= $x252 true)))
 (let (($x257 (forall ((input.ind-%var683X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var683X)))
 (=> $x270 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var683X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var682X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var682X)))
 (= $x270 false)))
 ))
 (let (($x288 (and $x243 $x257)))
 (let (($x294 (= $x288 true)))
 (let (($x238 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var677X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var677X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var676X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var676X)))
 (= $x196 false)))
 ))
 (let (($x269 (and $x20 $x238)))
 (let (($x267 (= $x269 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x248)))
 (let (($x159 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x153 (bvsub ?x24 ?x47)))
 (let (($x115 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x153) (bvult ?x24 ?x153))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x41)))
 (let ((?x22 ((_ extract 63 32) ?x82)))
 (let (($x56 (= (_ bv0 32) ?x22)))
 (let (($x168 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x190 (and (and (and true $x168) $x56) $x115)))
 (let (($x151 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x194 (and $x151 $x190)))
 (let (($x198 (= true $x194)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x199 (=> $x29 $x198)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x64 (= $x59 true)))
 (let (($x8 (= $x64 true)))
 (let (($x13 (= $x8 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x74 (= $x110 true)))
 (let (($x94 (= $x74 true)))
 (let (($x62 (= $x94 true)))
 (let (($x155 (= $x29 true)))
 (let (($x182 (= $x155 true)))
 (let (($x147 (= $x182 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x171)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x134)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x145 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x145)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x132 (and $x72 $x144)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x156 $x132)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x166 $x118)))
 (let (($x186 (not $x141)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x99 $x48)))
 (let (($x176 (and (not $x161) $x186)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x125 $x55)))
 (let (($x149 (not $x103)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x42 $x7)))
 (let (($x16 (and (not $x183) $x149)))
 (let (($x157 (and (and (and (and (and (and $x16 $x176) $x135) $x126) $x146) $x18) $x165)))
 (let (($x31 (and $x157 $x78)))
 (let (($x131 (= symbol.1 dst_symbol_addr.1)))
 (let (($x26 (and $x131 $x31)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x96) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x180 $x173)))))))
 (let (($x76 (and $x112 $x26)))
 (let (($x113 (= $x76 true)))
 (let (($x33 (= $x113 true)))
 (let (($x160 (= $x33 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x38 true)))
 (let (($x138 (= $x120 true)))
 (let (($x130 (= $x138 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x88 (= ?x14 input.dst.llvm-%n)))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x27 (and $x93 $x97)))
 (let (($x35 (and $x27 $x107)))
 (let (($x114 (and $x35 $x130)))
 (let (($x133 (and $x114 $x160)))
 (let (($x77 (and $x133 $x147)))
 (let (($x5 (and $x77 $x62)))
 (let (($x184 (and $x5 $x13)))
 (let (($x203 (and $x184 $x202)))
 (let (($x235 (and $x203 $x218)))
 (let (($x247 (and $x235 $x246)))
 (let (($x300 (and $x247 $x284)))
 (let (($x293 (and $x300 $x267)))
 (let (($x280 (and $x293 $x294)))
 (let (($x236 (and $x280 $x219)))
 (let (($x225 (and $x236 $x224)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and (not $x237) $x225)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x283 $x266)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x6 $x108)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x227 (and $x111 $x233)))
 (let (($x70 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x15 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x70)))))
 (let (($x229 (and $x15 $x227)))
 (let (($x89 (=> $x229 $x265)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (bvsge ?x197 (_ bv0 32))))
 (let (($x268 (= $x223 true)))
 (let (($x254 (= $x268 true)))
 (let (($x66 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var719X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var719X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var718X)))
 (= $x276 false)))
 ))
 (let (($x282 (and $x28 $x66)))
 (let (($x286 (= $x282 true)))
 (let (($x295 (forall ((input.ind-%var713X (_ BitVec 32)) )(let ((?x274 (bvadd symbol.1 (bvmul input.ind-%var713X (_ bv4 32)))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x274))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv2 32))) ?x289)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv3 32))) ?x181)))
 (let ((?x253 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var713X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var713X)))
 (=> $x204 (= ?x253 ?x296)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var712X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var712X) (bvult input.ind-%var712X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var712X)))
 (= $x204 $x225))))
 ))
 (let (($x61 (and $x108 $x295)))
 (let (($x213 (= $x61 true)))
 (let (($x232 (forall ((input.ind-%var707X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var707X)))
 (=> $x204 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var707X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var706X)))
 (= $x204 false)))
 ))
 (let (($x79 (and $x217 $x232)))
 (let (($x301 (= $x79 true)))
 (let (($x288 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x276 false)))
 ))
 (let (($x294 (and $x269 $x288)))
 (let (($x280 (= $x294 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x251)))
 (let (($x221 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x189 (bvsub ?x24 ?x47)))
 (let (($x140 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x189) (bvult ?x24 ?x189))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x41)))
 (let ((?x22 ((_ extract 63 32) ?x82)))
 (let (($x56 (= (_ bv0 32) ?x22)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x194 (and (and (and true $x170) $x56) $x140)))
 (let (($x164 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x198 (and $x164 $x194)))
 (let (($x199 (= true $x198)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (=> $x29 $x199)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x8 (= $x64 true)))
 (let (($x13 (= $x8 true)))
 (let (($x184 (= $x13 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x94 (= $x74 true)))
 (let (($x62 (= $x94 true)))
 (let (($x5 (= $x62 true)))
 (let (($x182 (= $x29 true)))
 (let (($x147 (= $x182 true)))
 (let (($x77 (= $x147 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x18)))
 (let ((?x187 (bvand symbol.1 (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x187)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x72 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x148 (= input.memlabel-mem--symbol.1_end ?x72)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x51 $x148)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x126 $x145)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x166 $x118)))
 (let (($x186 (not $x141)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x48 $x161)))
 (let (($x73 (and (not $x139) $x186)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x125 $x55)))
 (let (($x149 (not $x103)))
 (let (($x183 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x7 $x183)))
 (let (($x99 (and (not $x124) $x149)))
 (let (($x31 (and (and (and (and (and (and $x99 $x73) $x135) $x162) $x144) $x146) $x12)))
 (let (($x26 (and $x31 $x175)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x76 (and $x81 $x26)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x174 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x174) (or $x85 $x117)))))))
 (let (($x113 (and $x42 $x76)))
 (let (($x33 (= $x113 true)))
 (let (($x160 (= $x33 true)))
 (let (($x133 (= $x160 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x38 true)))
 (let (($x138 (= $x120 true)))
 (let (($x130 (= $x138 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x88 (= ?x14 input.dst.llvm-%n)))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x27 (and $x93 $x97)))
 (let (($x35 (and $x27 $x107)))
 (let (($x114 (and $x35 $x130)))
 (let (($x155 (and $x114 $x133)))
 (let (($x110 (and $x155 $x77)))
 (let (($x59 (and $x110 $x5)))
 (let (($x129 (and $x59 $x184)))
 (let (($x211 (and $x129 $x203)))
 (let (($x245 (and $x211 $x235)))
 (let (($x248 (and $x245 $x247)))
 (let (($x240 (and $x248 $x300)))
 (let (($x87 (and $x240 $x280)))
 (let (($x178 (and $x87 $x301)))
 (let (($x216 (and $x178 $x213)))
 (let (($x192 (and $x216 $x286)))
 (let (($x195 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and (not $x195) $x192)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x261 $x297)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x277 $x69)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x91 $x278)))
 (let (($x54 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x54)))))
 (let (($x49 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x54)))))
 (let (($x306 (and $x49 $x83)))
 (let (($x191 (=> $x306 $x254)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (bvsge ?x197 (_ bv0 32))))
 (let (($x268 (= $x223 true)))
 (let (($x254 (= $x268 true)))
 (let (($x66 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var719X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var719X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var718X)))
 (= $x276 false)))
 ))
 (let (($x282 (and $x28 $x66)))
 (let (($x286 (= $x282 true)))
 (let (($x295 (forall ((input.ind-%var713X (_ BitVec 32)) )(let ((?x274 (bvadd symbol.1 (bvmul input.ind-%var713X (_ bv4 32)))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x274))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv2 32))) ?x289)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv3 32))) ?x181)))
 (let ((?x253 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var713X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var713X)))
 (=> $x204 (= ?x253 ?x296)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var712X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var712X) (bvult input.ind-%var712X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var712X)))
 (= $x204 $x225))))
 ))
 (let (($x61 (and $x108 $x295)))
 (let (($x213 (= $x61 true)))
 (let (($x232 (forall ((input.ind-%var707X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var707X)))
 (=> $x204 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var707X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var706X)))
 (= $x204 false)))
 ))
 (let (($x79 (and $x217 $x232)))
 (let (($x301 (= $x79 true)))
 (let (($x288 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x276 false)))
 ))
 (let (($x294 (and $x269 $x288)))
 (let (($x280 (= $x294 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x251)))
 (let (($x221 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x189 (bvsub ?x24 ?x47)))
 (let (($x140 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x189) (bvult ?x24 ?x189))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x41)))
 (let ((?x22 ((_ extract 63 32) ?x82)))
 (let (($x56 (= (_ bv0 32) ?x22)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x194 (and (and (and true $x170) $x56) $x140)))
 (let (($x164 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x198 (and $x164 $x194)))
 (let (($x199 (= true $x198)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (=> $x29 $x199)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x8 (= $x64 true)))
 (let (($x13 (= $x8 true)))
 (let (($x184 (= $x13 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x94 (= $x74 true)))
 (let (($x62 (= $x94 true)))
 (let (($x5 (= $x62 true)))
 (let (($x182 (= $x29 true)))
 (let (($x147 (= $x182 true)))
 (let (($x77 (= $x147 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x18)))
 (let ((?x187 (bvand symbol.1 (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x187)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x72 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x148 (= input.memlabel-mem--symbol.1_end ?x72)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x51 $x148)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x126 $x145)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x166 $x118)))
 (let (($x186 (not $x141)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x48 $x161)))
 (let (($x73 (and (not $x139) $x186)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x125 $x55)))
 (let (($x149 (not $x103)))
 (let (($x183 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x7 $x183)))
 (let (($x99 (and (not $x124) $x149)))
 (let (($x31 (and (and (and (and (and (and $x99 $x73) $x135) $x162) $x144) $x146) $x12)))
 (let (($x26 (and $x31 $x175)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x76 (and $x81 $x26)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x174 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x174) (or $x85 $x117)))))))
 (let (($x113 (and $x42 $x76)))
 (let (($x33 (= $x113 true)))
 (let (($x160 (= $x33 true)))
 (let (($x133 (= $x160 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x38 true)))
 (let (($x138 (= $x120 true)))
 (let (($x130 (= $x138 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x88 (= ?x14 input.dst.llvm-%n)))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x27 (and $x93 $x97)))
 (let (($x35 (and $x27 $x107)))
 (let (($x114 (and $x35 $x130)))
 (let (($x155 (and $x114 $x133)))
 (let (($x110 (and $x155 $x77)))
 (let (($x59 (and $x110 $x5)))
 (let (($x129 (and $x59 $x184)))
 (let (($x211 (and $x129 $x203)))
 (let (($x245 (and $x211 $x235)))
 (let (($x248 (and $x245 $x247)))
 (let (($x240 (and $x248 $x300)))
 (let (($x87 (and $x240 $x280)))
 (let (($x178 (and $x87 $x301)))
 (let (($x216 (and $x178 $x213)))
 (let (($x192 (and $x216 $x286)))
 (let (($x195 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and (not $x195) $x192)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x261 $x297)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x277 $x69)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x91 $x278)))
 (let (($x54 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x54)))))
 (let (($x49 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x54)))))
 (let (($x306 (and $x49 $x83)))
 (let (($x191 (=> $x306 $x254)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (bvule ?x227 input.dst.llvm-%n)))
 (let (($x46 (= $x172 true)))
 (let (($x285 (= $x46 true)))
 (let (($x40 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x215 false)))
 ))
 (let (($x291 (and $x250 $x40)))
 (let (($x293 (= $x291 true)))
 (let (($x92 (forall ((input.ind-%var737X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var737X (_ bv4 32)))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x219)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x58)))
 (let ((?x258 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var737X)))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var737X)))
 (=> $x266 (= ?x258 ?x242)))))))))
 ))
 (let (($x69 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x192 (and (bvule (_ bv0 32) input.ind-%var736X) (bvult input.ind-%var736X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var736X)))
 (= $x266 $x192))))
 ))
 (let (($x302 (and $x69 $x92)))
 (let (($x119 (= $x302 true)))
 (let (($x181 (forall ((input.ind-%var731X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var731X)))
 (=> $x266 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var731X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var730X)))
 (= $x266 false)))
 ))
 (let (($x296 (and $x274 $x181)))
 (let (($x298 (= $x296 true)))
 (let (($x79 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var725X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x215 false)))
 ))
 (let (($x301 (and $x294 $x79)))
 (let (($x178 (= $x301 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x284 (= ?x14 input.dst.llvm-%n)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x246)))
 (let (($x248 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x41 (bvsub ?x24 ?x47)))
 (let (($x190 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x41) (bvult ?x24 ?x41))))
 (let ((?x168 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x168)))
 (let ((?x115 ((_ extract 63 32) ?x170)))
 (let (($x9 (= (_ bv0 32) ?x115)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x153 (and (and (and true $x179) $x9) $x190)))
 (let (($x129 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x158 (and $x129 $x153)))
 (let (($x140 (= true $x158)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x29 $x140)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x5 (= $x62 true)))
 (let (($x59 (= $x5 true)))
 (let (($x64 (= $x59 true)))
 (let (($x147 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x77 (= $x147 true)))
 (let (($x110 (= $x77 true)))
 (let (($x74 (= $x110 true)))
 (let (($x160 (= $x29 true)))
 (let (($x133 (= $x160 true)))
 (let (($x155 (= $x133 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x145)))
 (let ((?x72 (bvand symbol.1 (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x72)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x43 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x162 (= input.memlabel-mem--symbol.1_end ?x43)))
 (let (($x135 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x135 $x162)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x134 $x157)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x48 $x161)))
 (let (($x176 (not $x139)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (and $x103 $x149)))
 (let (($x118 (and (not $x99) $x176)))
 (let (($x183 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x7 $x183)))
 (let (($x16 (not $x124)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x42 $x45)))
 (let (($x55 (and (not $x81) $x16)))
 (let (($x12 (and (and (and (and (and (and $x55 $x118) $x141) $x73) $x126) $x156) $x148)))
 (let (($x31 (and $x12 $x144)))
 (let (($x130 (= symbol.1 dst_symbol_addr.1)))
 (let (($x18 (and $x130 $x31)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x44) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x137 $x85)))))))
 (let (($x175 (and $x98 $x18)))
 (let (($x26 (= $x175 true)))
 (let (($x76 (= $x26 true)))
 (let (($x113 (= $x76 true)))
 (let (($x104 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let (($x35 (= $x107 true)))
 (let (($x88 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x27 (= $x97 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x90 (and $x93 $x27)))
 (let (($x38 (and $x90 $x35)))
 (let (($x33 (and $x38 $x113)))
 (let (($x182 (and $x33 $x155)))
 (let (($x94 (and $x182 $x74)))
 (let (($x8 (and $x94 $x64)))
 (let (($x201 (and $x8 $x200)))
 (let (($x212 (and $x201 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x221 (and $x239 $x159)))
 (let (($x20 (and $x221 $x240)))
 (let (($x224 (and $x20 $x178)))
 (let (($x150 (and $x224 $x298)))
 (let (($x89 (and $x150 $x119)))
 (let (($x264 (and $x89 $x293)))
 (let (($x101 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x220 (and (not $x101) $x264)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x237 $x220)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x185 $x234)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x188 (and $x142 $x290)))
 (let (($x15 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x91 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x15)))))
 (let (($x57 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x15)))))
 (let (($x67 (and $x57 $x188)))
 (let (($x75 (=> $x67 $x285)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (bvule ?x227 input.dst.llvm-%n)))
 (let (($x46 (= $x172 true)))
 (let (($x285 (= $x46 true)))
 (let (($x40 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x215 false)))
 ))
 (let (($x291 (and $x250 $x40)))
 (let (($x293 (= $x291 true)))
 (let (($x92 (forall ((input.ind-%var737X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var737X (_ bv4 32)))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x219)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x58)))
 (let ((?x258 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var737X)))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var737X)))
 (=> $x266 (= ?x258 ?x242)))))))))
 ))
 (let (($x69 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x192 (and (bvule (_ bv0 32) input.ind-%var736X) (bvult input.ind-%var736X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var736X)))
 (= $x266 $x192))))
 ))
 (let (($x302 (and $x69 $x92)))
 (let (($x119 (= $x302 true)))
 (let (($x181 (forall ((input.ind-%var731X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var731X)))
 (=> $x266 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var731X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var730X)))
 (= $x266 false)))
 ))
 (let (($x296 (and $x274 $x181)))
 (let (($x298 (= $x296 true)))
 (let (($x79 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var725X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x215 false)))
 ))
 (let (($x301 (and $x294 $x79)))
 (let (($x178 (= $x301 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x105)))
 (let (($x284 (= ?x14 input.dst.llvm-%n)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x246)))
 (let (($x248 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x41 (bvsub ?x24 ?x47)))
 (let (($x190 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x41) (bvult ?x24 ?x41))))
 (let ((?x168 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x168)))
 (let ((?x115 ((_ extract 63 32) ?x170)))
 (let (($x9 (= (_ bv0 32) ?x115)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x153 (and (and (and true $x179) $x9) $x190)))
 (let (($x129 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x158 (and $x129 $x153)))
 (let (($x140 (= true $x158)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x29 $x140)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x5 (= $x62 true)))
 (let (($x59 (= $x5 true)))
 (let (($x64 (= $x59 true)))
 (let (($x147 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x77 (= $x147 true)))
 (let (($x110 (= $x77 true)))
 (let (($x74 (= $x110 true)))
 (let (($x160 (= $x29 true)))
 (let (($x133 (= $x160 true)))
 (let (($x155 (= $x133 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x145)))
 (let ((?x72 (bvand symbol.1 (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x72)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x43 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x162 (= input.memlabel-mem--symbol.1_end ?x43)))
 (let (($x135 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x135 $x162)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x134 $x157)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x48 $x161)))
 (let (($x176 (not $x139)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (and $x103 $x149)))
 (let (($x118 (and (not $x99) $x176)))
 (let (($x183 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x7 $x183)))
 (let (($x16 (not $x124)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x42 $x45)))
 (let (($x55 (and (not $x81) $x16)))
 (let (($x12 (and (and (and (and (and (and $x55 $x118) $x141) $x73) $x126) $x156) $x148)))
 (let (($x31 (and $x12 $x144)))
 (let (($x130 (= symbol.1 dst_symbol_addr.1)))
 (let (($x18 (and $x130 $x31)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x44) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x137 $x85)))))))
 (let (($x175 (and $x98 $x18)))
 (let (($x26 (= $x175 true)))
 (let (($x76 (= $x26 true)))
 (let (($x113 (= $x76 true)))
 (let (($x104 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x127 (= $x104 true)))
 (let (($x107 (= $x127 true)))
 (let (($x35 (= $x107 true)))
 (let (($x88 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x106 (= $x88 true)))
 (let (($x97 (= $x106 true)))
 (let (($x27 (= $x97 true)))
 (let (($x136 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x93 (and $x128 $x154)))
 (let (($x90 (and $x93 $x27)))
 (let (($x38 (and $x90 $x35)))
 (let (($x33 (and $x38 $x113)))
 (let (($x182 (and $x33 $x155)))
 (let (($x94 (and $x182 $x74)))
 (let (($x8 (and $x94 $x64)))
 (let (($x201 (and $x8 $x200)))
 (let (($x212 (and $x201 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x221 (and $x239 $x159)))
 (let (($x20 (and $x221 $x240)))
 (let (($x224 (and $x20 $x178)))
 (let (($x150 (and $x224 $x298)))
 (let (($x89 (and $x150 $x119)))
 (let (($x264 (and $x89 $x293)))
 (let (($x101 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x220 (and (not $x101) $x264)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x237 $x220)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x185 $x234)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x188 (and $x142 $x290)))
 (let (($x15 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x91 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x15)))))
 (let (($x57 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x15)))))
 (let (($x67 (and $x57 $x188)))
 (let (($x75 (=> $x67 $x285)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x356 (forall ((input.ind-%var779X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var779X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x15 (bvadd ?x24 (_ bv3 32))))
 (let ((?x323 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x326 (store ?x323 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (store ?x326 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x329 ?x15 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (concat (select ?x331 (bvadd ?x306 (_ bv2 32))) (concat (select ?x331 (bvadd ?x306 (_ bv1 32))) (select ?x331 ?x306)))))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var779X)))
 (let (($x311 (= input.ind-%var779X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x354 (= (ite $x311 input.spec-%var-i-0.L3%6%bbentry ?x236) (concat (select ?x331 (bvadd ?x306 (_ bv3 32))) ?x350))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (let (($x312 (or $x297 $x311)))
 (=> $x312 $x354))))))))))))))))
 ))
 (let (($x314 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var778X)))
 (let (($x310 (and $x293 (bvult input.ind-%var778X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x311 (= input.ind-%var778X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var778X)))
 (let (($x312 (or $x297 $x311)))
 (= $x312 $x310)))))))
 ))
 (let (($x357 (and $x314 $x356)))
 (let (($x83 (= true true)))
 (let (($x358 (and $x83 $x357)))
 (let (($x359 (= $x358 true)))
 (let (($x231 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var771X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var771X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var770X)))
 (= $x256 false)))
 ))
 (let (($x208 (and $x252 $x231)))
 (let (($x87 (= $x208 true)))
 (let (($x273 (forall ((input.ind-%var765X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var765X (_ bv4 32)))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x306))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv2 32))) ?x213)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv3 32))) ?x225)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var765X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var765X)))
 (=> $x297 (= ?x236 ?x243)))))))))
 ))
 (let (($x234 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var764X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var764X)))
 (= $x297 (and $x293 (bvult input.ind-%var764X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x206 (and $x234 $x273)))
 (let (($x281 (= $x206 true)))
 (let (($x58 (forall ((input.ind-%var759X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var759X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var759X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var758X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var758X)))
 (= $x297 false)))
 ))
 (let (($x242 (and $x229 $x58)))
 (let (($x163 (= $x242 true)))
 (let (($x296 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var753X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var753X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var752X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var752X)))
 (= $x256 false)))
 ))
 (let (($x298 (and $x301 $x296)))
 (let (($x150 (= $x298 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x284 (bvneg ?x221)))
 (let (($x300 (= ?x284 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let ((?x200 (bvand symbol.1 (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x200)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x158 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (and $x56 $x158)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x22 $x140)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (and $x121 $x63)))
 (let (($x170 (not $x168)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x164 $x60)))
 (let (($x9 (and (not $x179) $x170)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x8 $x13)))
 (let (($x129 (not $x184)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x5 $x59)))
 (let (($x17 (and (not $x64) $x129)))
 (let (($x245 (and (and (and (and (and (and $x17 $x9) $x189) $x41) $x194) $x199) $x201)))
 (let (($x226 (and $x245 $x203)))
 (let (($x144 (= symbol.1 dst_symbol_addr.1)))
 (let (($x239 (and $x144 $x226)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x113 (or (bvugt input.memlabel-mem--symbol.1_begin ?x175) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x113) (or $x155 $x182)))))))
 (let (($x246 (and $x62 $x239)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x156 (= $x51 true)))
 (let (($x187 (= $x156 true)))
 (let (($x72 (= $x187 true)))
 (let (($x43 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x162 (= $x43 true)))
 (let (($x157 (= $x162 true)))
 (let (($x126 (= $x157 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x73 true)))
 (let (($x134 (= $x146 true)))
 (let (($x135 (= $x134 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (= $x118 true)))
 (let (($x141 (= $x171 true)))
 (let (($x132 (= $x141 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x81 (bvsub ?x24 ?x47)))
 (let (($x124 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x81) (bvult ?x24 ?x81))))
 (let ((?x138 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvmul (_ bv4 64) ?x138)))
 (let ((?x42 ((_ extract 63 32) ?x130)))
 (let (($x45 (= (_ bv0 32) ?x42)))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x32) $x45) $x124)))
 (let (($x180 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x149 (and $x180 $x103)))
 (let (($x99 (= true $x149)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x230 $x99)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let (($x139 (= $x161 true)))
 (let (($x44 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x131 (= $x44 true)))
 (let (($x177 (= $x131 true)))
 (let (($x52 (= $x177 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x38 (= $x35 true)))
 (let (($x114 (= $x38 true)))
 (let (($x96 (= $x114 true)))
 (let (($x27 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x90 (= $x27 true)))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x93 (= $x230 true)))
 (let (($x88 (= $x93 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x97 (and $x154 $x106)))
 (let (($x107 (and $x97 $x127)))
 (let (($x112 (and $x107 $x96)))
 (let (($x37 (and $x112 $x52)))
 (let (($x176 (and $x37 $x139)))
 (let (($x186 (and $x176 $x132)))
 (let (($x165 (and $x186 $x135)))
 (let (($x78 (and $x165 $x126)))
 (let (($x148 (and $x78 $x72)))
 (let (($x159 (and $x148 $x251)))
 (let (($x269 (and $x159 $x20)))
 (let (($x286 (and $x269 $x150)))
 (let (($x169 (and $x286 $x163)))
 (let (($x191 (and $x169 $x281)))
 (let (($x241 (and $x191 $x87)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x228) $x241)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x195 $x66)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x263 (and $x283 $x80)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x6 $x263)))
 (let (($x49 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x142 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x49)))))
 (let (($x100 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x49)))))
 (let (($x34 (and $x100 $x249)))
 (let (($x360 (=> $x34 $x359)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x356 (forall ((input.ind-%var779X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var779X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x15 (bvadd ?x24 (_ bv3 32))))
 (let ((?x323 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x326 (store ?x323 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (store ?x326 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x329 ?x15 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (concat (select ?x331 (bvadd ?x306 (_ bv2 32))) (concat (select ?x331 (bvadd ?x306 (_ bv1 32))) (select ?x331 ?x306)))))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var779X)))
 (let (($x311 (= input.ind-%var779X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x354 (= (ite $x311 input.spec-%var-i-0.L3%6%bbentry ?x236) (concat (select ?x331 (bvadd ?x306 (_ bv3 32))) ?x350))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (let (($x312 (or $x297 $x311)))
 (=> $x312 $x354))))))))))))))))
 ))
 (let (($x314 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var778X)))
 (let (($x310 (and $x293 (bvult input.ind-%var778X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x311 (= input.ind-%var778X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var778X)))
 (let (($x312 (or $x297 $x311)))
 (= $x312 $x310)))))))
 ))
 (let (($x357 (and $x314 $x356)))
 (let (($x83 (= true true)))
 (let (($x358 (and $x83 $x357)))
 (let (($x359 (= $x358 true)))
 (let (($x231 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var771X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var771X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var770X)))
 (= $x256 false)))
 ))
 (let (($x208 (and $x252 $x231)))
 (let (($x87 (= $x208 true)))
 (let (($x273 (forall ((input.ind-%var765X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var765X (_ bv4 32)))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x306))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv2 32))) ?x213)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv3 32))) ?x225)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var765X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var765X)))
 (=> $x297 (= ?x236 ?x243)))))))))
 ))
 (let (($x234 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var764X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var764X)))
 (= $x297 (and $x293 (bvult input.ind-%var764X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x206 (and $x234 $x273)))
 (let (($x281 (= $x206 true)))
 (let (($x58 (forall ((input.ind-%var759X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var759X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var759X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var758X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var758X)))
 (= $x297 false)))
 ))
 (let (($x242 (and $x229 $x58)))
 (let (($x163 (= $x242 true)))
 (let (($x296 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var753X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var753X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var752X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var752X)))
 (= $x256 false)))
 ))
 (let (($x298 (and $x301 $x296)))
 (let (($x150 (= $x298 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x284 (bvneg ?x221)))
 (let (($x300 (= ?x284 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let ((?x200 (bvand symbol.1 (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x200)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x158 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (and $x56 $x158)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x22 $x140)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (and $x121 $x63)))
 (let (($x170 (not $x168)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x164 $x60)))
 (let (($x9 (and (not $x179) $x170)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x8 $x13)))
 (let (($x129 (not $x184)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x5 $x59)))
 (let (($x17 (and (not $x64) $x129)))
 (let (($x245 (and (and (and (and (and (and $x17 $x9) $x189) $x41) $x194) $x199) $x201)))
 (let (($x226 (and $x245 $x203)))
 (let (($x144 (= symbol.1 dst_symbol_addr.1)))
 (let (($x239 (and $x144 $x226)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x113 (or (bvugt input.memlabel-mem--symbol.1_begin ?x175) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x113) (or $x155 $x182)))))))
 (let (($x246 (and $x62 $x239)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x156 (= $x51 true)))
 (let (($x187 (= $x156 true)))
 (let (($x72 (= $x187 true)))
 (let (($x43 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x162 (= $x43 true)))
 (let (($x157 (= $x162 true)))
 (let (($x126 (= $x157 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x73 true)))
 (let (($x134 (= $x146 true)))
 (let (($x135 (= $x134 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (= $x118 true)))
 (let (($x141 (= $x171 true)))
 (let (($x132 (= $x141 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x81 (bvsub ?x24 ?x47)))
 (let (($x124 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x81) (bvult ?x24 ?x81))))
 (let ((?x138 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvmul (_ bv4 64) ?x138)))
 (let ((?x42 ((_ extract 63 32) ?x130)))
 (let (($x45 (= (_ bv0 32) ?x42)))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x32) $x45) $x124)))
 (let (($x180 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x149 (and $x180 $x103)))
 (let (($x99 (= true $x149)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x230 $x99)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let (($x139 (= $x161 true)))
 (let (($x44 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x131 (= $x44 true)))
 (let (($x177 (= $x131 true)))
 (let (($x52 (= $x177 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x38 (= $x35 true)))
 (let (($x114 (= $x38 true)))
 (let (($x96 (= $x114 true)))
 (let (($x27 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x90 (= $x27 true)))
 (let (($x104 (= $x90 true)))
 (let (($x127 (= $x104 true)))
 (let (($x93 (= $x230 true)))
 (let (($x88 (= $x93 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x97 (and $x154 $x106)))
 (let (($x107 (and $x97 $x127)))
 (let (($x112 (and $x107 $x96)))
 (let (($x37 (and $x112 $x52)))
 (let (($x176 (and $x37 $x139)))
 (let (($x186 (and $x176 $x132)))
 (let (($x165 (and $x186 $x135)))
 (let (($x78 (and $x165 $x126)))
 (let (($x148 (and $x78 $x72)))
 (let (($x159 (and $x148 $x251)))
 (let (($x269 (and $x159 $x20)))
 (let (($x286 (and $x269 $x150)))
 (let (($x169 (and $x286 $x163)))
 (let (($x191 (and $x169 $x281)))
 (let (($x241 (and $x191 $x87)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x228) $x241)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x195 $x66)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x263 (and $x283 $x80)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x6 $x263)))
 (let (($x49 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x142 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x49)))))
 (let (($x100 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x49)))))
 (let (($x34 (and $x100 $x249)))
 (let (($x360 (=> $x34 $x359)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x259 (forall ((input.ind-%var811X (_ BitVec 32)) )(let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var811X)))
 (let (($x108 (= input.ind-%var811X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var811X)))
 (let (($x305 (or $x220 $x108)))
 (=> $x305 (= (ite $x108 input.spec-%var-i-0.L3%6%bbentry ?x225) (_ bv0 32))))))))
 ))
 (let (($x244 (forall ((input.ind-%var810X (_ BitVec 32)) )(let (($x108 (= input.ind-%var810X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var810X)))
 (let (($x305 (or $x220 $x108)))
 (= $x305 false)))))
 ))
 (let (($x279 (and $x244 $x259)))
 (let (($x282 (= true true)))
 (let (($x307 (and $x282 $x279)))
 (let (($x332 (= $x307 true)))
 (let (($x266 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var803X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var802X)))
 (= $x255 false)))
 ))
 (let (($x167 (and $x69 $x266)))
 (let (($x21 (= $x167 true)))
 (let (($x358 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x220 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x220 false)))
 ))
 (let (($x359 (and $x346 $x358)))
 (let (($x360 (= $x359 true)))
 (let (($x328 (forall ((input.ind-%var791X (_ BitVec 32)) )(let ((?x312 (bvadd symbol.1 (bvmul input.ind-%var791X (_ bv4 32)))))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x313)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x322)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var791X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var791X)))
 (=> $x220 (= ?x225 ?x325)))))))))
 ))
 (let (($x238 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var790X) (bvult input.ind-%var790X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var790X)))
 (= $x220 $x216))))
 ))
 (let (($x327 (and $x238 $x328)))
 (let (($x329 (= $x327 true)))
 (let (($x242 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var785X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var785X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var784X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var784X)))
 (= $x255 false)))
 ))
 (let (($x163 (and $x298 $x242)))
 (let (($x169 (= $x163 true)))
 (let ((?x284 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x284)))
 (let (($x240 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x199 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x235 (= $x199 true)))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x211)))
 (let ((?x170 (bvand symbol.1 (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x170)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x17 $x179)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x129 $x115)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x145 $x144)))
 (let (($x59 (not $x5)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x110 $x74)))
 (let (($x151 (and (not $x62) $x59)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x160 $x155)))
 (let (($x182 (not $x133)))
 (let (($x113 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x76 $x113)))
 (let (($x77 (and (not $x33) $x182)))
 (let (($x56 (and (and (and (and (and (and $x77 $x151) $x8) $x184) $x121) $x168) $x9)))
 (let (($x190 (and $x56 $x189)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x153 (and $x134 $x190)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x126 (or (bvugt input.memlabel-mem--symbol.1_begin ?x43) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x126) (or $x187 $x72)))))))
 (let (($x158 (and $x26 $x153)))
 (let (($x140 (= $x158 true)))
 (let (($x194 (= $x140 true)))
 (let (($x218 (= $x194 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x118 true)))
 (let (($x141 (= $x171 true)))
 (let (($x132 (= $x141 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let (($x139 (= $x161 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x45)))
 (let (($x124 (= ?x55 input.dst.llvm-%n)))
 (let (($x103 (= $x124 true)))
 (let (($x149 (= $x103 true)))
 (let (($x125 (= ?x55 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x125 true)))
 (let (($x7 (= $x81 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x177 (bvsub ?x24 ?x47)))
 (let (($x137 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x177) (bvult ?x24 ?x177))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x96)))
 (let ((?x44 ((_ extract 63 32) ?x112)))
 (let (($x131 (= (_ bv0 32) ?x44)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x85 (and (and (and true $x38) $x131) $x137)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x117 (and $x90 $x85)))
 (let (($x50 (= true $x117)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x29 $x50)))
 (let (($x16 (= $x32 true)))
 (let (($x98 (= $x16 true)))
 (let (($x138 (= $x98 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x29 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x130 (and $x106 $x138)))
 (let (($x183 (and $x130 $x7)))
 (let (($x99 (and $x183 $x149)))
 (let (($x176 (and $x99 $x139)))
 (let (($x186 (and $x176 $x132)))
 (let (($x198 (and $x186 $x218)))
 (let (($x245 (and $x198 $x201)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x159)))
 (let (($x294 (and $x221 $x269)))
 (let (($x293 (and $x294 $x169)))
 (let (($x330 (and $x293 $x329)))
 (let (($x361 (and $x330 $x360)))
 (let (($x290 (and $x361 $x21)))
 (let (($x143 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x143) $x290)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x101 $x215)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x261 $x288)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x119 (and $x277 $x92)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x6 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x36 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x89 (and $x36 $x119)))
 (let (($x333 (=> $x89 $x332)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x259 (forall ((input.ind-%var811X (_ BitVec 32)) )(let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var811X)))
 (let (($x108 (= input.ind-%var811X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var811X)))
 (let (($x305 (or $x220 $x108)))
 (=> $x305 (= (ite $x108 input.spec-%var-i-0.L3%6%bbentry ?x225) (_ bv0 32))))))))
 ))
 (let (($x244 (forall ((input.ind-%var810X (_ BitVec 32)) )(let (($x108 (= input.ind-%var810X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var810X)))
 (let (($x305 (or $x220 $x108)))
 (= $x305 false)))))
 ))
 (let (($x279 (and $x244 $x259)))
 (let (($x282 (= true true)))
 (let (($x307 (and $x282 $x279)))
 (let (($x332 (= $x307 true)))
 (let (($x266 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var803X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var802X)))
 (= $x255 false)))
 ))
 (let (($x167 (and $x69 $x266)))
 (let (($x21 (= $x167 true)))
 (let (($x358 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x220 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x220 false)))
 ))
 (let (($x359 (and $x346 $x358)))
 (let (($x360 (= $x359 true)))
 (let (($x328 (forall ((input.ind-%var791X (_ BitVec 32)) )(let ((?x312 (bvadd symbol.1 (bvmul input.ind-%var791X (_ bv4 32)))))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x313)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x322)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var791X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var791X)))
 (=> $x220 (= ?x225 ?x325)))))))))
 ))
 (let (($x238 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var790X) (bvult input.ind-%var790X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var790X)))
 (= $x220 $x216))))
 ))
 (let (($x327 (and $x238 $x328)))
 (let (($x329 (= $x327 true)))
 (let (($x242 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var785X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var785X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var784X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var784X)))
 (= $x255 false)))
 ))
 (let (($x163 (and $x298 $x242)))
 (let (($x169 (= $x163 true)))
 (let ((?x284 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x284)))
 (let (($x240 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x199 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x235 (= $x199 true)))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x211)))
 (let ((?x170 (bvand symbol.1 (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x170)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x17 $x179)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x129 $x115)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x145 $x144)))
 (let (($x59 (not $x5)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x110 $x74)))
 (let (($x151 (and (not $x62) $x59)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x160 $x155)))
 (let (($x182 (not $x133)))
 (let (($x113 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x76 $x113)))
 (let (($x77 (and (not $x33) $x182)))
 (let (($x56 (and (and (and (and (and (and $x77 $x151) $x8) $x184) $x121) $x168) $x9)))
 (let (($x190 (and $x56 $x189)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x153 (and $x134 $x190)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x126 (or (bvugt input.memlabel-mem--symbol.1_begin ?x43) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x126) (or $x187 $x72)))))))
 (let (($x158 (and $x26 $x153)))
 (let (($x140 (= $x158 true)))
 (let (($x194 (= $x140 true)))
 (let (($x218 (= $x194 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x118 true)))
 (let (($x141 (= $x171 true)))
 (let (($x132 (= $x141 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let (($x139 (= $x161 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x45)))
 (let (($x124 (= ?x55 input.dst.llvm-%n)))
 (let (($x103 (= $x124 true)))
 (let (($x149 (= $x103 true)))
 (let (($x125 (= ?x55 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x125 true)))
 (let (($x7 (= $x81 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x177 (bvsub ?x24 ?x47)))
 (let (($x137 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x177) (bvult ?x24 ?x177))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x96)))
 (let ((?x44 ((_ extract 63 32) ?x112)))
 (let (($x131 (= (_ bv0 32) ?x44)))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x85 (and (and (and true $x38) $x131) $x137)))
 (let (($x90 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x117 (and $x90 $x85)))
 (let (($x50 (= true $x117)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x29 $x50)))
 (let (($x16 (= $x32 true)))
 (let (($x98 (= $x16 true)))
 (let (($x138 (= $x98 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x93 (= $x154 true)))
 (let (($x88 (= $x93 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x29 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x106 (and $x136 $x88)))
 (let (($x130 (and $x106 $x138)))
 (let (($x183 (and $x130 $x7)))
 (let (($x99 (and $x183 $x149)))
 (let (($x176 (and $x99 $x139)))
 (let (($x186 (and $x176 $x132)))
 (let (($x198 (and $x186 $x218)))
 (let (($x245 (and $x198 $x201)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x159)))
 (let (($x294 (and $x221 $x269)))
 (let (($x293 (and $x294 $x169)))
 (let (($x330 (and $x293 $x329)))
 (let (($x361 (and $x330 $x360)))
 (let (($x290 (and $x361 $x21)))
 (let (($x143 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x143) $x290)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x101 $x215)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x261 $x288)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x119 (and $x277 $x92)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x6 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x36 (=> (and $x29 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x89 (and $x36 $x119)))
 (let (($x333 (=> $x89 $x332)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.ind-%var810X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x47048464)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2e0909f4)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2e0909f7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x470485f3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2e0909f4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x47048464)
  (define-fun symbol.1 () (_ BitVec 32)
    #x47048464)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x47048467 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x47048466 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x47048465 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x47048464 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00414184)
  (define-fun input.ind-%var810X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x0041ff40)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00414187)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x004200cf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00414184)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x0041ff40)
  (define-fun symbol.1 () (_ BitVec 32)
    #x0041ff40)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x0041ff43 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0041ff42 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0041ff41 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0041ff40 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x252 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x252)))
 (let ((?x231 (bvneg ?x281)))
 (let (($x249 (= ?x231 ?x66)))
 (let (($x348 (= $x249 true)))
 (let (($x278 (forall ((input.ind-%var864X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var864X)))
 (= $x233 false)))
 ))
 (let (($x295 (forall ((input.ind-%var865X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var865X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var865X) (_ bv0 32)))))
 ))
 (let (($x256 (and $x295 $x278)))
 (let (($x79 (= $x256 true)))
 (let (($x152 (forall ((input.ind-%var858X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var858X) (bvult input.ind-%var858X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var858X)))
 (= $x314 $x341))))
 ))
 (let (($x244 (forall ((input.ind-%var859X (_ BitVec 32)) )(let ((?x266 (bvadd symbol.1 (bvmul input.ind-%var859X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x266))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv2 32))) ?x215)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv3 32))) ?x119)))
 (let ((?x310 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var859X)))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var859X)))
 (=> $x314 (= ?x310 ?x108)))))))))
 ))
 (let (($x73 (and $x244 $x152)))
 (let (($x234 (= $x73 true)))
 (let (($x267 (forall ((input.ind-%var853X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var853X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var853X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var852X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var852X)))
 (= $x233 false)))
 ))
 (let (($x311 (and $x163 $x267)))
 (let (($x312 (= $x311 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x300)))
 (let (($x20 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x20 true)))
 (let (($x294 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x203 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let (($x245 (= $x201 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (= $x140 true)))
 (let (($x218 (= $x194 true)))
 (let (($x198 (= $x218 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x179 (bvsub ?x24 ?x47)))
 (let (($x63 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x179) (bvult ?x24 ?x179))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x129)))
 (let ((?x164 ((_ extract 63 32) ?x17)))
 (let (($x60 (= (_ bv0 32) ?x164)))
 (let (($x184 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x170 (and (and (and true $x184) $x60) $x63)))
 (let (($x151 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x9 (and $x151 $x170)))
 (let (($x56 (= true $x9)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x230 $x56)))
 (let (($x189 (= $x211 true)))
 (let (($x190 (= $x189 true)))
 (let (($x153 (= $x190 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x62 (= $x74 true)))
 (let (($x64 (= $x62 true)))
 (let (($x145 (= $x64 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x155 true)))
 (let (($x182 (= $x133 true)))
 (let (($x77 (= $x182 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x113 (= $x76 true)))
 (let (($x33 (= $x113 true)))
 (let (($x147 (= $x33 true)))
 (let (($x94 (= $x230 true)))
 (let (($x26 (= $x94 true)))
 (let (($x146 (= $x26 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x135)))
 (let ((?x132 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x132)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x139 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x166 $x139)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x99 $x176)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x125 (and $x45 $x55)))
 (let (($x81 (not $x125)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x138 $x130)))
 (let (($x183 (and (not $x42) $x81)))
 (let (($x117 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x85 $x117)))
 (let (($x32 (not $x50)))
 (let (($x174 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x37 $x174)))
 (let (($x98 (and (not $x137) $x32)))
 (let (($x78 (and (and (and (and (and (and $x98 $x183) $x124) $x149) $x118) $x141) $x186)))
 (let (($x51 (and $x78 $x165)))
 (let (($x106 (= symbol.1 dst_symbol_addr.1)))
 (let (($x187 (and $x106 $x51)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x107 (or (bvugt input.memlabel-mem--symbol.1_begin ?x90) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x107) (or $x114 $x96)))))))
 (let (($x156 (and $x177 $x187)))
 (let (($x72 (= $x156 true)))
 (let (($x148 (= $x72 true)))
 (let (($x31 (= $x148 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x18 (and $x154 $x31)))
 (let (($x134 (and $x18 $x146)))
 (let (($x160 (and $x134 $x147)))
 (let (($x110 (and $x160 $x77)))
 (let (($x144 (and $x110 $x145)))
 (let (($x158 (and $x144 $x153)))
 (let (($x199 (and $x158 $x198)))
 (let (($x202 (and $x199 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x301 (and $x284 $x294)))
 (let (($x321 (and $x301 $x312)))
 (let (($x243 (and $x321 $x234)))
 (let (($x273 (and $x243 $x79)))
 (let (($x67 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and (not $x67) $x273)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and $x228 $x80)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x237 $x263)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x241 (and $x185 $x87)))
 (let (($x100 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x277 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x100)))))
 (let (($x84 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x100)))))
 (let (($x191 (and $x84 $x241)))
 (let (($x352 (=> $x191 $x348)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x252 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x252)))
 (let ((?x231 (bvneg ?x281)))
 (let (($x249 (= ?x231 ?x66)))
 (let (($x348 (= $x249 true)))
 (let (($x278 (forall ((input.ind-%var864X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var864X)))
 (= $x233 false)))
 ))
 (let (($x295 (forall ((input.ind-%var865X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var865X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var865X) (_ bv0 32)))))
 ))
 (let (($x256 (and $x295 $x278)))
 (let (($x79 (= $x256 true)))
 (let (($x152 (forall ((input.ind-%var858X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var858X) (bvult input.ind-%var858X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var858X)))
 (= $x314 $x341))))
 ))
 (let (($x244 (forall ((input.ind-%var859X (_ BitVec 32)) )(let ((?x266 (bvadd symbol.1 (bvmul input.ind-%var859X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x266))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv2 32))) ?x215)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv3 32))) ?x119)))
 (let ((?x310 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var859X)))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var859X)))
 (=> $x314 (= ?x310 ?x108)))))))))
 ))
 (let (($x73 (and $x244 $x152)))
 (let (($x234 (= $x73 true)))
 (let (($x267 (forall ((input.ind-%var853X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var853X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var853X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var852X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var852X)))
 (= $x233 false)))
 ))
 (let (($x311 (and $x163 $x267)))
 (let (($x312 (= $x311 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x300)))
 (let (($x20 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x20 true)))
 (let (($x294 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x203 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let (($x245 (= $x201 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (= $x140 true)))
 (let (($x218 (= $x194 true)))
 (let (($x198 (= $x218 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x179 (bvsub ?x24 ?x47)))
 (let (($x63 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x179) (bvult ?x24 ?x179))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x129)))
 (let ((?x164 ((_ extract 63 32) ?x17)))
 (let (($x60 (= (_ bv0 32) ?x164)))
 (let (($x184 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x170 (and (and (and true $x184) $x60) $x63)))
 (let (($x151 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x9 (and $x151 $x170)))
 (let (($x56 (= true $x9)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x230 $x56)))
 (let (($x189 (= $x211 true)))
 (let (($x190 (= $x189 true)))
 (let (($x153 (= $x190 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x62 (= $x74 true)))
 (let (($x64 (= $x62 true)))
 (let (($x145 (= $x64 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x155 true)))
 (let (($x182 (= $x133 true)))
 (let (($x77 (= $x182 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x113 (= $x76 true)))
 (let (($x33 (= $x113 true)))
 (let (($x147 (= $x33 true)))
 (let (($x94 (= $x230 true)))
 (let (($x26 (= $x94 true)))
 (let (($x146 (= $x26 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x135)))
 (let ((?x132 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x132)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x139 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x166 $x139)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x99 $x176)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x125 (and $x45 $x55)))
 (let (($x81 (not $x125)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x138 $x130)))
 (let (($x183 (and (not $x42) $x81)))
 (let (($x117 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x85 $x117)))
 (let (($x32 (not $x50)))
 (let (($x174 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x37 $x174)))
 (let (($x98 (and (not $x137) $x32)))
 (let (($x78 (and (and (and (and (and (and $x98 $x183) $x124) $x149) $x118) $x141) $x186)))
 (let (($x51 (and $x78 $x165)))
 (let (($x106 (= symbol.1 dst_symbol_addr.1)))
 (let (($x187 (and $x106 $x51)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x107 (or (bvugt input.memlabel-mem--symbol.1_begin ?x90) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x107) (or $x114 $x96)))))))
 (let (($x156 (and $x177 $x187)))
 (let (($x72 (= $x156 true)))
 (let (($x148 (= $x72 true)))
 (let (($x31 (= $x148 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x18 (and $x154 $x31)))
 (let (($x134 (and $x18 $x146)))
 (let (($x160 (and $x134 $x147)))
 (let (($x110 (and $x160 $x77)))
 (let (($x144 (and $x110 $x145)))
 (let (($x158 (and $x144 $x153)))
 (let (($x199 (and $x158 $x198)))
 (let (($x202 (and $x199 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x301 (and $x284 $x294)))
 (let (($x321 (and $x301 $x312)))
 (let (($x243 (and $x321 $x234)))
 (let (($x273 (and $x243 $x79)))
 (let (($x67 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and (not $x67) $x273)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and $x228 $x80)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x237 $x263)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x241 (and $x185 $x87)))
 (let (($x100 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x277 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x100)))))
 (let (($x84 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x100)))))
 (let (($x191 (and $x84 $x241)))
 (let (($x352 (=> $x191 $x348)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x227 (bvule ?x360 (_ bv3 32))))
 (let (($x208 (= $x227 true)))
 (let (($x361 (= $x208 true)))
 (let (($x359 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var883X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var883X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var882X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var882X)))
 (= $x120 false)))
 ))
 (let (($x11 (and $x346 $x359)))
 (let (($x58 (= $x11 true)))
 (let (($x255 (forall ((input.ind-%var877X (_ BitVec 32)) )(let ((?x93 (bvadd symbol.1 (bvmul input.ind-%var877X (_ bv4 32)))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x93))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv2 32))) ?x254)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv3 32))) ?x220)))
 (let ((?x295 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var877X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (=> $x215 (= ?x295 ?x65)))))))))
 ))
 (let (($x152 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var876X) (bvult input.ind-%var876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var876X)))
 (= $x215 $x341))))
 ))
 (let (($x296 (and $x152 $x255)))
 (let (($x325 (= $x296 true)))
 (let (($x330 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var871X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var871X) (_ bv0 32)))))
 ))
 (let (($x311 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var870X)))
 (= $x120 false)))
 ))
 (let (($x288 (and $x311 $x330)))
 (let (($x92 (= $x288 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x240)))
 (let (($x269 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x200 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x201 (= $x200 true)))
 (let (($x245 (= $x201 true)))
 (let (($x202 (= $x245 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x63)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x121)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x41 $x164)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x168 $x60)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x144 $x5)))
 (let (($x151 (not $x59)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x62 $x64)))
 (let (($x210 (and (not $x145) $x151)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x155 $x133)))
 (let (($x77 (not $x182)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x33 $x147)))
 (let (($x74 (and (not $x160) $x77)))
 (let (($x153 (and (and (and (and (and (and $x74 $x210) $x82) $x184) $x22) $x179) $x212)))
 (let (($x158 (and $x153 $x170)))
 (let (($x132 (= symbol.1 dst_symbol_addr.1)))
 (let (($x140 (and $x132 $x158)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x187 (or (bvugt input.memlabel-mem--symbol.1_begin ?x135) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x187) (or $x31 $x18)))))))
 (let (($x194 (and $x113 $x140)))
 (let (($x218 (= $x194 true)))
 (let (($x198 (= $x218 true)))
 (let (($x199 (= $x198 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x139 true)))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (= $x162 true)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x45)))
 (let (($x124 (= ?x55 input.dst.llvm-%n)))
 (let (($x43 (= $x124 true)))
 (let (($x103 (= $x43 true)))
 (let (($x125 (= ?x55 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x125 true)))
 (let (($x183 (= $x81 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x177 (bvsub ?x24 ?x47)))
 (let (($x174 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x177) (bvult ?x24 ?x177))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x112)))
 (let ((?x131 ((_ extract 63 32) ?x44)))
 (let (($x173 (= (_ bv0 32) ?x131)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x85 (and (and (and true $x180) $x173) $x174)))
 (let (($x104 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x117 (and $x104 $x85)))
 (let (($x50 (= true $x117)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x322 $x50)))
 (let (($x98 (= $x32 true)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x322 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x52 (and $x136 $x27)))
 (let (($x42 (and $x52 $x130)))
 (let (($x175 (and $x42 $x183)))
 (let (($x149 (and $x175 $x103)))
 (let (($x161 (and $x149 $x48)))
 (let (($x171 (and $x161 $x157)))
 (let (($x235 (and $x171 $x199)))
 (let (($x203 (and $x235 $x202)))
 (let (($x248 (and $x203 $x247)))
 (let (($x300 (and $x248 $x284)))
 (let (($x298 (and $x300 $x301)))
 (let (($x21 (and $x298 $x92)))
 (let (($x324 (and $x21 $x325)))
 (let (($x216 (and $x324 $x58)))
 (let (($x206 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and (not $x206) $x216)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x143 $x279)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x307 (and $x195 $x291)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x283 $x307)))
 (let (($x36 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x185 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x95 (=> (and $x322 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x36)))))
 (let (($x287 (and $x95 $x293)))
 (let (($x150 (=> $x287 $x361)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x227 (bvule ?x360 (_ bv3 32))))
 (let (($x208 (= $x227 true)))
 (let (($x361 (= $x208 true)))
 (let (($x359 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var883X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var883X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var882X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var882X)))
 (= $x120 false)))
 ))
 (let (($x11 (and $x346 $x359)))
 (let (($x58 (= $x11 true)))
 (let (($x255 (forall ((input.ind-%var877X (_ BitVec 32)) )(let ((?x93 (bvadd symbol.1 (bvmul input.ind-%var877X (_ bv4 32)))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x93))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv2 32))) ?x254)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv3 32))) ?x220)))
 (let ((?x295 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var877X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (=> $x215 (= ?x295 ?x65)))))))))
 ))
 (let (($x152 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var876X) (bvult input.ind-%var876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var876X)))
 (= $x215 $x341))))
 ))
 (let (($x296 (and $x152 $x255)))
 (let (($x325 (= $x296 true)))
 (let (($x330 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var871X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var871X) (_ bv0 32)))))
 ))
 (let (($x311 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var870X)))
 (= $x120 false)))
 ))
 (let (($x288 (and $x311 $x330)))
 (let (($x92 (= $x288 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x240)))
 (let (($x269 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x200 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x201 (= $x200 true)))
 (let (($x245 (= $x201 true)))
 (let (($x202 (= $x245 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x63)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x121)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x41 $x164)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x168 $x60)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x144 $x5)))
 (let (($x151 (not $x59)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x62 $x64)))
 (let (($x210 (and (not $x145) $x151)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x155 $x133)))
 (let (($x77 (not $x182)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x33 $x147)))
 (let (($x74 (and (not $x160) $x77)))
 (let (($x153 (and (and (and (and (and (and $x74 $x210) $x82) $x184) $x22) $x179) $x212)))
 (let (($x158 (and $x153 $x170)))
 (let (($x132 (= symbol.1 dst_symbol_addr.1)))
 (let (($x140 (and $x132 $x158)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x187 (or (bvugt input.memlabel-mem--symbol.1_begin ?x135) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x187) (or $x31 $x18)))))))
 (let (($x194 (and $x113 $x140)))
 (let (($x218 (= $x194 true)))
 (let (($x198 (= $x218 true)))
 (let (($x199 (= $x198 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x139 true)))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (= $x162 true)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x45)))
 (let (($x124 (= ?x55 input.dst.llvm-%n)))
 (let (($x43 (= $x124 true)))
 (let (($x103 (= $x43 true)))
 (let (($x125 (= ?x55 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x125 true)))
 (let (($x183 (= $x81 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x177 (bvsub ?x24 ?x47)))
 (let (($x174 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x177) (bvult ?x24 ?x177))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x112)))
 (let ((?x131 ((_ extract 63 32) ?x44)))
 (let (($x173 (= (_ bv0 32) ?x131)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x85 (and (and (and true $x180) $x173) $x174)))
 (let (($x104 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x117 (and $x104 $x85)))
 (let (($x50 (= true $x117)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x322 $x50)))
 (let (($x98 (= $x32 true)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x154 (= $x71 true)))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x322 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x52 (and $x136 $x27)))
 (let (($x42 (and $x52 $x130)))
 (let (($x175 (and $x42 $x183)))
 (let (($x149 (and $x175 $x103)))
 (let (($x161 (and $x149 $x48)))
 (let (($x171 (and $x161 $x157)))
 (let (($x235 (and $x171 $x199)))
 (let (($x203 (and $x235 $x202)))
 (let (($x248 (and $x203 $x247)))
 (let (($x300 (and $x248 $x284)))
 (let (($x298 (and $x300 $x301)))
 (let (($x21 (and $x298 $x92)))
 (let (($x324 (and $x21 $x325)))
 (let (($x216 (and $x324 $x58)))
 (let (($x206 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and (not $x206) $x216)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x143 $x279)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x307 (and $x195 $x291)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x283 $x307)))
 (let (($x36 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x185 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x95 (=> (and $x322 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x36)))))
 (let (($x287 (and $x95 $x293)))
 (let (($x150 (=> $x287 $x361)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13c00efc)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x0ffffff8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x13c00eff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x10000187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13c00efc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x0ffffff8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x0ffffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x0ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x27d7f740)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x29ef3bf4)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x29ef3bf7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x27d7f8cf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x29ef3bf4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x27d7f740)
  (define-fun symbol.1 () (_ BitVec 32)
    #x27d7f740)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x27d7f743 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x27d7f742 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x27d7f741 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x27d7f740 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x29 (bvule ?x234 (_ bv4 32))))
 (let (($x329 (= $x29 true)))
 (let (($x327 (= $x329 true)))
 (let (($x69 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var947X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var946X)))
 (= $x310 false)))
 ))
 (let (($x167 (and $x263 $x69)))
 (let (($x299 (= $x167 true)))
 (let (($x80 (forall ((input.ind-%var941X (_ BitVec 32)) )(let ((?x278 (bvadd symbol.1 (bvmul input.ind-%var941X (_ bv4 32)))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x278))))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv2 32))) ?x314)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv3 32))) ?x290)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var941X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var941X)))
 (=> $x289 (= ?x346 ?x233)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var940X) (bvult input.ind-%var940X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var940X)))
 (= $x289 $x86))))
 ))
 (let (($x249 (and $x255 $x80)))
 (let (($x348 (= $x249 true)))
 (let (($x256 (forall ((input.ind-%var935X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var935X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var935X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var934X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var934X)))
 (= $x310 false)))
 ))
 (let (($x109 (and $x288 $x256)))
 (let (($x93 (= $x109 true)))
 (let ((?x20 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x20)))
 (let (($x294 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x239 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x201 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x201 true)))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x179)))
 (let ((?x189 (bvand symbol.1 (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x189)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x211 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x211 $x129)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x184 $x17)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x144 $x5)))
 (let (($x151 (not $x59)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x64 $x145)))
 (let (($x9 (and (not $x8) $x151)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x155 $x133)))
 (let (($x77 (not $x182)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x147 $x160)))
 (let (($x62 (and (not $x110) $x77)))
 (let (($x158 (and (and (and (and (and (and $x62 $x9) $x82) $x13) $x164) $x22) $x115)))
 (let (($x140 (and $x158 $x190)))
 (let (($x76 (= symbol.1 dst_symbol_addr.1)))
 (let (($x194 (and $x76 $x140)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x72 (or (bvugt input.memlabel-mem--symbol.1_begin ?x51) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x72) (or $x94 $x26)))))))
 (let (($x218 (and $x33 $x194)))
 (let (($x198 (= $x218 true)))
 (let (($x199 (= $x198 true)))
 (let (($x235 (= $x199 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x139 true)))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (= $x162 true)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x45)))
 (let (($x124 (= ?x55 input.dst.llvm-%n)))
 (let (($x43 (= $x124 true)))
 (let (($x103 (= $x43 true)))
 (let (($x125 (= ?x55 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x125 true)))
 (let (($x183 (= $x81 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x173 (bvsub ?x24 ?x47)))
 (let (($x106 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x173) (bvult ?x24 ?x173))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x96)))
 (let ((?x44 ((_ extract 63 32) ?x112)))
 (let (($x131 (= (_ bv0 32) ?x44)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x85 (and (and (and true $x180) $x131) $x106)))
 (let (($x104 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x117 (and $x104 $x85)))
 (let (($x50 (= true $x117)))
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x122 $x50)))
 (let (($x98 (= $x32 true)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x154 (= $x71 true)))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x122 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x52 (and $x136 $x27)))
 (let (($x42 (and $x52 $x130)))
 (let (($x175 (and $x42 $x183)))
 (let (($x149 (and $x175 $x103)))
 (let (($x161 (and $x149 $x48)))
 (let (($x171 (and $x161 $x157)))
 (let (($x200 (and $x171 $x235)))
 (let (($x226 (and $x200 $x203)))
 (let (($x251 (and $x226 $x248)))
 (let (($x240 (and $x251 $x300)))
 (let (($x163 (and $x240 $x298)))
 (let (($x323 (and $x163 $x93)))
 (let (($x281 (and $x323 $x348)))
 (let (($x357 (and $x281 $x299)))
 (let (($x303 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x303) $x357)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and $x67 $x244)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x266 (and $x101 $x321)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x274 (and $x261 $x266)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x283 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x111 (=> (and $x122 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x347 (and $x111 $x274)))
 (let (($x356 (=> $x347 $x327)))
 (not $x356)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x29 (bvule ?x234 (_ bv4 32))))
 (let (($x329 (= $x29 true)))
 (let (($x327 (= $x329 true)))
 (let (($x69 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var947X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var946X)))
 (= $x310 false)))
 ))
 (let (($x167 (and $x263 $x69)))
 (let (($x299 (= $x167 true)))
 (let (($x80 (forall ((input.ind-%var941X (_ BitVec 32)) )(let ((?x278 (bvadd symbol.1 (bvmul input.ind-%var941X (_ bv4 32)))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x278))))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv2 32))) ?x314)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv3 32))) ?x290)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var941X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var941X)))
 (=> $x289 (= ?x346 ?x233)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var940X) (bvult input.ind-%var940X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var940X)))
 (= $x289 $x86))))
 ))
 (let (($x249 (and $x255 $x80)))
 (let (($x348 (= $x249 true)))
 (let (($x256 (forall ((input.ind-%var935X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var935X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var935X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var934X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var934X)))
 (= $x310 false)))
 ))
 (let (($x109 (and $x288 $x256)))
 (let (($x93 (= $x109 true)))
 (let ((?x20 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x20)))
 (let (($x294 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x239 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x201 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x201 true)))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x179)))
 (let ((?x189 (bvand symbol.1 (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x189)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x211 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x211 $x129)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x184 $x17)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x144 $x5)))
 (let (($x151 (not $x59)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x64 $x145)))
 (let (($x9 (and (not $x8) $x151)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x155 $x133)))
 (let (($x77 (not $x182)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x147 $x160)))
 (let (($x62 (and (not $x110) $x77)))
 (let (($x158 (and (and (and (and (and (and $x62 $x9) $x82) $x13) $x164) $x22) $x115)))
 (let (($x140 (and $x158 $x190)))
 (let (($x76 (= symbol.1 dst_symbol_addr.1)))
 (let (($x194 (and $x76 $x140)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x72 (or (bvugt input.memlabel-mem--symbol.1_begin ?x51) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x72) (or $x94 $x26)))))))
 (let (($x218 (and $x33 $x194)))
 (let (($x198 (= $x218 true)))
 (let (($x199 (= $x198 true)))
 (let (($x235 (= $x199 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x139 true)))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (= $x162 true)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x45)))
 (let (($x124 (= ?x55 input.dst.llvm-%n)))
 (let (($x43 (= $x124 true)))
 (let (($x103 (= $x43 true)))
 (let (($x125 (= ?x55 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x125 true)))
 (let (($x183 (= $x81 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x173 (bvsub ?x24 ?x47)))
 (let (($x106 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x173) (bvult ?x24 ?x173))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x96)))
 (let ((?x44 ((_ extract 63 32) ?x112)))
 (let (($x131 (= (_ bv0 32) ?x44)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x85 (and (and (and true $x180) $x131) $x106)))
 (let (($x104 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x117 (and $x104 $x85)))
 (let (($x50 (= true $x117)))
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x122 $x50)))
 (let (($x98 (= $x32 true)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x154 (= $x71 true)))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x23 (= $x122 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x136 (and $x10 $x14)))
 (let (($x52 (and $x136 $x27)))
 (let (($x42 (and $x52 $x130)))
 (let (($x175 (and $x42 $x183)))
 (let (($x149 (and $x175 $x103)))
 (let (($x161 (and $x149 $x48)))
 (let (($x171 (and $x161 $x157)))
 (let (($x200 (and $x171 $x235)))
 (let (($x226 (and $x200 $x203)))
 (let (($x251 (and $x226 $x248)))
 (let (($x240 (and $x251 $x300)))
 (let (($x163 (and $x240 $x298)))
 (let (($x323 (and $x163 $x93)))
 (let (($x281 (and $x323 $x348)))
 (let (($x357 (and $x281 $x299)))
 (let (($x303 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x303) $x357)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and $x67 $x244)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x266 (and $x101 $x321)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x274 (and $x261 $x266)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x283 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x111 (=> (and $x122 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x347 (and $x111 $x274)))
 (let (($x356 (=> $x347 $x327)))
 (not $x356)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x800000d4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000263)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x800000d4)
  (define-fun symbol.1 () (_ BitVec 32)
    #x800000d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x800000d7 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x800000d6 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x800000d5 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x800000d4 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xde200000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xde200003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000017f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xde200000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffff0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x141 (bvule ?x325 (_ bv399 32))))
 (let (($x326 (= $x141 true)))
 (let (($x66 (= $x326 true)))
 (let (($x252 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1011X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1011X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1010X)))
 (= $x332 false)))
 ))
 (let (($x353 (and $x291 $x252)))
 (let (($x341 (= $x353 true)))
 (let (($x279 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1005X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x215)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x309)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1005X)))
 (let (($x73 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1005X)))
 (=> $x73 (= ?x263 ?x120)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1004X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1004X) (bvult input.ind-%var1004X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x73 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1004X)))
 (= $x73 $x242))))
 ))
 (let (($x150 (and $x80 $x279)))
 (let (($x229 (= $x150 true)))
 (let (($x11 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var998X)))
 (= $x332 false)))
 ))
 (let (($x220 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var999X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var999X) (_ bv0 32)))))
 ))
 (let (($x119 (and $x220 $x11)))
 (let (($x278 (= $x119 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x269)))
 (let (($x301 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x246 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x22)))
 (let ((?x63 (bvand symbol.1 (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x63)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x184 $x168)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x153 $x41)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x5 $x59)))
 (let (($x9 (not $x151)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x8 $x210)))
 (let (($x82 (and (not $x144) $x9)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x133 $x182)))
 (let (($x62 (not $x77)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x110 $x74)))
 (let (($x145 (and (not $x155) $x62)))
 (let (($x140 (and (and (and (and (and (and $x145 $x82) $x212) $x13) $x129) $x164) $x60)))
 (let (($x194 (and $x140 $x170)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x218 (and $x51 $x194)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x72) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x134 $x113)))))))
 (let (($x198 (and $x160 $x218)))
 (let (($x199 (= $x198 true)))
 (let (($x235 (= $x199 true)))
 (let (($x200 (= $x235 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x171 (= $x157 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x55)))
 (let (($x43 (= ?x125 input.dst.llvm-%n)))
 (let (($x103 (= $x43 true)))
 (let (($x149 (= $x103 true)))
 (let (($x81 (= ?x125 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (= $x81 true)))
 (let (($x175 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x174 (bvsub ?x24 ?x47)))
 (let (($x177 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x174) (bvult ?x24 ?x174))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x96)))
 (let ((?x44 ((_ extract 63 32) ?x112)))
 (let (($x131 (= (_ bv0 32) ?x44)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x37) $x131) $x177)))
 (let (($x107 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x50 (and $x107 $x117)))
 (let (($x32 (= true $x50)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x230 $x32)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x42 (= $x130 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x230 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x90 (and $x71 $x52)))
 (let (($x7 (and $x90 $x42)))
 (let (($x124 (and $x7 $x175)))
 (let (($x162 (and $x124 $x149)))
 (let (($x139 (and $x162 $x161)))
 (let (($x135 (and $x139 $x171)))
 (let (($x201 (and $x135 $x200)))
 (let (($x239 (and $x201 $x226)))
 (let (($x159 (and $x239 $x251)))
 (let (($x20 (and $x159 $x240)))
 (let (($x311 (and $x20 $x163)))
 (let (($x108 (and $x311 $x278)))
 (let (($x227 (and $x108 $x229)))
 (let (($x231 (and $x227 $x341)))
 (let (($x358 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and (not $x358) $x231)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x206 $x254)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x222 (and $x228 $x21)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x237 $x222)))
 (let (($x95 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x261 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x95)))))
 (let (($x91 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x95)))))
 (let (($x241 (and $x91 $x68)))
 (let (($x225 (=> $x241 $x66)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x141 (bvule ?x325 (_ bv399 32))))
 (let (($x326 (= $x141 true)))
 (let (($x66 (= $x326 true)))
 (let (($x252 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1011X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1011X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1010X)))
 (= $x332 false)))
 ))
 (let (($x353 (and $x291 $x252)))
 (let (($x341 (= $x353 true)))
 (let (($x279 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1005X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x215)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x309)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1005X)))
 (let (($x73 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1005X)))
 (=> $x73 (= ?x263 ?x120)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1004X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1004X) (bvult input.ind-%var1004X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x73 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1004X)))
 (= $x73 $x242))))
 ))
 (let (($x150 (and $x80 $x279)))
 (let (($x229 (= $x150 true)))
 (let (($x11 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var998X)))
 (= $x332 false)))
 ))
 (let (($x220 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var999X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var999X) (_ bv0 32)))))
 ))
 (let (($x119 (and $x220 $x11)))
 (let (($x278 (= $x119 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x269)))
 (let (($x301 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x246 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x22)))
 (let ((?x63 (bvand symbol.1 (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x63)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x184 $x168)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x153 $x41)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x5 $x59)))
 (let (($x9 (not $x151)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x8 $x210)))
 (let (($x82 (and (not $x144) $x9)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x133 $x182)))
 (let (($x62 (not $x77)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x110 $x74)))
 (let (($x145 (and (not $x155) $x62)))
 (let (($x140 (and (and (and (and (and (and $x145 $x82) $x212) $x13) $x129) $x164) $x60)))
 (let (($x194 (and $x140 $x170)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x218 (and $x51 $x194)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x72) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x134 $x113)))))))
 (let (($x198 (and $x160 $x218)))
 (let (($x199 (= $x198 true)))
 (let (($x235 (= $x199 true)))
 (let (($x200 (= $x235 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x171 (= $x157 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x55)))
 (let (($x43 (= ?x125 input.dst.llvm-%n)))
 (let (($x103 (= $x43 true)))
 (let (($x149 (= $x103 true)))
 (let (($x81 (= ?x125 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (= $x81 true)))
 (let (($x175 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x174 (bvsub ?x24 ?x47)))
 (let (($x177 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x174) (bvult ?x24 ?x174))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x96)))
 (let ((?x44 ((_ extract 63 32) ?x112)))
 (let (($x131 (= (_ bv0 32) ?x44)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x37) $x131) $x177)))
 (let (($x107 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x50 (and $x107 $x117)))
 (let (($x32 (= true $x50)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x230 $x32)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x42 (= $x130 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x230 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x90 (and $x71 $x52)))
 (let (($x7 (and $x90 $x42)))
 (let (($x124 (and $x7 $x175)))
 (let (($x162 (and $x124 $x149)))
 (let (($x139 (and $x162 $x161)))
 (let (($x135 (and $x139 $x171)))
 (let (($x201 (and $x135 $x200)))
 (let (($x239 (and $x201 $x226)))
 (let (($x159 (and $x239 $x251)))
 (let (($x20 (and $x159 $x240)))
 (let (($x311 (and $x20 $x163)))
 (let (($x108 (and $x311 $x278)))
 (let (($x227 (and $x108 $x229)))
 (let (($x231 (and $x227 $x341)))
 (let (($x358 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and (not $x358) $x231)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x206 $x254)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x222 (and $x228 $x21)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x237 $x222)))
 (let (($x95 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x261 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x95)))))
 (let (($x91 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x95)))))
 (let (($x241 (and $x91 $x68)))
 (let (($x225 (=> $x241 $x66)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x348 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x186 (bvsle ?x348 (_ bv399 32))))
 (let (($x352 (= $x186 true)))
 (let (($x361 (= $x352 true)))
 (let (($x360 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1029X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1029X) (_ bv0 32)))))
 ))
 (let (($x321 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1028X)))
 (= $x65 false)))
 ))
 (let (($x238 (and $x321 $x360)))
 (let (($x93 (= $x238 true)))
 (let (($x244 (forall ((input.ind-%var1023X (_ BitVec 32)) )(let ((?x69 (bvadd symbol.1 (bvmul input.ind-%var1023X (_ bv4 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x69))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv2 32))) ?x295)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv3 32))) ?x305)))
 (let ((?x291 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1023X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1023X)))
 (=> $x296 (= ?x291 ?x86)))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1022X (_ BitVec 32)) )(let (($x267 (and (bvule (_ bv0 32) input.ind-%var1022X) (bvult input.ind-%var1022X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1022X)))
 (= $x296 $x267))))
 ))
 (let (($x356 (and $x279 $x244)))
 (let (($x213 (= $x356 true)))
 (let (($x167 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1017X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1017X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1016X)))
 (= $x65 false)))
 ))
 (let (($x169 (and $x119 $x167)))
 (let (($x359 (= $x169 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x294)))
 (let (($x298 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x284 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let (($x247 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x164)))
 (let ((?x179 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x179)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x184 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x158 $x184)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x13 $x211)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x5 $x59)))
 (let (($x9 (not $x151)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x121 (and $x210 $x144)))
 (let (($x189 (and (not $x121) $x9)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x133 $x182)))
 (let (($x62 (not $x77)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x74 $x155)))
 (let (($x8 (and (not $x64) $x62)))
 (let (($x194 (and (and (and (and (and (and $x8 $x189) $x212) $x56) $x168) $x129) $x17)))
 (let (($x218 (and $x194 $x190)))
 (let (($x147 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x147 $x218)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x26 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x26) (or $x126 $x33)))))))
 (let (($x199 (and $x110 $x198)))
 (let (($x235 (= $x199 true)))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x171 (= $x157 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x55)))
 (let (($x43 (= ?x125 input.dst.llvm-%n)))
 (let (($x103 (= $x43 true)))
 (let (($x149 (= $x103 true)))
 (let (($x81 (= ?x125 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (= $x81 true)))
 (let (($x175 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x131 (bvsub ?x24 ?x47)))
 (let (($x173 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x131) (bvult ?x24 ?x131))))
 (let ((?x137 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvmul (_ bv4 64) ?x137)))
 (let ((?x112 ((_ extract 63 32) ?x96)))
 (let (($x44 (= (_ bv0 32) ?x112)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x37) $x44) $x173)))
 (let (($x107 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x50 (and $x107 $x117)))
 (let (($x32 (= true $x50)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x322 $x32)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x42 (= $x130 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x322 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x90 (and $x71 $x52)))
 (let (($x7 (and $x90 $x42)))
 (let (($x124 (and $x7 $x175)))
 (let (($x162 (and $x124 $x149)))
 (let (($x139 (and $x162 $x161)))
 (let (($x135 (and $x139 $x171)))
 (let (($x245 (and $x135 $x201)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x159)))
 (let (($x269 (and $x221 $x20)))
 (let (($x288 (and $x269 $x311)))
 (let (($x272 (and $x288 $x359)))
 (let (($x29 (and $x272 $x213)))
 (let (($x208 (and $x29 $x93)))
 (let (($x87 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x314 (and (not $x87) $x208)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x303 $x314)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x143 $x330)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x195 $x323)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x237 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x142 (=> (and $x322 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x293 (and $x142 $x53)))
 (let (($x282 (=> $x293 $x361)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x348 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x186 (bvsle ?x348 (_ bv399 32))))
 (let (($x352 (= $x186 true)))
 (let (($x361 (= $x352 true)))
 (let (($x360 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1029X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1029X) (_ bv0 32)))))
 ))
 (let (($x321 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1028X)))
 (= $x65 false)))
 ))
 (let (($x238 (and $x321 $x360)))
 (let (($x93 (= $x238 true)))
 (let (($x244 (forall ((input.ind-%var1023X (_ BitVec 32)) )(let ((?x69 (bvadd symbol.1 (bvmul input.ind-%var1023X (_ bv4 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x69))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv2 32))) ?x295)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv3 32))) ?x305)))
 (let ((?x291 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1023X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1023X)))
 (=> $x296 (= ?x291 ?x86)))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1022X (_ BitVec 32)) )(let (($x267 (and (bvule (_ bv0 32) input.ind-%var1022X) (bvult input.ind-%var1022X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1022X)))
 (= $x296 $x267))))
 ))
 (let (($x356 (and $x279 $x244)))
 (let (($x213 (= $x356 true)))
 (let (($x167 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1017X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1017X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1016X)))
 (= $x65 false)))
 ))
 (let (($x169 (and $x119 $x167)))
 (let (($x359 (= $x169 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x294)))
 (let (($x298 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x284 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let (($x247 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x164)))
 (let ((?x179 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x179)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x184 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x158 $x184)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x13 $x211)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x5 $x59)))
 (let (($x9 (not $x151)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x121 (and $x210 $x144)))
 (let (($x189 (and (not $x121) $x9)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x133 $x182)))
 (let (($x62 (not $x77)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x74 $x155)))
 (let (($x8 (and (not $x64) $x62)))
 (let (($x194 (and (and (and (and (and (and $x8 $x189) $x212) $x56) $x168) $x129) $x17)))
 (let (($x218 (and $x194 $x190)))
 (let (($x147 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x147 $x218)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x26 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x26) (or $x126 $x33)))))))
 (let (($x199 (and $x110 $x198)))
 (let (($x235 (= $x199 true)))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x171 (= $x157 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x55)))
 (let (($x43 (= ?x125 input.dst.llvm-%n)))
 (let (($x103 (= $x43 true)))
 (let (($x149 (= $x103 true)))
 (let (($x81 (= ?x125 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (= $x81 true)))
 (let (($x175 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x131 (bvsub ?x24 ?x47)))
 (let (($x173 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x131) (bvult ?x24 ?x131))))
 (let ((?x137 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvmul (_ bv4 64) ?x137)))
 (let ((?x112 ((_ extract 63 32) ?x96)))
 (let (($x44 (= (_ bv0 32) ?x112)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x37) $x44) $x173)))
 (let (($x107 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x50 (and $x107 $x117)))
 (let (($x32 (= true $x50)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x322 $x32)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x42 (= $x130 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x322 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x90 (and $x71 $x52)))
 (let (($x7 (and $x90 $x42)))
 (let (($x124 (and $x7 $x175)))
 (let (($x162 (and $x124 $x149)))
 (let (($x139 (and $x162 $x161)))
 (let (($x135 (and $x139 $x171)))
 (let (($x245 (and $x135 $x201)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x159)))
 (let (($x269 (and $x221 $x20)))
 (let (($x288 (and $x269 $x311)))
 (let (($x272 (and $x288 $x359)))
 (let (($x29 (and $x272 $x213)))
 (let (($x208 (and $x29 $x93)))
 (let (($x87 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x314 (and (not $x87) $x208)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x303 $x314)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x143 $x330)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x195 $x323)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x237 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x142 (=> (and $x322 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x293 (and $x142 $x53)))
 (let (($x282 (=> $x293 $x361)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x165 (bvsge ?x229 (_ bv0 32))))
 (let (($x292 (= $x165 true)))
 (let (($x327 (= $x292 true)))
 (let (($x242 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x21 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x233 false)))
 ))
 (let (($x234 (and $x21 $x242)))
 (let (($x89 (= $x234 true)))
 (let (($x254 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x252 (bvadd symbol.1 (bvmul input.ind-%var1041X (_ bv4 32)))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x252))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv2 32))) ?x73)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv3 32))) ?x219)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1041X)))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1041X)))
 (=> $x249 (= ?x321 ?x332)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1040X)))
 (= $x249 $x259))))
 ))
 (let (($x225 (and $x244 $x254)))
 (let (($x328 (= $x225 true)))
 (let (($x353 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1035X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1035X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1034X)))
 (= $x233 false)))
 ))
 (let (($x243 (and $x169 $x353)))
 (let (($x69 (= $x243 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x301)))
 (let (($x163 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x300 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x248 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x203 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x129)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x22)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x158 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (and $x140 $x158)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x56 $x153)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x5 $x59)))
 (let (($x9 (not $x151)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x144 $x121)))
 (let (($x63 (and (not $x82) $x9)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x133 $x182)))
 (let (($x62 (not $x77)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x155 $x64)))
 (let (($x210 (and (not $x145) $x62)))
 (let (($x218 (and (and (and (and (and (and $x210 $x63) $x212) $x115) $x184) $x168) $x41)))
 (let (($x198 (and $x218 $x170)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x199 (and $x51 $x198)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x146 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x146) (or $x78 $x76)))))))
 (let (($x235 (and $x74 $x199)))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let (($x245 (= $x201 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x171 (= $x157 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x55)))
 (let (($x43 (= ?x125 input.dst.llvm-%n)))
 (let (($x103 (= $x43 true)))
 (let (($x149 (= $x103 true)))
 (let (($x81 (= ?x125 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (= $x81 true)))
 (let (($x175 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x44 (bvsub ?x24 ?x47)))
 (let (($x16 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x44) (bvult ?x24 ?x44))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x137 (bvmul (_ bv4 64) ?x106)))
 (let ((?x96 ((_ extract 63 32) ?x137)))
 (let (($x112 (= (_ bv0 32) ?x96)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x37) $x112) $x16)))
 (let (($x107 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x50 (and $x107 $x117)))
 (let (($x32 (= true $x50)))
 (let (($x341 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x341 $x32)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x42 (= $x130 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x341 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x90 (and $x71 $x52)))
 (let (($x7 (and $x90 $x42)))
 (let (($x124 (and $x7 $x175)))
 (let (($x162 (and $x124 $x149)))
 (let (($x139 (and $x162 $x161)))
 (let (($x135 (and $x139 $x171)))
 (let (($x202 (and $x135 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x294 (and $x284 $x269)))
 (let (($x289 (and $x294 $x288)))
 (let (($x313 (and $x289 $x69)))
 (let (($x141 (and $x313 $x328)))
 (let (($x329 (and $x141 $x89)))
 (let (($x307 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x307) $x329)))
 (let (($x358 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x358 $x215)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x67 $x108)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x70 (and $x101 $x273)))
 (let (($x91 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x195 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x91)))))
 (let (($x6 (=> (and $x341 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x91)))))
 (let (($x274 (and $x6 $x70)))
 (let (($x255 (=> $x274 $x327)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x165 (bvsge ?x229 (_ bv0 32))))
 (let (($x292 (= $x165 true)))
 (let (($x327 (= $x292 true)))
 (let (($x242 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x21 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x233 false)))
 ))
 (let (($x234 (and $x21 $x242)))
 (let (($x89 (= $x234 true)))
 (let (($x254 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x252 (bvadd symbol.1 (bvmul input.ind-%var1041X (_ bv4 32)))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x252))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv2 32))) ?x73)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv3 32))) ?x219)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1041X)))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1041X)))
 (=> $x249 (= ?x321 ?x332)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1040X)))
 (= $x249 $x259))))
 ))
 (let (($x225 (and $x244 $x254)))
 (let (($x328 (= $x225 true)))
 (let (($x353 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1035X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1035X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1034X)))
 (= $x233 false)))
 ))
 (let (($x243 (and $x169 $x353)))
 (let (($x69 (= $x243 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x301)))
 (let (($x163 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x300 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x248 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x203 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x129)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x22)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x158 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (and $x140 $x158)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x56 $x153)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x5 $x59)))
 (let (($x9 (not $x151)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x144 $x121)))
 (let (($x63 (and (not $x82) $x9)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x133 $x182)))
 (let (($x62 (not $x77)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x155 $x64)))
 (let (($x210 (and (not $x145) $x62)))
 (let (($x218 (and (and (and (and (and (and $x210 $x63) $x212) $x115) $x184) $x168) $x41)))
 (let (($x198 (and $x218 $x170)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x199 (and $x51 $x198)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x146 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x146) (or $x78 $x76)))))))
 (let (($x235 (and $x74 $x199)))
 (let (($x200 (= $x235 true)))
 (let (($x201 (= $x200 true)))
 (let (($x245 (= $x201 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (= $x176 true)))
 (let (($x157 (= $x118 true)))
 (let (($x171 (= $x157 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x48 (= $x166 true)))
 (let (($x161 (= $x48 true)))
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x55)))
 (let (($x43 (= ?x125 input.dst.llvm-%n)))
 (let (($x103 (= $x43 true)))
 (let (($x149 (= $x103 true)))
 (let (($x81 (= ?x125 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (= $x81 true)))
 (let (($x175 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x44 (bvsub ?x24 ?x47)))
 (let (($x16 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x44) (bvult ?x24 ?x44))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x137 (bvmul (_ bv4 64) ?x106)))
 (let ((?x96 ((_ extract 63 32) ?x137)))
 (let (($x112 (= (_ bv0 32) ?x96)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x37) $x112) $x16)))
 (let (($x107 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x50 (and $x107 $x117)))
 (let (($x32 (= true $x50)))
 (let (($x341 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x341 $x32)))
 (let (($x138 (= $x98 true)))
 (let (($x130 (= $x138 true)))
 (let (($x42 (= $x130 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x154 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x341 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x90 (and $x71 $x52)))
 (let (($x7 (and $x90 $x42)))
 (let (($x124 (and $x7 $x175)))
 (let (($x162 (and $x124 $x149)))
 (let (($x139 (and $x162 $x161)))
 (let (($x135 (and $x139 $x171)))
 (let (($x202 (and $x135 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x294 (and $x284 $x269)))
 (let (($x289 (and $x294 $x288)))
 (let (($x313 (and $x289 $x69)))
 (let (($x141 (and $x313 $x328)))
 (let (($x329 (and $x141 $x89)))
 (let (($x307 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x307) $x329)))
 (let (($x358 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x358 $x215)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x67 $x108)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x70 (and $x101 $x273)))
 (let (($x91 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x195 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x91)))))
 (let (($x6 (=> (and $x341 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x91)))))
 (let (($x274 (and $x6 $x70)))
 (let (($x255 (=> $x274 $x327)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (bvule ?x213 (_ bv399 32))))
 (let (($x223 (= $x187 true)))
 (let (($x66 (= $x223 true)))
 (let (($x267 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1065X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1065X) (_ bv0 32)))))
 ))
 (let (($x330 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1064X)))
 (= $x120 false)))
 ))
 (let (($x325 (and $x330 $x267)))
 (let (($x152 (= $x325 true)))
 (let (($x314 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let ((?x360 (bvadd symbol.1 (bvmul input.ind-%var1059X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x360))))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv2 32))) ?x296)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv3 32))) ?x312)))
 (let ((?x21 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1059X)))
 (let (($x150 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1059X)))
 (=> $x150 (= ?x21 ?x65)))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1058X) (bvult input.ind-%var1058X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x150 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1058X)))
 (= $x150 $x256))))
 ))
 (let (($x282 (and $x254 $x314)))
 (let (($x191 (= $x282 true)))
 (let (($x238 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1053X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1053X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1052X)))
 (= $x120 false)))
 ))
 (let (($x324 (and $x243 $x238)))
 (let (($x252 (= $x324 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x298)))
 (let (($x311 (= ?x163 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x240 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x294 (= $x269 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x129 (bvsub ?x24 ?x47)))
 (let (($x235 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x129) (bvult ?x24 ?x129))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x22 (bvmul (_ bv4 64) ?x190)))
 (let ((?x41 ((_ extract 63 32) ?x22)))
 (let (($x218 (= (_ bv0 32) ?x41)))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x245 (and (and (and true $x211) $x218) $x235)))
 (let (($x13 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x202 (and $x13 $x245)))
 (let (($x203 (= true $x202)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (=> $x230 $x203)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x212 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x212 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x151 (= $x59 true)))
 (let (($x9 (= $x151 true)))
 (let (($x63 (= $x9 true)))
 (let (($x121 (= $x230 true)))
 (let (($x82 (= $x121 true)))
 (let (($x189 (= $x82 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x110)))
 (let ((?x160 (bvand symbol.1 (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x160)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x126 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x134 $x126)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x26 $x113)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x176 $x118)))
 (let (($x171 (not $x157)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x48 $x161)))
 (let (($x148 (and (not $x139) $x171)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x43 $x103)))
 (let (($x162 (not $x149)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x183 $x175)))
 (let (($x166 (and (not $x124) $x162)))
 (let (($x145 (and (and (and (and (and (and $x166 $x148) $x94) $x18) $x78) $x76) $x132)))
 (let (($x8 (and $x145 $x156)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x133 (and $x173 $x8)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x117 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x117) (or $x138 $x130)))))))
 (let (($x182 (and $x81 $x133)))
 (let (($x77 (= $x182 true)))
 (let (($x62 (= $x77 true)))
 (let (($x210 (= $x62 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x37 true)))
 (let (($x88 (= $x174 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x38 (= ?x52 input.dst.llvm-%n)))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x180 (and $x107 $x114)))
 (let (($x137 (and $x180 $x106)))
 (let (($x144 (and $x137 $x210)))
 (let (($x5 (and $x144 $x189)))
 (let (($x179 (and $x5 $x63)))
 (let (($x194 (and $x179 $x115)))
 (let (($x248 (and $x194 $x247)))
 (let (($x300 (and $x248 $x284)))
 (let (($x301 (and $x300 $x294)))
 (let (($x119 (and $x301 $x289)))
 (let (($x333 (and $x119 $x252)))
 (let (($x186 (and $x333 $x191)))
 (let (($x326 (and $x186 $x152)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x266) $x326)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and $x87 $x295)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x216 (and $x206 $x272)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x228 $x216)))
 (let (($x142 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x101 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x142)))))
 (let (($x277 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x142)))))
 (let (($x68 (and $x277 $x54)))
 (let (($x346 (=> $x68 $x66)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (bvule ?x213 (_ bv399 32))))
 (let (($x223 (= $x187 true)))
 (let (($x66 (= $x223 true)))
 (let (($x267 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1065X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1065X) (_ bv0 32)))))
 ))
 (let (($x330 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1064X)))
 (= $x120 false)))
 ))
 (let (($x325 (and $x330 $x267)))
 (let (($x152 (= $x325 true)))
 (let (($x314 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let ((?x360 (bvadd symbol.1 (bvmul input.ind-%var1059X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x360))))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv2 32))) ?x296)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv3 32))) ?x312)))
 (let ((?x21 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1059X)))
 (let (($x150 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1059X)))
 (=> $x150 (= ?x21 ?x65)))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1058X) (bvult input.ind-%var1058X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x150 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1058X)))
 (= $x150 $x256))))
 ))
 (let (($x282 (and $x254 $x314)))
 (let (($x191 (= $x282 true)))
 (let (($x238 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1053X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1053X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1052X)))
 (= $x120 false)))
 ))
 (let (($x324 (and $x243 $x238)))
 (let (($x252 (= $x324 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x298)))
 (let (($x311 (= ?x163 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x240 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x294 (= $x269 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x129 (bvsub ?x24 ?x47)))
 (let (($x235 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x129) (bvult ?x24 ?x129))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x22 (bvmul (_ bv4 64) ?x190)))
 (let ((?x41 ((_ extract 63 32) ?x22)))
 (let (($x218 (= (_ bv0 32) ?x41)))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x245 (and (and (and true $x211) $x218) $x235)))
 (let (($x13 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x202 (and $x13 $x245)))
 (let (($x203 (= true $x202)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (=> $x230 $x203)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x212 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x212 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x151 (= $x59 true)))
 (let (($x9 (= $x151 true)))
 (let (($x63 (= $x9 true)))
 (let (($x121 (= $x230 true)))
 (let (($x82 (= $x121 true)))
 (let (($x189 (= $x82 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x110)))
 (let ((?x160 (bvand symbol.1 (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x160)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x126 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x134 $x126)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x26 $x113)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x176 $x118)))
 (let (($x171 (not $x157)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x48 $x161)))
 (let (($x148 (and (not $x139) $x171)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x43 $x103)))
 (let (($x162 (not $x149)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x183 $x175)))
 (let (($x166 (and (not $x124) $x162)))
 (let (($x145 (and (and (and (and (and (and $x166 $x148) $x94) $x18) $x78) $x76) $x132)))
 (let (($x8 (and $x145 $x156)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x133 (and $x173 $x8)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x117 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x117) (or $x138 $x130)))))))
 (let (($x182 (and $x81 $x133)))
 (let (($x77 (= $x182 true)))
 (let (($x62 (= $x77 true)))
 (let (($x210 (= $x62 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x37 true)))
 (let (($x88 (= $x174 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x38 (= ?x52 input.dst.llvm-%n)))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x180 (and $x107 $x114)))
 (let (($x137 (and $x180 $x106)))
 (let (($x144 (and $x137 $x210)))
 (let (($x5 (and $x144 $x189)))
 (let (($x179 (and $x5 $x63)))
 (let (($x194 (and $x179 $x115)))
 (let (($x248 (and $x194 $x247)))
 (let (($x300 (and $x248 $x284)))
 (let (($x301 (and $x300 $x294)))
 (let (($x119 (and $x301 $x289)))
 (let (($x333 (and $x119 $x252)))
 (let (($x186 (and $x333 $x191)))
 (let (($x326 (and $x186 $x152)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x266) $x326)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and $x87 $x295)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x216 (and $x206 $x272)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x228 $x216)))
 (let (($x142 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x101 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x142)))))
 (let (($x277 (=> (and $x230 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x142)))))
 (let (($x68 (and $x277 $x54)))
 (let (($x346 (=> $x68 $x66)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (bvsle ?x328 (_ bv399 32))))
 (let (($x79 (= $x72 true)))
 (let (($x361 (= $x79 true)))
 (let (($x259 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1083X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1083X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1082X)))
 (= $x86 false)))
 ))
 (let (($x348 (and $x108 $x259)))
 (let (($x220 (= $x348 true)))
 (let (($x215 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1077X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x249)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x92)))
 (let ((?x330 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1077X)))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1077X)))
 (=> $x356 (= ?x330 ?x233)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x11 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1076X)))
 (= $x356 $x11))))
 ))
 (let (($x255 (and $x314 $x215)))
 (let (($x287 (= $x255 true)))
 (let (($x234 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1071X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1071X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1070X)))
 (= $x86 false)))
 ))
 (let (($x281 (and $x324 $x234)))
 (let (($x360 (= $x281 true)))
 (let ((?x163 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x311 (bvneg ?x163)))
 (let (($x288 (= ?x311 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x20 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x269 (= $x20 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x201 (bvsub ?x24 ?x47)))
 (let (($x199 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x201) (bvult ?x24 ?x201))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x22 (bvmul (_ bv4 64) ?x190)))
 (let ((?x41 ((_ extract 63 32) ?x22)))
 (let (($x218 (= (_ bv0 32) ?x41)))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x200) $x218) $x199)))
 (let (($x153 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x203 (and $x153 $x202)))
 (let (($x226 (= true $x203)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (=> $x322 $x226)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x194 (= $x115 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x9 (= $x151 true)))
 (let (($x63 (= $x9 true)))
 (let (($x179 (= $x63 true)))
 (let (($x82 (= $x322 true)))
 (let (($x189 (= $x82 true)))
 (let (($x5 (= $x189 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x76)))
 (let ((?x155 (bvand symbol.1 (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x155)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x51 $x134)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x18 $x146)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x176 $x118)))
 (let (($x171 (not $x157)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x161 $x139)))
 (let (($x74 (and (not $x135) $x171)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x43 $x103)))
 (let (($x162 (not $x149)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x175 $x124)))
 (let (($x48 (and (not $x99) $x162)))
 (let (($x8 (and (and (and (and (and (and $x48 $x74) $x94) $x147) $x126) $x78) $x33)))
 (let (($x133 (and $x8 $x64)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x182 (and $x125 $x133)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x42 $x7)))))))
 (let (($x77 (and $x183 $x182)))
 (let (($x62 (= $x77 true)))
 (let (($x210 (= $x62 true)))
 (let (($x144 (= $x210 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x37 true)))
 (let (($x88 (= $x174 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x38 (= ?x52 input.dst.llvm-%n)))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x180 (and $x107 $x114)))
 (let (($x137 (and $x180 $x106)))
 (let (($x121 (and $x137 $x144)))
 (let (($x59 (and $x121 $x5)))
 (let (($x212 (and $x59 $x179)))
 (let (($x56 (and $x212 $x194)))
 (let (($x251 (and $x56 $x248)))
 (let (($x240 (and $x251 $x300)))
 (let (($x298 (and $x240 $x301)))
 (let (($x169 (and $x298 $x119)))
 (let (($x109 (and $x169 $x360)))
 (let (($x165 (and $x109 $x287)))
 (let (($x352 (and $x165 $x220)))
 (let (($x222 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (and (not $x222) $x352)))
 (let (($x307 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and $x307 $x73)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x357 (and $x303 $x313)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x15 (and $x143 $x357)))
 (let (($x6 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x228 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x6)))))
 (let (($x185 (=> (and $x322 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x6)))))
 (let (($x53 (and $x185 $x15)))
 (let (($x263 (=> $x53 $x361)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (bvsle ?x328 (_ bv399 32))))
 (let (($x79 (= $x72 true)))
 (let (($x361 (= $x79 true)))
 (let (($x259 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1083X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1083X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1082X)))
 (= $x86 false)))
 ))
 (let (($x348 (and $x108 $x259)))
 (let (($x220 (= $x348 true)))
 (let (($x215 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1077X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x249)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x92)))
 (let ((?x330 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1077X)))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1077X)))
 (=> $x356 (= ?x330 ?x233)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x11 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1076X)))
 (= $x356 $x11))))
 ))
 (let (($x255 (and $x314 $x215)))
 (let (($x287 (= $x255 true)))
 (let (($x234 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1071X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1071X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1070X)))
 (= $x86 false)))
 ))
 (let (($x281 (and $x324 $x234)))
 (let (($x360 (= $x281 true)))
 (let ((?x163 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x311 (bvneg ?x163)))
 (let (($x288 (= ?x311 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x20 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x269 (= $x20 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (= $x159 true)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x201 (bvsub ?x24 ?x47)))
 (let (($x199 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x201) (bvult ?x24 ?x201))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x22 (bvmul (_ bv4 64) ?x190)))
 (let ((?x41 ((_ extract 63 32) ?x22)))
 (let (($x218 (= (_ bv0 32) ?x41)))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x200) $x218) $x199)))
 (let (($x153 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x203 (and $x153 $x202)))
 (let (($x226 (= true $x203)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (=> $x322 $x226)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x194 (= $x115 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x9 (= $x151 true)))
 (let (($x63 (= $x9 true)))
 (let (($x179 (= $x63 true)))
 (let (($x82 (= $x322 true)))
 (let (($x189 (= $x82 true)))
 (let (($x5 (= $x189 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x76)))
 (let ((?x155 (bvand symbol.1 (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x155)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x51 $x134)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x18 $x146)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x176 $x118)))
 (let (($x171 (not $x157)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x161 $x139)))
 (let (($x74 (and (not $x135) $x171)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x43 $x103)))
 (let (($x162 (not $x149)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x175 $x124)))
 (let (($x48 (and (not $x99) $x162)))
 (let (($x8 (and (and (and (and (and (and $x48 $x74) $x94) $x147) $x126) $x78) $x33)))
 (let (($x133 (and $x8 $x64)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x182 (and $x125 $x133)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x42 $x7)))))))
 (let (($x77 (and $x183 $x182)))
 (let (($x62 (= $x77 true)))
 (let (($x210 (= $x62 true)))
 (let (($x144 (= $x210 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x37 true)))
 (let (($x88 (= $x174 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x38 (= ?x52 input.dst.llvm-%n)))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x180 (and $x107 $x114)))
 (let (($x137 (and $x180 $x106)))
 (let (($x121 (and $x137 $x144)))
 (let (($x59 (and $x121 $x5)))
 (let (($x212 (and $x59 $x179)))
 (let (($x56 (and $x212 $x194)))
 (let (($x251 (and $x56 $x248)))
 (let (($x240 (and $x251 $x300)))
 (let (($x298 (and $x240 $x301)))
 (let (($x169 (and $x298 $x119)))
 (let (($x109 (and $x169 $x360)))
 (let (($x165 (and $x109 $x287)))
 (let (($x352 (and $x165 $x220)))
 (let (($x222 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (and (not $x222) $x352)))
 (let (($x307 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and $x307 $x73)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x357 (and $x303 $x313)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x15 (and $x143 $x357)))
 (let (($x6 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x228 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x6)))))
 (let (($x185 (=> (and $x322 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x6)))))
 (let (($x53 (and $x185 $x15)))
 (let (($x263 (=> $x53 $x361)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (bvsge ?x191 (_ bv0 32))))
 (let (($x58 (= $x96 true)))
 (let (($x327 (= $x58 true)))
 (let (($x256 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1101X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1101X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1100X)))
 (= $x332 false)))
 ))
 (let (($x229 (and $x272 $x256)))
 (let (($x80 (= $x229 true)))
 (let (($x295 (forall ((input.ind-%var1095X (_ BitVec 32)) )(let ((?x267 (bvadd symbol.1 (bvmul input.ind-%var1095X (_ bv4 32)))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x150)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x310)))
 (let ((?x108 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1095X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1095X)))
 (=> $x225 (= ?x108 ?x120)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var1094X) (bvult input.ind-%var1094X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1094X)))
 (= $x225 $x167))))
 ))
 (let (($x346 (and $x215 $x295)))
 (let (($x347 (= $x346 true)))
 (let (($x325 (forall ((input.ind-%var1089X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1089X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1089X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1088X)))
 (= $x332 false)))
 ))
 (let (($x227 (and $x281 $x325)))
 (let (($x242 (= $x227 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x311)))
 (let (($x289 (= ?x288 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x269 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x245 (bvsub ?x24 ?x47)))
 (let (($x198 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x245) (bvult ?x24 ?x245))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x22 (bvmul (_ bv4 64) ?x190)))
 (let ((?x41 ((_ extract 63 32) ?x22)))
 (let (($x218 (= (_ bv0 32) ?x41)))
 (let (($x235 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x203 (and (and (and true $x235) $x218) $x198)))
 (let (($x184 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x226 (and $x184 $x203)))
 (let (($x239 (= true $x226)))
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (=> $x152 $x239)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x60 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x60 true)))
 (let (($x194 (= $x115 true)))
 (let (($x56 (= $x194 true)))
 (let (($x9 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x63 (= $x9 true)))
 (let (($x179 (= $x63 true)))
 (let (($x212 (= $x179 true)))
 (let (($x189 (= $x152 true)))
 (let (($x5 (= $x189 true)))
 (let (($x59 (= $x5 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x78)))
 (let ((?x110 (bvand symbol.1 (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x110)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (and $x145 $x51)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x147 $x26)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x176 $x118)))
 (let (($x171 (not $x157)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (and $x139 $x135)))
 (let (($x160 (and (not $x148) $x171)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x43 $x103)))
 (let (($x162 (not $x149)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x124 $x99)))
 (let (($x161 (and (not $x166) $x162)))
 (let (($x133 (and (and (and (and (and (and $x161 $x160) $x94) $x31) $x134) $x126) $x113)))
 (let (($x182 (and $x133 $x156)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x77 (and $x173 $x182)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x98 (or (bvugt input.memlabel-mem--symbol.1_begin ?x50) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x98) (or $x45 $x55)))))))
 (let (($x62 (and $x175 $x77)))
 (let (($x210 (= $x62 true)))
 (let (($x144 (= $x210 true)))
 (let (($x121 (= $x144 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x37 true)))
 (let (($x88 (= $x174 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x38 (= ?x52 input.dst.llvm-%n)))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x180 (and $x107 $x114)))
 (let (($x137 (and $x180 $x106)))
 (let (($x82 (and $x137 $x121)))
 (let (($x151 (and $x82 $x59)))
 (let (($x17 (and $x151 $x212)))
 (let (($x140 (and $x17 $x56)))
 (let (($x159 (and $x140 $x251)))
 (let (($x20 (and $x159 $x240)))
 (let (($x163 (and $x20 $x298)))
 (let (($x243 (and $x163 $x169)))
 (let (($x290 (and $x243 $x242)))
 (let (($x187 (and $x290 $x347)))
 (let (($x292 (and $x187 $x80)))
 (let (($x323 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x323) $x292)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x333 (and $x266 $x296)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x358 $x333)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x49 (and $x67 $x231)))
 (let (($x277 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x143 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x277)))))
 (let (($x283 (=> (and $x152 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x277)))))
 (let (($x70 (and $x283 $x49)))
 (let (($x291 (=> $x70 $x327)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (bvsge ?x191 (_ bv0 32))))
 (let (($x58 (= $x96 true)))
 (let (($x327 (= $x58 true)))
 (let (($x256 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1101X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1101X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1100X)))
 (= $x332 false)))
 ))
 (let (($x229 (and $x272 $x256)))
 (let (($x80 (= $x229 true)))
 (let (($x295 (forall ((input.ind-%var1095X (_ BitVec 32)) )(let ((?x267 (bvadd symbol.1 (bvmul input.ind-%var1095X (_ bv4 32)))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x150)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x310)))
 (let ((?x108 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1095X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1095X)))
 (=> $x225 (= ?x108 ?x120)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var1094X) (bvult input.ind-%var1094X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1094X)))
 (= $x225 $x167))))
 ))
 (let (($x346 (and $x215 $x295)))
 (let (($x347 (= $x346 true)))
 (let (($x325 (forall ((input.ind-%var1089X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1089X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1089X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1088X)))
 (= $x332 false)))
 ))
 (let (($x227 (and $x281 $x325)))
 (let (($x242 (= $x227 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x311)))
 (let (($x289 (= ?x288 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x269 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x245 (bvsub ?x24 ?x47)))
 (let (($x198 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x245) (bvult ?x24 ?x245))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x22 (bvmul (_ bv4 64) ?x190)))
 (let ((?x41 ((_ extract 63 32) ?x22)))
 (let (($x218 (= (_ bv0 32) ?x41)))
 (let (($x235 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x203 (and (and (and true $x235) $x218) $x198)))
 (let (($x184 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x226 (and $x184 $x203)))
 (let (($x239 (= true $x226)))
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (=> $x152 $x239)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x60 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x60 true)))
 (let (($x194 (= $x115 true)))
 (let (($x56 (= $x194 true)))
 (let (($x9 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x63 (= $x9 true)))
 (let (($x179 (= $x63 true)))
 (let (($x212 (= $x179 true)))
 (let (($x189 (= $x152 true)))
 (let (($x5 (= $x189 true)))
 (let (($x59 (= $x5 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x78)))
 (let ((?x110 (bvand symbol.1 (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x110)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (and $x145 $x51)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x147 $x26)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x176 $x118)))
 (let (($x171 (not $x157)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (and $x139 $x135)))
 (let (($x160 (and (not $x148) $x171)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x43 $x103)))
 (let (($x162 (not $x149)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x124 $x99)))
 (let (($x161 (and (not $x166) $x162)))
 (let (($x133 (and (and (and (and (and (and $x161 $x160) $x94) $x31) $x134) $x126) $x113)))
 (let (($x182 (and $x133 $x156)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x77 (and $x173 $x182)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x98 (or (bvugt input.memlabel-mem--symbol.1_begin ?x50) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x98) (or $x45 $x55)))))))
 (let (($x62 (and $x175 $x77)))
 (let (($x210 (= $x62 true)))
 (let (($x144 (= $x210 true)))
 (let (($x121 (= $x144 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x37 true)))
 (let (($x88 (= $x174 true)))
 (let (($x106 (= $x88 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x38 (= ?x52 input.dst.llvm-%n)))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x180 (and $x107 $x114)))
 (let (($x137 (and $x180 $x106)))
 (let (($x82 (and $x137 $x121)))
 (let (($x151 (and $x82 $x59)))
 (let (($x17 (and $x151 $x212)))
 (let (($x140 (and $x17 $x56)))
 (let (($x159 (and $x140 $x251)))
 (let (($x20 (and $x159 $x240)))
 (let (($x163 (and $x20 $x298)))
 (let (($x243 (and $x163 $x169)))
 (let (($x290 (and $x243 $x242)))
 (let (($x187 (and $x290 $x347)))
 (let (($x292 (and $x187 $x80)))
 (let (($x323 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x323) $x292)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x333 (and $x266 $x296)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x358 $x333)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x49 (and $x67 $x231)))
 (let (($x277 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x143 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x277)))))
 (let (($x283 (=> (and $x152 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x277)))))
 (let (($x70 (and $x283 $x49)))
 (let (($x291 (=> $x70 $x327)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x287 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (bvule ?x287 input.dst.llvm-%n)))
 (let (($x299 (= $x177 true)))
 (let (($x66 (= $x299 true)))
 (let (($x11 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1119X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1119X) (_ bv0 32)))))
 ))
 (let (($x313 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1118X)))
 (= $x65 false)))
 ))
 (let (($x213 (and $x313 $x11)))
 (let (($x279 (= $x213 true)))
 (let (($x73 (forall ((input.ind-%var1113X (_ BitVec 32)) )(let ((?x259 (bvadd symbol.1 (bvmul input.ind-%var1113X (_ bv4 32)))))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x259))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv2 32))) ?x356)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv3 32))) ?x278)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1113X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1113X)))
 (=> $x282 (= ?x272 ?x86)))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let (($x353 (and (bvule (_ bv0 32) input.ind-%var1112X) (bvult input.ind-%var1112X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1112X)))
 (= $x282 $x353))))
 ))
 (let (($x263 (and $x295 $x73)))
 (let (($x241 (= $x263 true)))
 (let (($x348 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1107X) (_ bv0 32)))))
 ))
 (let (($x227 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1106X)))
 (= $x65 false)))
 ))
 (let (($x29 (and $x227 $x348)))
 (let (($x267 (= $x29 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x119 (= ?x52 input.dst.llvm-%n)))
 (let (($x169 (= $x119 true)))
 (let (($x243 (= $x169 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x301)))
 (let (($x163 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x300 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x248 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x190 (bvsub ?x24 ?x47)))
 (let (($x202 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x190) (bvult ?x24 ?x190))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x235 (bvmul (_ bv4 64) ?x200)))
 (let ((?x199 ((_ extract 63 32) ?x235)))
 (let (($x168 (= (_ bv0 32) ?x199)))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x201 (and (and (and true $x158) $x168) $x202)))
 (let (($x140 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x129 (and $x140 $x201)))
 (let (($x198 (= true $x129)))
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x220 $x198)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x179 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x212 (= $x179 true)))
 (let (($x17 (= $x212 true)))
 (let (($x60 (= $x17 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x5 true)))
 (let (($x151 (= $x59 true)))
 (let (($x9 (= $x151 true)))
 (let (($x144 (= $x220 true)))
 (let (($x121 (= $x144 true)))
 (let (($x82 (= $x121 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x26)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x18)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x33 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x132 (= input.memlabel-mem--symbol.1_end ?x33)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (and $x94 $x132)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x155 $x31)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (and $x139 $x135)))
 (let (($x74 (not $x148)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x149 $x162)))
 (let (($x118 (and (not $x161) $x74)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x124 $x99)))
 (let (($x48 (not $x166)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x175 $x131)))
 (let (($x103 (and (not $x173) $x48)))
 (let (($x113 (and (and (and (and (and (and $x103 $x118) $x157) $x160) $x8) $x145) $x51)))
 (let (($x133 (and $x113 $x134)))
 (let (($x106 (= symbol.1 dst_symbol_addr.1)))
 (let (($x78 (and $x106 $x133)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x117) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x130 $x45)))))))
 (let (($x156 (and $x44 $x78)))
 (let (($x182 (= $x156 true)))
 (let (($x77 (= $x182 true)))
 (let (($x62 (= $x77 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x180 (= $x114 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x37 (and $x107 $x180)))
 (let (($x210 (and $x37 $x62)))
 (let (($x189 (and $x210 $x82)))
 (let (($x63 (and $x189 $x9)))
 (let (($x115 (and $x63 $x60)))
 (let (($x247 (and $x115 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x294 (and $x284 $x269)))
 (let (($x289 (and $x294 $x288)))
 (let (($x324 (and $x289 $x243)))
 (let (($x309 (and $x324 $x267)))
 (let (($x72 (and $x309 $x241)))
 (let (($x223 (and $x72 $x279)))
 (let (($x273 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x273) $x223)))
 (let (($x222 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (and $x222 $x249)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x87 $x109)))
 (let (($x206 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x57 (and $x206 $x208)))
 (let (($x185 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x185)))))
 (let (($x261 (=> (and $x220 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x185)))))
 (let (($x54 (and $x261 $x57)))
 (let (($x321 (=> $x54 $x66)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x287 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (bvule ?x287 input.dst.llvm-%n)))
 (let (($x299 (= $x177 true)))
 (let (($x66 (= $x299 true)))
 (let (($x11 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1119X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1119X) (_ bv0 32)))))
 ))
 (let (($x313 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1118X)))
 (= $x65 false)))
 ))
 (let (($x213 (and $x313 $x11)))
 (let (($x279 (= $x213 true)))
 (let (($x73 (forall ((input.ind-%var1113X (_ BitVec 32)) )(let ((?x259 (bvadd symbol.1 (bvmul input.ind-%var1113X (_ bv4 32)))))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x259))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv2 32))) ?x356)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv3 32))) ?x278)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1113X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1113X)))
 (=> $x282 (= ?x272 ?x86)))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let (($x353 (and (bvule (_ bv0 32) input.ind-%var1112X) (bvult input.ind-%var1112X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1112X)))
 (= $x282 $x353))))
 ))
 (let (($x263 (and $x295 $x73)))
 (let (($x241 (= $x263 true)))
 (let (($x348 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1107X) (_ bv0 32)))))
 ))
 (let (($x227 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1106X)))
 (= $x65 false)))
 ))
 (let (($x29 (and $x227 $x348)))
 (let (($x267 (= $x29 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x27)))
 (let (($x119 (= ?x52 input.dst.llvm-%n)))
 (let (($x169 (= $x119 true)))
 (let (($x243 (= $x169 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x301)))
 (let (($x163 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x300 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x300 true)))
 (let (($x20 (= $x240 true)))
 (let (($x269 (= $x20 true)))
 (let (($x248 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (= $x248 true)))
 (let (($x159 (= $x251 true)))
 (let (($x221 (= $x159 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x190 (bvsub ?x24 ?x47)))
 (let (($x202 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x190) (bvult ?x24 ?x190))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x235 (bvmul (_ bv4 64) ?x200)))
 (let ((?x199 ((_ extract 63 32) ?x235)))
 (let (($x168 (= (_ bv0 32) ?x199)))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x201 (and (and (and true $x158) $x168) $x202)))
 (let (($x140 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x129 (and $x140 $x201)))
 (let (($x198 (= true $x129)))
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x220 $x198)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x179 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x212 (= $x179 true)))
 (let (($x17 (= $x212 true)))
 (let (($x60 (= $x17 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x5 true)))
 (let (($x151 (= $x59 true)))
 (let (($x9 (= $x151 true)))
 (let (($x144 (= $x220 true)))
 (let (($x121 (= $x144 true)))
 (let (($x82 (= $x121 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x26)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x18)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x33 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x132 (= input.memlabel-mem--symbol.1_end ?x33)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (and $x94 $x132)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x155 $x31)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (and $x139 $x135)))
 (let (($x74 (not $x148)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x149 $x162)))
 (let (($x118 (and (not $x161) $x74)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x124 $x99)))
 (let (($x48 (not $x166)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x175 $x131)))
 (let (($x103 (and (not $x173) $x48)))
 (let (($x113 (and (and (and (and (and (and $x103 $x118) $x157) $x160) $x8) $x145) $x51)))
 (let (($x133 (and $x113 $x134)))
 (let (($x106 (= symbol.1 dst_symbol_addr.1)))
 (let (($x78 (and $x106 $x133)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x117) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x130 $x45)))))))
 (let (($x156 (and $x44 $x78)))
 (let (($x182 (= $x156 true)))
 (let (($x77 (= $x182 true)))
 (let (($x62 (= $x77 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x38 true)))
 (let (($x114 (= $x35 true)))
 (let (($x180 (= $x114 true)))
 (let (($x90 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x90 true)))
 (let (($x104 (= $x127 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x107 (and $x154 $x104)))
 (let (($x37 (and $x107 $x180)))
 (let (($x210 (and $x37 $x62)))
 (let (($x189 (and $x210 $x82)))
 (let (($x63 (and $x189 $x9)))
 (let (($x115 (and $x63 $x60)))
 (let (($x247 (and $x115 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x294 (and $x284 $x269)))
 (let (($x289 (and $x294 $x288)))
 (let (($x324 (and $x289 $x243)))
 (let (($x309 (and $x324 $x267)))
 (let (($x72 (and $x309 $x241)))
 (let (($x223 (and $x72 $x279)))
 (let (($x273 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x273) $x223)))
 (let (($x222 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (and $x222 $x249)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x87 $x109)))
 (let (($x206 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x57 (and $x206 $x208)))
 (let (($x185 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x185)))))
 (let (($x261 (=> (and $x220 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x185)))))
 (let (($x54 (and $x261 $x57)))
 (let (($x321 (=> $x54 $x66)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1145X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x185 (bvadd ?x24 (_ bv3 32))))
 (let ((?x276 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x12 (store ?x276 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x257 (store ?x12 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x209 (store ?x257 ?x185 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x343 (concat (select ?x209 (bvadd ?x256 (_ bv2 32))) (concat (select ?x209 (bvadd ?x256 (_ bv1 32))) (select ?x209 ?x256)))))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1145X)))
 (let (($x193 (= input.ind-%var1145X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (= (ite $x193 input.spec-%var-i-0.L3%6%bbentry ?x313) (concat (select ?x209 (bvadd ?x256 (_ bv3 32))) ?x343))))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1145X)))
 (let (($x271 (or $x255 $x193)))
 (=> $x271 $x207))))))))))))))))
 ))
 (let (($x181 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x86 (bvule (_ bv0 32) input.ind-%var1144X)))
 (let (($x351 (and $x86 (bvult input.ind-%var1144X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x193 (= input.ind-%var1144X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1144X)))
 (let (($x271 (or $x255 $x193)))
 (= $x271 $x351)))))))
 ))
 (let (($x275 (and $x181 $x260)))
 (let (($x347 (= true true)))
 (let (($x40 (and $x347 $x275)))
 (let (($x265 (= $x40 true)))
 (let (($x167 (forall ((input.ind-%var1137X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1137X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1137X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1136X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1136X)))
 (= $x233 false)))
 ))
 (let (($x328 (and $x333 $x167)))
 (let (($x244 (= $x328 true)))
 (let (($x296 (forall ((input.ind-%var1131X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1131X (_ bv4 32)))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x256))))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv2 32))) ?x225)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv3 32))) ?x359)))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1131X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1131X)))
 (=> $x255 (= ?x313 ?x332)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var1130X (_ BitVec 32)) )(let (($x86 (bvule (_ bv0 32) input.ind-%var1130X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1130X)))
 (= $x255 (and $x86 (bvult input.ind-%var1130X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x291 (and $x73 $x296)))
 (let (($x293 (= $x291 true)))
 (let (($x229 (forall ((input.ind-%var1125X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1125X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1125X) (_ bv0 32)))))
 ))
 (let (($x29 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1124X)))
 (= $x233 false)))
 ))
 (let (($x141 (and $x29 $x229)))
 (let (($x259 (= $x141 true)))
 (let ((?x289 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x289)))
 (let (($x169 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x248)))
 (let ((?x246 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x246)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x201 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x201)))
 (let (($x202 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x202 $x129)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x218 $x198)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x211 $x200)))
 (let (($x199 (not $x235)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (and $x164 $x158)))
 (let (($x245 (and (not $x170) $x199)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x194 $x56)))
 (let (($x153 (not $x140)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x17 $x60)))
 (let (($x184 (and (not $x115) $x153)))
 (let (($x20 (and (and (and (and (and (and $x184 $x245) $x22) $x41) $x203) $x239) $x247)))
 (let (($x269 (and $x20 $x251)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x133 $x269)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x210 (or (bvugt input.memlabel-mem--symbol.1_begin ?x182) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x210) (or $x189 $x5)))))))
 (let (($x301 (and $x212 $x294)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x110 (= $x145 true)))
 (let (($x18 (= $x110 true)))
 (let (($x51 (= $x18 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (= $x132 true)))
 (let (($x8 (= $x31 true)))
 (let (($x64 (= $x8 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x160 true)))
 (let (($x155 (= $x126 true)))
 (let (($x94 (= $x155 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x48 (bvsub ?x24 ?x47)))
 (let (($x161 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x48) (bvult ?x24 ?x48))))
 (let ((?x43 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvmul (_ bv4 64) ?x43)))
 (let ((?x99 ((_ extract 63 32) ?x124)))
 (let (($x166 (= (_ bv0 32) ?x99)))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x131) $x166) $x161)))
 (let (($x112 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x148 (and $x112 $x135)))
 (let (($x74 (= true $x148)))
 (let (($x80 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (=> $x80 $x74)))
 (let (($x76 (= $x118 true)))
 (let (($x157 (= $x76 true)))
 (let (($x146 (= $x157 true)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x130 (= $x98 true)))
 (let (($x42 (= $x130 true)))
 (let (($x45 (= $x42 true)))
 (let (($x117 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x125 (= $x117 true)))
 (let (($x50 (= $x125 true)))
 (let (($x32 (= $x50 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x37 (= $x180 true)))
 (let (($x137 (= $x37 true)))
 (let (($x16 (= $x137 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x35 (= $x38 true)))
 (let (($x97 (= $x80 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x90 (and $x154 $x52)))
 (let (($x114 (and $x90 $x35)))
 (let (($x183 (and $x114 $x16)))
 (let (($x138 (and $x183 $x32)))
 (let (($x7 (and $x138 $x45)))
 (let (($x171 (and $x7 $x146)))
 (let (($x33 (and $x171 $x94)))
 (let (($x147 (and $x33 $x64)))
 (let (($x113 (and $x147 $x51)))
 (let (($x288 (and $x113 $x311)))
 (let (($x281 (and $x288 $x324)))
 (let (($x305 (and $x281 $x259)))
 (let (($x96 (and $x305 $x293)))
 (let (($x79 (and $x96 $x244)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and (not $x216) $x79)))
 (let (($x323 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x323 $x150)))
 (let (($x307 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x307 $x290)))
 (let (($x303 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x303 $x329)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x206 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x237 (=> (and $x80 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x15 (and $x237 $x100)))
 (let (($x205 (=> $x15 $x265)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1145X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x185 (bvadd ?x24 (_ bv3 32))))
 (let ((?x276 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x12 (store ?x276 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x257 (store ?x12 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x209 (store ?x257 ?x185 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x343 (concat (select ?x209 (bvadd ?x256 (_ bv2 32))) (concat (select ?x209 (bvadd ?x256 (_ bv1 32))) (select ?x209 ?x256)))))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1145X)))
 (let (($x193 (= input.ind-%var1145X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (= (ite $x193 input.spec-%var-i-0.L3%6%bbentry ?x313) (concat (select ?x209 (bvadd ?x256 (_ bv3 32))) ?x343))))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1145X)))
 (let (($x271 (or $x255 $x193)))
 (=> $x271 $x207))))))))))))))))
 ))
 (let (($x181 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x86 (bvule (_ bv0 32) input.ind-%var1144X)))
 (let (($x351 (and $x86 (bvult input.ind-%var1144X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x193 (= input.ind-%var1144X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1144X)))
 (let (($x271 (or $x255 $x193)))
 (= $x271 $x351)))))))
 ))
 (let (($x275 (and $x181 $x260)))
 (let (($x347 (= true true)))
 (let (($x40 (and $x347 $x275)))
 (let (($x265 (= $x40 true)))
 (let (($x167 (forall ((input.ind-%var1137X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1137X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1137X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1136X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1136X)))
 (= $x233 false)))
 ))
 (let (($x328 (and $x333 $x167)))
 (let (($x244 (= $x328 true)))
 (let (($x296 (forall ((input.ind-%var1131X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1131X (_ bv4 32)))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x256))))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv2 32))) ?x225)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv3 32))) ?x359)))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1131X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1131X)))
 (=> $x255 (= ?x313 ?x332)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var1130X (_ BitVec 32)) )(let (($x86 (bvule (_ bv0 32) input.ind-%var1130X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1130X)))
 (= $x255 (and $x86 (bvult input.ind-%var1130X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x291 (and $x73 $x296)))
 (let (($x293 (= $x291 true)))
 (let (($x229 (forall ((input.ind-%var1125X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1125X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1125X) (_ bv0 32)))))
 ))
 (let (($x29 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1124X)))
 (= $x233 false)))
 ))
 (let (($x141 (and $x29 $x229)))
 (let (($x259 (= $x141 true)))
 (let ((?x289 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x289)))
 (let (($x169 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x248)))
 (let ((?x246 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x246)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x201 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x201)))
 (let (($x202 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x202 $x129)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x218 $x198)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x211 $x200)))
 (let (($x199 (not $x235)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (and $x164 $x158)))
 (let (($x245 (and (not $x170) $x199)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x194 $x56)))
 (let (($x153 (not $x140)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x17 $x60)))
 (let (($x184 (and (not $x115) $x153)))
 (let (($x20 (and (and (and (and (and (and $x184 $x245) $x22) $x41) $x203) $x239) $x247)))
 (let (($x269 (and $x20 $x251)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x133 $x269)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x210 (or (bvugt input.memlabel-mem--symbol.1_begin ?x182) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x210) (or $x189 $x5)))))))
 (let (($x301 (and $x212 $x294)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x110 (= $x145 true)))
 (let (($x18 (= $x110 true)))
 (let (($x51 (= $x18 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (= $x132 true)))
 (let (($x8 (= $x31 true)))
 (let (($x64 (= $x8 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x160 true)))
 (let (($x155 (= $x126 true)))
 (let (($x94 (= $x155 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x48 (bvsub ?x24 ?x47)))
 (let (($x161 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x48) (bvult ?x24 ?x48))))
 (let ((?x43 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvmul (_ bv4 64) ?x43)))
 (let ((?x99 ((_ extract 63 32) ?x124)))
 (let (($x166 (= (_ bv0 32) ?x99)))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x131) $x166) $x161)))
 (let (($x112 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x148 (and $x112 $x135)))
 (let (($x74 (= true $x148)))
 (let (($x80 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (=> $x80 $x74)))
 (let (($x76 (= $x118 true)))
 (let (($x157 (= $x76 true)))
 (let (($x146 (= $x157 true)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x130 (= $x98 true)))
 (let (($x42 (= $x130 true)))
 (let (($x45 (= $x42 true)))
 (let (($x117 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x125 (= $x117 true)))
 (let (($x50 (= $x125 true)))
 (let (($x32 (= $x50 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x37 (= $x180 true)))
 (let (($x137 (= $x37 true)))
 (let (($x16 (= $x137 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x35 (= $x38 true)))
 (let (($x97 (= $x80 true)))
 (let (($x27 (= $x97 true)))
 (let (($x52 (= $x27 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x90 (and $x154 $x52)))
 (let (($x114 (and $x90 $x35)))
 (let (($x183 (and $x114 $x16)))
 (let (($x138 (and $x183 $x32)))
 (let (($x7 (and $x138 $x45)))
 (let (($x171 (and $x7 $x146)))
 (let (($x33 (and $x171 $x94)))
 (let (($x147 (and $x33 $x64)))
 (let (($x113 (and $x147 $x51)))
 (let (($x288 (and $x113 $x311)))
 (let (($x281 (and $x288 $x324)))
 (let (($x305 (and $x281 $x259)))
 (let (($x96 (and $x305 $x293)))
 (let (($x79 (and $x96 $x244)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and (not $x216) $x79)))
 (let (($x323 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x323 $x150)))
 (let (($x307 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x307 $x290)))
 (let (($x303 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x303 $x329)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x206 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x237 (=> (and $x80 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x15 (and $x237 $x100)))
 (let (($x205 (=> $x15 $x265)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x69 (bvmul (_ bv4294967295 32) ?x72)))
 (let ((?x312 (bvneg ?x69)))
 (let (($x65 (= ?x312 ?x360)))
 (let (($x325 (= $x65 true)))
 (let (($x84 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1163X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1163X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1162X)))
 (= $x120 false)))
 ))
 (let (($x26 (and $x275 $x84)))
 (let (($x165 (= $x26 true)))
 (let (($x336 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let ((?x34 (bvadd symbol.1 (bvmul input.ind-%var1157X (_ bv4 32)))))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x12)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x257)))
 (let ((?x333 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1157X)))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1157X)))
 (=> $x346 (= ?x333 ?x232)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1156X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1156X) (bvult input.ind-%var1156X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1156X)))
 (= $x346 $x234))))
 ))
 (let (($x337 (and $x296 $x336)))
 (let (($x343 (= $x337 true)))
 (let (($x213 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1150X)))
 (= $x120 false)))
 ))
 (let (($x186 (and $x141 $x213)))
 (let (($x256 (= $x186 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x119)))
 (let (($x243 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x248 true)))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (= $x239 true)))
 (let (($x246 (= $x240 true)))
 (let (($x247 (= $x246 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x245 (bvsub ?x24 ?x47)))
 (let (($x190 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x245) (bvult ?x24 ?x245))))
 (let ((?x211 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvmul (_ bv4 64) ?x211)))
 (let ((?x235 ((_ extract 63 32) ?x200)))
 (let (($x199 (= (_ bv0 32) ?x235)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x218 (and (and (and true $x170) $x199) $x190)))
 (let (($x140 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x202 (and $x140 $x218)))
 (let (($x201 (= true $x202)))
 (let (($x279 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (=> $x279 $x201)))
 (let (($x198 (= $x129 true)))
 (let (($x203 (= $x198 true)))
 (let (($x300 (= $x203 true)))
 (let (($x133 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x133 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x9 (= $x151 true)))
 (let (($x63 (= $x9 true)))
 (let (($x212 (= $x63 true)))
 (let (($x121 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x121 true)))
 (let (($x82 (= $x189 true)))
 (let (($x5 (= $x82 true)))
 (let (($x182 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x77 (= $x182 true)))
 (let (($x62 (= $x77 true)))
 (let (($x210 (= $x62 true)))
 (let (($x113 (= $x279 true)))
 (let (($x78 (= $x113 true)))
 (let (($x156 (= $x78 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x171)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x157)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x135 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (and $x149 $x135)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x48 $x148)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x131 $x176)))
 (let (($x43 (not $x173)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (and $x44 $x106)))
 (let (($x99 (and (not $x175) $x43)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x45 $x7)))
 (let (($x81 (not $x55)))
 (let (($x130 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x98 $x130)))
 (let (($x88 (and (not $x42) $x81)))
 (let (($x31 (and (and (and (and (and (and $x88 $x99) $x166) $x103) $x74) $x76) $x146)))
 (let (($x8 (and $x31 $x160)))
 (let (($x52 (= symbol.1 dst_symbol_addr.1)))
 (let (($x64 (and $x52 $x8)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x35 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x35) (or $x137 $x16)))))))
 (let (($x147 (and $x138 $x64)))
 (let (($x145 (= $x147 true)))
 (let (($x110 (= $x145 true)))
 (let (($x18 (= $x110 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x51 (and $x154 $x18)))
 (let (($x179 (and $x51 $x156)))
 (let (($x144 (and $x179 $x210)))
 (let (($x59 (and $x144 $x5)))
 (let (($x134 (and $x59 $x212)))
 (let (($x13 (and $x134 $x115)))
 (let (($x226 (and $x13 $x300)))
 (let (($x20 (and $x226 $x247)))
 (let (($x301 (and $x20 $x294)))
 (let (($x289 (and $x301 $x288)))
 (let (($x227 (and $x289 $x281)))
 (let (($x219 (and $x227 $x256)))
 (let (($x258 (and $x219 $x343)))
 (let (($x11 (and $x258 $x165)))
 (let (($x357 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x357) $x11)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x273 $x310)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x266 $x70)))
 (let (($x358 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x358 $x267)))
 (let (($x261 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x303 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x261)))))
 (let (($x195 (=> (and $x279 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x261)))))
 (let (($x263 (and $x195 $x282)))
 (let (($x223 (=> $x263 $x325)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x69 (bvmul (_ bv4294967295 32) ?x72)))
 (let ((?x312 (bvneg ?x69)))
 (let (($x65 (= ?x312 ?x360)))
 (let (($x325 (= $x65 true)))
 (let (($x84 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1163X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1163X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1162X)))
 (= $x120 false)))
 ))
 (let (($x26 (and $x275 $x84)))
 (let (($x165 (= $x26 true)))
 (let (($x336 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let ((?x34 (bvadd symbol.1 (bvmul input.ind-%var1157X (_ bv4 32)))))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x12)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x257)))
 (let ((?x333 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1157X)))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1157X)))
 (=> $x346 (= ?x333 ?x232)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1156X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1156X) (bvult input.ind-%var1156X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1156X)))
 (= $x346 $x234))))
 ))
 (let (($x337 (and $x296 $x336)))
 (let (($x343 (= $x337 true)))
 (let (($x213 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1150X)))
 (= $x120 false)))
 ))
 (let (($x186 (and $x141 $x213)))
 (let (($x256 (= $x186 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x119)))
 (let (($x243 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x248 true)))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (= $x239 true)))
 (let (($x246 (= $x240 true)))
 (let (($x247 (= $x246 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x245 (bvsub ?x24 ?x47)))
 (let (($x190 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x245) (bvult ?x24 ?x245))))
 (let ((?x211 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvmul (_ bv4 64) ?x211)))
 (let ((?x235 ((_ extract 63 32) ?x200)))
 (let (($x199 (= (_ bv0 32) ?x235)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x218 (and (and (and true $x170) $x199) $x190)))
 (let (($x140 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x202 (and $x140 $x218)))
 (let (($x201 (= true $x202)))
 (let (($x279 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (=> $x279 $x201)))
 (let (($x198 (= $x129 true)))
 (let (($x203 (= $x198 true)))
 (let (($x300 (= $x203 true)))
 (let (($x133 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x133 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x9 (= $x151 true)))
 (let (($x63 (= $x9 true)))
 (let (($x212 (= $x63 true)))
 (let (($x121 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x121 true)))
 (let (($x82 (= $x189 true)))
 (let (($x5 (= $x82 true)))
 (let (($x182 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x77 (= $x182 true)))
 (let (($x62 (= $x77 true)))
 (let (($x210 (= $x62 true)))
 (let (($x113 (= $x279 true)))
 (let (($x78 (= $x113 true)))
 (let (($x156 (= $x78 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x171)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x157)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x135 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (and $x149 $x135)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x48 $x148)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x131 $x176)))
 (let (($x43 (not $x173)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (and $x44 $x106)))
 (let (($x99 (and (not $x175) $x43)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x45 $x7)))
 (let (($x81 (not $x55)))
 (let (($x130 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x98 $x130)))
 (let (($x88 (and (not $x42) $x81)))
 (let (($x31 (and (and (and (and (and (and $x88 $x99) $x166) $x103) $x74) $x76) $x146)))
 (let (($x8 (and $x31 $x160)))
 (let (($x52 (= symbol.1 dst_symbol_addr.1)))
 (let (($x64 (and $x52 $x8)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x35 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x35) (or $x137 $x16)))))))
 (let (($x147 (and $x138 $x64)))
 (let (($x145 (= $x147 true)))
 (let (($x110 (= $x145 true)))
 (let (($x18 (= $x110 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x51 (and $x154 $x18)))
 (let (($x179 (and $x51 $x156)))
 (let (($x144 (and $x179 $x210)))
 (let (($x59 (and $x144 $x5)))
 (let (($x134 (and $x59 $x212)))
 (let (($x13 (and $x134 $x115)))
 (let (($x226 (and $x13 $x300)))
 (let (($x20 (and $x226 $x247)))
 (let (($x301 (and $x20 $x294)))
 (let (($x289 (and $x301 $x288)))
 (let (($x227 (and $x289 $x281)))
 (let (($x219 (and $x227 $x256)))
 (let (($x258 (and $x219 $x343)))
 (let (($x11 (and $x258 $x165)))
 (let (($x357 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x357) $x11)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x273 $x310)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x266 $x70)))
 (let (($x358 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x358 $x267)))
 (let (($x261 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x303 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x261)))))
 (let (($x195 (=> (and $x279 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x261)))))
 (let (($x263 (and $x195 $x282)))
 (let (($x223 (=> $x263 $x325)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (bvule ?x181 (_ bv399 32))))
 (let (($x293 (= $x260 true)))
 (let (($x197 (= $x293 true)))
 (let (($x205 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1181X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1181X) (_ bv0 32)))))
 ))
 (let (($x329 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1180X)))
 (= $x86 false)))
 ))
 (let (($x272 (and $x329 $x205)))
 (let (($x238 (= $x272 true)))
 (let (($x348 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x97 (bvadd symbol.1 (bvmul input.ind-%var1175X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x97))))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv2 32))) ?x278)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv3 32))) ?x291)))
 (let ((?x275 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x355 (= ?x275 ?x92)))))))))
 ))
 (let (($x336 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1174X) (bvult input.ind-%var1174X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x355 $x340))))
 ))
 (let (($x79 (and $x336 $x348)))
 (let (($x150 (= $x79 true)))
 (let (($x328 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1169X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1169X) (_ bv0 32)))))
 ))
 (let (($x186 (forall ((input.ind-%var1168X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1168X)))
 (= $x86 false)))
 ))
 (let (($x349 (and $x186 $x328)))
 (let (($x34 (= $x349 true)))
 (let ((?x169 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x169)))
 (let (($x324 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x251 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x240 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x240 true)))
 (let (($x247 (= $x246 true)))
 (let (($x20 (= $x247 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x284)))
 (let ((?x235 (bvand symbol.1 (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x235)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x158 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x158)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x164 $x170)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x153 $x41)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x133 $x17)))
 (let (($x115 (not $x60)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x63 $x212)))
 (let (($x194 (and (not $x134) $x115)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x189 $x82)))
 (let (($x59 (not $x5)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x210 $x144)))
 (let (($x9 (and (not $x121) $x59)))
 (let (($x202 (and (and (and (and (and (and $x9 $x194) $x56) $x184) $x168) $x200) $x199)))
 (let (($x201 (and $x202 $x159)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x129 (and $x146 $x201)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x51 $x113)))))))
 (let (($x198 (and $x62 $x129)))
 (let (($x203 (= $x198 true)))
 (let (($x300 (= $x203 true)))
 (let (($x226 (= $x300 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x148 true)))
 (let (($x33 (= $x74 true)))
 (let (($x118 (= $x33 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x162 (= $x149 true)))
 (let (($x161 (= $x162 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x176)))
 (let (($x155 (= ?x173 input.dst.llvm-%n)))
 (let (($x139 (= $x155 true)))
 (let (($x103 (= $x139 true)))
 (let (($x43 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x43 true)))
 (let (($x126 (= $x99 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x27 (bvsub ?x24 ?x47)))
 (let (($x42 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x27) (bvult ?x24 ?x27))))
 (let ((?x117 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x117)))
 (let ((?x50 ((_ extract 63 32) ?x125)))
 (let (($x138 (= (_ bv0 32) ?x50)))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x16) $x138) $x42)))
 (let (($x35 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x55 (and $x35 $x7)))
 (let (($x81 (= true $x55)))
 (let (($x244 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (=> $x244 $x81)))
 (let (($x44 (= $x88 true)))
 (let (($x106 (= $x44 true)))
 (let (($x175 (= $x106 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x244 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x124 (and $x104 $x175)))
 (let (($x166 (and $x124 $x126)))
 (let (($x94 (and $x166 $x103)))
 (let (($x135 (and $x94 $x161)))
 (let (($x76 (and $x135 $x118)))
 (let (($x239 (and $x76 $x226)))
 (let (($x248 (and $x239 $x20)))
 (let (($x298 (and $x248 $x301)))
 (let (($x119 (and $x298 $x289)))
 (let (($x29 (and $x119 $x227)))
 (let (($x46 (and $x29 $x34)))
 (let (($x331 (and $x46 $x150)))
 (let (($x287 (and $x331 $x238)))
 (let (($x215 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x215) $x287)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x216 $x207)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x222 $x224)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x305 (and $x87 $x225)))
 (let (($x237 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x358 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x237)))))
 (let (($x101 (=> (and $x244 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x237)))))
 (let (($x352 (and $x101 $x305)))
 (let (($x262 (=> $x352 $x197)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (bvule ?x181 (_ bv399 32))))
 (let (($x293 (= $x260 true)))
 (let (($x197 (= $x293 true)))
 (let (($x205 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1181X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1181X) (_ bv0 32)))))
 ))
 (let (($x329 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1180X)))
 (= $x86 false)))
 ))
 (let (($x272 (and $x329 $x205)))
 (let (($x238 (= $x272 true)))
 (let (($x348 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x97 (bvadd symbol.1 (bvmul input.ind-%var1175X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x97))))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv2 32))) ?x278)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv3 32))) ?x291)))
 (let ((?x275 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x355 (= ?x275 ?x92)))))))))
 ))
 (let (($x336 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1174X) (bvult input.ind-%var1174X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x355 $x340))))
 ))
 (let (($x79 (and $x336 $x348)))
 (let (($x150 (= $x79 true)))
 (let (($x328 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1169X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1169X) (_ bv0 32)))))
 ))
 (let (($x186 (forall ((input.ind-%var1168X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1168X)))
 (= $x86 false)))
 ))
 (let (($x349 (and $x186 $x328)))
 (let (($x34 (= $x349 true)))
 (let ((?x169 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x169)))
 (let (($x324 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x251 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x240 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x240 true)))
 (let (($x247 (= $x246 true)))
 (let (($x20 (= $x247 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x284)))
 (let ((?x235 (bvand symbol.1 (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x235)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x158 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x158)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x164 $x170)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x153 $x41)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x133 $x17)))
 (let (($x115 (not $x60)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x63 $x212)))
 (let (($x194 (and (not $x134) $x115)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x189 $x82)))
 (let (($x59 (not $x5)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x210 $x144)))
 (let (($x9 (and (not $x121) $x59)))
 (let (($x202 (and (and (and (and (and (and $x9 $x194) $x56) $x184) $x168) $x200) $x199)))
 (let (($x201 (and $x202 $x159)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x129 (and $x146 $x201)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x51 $x113)))))))
 (let (($x198 (and $x62 $x129)))
 (let (($x203 (= $x198 true)))
 (let (($x300 (= $x203 true)))
 (let (($x226 (= $x300 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x148 true)))
 (let (($x33 (= $x74 true)))
 (let (($x118 (= $x33 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x162 (= $x149 true)))
 (let (($x161 (= $x162 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x176)))
 (let (($x155 (= ?x173 input.dst.llvm-%n)))
 (let (($x139 (= $x155 true)))
 (let (($x103 (= $x139 true)))
 (let (($x43 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x43 true)))
 (let (($x126 (= $x99 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x27 (bvsub ?x24 ?x47)))
 (let (($x42 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x27) (bvult ?x24 ?x27))))
 (let ((?x117 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x117)))
 (let ((?x50 ((_ extract 63 32) ?x125)))
 (let (($x138 (= (_ bv0 32) ?x50)))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x16) $x138) $x42)))
 (let (($x35 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x55 (and $x35 $x7)))
 (let (($x81 (= true $x55)))
 (let (($x244 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (=> $x244 $x81)))
 (let (($x44 (= $x88 true)))
 (let (($x106 (= $x44 true)))
 (let (($x175 (= $x106 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x244 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x124 (and $x104 $x175)))
 (let (($x166 (and $x124 $x126)))
 (let (($x94 (and $x166 $x103)))
 (let (($x135 (and $x94 $x161)))
 (let (($x76 (and $x135 $x118)))
 (let (($x239 (and $x76 $x226)))
 (let (($x248 (and $x239 $x20)))
 (let (($x298 (and $x248 $x301)))
 (let (($x119 (and $x298 $x289)))
 (let (($x29 (and $x119 $x227)))
 (let (($x46 (and $x29 $x34)))
 (let (($x331 (and $x46 $x150)))
 (let (($x287 (and $x331 $x238)))
 (let (($x215 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x215) $x287)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x216 $x207)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x222 $x224)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x305 (and $x87 $x225)))
 (let (($x237 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x358 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x237)))))
 (let (($x101 (=> (and $x244 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x237)))))
 (let (($x352 (and $x101 $x305)))
 (let (($x262 (=> $x352 $x197)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x322 (bvsle ?x343 (_ bv399 32))))
 (let (($x297 (= $x322 true)))
 (let (($x290 (= $x297 true)))
 (let (($x234 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1199X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1199X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1198X)))
 (= $x332 false)))
 ))
 (let (($x347 (and $x70 $x234)))
 (let (($x276 (= $x347 true)))
 (let (($x310 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let ((?x84 (bvadd symbol.1 (bvmul input.ind-%var1193X (_ bv4 32)))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x84))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv2 32))) ?x346)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv3 32))) ?x209)))
 (let ((?x329 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1193X)))
 (let (($x259 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (=> $x259 (= ?x329 ?x120)))))))))
 ))
 (let (($x348 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1192X) (bvult input.ind-%var1192X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x259 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (= $x259 $x242))))
 ))
 (let (($x65 (and $x348 $x310)))
 (let (($x325 (= $x65 true)))
 (let (($x26 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1187X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1187X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1186X)))
 (= $x332 false)))
 ))
 (let (($x95 (and $x349 $x26)))
 (let (($x97 (= $x95 true)))
 (let ((?x243 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x243)))
 (let (($x281 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x246 true)))
 (let (($x20 (= $x247 true)))
 (let (($x248 (= $x20 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x200)))
 (let ((?x190 (bvand symbol.1 (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x190)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x221 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (and $x221 $x164)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x184 $x158)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x133 $x17)))
 (let (($x115 (not $x60)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (and $x212 $x134)))
 (let (($x245 (and (not $x13) $x115)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x189 $x82)))
 (let (($x59 (not $x5)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x144 $x121)))
 (let (($x63 (and (not $x151) $x59)))
 (let (($x201 (and (and (and (and (and (and $x63 $x245) $x56) $x140) $x170) $x168) $x211)))
 (let (($x129 (and $x201 $x218)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x77 $x129)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x110 (or (bvugt input.memlabel-mem--symbol.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x110) (or $x78 $x156)))))))
 (let (($x203 (and $x210 $x198)))
 (let (($x300 (= $x203 true)))
 (let (($x226 (= $x300 true)))
 (let (($x239 (= $x226 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x148 true)))
 (let (($x33 (= $x74 true)))
 (let (($x118 (= $x33 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x162 (= $x149 true)))
 (let (($x161 (= $x162 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x176)))
 (let (($x155 (= ?x173 input.dst.llvm-%n)))
 (let (($x139 (= $x155 true)))
 (let (($x103 (= $x139 true)))
 (let (($x43 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x43 true)))
 (let (($x126 (= $x99 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x138 (bvsub ?x24 ?x47)))
 (let (($x98 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x138) (bvult ?x24 ?x138))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x117 (bvmul (_ bv4 64) ?x183)))
 (let ((?x125 ((_ extract 63 32) ?x117)))
 (let (($x50 (= (_ bv0 32) ?x125)))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x16) $x50) $x98)))
 (let (($x35 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x55 (and $x35 $x7)))
 (let (($x81 (= true $x55)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (=> $x165 $x81)))
 (let (($x44 (= $x88 true)))
 (let (($x106 (= $x44 true)))
 (let (($x175 (= $x106 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x165 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x124 (and $x104 $x175)))
 (let (($x166 (and $x124 $x126)))
 (let (($x94 (and $x166 $x103)))
 (let (($x135 (and $x94 $x161)))
 (let (($x76 (and $x135 $x118)))
 (let (($x240 (and $x76 $x239)))
 (let (($x251 (and $x240 $x248)))
 (let (($x163 (and $x251 $x298)))
 (let (($x169 (and $x163 $x119)))
 (let (($x141 (and $x169 $x29)))
 (let (($x96 (and $x141 $x97)))
 (let (($x69 (and $x96 $x325)))
 (let (($x351 (and $x69 $x276)))
 (let (($x314 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and (not $x314) $x351)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x357 $x12)))
 (let (($x323 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x323 $x219)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x307 $x292)))
 (let (($x195 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x87 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x195)))))
 (let (($x228 (=> (and $x165 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x195)))))
 (let (($x271 (and $x228 $x249)))
 (let (($x39 (=> $x271 $x290)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x322 (bvsle ?x343 (_ bv399 32))))
 (let (($x297 (= $x322 true)))
 (let (($x290 (= $x297 true)))
 (let (($x234 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1199X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1199X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1198X)))
 (= $x332 false)))
 ))
 (let (($x347 (and $x70 $x234)))
 (let (($x276 (= $x347 true)))
 (let (($x310 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let ((?x84 (bvadd symbol.1 (bvmul input.ind-%var1193X (_ bv4 32)))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x84))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv2 32))) ?x346)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv3 32))) ?x209)))
 (let ((?x329 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1193X)))
 (let (($x259 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (=> $x259 (= ?x329 ?x120)))))))))
 ))
 (let (($x348 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1192X) (bvult input.ind-%var1192X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x259 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (= $x259 $x242))))
 ))
 (let (($x65 (and $x348 $x310)))
 (let (($x325 (= $x65 true)))
 (let (($x26 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1187X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1187X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1186X)))
 (= $x332 false)))
 ))
 (let (($x95 (and $x349 $x26)))
 (let (($x97 (= $x95 true)))
 (let ((?x243 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x243)))
 (let (($x281 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x246 true)))
 (let (($x20 (= $x247 true)))
 (let (($x248 (= $x20 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x200)))
 (let ((?x190 (bvand symbol.1 (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x190)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x221 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (and $x221 $x164)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x184 $x158)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x133 $x17)))
 (let (($x115 (not $x60)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (and $x212 $x134)))
 (let (($x245 (and (not $x13) $x115)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x189 $x82)))
 (let (($x59 (not $x5)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x144 $x121)))
 (let (($x63 (and (not $x151) $x59)))
 (let (($x201 (and (and (and (and (and (and $x63 $x245) $x56) $x140) $x170) $x168) $x211)))
 (let (($x129 (and $x201 $x218)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x77 $x129)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x110 (or (bvugt input.memlabel-mem--symbol.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x110) (or $x78 $x156)))))))
 (let (($x203 (and $x210 $x198)))
 (let (($x300 (= $x203 true)))
 (let (($x226 (= $x300 true)))
 (let (($x239 (= $x226 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x148 true)))
 (let (($x33 (= $x74 true)))
 (let (($x118 (= $x33 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x162 (= $x149 true)))
 (let (($x161 (= $x162 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x176)))
 (let (($x155 (= ?x173 input.dst.llvm-%n)))
 (let (($x139 (= $x155 true)))
 (let (($x103 (= $x139 true)))
 (let (($x43 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x43 true)))
 (let (($x126 (= $x99 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x138 (bvsub ?x24 ?x47)))
 (let (($x98 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x138) (bvult ?x24 ?x138))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x117 (bvmul (_ bv4 64) ?x183)))
 (let ((?x125 ((_ extract 63 32) ?x117)))
 (let (($x50 (= (_ bv0 32) ?x125)))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x16) $x50) $x98)))
 (let (($x35 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x55 (and $x35 $x7)))
 (let (($x81 (= true $x55)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (=> $x165 $x81)))
 (let (($x44 (= $x88 true)))
 (let (($x106 (= $x44 true)))
 (let (($x175 (= $x106 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x165 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x124 (and $x104 $x175)))
 (let (($x166 (and $x124 $x126)))
 (let (($x94 (and $x166 $x103)))
 (let (($x135 (and $x94 $x161)))
 (let (($x76 (and $x135 $x118)))
 (let (($x240 (and $x76 $x239)))
 (let (($x251 (and $x240 $x248)))
 (let (($x163 (and $x251 $x298)))
 (let (($x169 (and $x163 $x119)))
 (let (($x141 (and $x169 $x29)))
 (let (($x96 (and $x141 $x97)))
 (let (($x69 (and $x96 $x325)))
 (let (($x351 (and $x69 $x276)))
 (let (($x314 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and (not $x314) $x351)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x357 $x12)))
 (let (($x323 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x323 $x219)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x307 $x292)))
 (let (($x195 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x87 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x195)))))
 (let (($x228 (=> (and $x165 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x195)))))
 (let (($x271 (and $x228 $x249)))
 (let (($x39 (=> $x271 $x290)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x132 (bvsge ?x150 (_ bv0 32))))
 (let (($x15 (= $x132 true)))
 (let (($x360 (= $x15 true)))
 (let (($x340 (forall ((input.ind-%var1217X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1217X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1217X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var1216X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1216X)))
 (= $x232 false)))
 ))
 (let (($x72 (and $x224 $x340)))
 (let (($x187 (= $x72 true)))
 (let (($x207 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1211X (_ bv4 32)))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x205))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv2 32))) ?x355)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv3 32))) ?x252)))
 (let ((?x70 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1211X)))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1211X)))
 (=> $x337 (= ?x70 ?x86)))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1210X) (bvult input.ind-%var1210X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1210X)))
 (= $x337 $x229))))
 ))
 (let (($x262 (and $x310 $x207)))
 (let (($x265 (= $x262 true)))
 (let (($x272 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x95 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x232 false)))
 ))
 (let (($x350 (and $x95 $x272)))
 (let (($x84 (= $x350 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x324)))
 (let (($x227 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x288 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x247 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x20 (= $x247 true)))
 (let (($x248 (= $x20 true)))
 (let (($x251 (= $x248 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x168)))
 (let ((?x284 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x284)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x184 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x221 (= input.memlabel-mem--symbol.1_end ?x184)))
 (let (($x202 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (and $x202 $x221)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x140 $x153)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x133 $x17)))
 (let (($x115 (not $x60)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x194 (and $x134 $x13)))
 (let (($x235 (and (not $x194) $x115)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x189 $x82)))
 (let (($x59 (not $x5)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x121 $x151)))
 (let (($x212 (and (not $x9) $x59)))
 (let (($x129 (and (and (and (and (and (and $x212 $x235) $x56) $x22) $x164) $x170) $x41)))
 (let (($x198 (and $x129 $x159)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x146 $x198)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x18 (or (bvugt input.memlabel-mem--symbol.1_begin ?x145) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x18) (or $x179 $x182)))))))
 (let (($x300 (and $x144 $x203)))
 (let (($x226 (= $x300 true)))
 (let (($x239 (= $x226 true)))
 (let (($x240 (= $x239 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x148 true)))
 (let (($x33 (= $x74 true)))
 (let (($x118 (= $x33 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x162 (= $x149 true)))
 (let (($x161 (= $x162 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x176)))
 (let (($x155 (= ?x173 input.dst.llvm-%n)))
 (let (($x139 (= $x155 true)))
 (let (($x103 (= $x139 true)))
 (let (($x43 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x43 true)))
 (let (($x126 (= $x99 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x50 (bvsub ?x24 ?x47)))
 (let (($x52 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x50) (bvult ?x24 ?x50))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x112)))
 (let ((?x117 ((_ extract 63 32) ?x183)))
 (let (($x125 (= (_ bv0 32) ?x117)))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x16) $x125) $x52)))
 (let (($x35 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x55 (and $x35 $x7)))
 (let (($x81 (= true $x55)))
 (let (($x238 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (=> $x238 $x81)))
 (let (($x44 (= $x88 true)))
 (let (($x106 (= $x44 true)))
 (let (($x175 (= $x106 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x238 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x124 (and $x104 $x175)))
 (let (($x166 (and $x124 $x126)))
 (let (($x94 (and $x166 $x103)))
 (let (($x135 (and $x94 $x161)))
 (let (($x76 (and $x135 $x118)))
 (let (($x246 (and $x76 $x240)))
 (let (($x269 (and $x246 $x251)))
 (let (($x311 (and $x269 $x163)))
 (let (($x243 (and $x311 $x169)))
 (let (($x186 (and $x243 $x141)))
 (let (($x354 (and $x186 $x84)))
 (let (($x260 (and $x354 $x265)))
 (let (($x312 (and $x260 $x187)))
 (let (($x193 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x193) $x312)))
 (let (($x215 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (and $x215 $x278)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x334 (and $x273 $x46)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x266 $x334)))
 (let (($x101 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x307 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x143 (=> (and $x238 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x101)))))
 (let (($x282 (and $x143 $x111)))
 (let (($x313 (=> $x282 $x360)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x132 (bvsge ?x150 (_ bv0 32))))
 (let (($x15 (= $x132 true)))
 (let (($x360 (= $x15 true)))
 (let (($x340 (forall ((input.ind-%var1217X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1217X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1217X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var1216X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1216X)))
 (= $x232 false)))
 ))
 (let (($x72 (and $x224 $x340)))
 (let (($x187 (= $x72 true)))
 (let (($x207 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1211X (_ bv4 32)))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x205))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv2 32))) ?x355)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv3 32))) ?x252)))
 (let ((?x70 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1211X)))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1211X)))
 (=> $x337 (= ?x70 ?x86)))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1210X) (bvult input.ind-%var1210X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1210X)))
 (= $x337 $x229))))
 ))
 (let (($x262 (and $x310 $x207)))
 (let (($x265 (= $x262 true)))
 (let (($x272 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x95 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x232 false)))
 ))
 (let (($x350 (and $x95 $x272)))
 (let (($x84 (= $x350 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x324)))
 (let (($x227 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x288 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x247 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x20 (= $x247 true)))
 (let (($x248 (= $x20 true)))
 (let (($x251 (= $x248 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x168)))
 (let ((?x284 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x284)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x184 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x221 (= input.memlabel-mem--symbol.1_end ?x184)))
 (let (($x202 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (and $x202 $x221)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x140 $x153)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x133 $x17)))
 (let (($x115 (not $x60)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x194 (and $x134 $x13)))
 (let (($x235 (and (not $x194) $x115)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x189 $x82)))
 (let (($x59 (not $x5)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x121 $x151)))
 (let (($x212 (and (not $x9) $x59)))
 (let (($x129 (and (and (and (and (and (and $x212 $x235) $x56) $x22) $x164) $x170) $x41)))
 (let (($x198 (and $x129 $x159)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x146 $x198)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x18 (or (bvugt input.memlabel-mem--symbol.1_begin ?x145) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x18) (or $x179 $x182)))))))
 (let (($x300 (and $x144 $x203)))
 (let (($x226 (= $x300 true)))
 (let (($x239 (= $x226 true)))
 (let (($x240 (= $x239 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x148 true)))
 (let (($x33 (= $x74 true)))
 (let (($x118 (= $x33 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x162 (= $x149 true)))
 (let (($x161 (= $x162 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x176)))
 (let (($x155 (= ?x173 input.dst.llvm-%n)))
 (let (($x139 (= $x155 true)))
 (let (($x103 (= $x139 true)))
 (let (($x43 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x43 true)))
 (let (($x126 (= $x99 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x50 (bvsub ?x24 ?x47)))
 (let (($x52 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x50) (bvult ?x24 ?x50))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x112)))
 (let ((?x117 ((_ extract 63 32) ?x183)))
 (let (($x125 (= (_ bv0 32) ?x117)))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x16) $x125) $x52)))
 (let (($x35 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x55 (and $x35 $x7)))
 (let (($x81 (= true $x55)))
 (let (($x238 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (=> $x238 $x81)))
 (let (($x44 (= $x88 true)))
 (let (($x106 (= $x44 true)))
 (let (($x175 (= $x106 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (= $x238 true)))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x71 (and $x10 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x124 (and $x104 $x175)))
 (let (($x166 (and $x124 $x126)))
 (let (($x94 (and $x166 $x103)))
 (let (($x135 (and $x94 $x161)))
 (let (($x76 (and $x135 $x118)))
 (let (($x246 (and $x76 $x240)))
 (let (($x269 (and $x246 $x251)))
 (let (($x311 (and $x269 $x163)))
 (let (($x243 (and $x311 $x169)))
 (let (($x186 (and $x243 $x141)))
 (let (($x354 (and $x186 $x84)))
 (let (($x260 (and $x354 $x265)))
 (let (($x312 (and $x260 $x187)))
 (let (($x193 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x193) $x312)))
 (let (($x215 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (and $x215 $x278)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x334 (and $x273 $x46)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x266 $x334)))
 (let (($x101 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x307 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x143 (=> (and $x238 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x101)))))
 (let (($x282 (and $x143 $x111)))
 (let (($x313 (=> $x282 $x360)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x31 (bvule ?x325 (_ bv399 32))))
 (let (($x223 (= $x31 true)))
 (let (($x197 (= $x223 true)))
 (let (($x242 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1235X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x92 false)))
 ))
 (let (($x181 (and $x219 $x242)))
 (let (($x73 (= $x181 true)))
 (let (($x12 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let ((?x234 (bvadd symbol.1 (bvmul input.ind-%var1229X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x234))))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv2 32))) ?x259)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv3 32))) ?x83)))
 (let ((?x224 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1229X)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1229X)))
 (=> $x79 (= ?x224 ?x332)))))))))
 ))
 (let (($x207 (forall ((input.ind-%var1228X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var1228X) (bvult input.ind-%var1228X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1228X)))
 (= $x79 $x213))))
 ))
 (let (($x39 (and $x207 $x12)))
 (let (($x40 (= $x39 true)))
 (let (($x347 (forall ((input.ind-%var1223X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1223X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1223X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1222X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1222X)))
 (= $x92 false)))
 ))
 (let (($x255 (and $x350 $x347)))
 (let (($x205 (= $x255 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x281)))
 (let (($x29 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x289 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x243 (= $x169 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x168 (bvsub ?x24 ?x47)))
 (let (($x300 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x168) (bvult ?x24 ?x168))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x284 (bvmul (_ bv4 64) ?x218)))
 (let ((?x41 ((_ extract 63 32) ?x284)))
 (let (($x129 (= (_ bv0 32) ?x41)))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x240 (and (and (and true $x158) $x129) $x300)))
 (let (($x184 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x246 (and $x184 $x240)))
 (let (($x247 (= true $x246)))
 (let (($x276 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x276 $x247)))
 (let (($x248 (= $x20 true)))
 (let (($x251 (= $x248 true)))
 (let (($x269 (= $x251 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x56 true)))
 (let (($x199 (= $x211 true)))
 (let (($x22 (= $x199 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x235 (= $x115 true)))
 (let (($x13 (= $x276 true)))
 (let (($x194 (= $x13 true)))
 (let (($x245 (= $x194 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x210)))
 (let ((?x62 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x62)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x51 $x78)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x110 $x113)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x148 $x74)))
 (let (($x118 (not $x33)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x162 $x161)))
 (let (($x64 (and (not $x135) $x118)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x155 $x139)))
 (let (($x94 (not $x103)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x99 $x126)))
 (let (($x149 (and (not $x166) $x94)))
 (let (($x9 (and (and (and (and (and (and $x149 $x64) $x147) $x145) $x179) $x182) $x157)))
 (let (($x63 (and $x9 $x171)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x98 $x63)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x44 $x106)))))))
 (let (($x82 (and $x43 $x189)))
 (let (($x5 (= $x82 true)))
 (let (($x59 (= $x5 true)))
 (let (($x212 (= $x59 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x130 (= $x27 true)))
 (let (($x112 (= $x130 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x180 (= ?x32 input.dst.llvm-%n)))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x37 (and $x35 $x137)))
 (let (($x183 (and $x37 $x112)))
 (let (($x134 (and $x183 $x212)))
 (let (($x133 (and $x134 $x245)))
 (let (($x190 (and $x133 $x235)))
 (let (($x201 (and $x190 $x22)))
 (let (($x294 (and $x201 $x269)))
 (let (($x288 (and $x294 $x311)))
 (let (($x324 (and $x288 $x243)))
 (let (($x349 (and $x324 $x186)))
 (let (($x167 (and $x349 $x205)))
 (let (($x322 (and $x167 $x40)))
 (let (($x293 (and $x322 $x73)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and (not $x267) $x293)))
 (let (($x314 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x314 $x346)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x216 $x96)))
 (let (($x222 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x222 $x233)))
 (let (($x228 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x228)))))
 (let (($x67 (=> (and $x276 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x228)))))
 (let (($x305 (and $x67 $x91)))
 (let (($x333 (=> $x305 $x197)))
 (not $x333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x31 (bvule ?x325 (_ bv399 32))))
 (let (($x223 (= $x31 true)))
 (let (($x197 (= $x223 true)))
 (let (($x242 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1235X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x92 false)))
 ))
 (let (($x181 (and $x219 $x242)))
 (let (($x73 (= $x181 true)))
 (let (($x12 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let ((?x234 (bvadd symbol.1 (bvmul input.ind-%var1229X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x234))))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv2 32))) ?x259)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv3 32))) ?x83)))
 (let ((?x224 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1229X)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1229X)))
 (=> $x79 (= ?x224 ?x332)))))))))
 ))
 (let (($x207 (forall ((input.ind-%var1228X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var1228X) (bvult input.ind-%var1228X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1228X)))
 (= $x79 $x213))))
 ))
 (let (($x39 (and $x207 $x12)))
 (let (($x40 (= $x39 true)))
 (let (($x347 (forall ((input.ind-%var1223X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1223X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1223X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1222X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1222X)))
 (= $x92 false)))
 ))
 (let (($x255 (and $x350 $x347)))
 (let (($x205 (= $x255 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x281)))
 (let (($x29 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x289 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x243 (= $x169 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x168 (bvsub ?x24 ?x47)))
 (let (($x300 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x168) (bvult ?x24 ?x168))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x284 (bvmul (_ bv4 64) ?x218)))
 (let ((?x41 ((_ extract 63 32) ?x284)))
 (let (($x129 (= (_ bv0 32) ?x41)))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x240 (and (and (and true $x158) $x129) $x300)))
 (let (($x184 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x246 (and $x184 $x240)))
 (let (($x247 (= true $x246)))
 (let (($x276 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x276 $x247)))
 (let (($x248 (= $x20 true)))
 (let (($x251 (= $x248 true)))
 (let (($x269 (= $x251 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x56 true)))
 (let (($x199 (= $x211 true)))
 (let (($x22 (= $x199 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x235 (= $x115 true)))
 (let (($x13 (= $x276 true)))
 (let (($x194 (= $x13 true)))
 (let (($x245 (= $x194 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x210)))
 (let ((?x62 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x62)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x51 $x78)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x110 $x113)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x148 $x74)))
 (let (($x118 (not $x33)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x162 $x161)))
 (let (($x64 (and (not $x135) $x118)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x155 $x139)))
 (let (($x94 (not $x103)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x99 $x126)))
 (let (($x149 (and (not $x166) $x94)))
 (let (($x9 (and (and (and (and (and (and $x149 $x64) $x147) $x145) $x179) $x182) $x157)))
 (let (($x63 (and $x9 $x171)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x98 $x63)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x44 $x106)))))))
 (let (($x82 (and $x43 $x189)))
 (let (($x5 (= $x82 true)))
 (let (($x59 (= $x5 true)))
 (let (($x212 (= $x59 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x130 (= $x27 true)))
 (let (($x112 (= $x130 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x180 (= ?x32 input.dst.llvm-%n)))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x37 (and $x35 $x137)))
 (let (($x183 (and $x37 $x112)))
 (let (($x134 (and $x183 $x212)))
 (let (($x133 (and $x134 $x245)))
 (let (($x190 (and $x133 $x235)))
 (let (($x201 (and $x190 $x22)))
 (let (($x294 (and $x201 $x269)))
 (let (($x288 (and $x294 $x311)))
 (let (($x324 (and $x288 $x243)))
 (let (($x349 (and $x324 $x186)))
 (let (($x167 (and $x349 $x205)))
 (let (($x322 (and $x167 $x40)))
 (let (($x293 (and $x322 $x73)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and (not $x267) $x293)))
 (let (($x314 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x314 $x346)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x216 $x96)))
 (let (($x222 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x222 $x233)))
 (let (($x228 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x228)))))
 (let (($x67 (=> (and $x276 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x228)))))
 (let (($x305 (and $x67 $x91)))
 (let (($x333 (=> $x305 $x197)))
 (not $x333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (bvsle ?x265 (_ bv399 32))))
 (let (($x152 (= $x160 true)))
 (let (($x290 (= $x152 true)))
 (let (($x229 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1253X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1253X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1252X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1252X)))
 (= $x120 false)))
 ))
 (let (($x343 (and $x46 $x229)))
 (let (($x296 (= $x343 true)))
 (let (($x278 (forall ((input.ind-%var1247X (_ BitVec 32)) )(let ((?x340 (bvadd symbol.1 (bvmul input.ind-%var1247X (_ bv4 32)))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x340))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv2 32))) ?x337)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv3 32))) ?x295)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1247X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1247X)))
 (=> $x65 (= ?x219 ?x232)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var1246X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1246X) (bvult input.ind-%var1246X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1246X)))
 (= $x65 $x328))))
 ))
 (let (($x313 (and $x12 $x278)))
 (let (($x100 (= $x313 true)))
 (let (($x72 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1241X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1241X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var1240X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1240X)))
 (= $x120 false)))
 ))
 (let (($x258 (and $x255 $x72)))
 (let (($x234 (= $x258 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x227)))
 (let (($x141 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x119 true)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x239 (bvsub ?x24 ?x47)))
 (let (($x203 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x239) (bvult ?x24 ?x239))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x284 (bvmul (_ bv4 64) ?x218)))
 (let ((?x41 ((_ extract 63 32) ?x284)))
 (let (($x129 (= (_ bv0 32) ?x41)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x246 (and (and (and true $x226) $x129) $x203)))
 (let (($x153 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x247 (and $x153 $x246)))
 (let (($x20 (= true $x247)))
 (let (($x187 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x187 $x20)))
 (let (($x251 (= $x248 true)))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x199 (= $x211 true)))
 (let (($x22 (= $x199 true)))
 (let (($x201 (= $x22 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x60 true)))
 (let (($x235 (= $x115 true)))
 (let (($x190 (= $x235 true)))
 (let (($x194 (= $x187 true)))
 (let (($x245 (= $x194 true)))
 (let (($x133 (= $x245 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x182)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x121)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x110 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x110)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x18 (and $x146 $x51)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x145 $x18)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x148 $x74)))
 (let (($x118 (not $x33)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x161 $x135)))
 (let (($x144 (and (not $x76) $x118)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x155 $x139)))
 (let (($x94 (not $x103)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x126 $x166)))
 (let (($x162 (and (not $x48) $x94)))
 (let (($x63 (and (and (and (and (and (and $x162 $x144) $x147) $x77) $x78) $x179) $x156)))
 (let (($x189 (and $x63 $x151)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x82 (and $x173 $x189)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x52) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x175 $x124)))))))
 (let (($x5 (and $x99 $x82)))
 (let (($x59 (= $x5 true)))
 (let (($x212 (= $x59 true)))
 (let (($x134 (= $x212 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x130 (= $x27 true)))
 (let (($x112 (= $x130 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x180 (= ?x32 input.dst.llvm-%n)))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x37 (and $x35 $x137)))
 (let (($x183 (and $x37 $x112)))
 (let (($x13 (and $x183 $x134)))
 (let (($x17 (and $x13 $x133)))
 (let (($x56 (and $x17 $x190)))
 (let (($x140 (and $x56 $x201)))
 (let (($x301 (and $x140 $x294)))
 (let (($x289 (and $x301 $x288)))
 (let (($x281 (and $x289 $x324)))
 (let (($x95 (and $x281 $x349)))
 (let (($x359 (and $x95 $x234)))
 (let (($x132 (and $x359 $x100)))
 (let (($x297 (and $x132 $x296)))
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x355 (and (not $x225) $x297)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x193 $x355)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x357 $x354)))
 (let (($x323 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x142 (and $x323 $x11)))
 (let (($x143 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x222 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x143)))))
 (let (($x206 (=> (and $x187 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x143)))))
 (let (($x249 (and $x206 $x142)))
 (let (($x275 (=> $x249 $x290)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (bvsle ?x265 (_ bv399 32))))
 (let (($x152 (= $x160 true)))
 (let (($x290 (= $x152 true)))
 (let (($x229 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1253X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1253X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1252X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1252X)))
 (= $x120 false)))
 ))
 (let (($x343 (and $x46 $x229)))
 (let (($x296 (= $x343 true)))
 (let (($x278 (forall ((input.ind-%var1247X (_ BitVec 32)) )(let ((?x340 (bvadd symbol.1 (bvmul input.ind-%var1247X (_ bv4 32)))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x340))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv2 32))) ?x337)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv3 32))) ?x295)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1247X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1247X)))
 (=> $x65 (= ?x219 ?x232)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var1246X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1246X) (bvult input.ind-%var1246X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1246X)))
 (= $x65 $x328))))
 ))
 (let (($x313 (and $x12 $x278)))
 (let (($x100 (= $x313 true)))
 (let (($x72 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1241X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1241X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var1240X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1240X)))
 (= $x120 false)))
 ))
 (let (($x258 (and $x255 $x72)))
 (let (($x234 (= $x258 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x227)))
 (let (($x141 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x119 true)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x298 true)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x239 (bvsub ?x24 ?x47)))
 (let (($x203 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x239) (bvult ?x24 ?x239))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x284 (bvmul (_ bv4 64) ?x218)))
 (let ((?x41 ((_ extract 63 32) ?x284)))
 (let (($x129 (= (_ bv0 32) ?x41)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x246 (and (and (and true $x226) $x129) $x203)))
 (let (($x153 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x247 (and $x153 $x246)))
 (let (($x20 (= true $x247)))
 (let (($x187 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x187 $x20)))
 (let (($x251 (= $x248 true)))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x199 (= $x211 true)))
 (let (($x22 (= $x199 true)))
 (let (($x201 (= $x22 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x60 true)))
 (let (($x235 (= $x115 true)))
 (let (($x190 (= $x235 true)))
 (let (($x194 (= $x187 true)))
 (let (($x245 (= $x194 true)))
 (let (($x133 (= $x245 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x182)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x121)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x110 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x110)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x18 (and $x146 $x51)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x145 $x18)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x148 $x74)))
 (let (($x118 (not $x33)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x161 $x135)))
 (let (($x144 (and (not $x76) $x118)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x155 $x139)))
 (let (($x94 (not $x103)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x126 $x166)))
 (let (($x162 (and (not $x48) $x94)))
 (let (($x63 (and (and (and (and (and (and $x162 $x144) $x147) $x77) $x78) $x179) $x156)))
 (let (($x189 (and $x63 $x151)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x82 (and $x173 $x189)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x52) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x175 $x124)))))))
 (let (($x5 (and $x99 $x82)))
 (let (($x59 (= $x5 true)))
 (let (($x212 (= $x59 true)))
 (let (($x134 (= $x212 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x130 (= $x27 true)))
 (let (($x112 (= $x130 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x180 (= ?x32 input.dst.llvm-%n)))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x37 (and $x35 $x137)))
 (let (($x183 (and $x37 $x112)))
 (let (($x13 (and $x183 $x134)))
 (let (($x17 (and $x13 $x133)))
 (let (($x56 (and $x17 $x190)))
 (let (($x140 (and $x56 $x201)))
 (let (($x301 (and $x140 $x294)))
 (let (($x289 (and $x301 $x288)))
 (let (($x281 (and $x289 $x324)))
 (let (($x95 (and $x281 $x349)))
 (let (($x359 (and $x95 $x234)))
 (let (($x132 (and $x359 $x100)))
 (let (($x297 (and $x132 $x296)))
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x355 (and (not $x225) $x297)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x193 $x355)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x357 $x354)))
 (let (($x323 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x142 (and $x323 $x11)))
 (let (($x143 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x222 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x143)))))
 (let (($x206 (=> (and $x187 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x143)))))
 (let (($x249 (and $x206 $x142)))
 (let (($x275 (=> $x249 $x290)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (bvsge ?x40 (_ bv0 32))))
 (let (($x220 (= $x117 true)))
 (let (($x360 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1271X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1271X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1271X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1270X)))
 (= $x86 false)))
 ))
 (let (($x150 (and $x96 $x213)))
 (let (($x336 (= $x150 true)))
 (let (($x346 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1265X (_ bv4 32)))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x79)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x256)))
 (let ((?x46 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1265X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x262 (= ?x46 ?x92)))))))))
 ))
 (let (($x278 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1264X) (bvult input.ind-%var1264X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x262 $x26))))
 ))
 (let (($x333 (and $x278 $x346)))
 (let (($x263 (= $x333 true)))
 (let (($x181 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1259X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1259X) (_ bv0 32)))))
 ))
 (let (($x258 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1258X)))
 (= $x86 false)))
 ))
 (let (($x331 (and $x258 $x181)))
 (let (($x340 (= $x331 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x29)))
 (let (($x186 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x349 (= $x186 true)))
 (let (($x95 (= $x349 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x240 (bvsub ?x24 ?x47)))
 (let (($x198 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x240) (bvult ?x24 ?x240))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x284 (bvmul (_ bv4 64) ?x218)))
 (let ((?x41 ((_ extract 63 32) ?x284)))
 (let (($x129 (= (_ bv0 32) ?x41)))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x247 (and (and (and true $x300) $x129) $x198)))
 (let (($x164 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x20 (and $x164 $x247)))
 (let (($x248 (= true $x20)))
 (let (($x73 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x73 $x248)))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x199 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x199 true)))
 (let (($x201 (= $x22 true)))
 (let (($x140 (= $x201 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x235 (= $x115 true)))
 (let (($x190 (= $x235 true)))
 (let (($x56 (= $x190 true)))
 (let (($x245 (= $x73 true)))
 (let (($x133 (= $x245 true)))
 (let (($x17 (= $x133 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x179)))
 (let ((?x210 (bvand symbol.1 (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x210)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x145 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x146 (= input.memlabel-mem--symbol.1_end ?x145)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x110 (and $x9 $x146)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x77 $x110)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x148 $x74)))
 (let (($x118 (not $x33)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x135 $x76)))
 (let (($x62 (and (not $x64) $x118)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x155 $x139)))
 (let (($x94 (not $x103)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x166 $x48)))
 (let (($x161 (and (not $x149) $x94)))
 (let (($x189 (and (and (and (and (and (and $x161 $x62) $x147) $x8) $x51) $x78) $x113)))
 (let (($x82 (and $x189 $x171)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x98 $x82)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x131 $x176)))))))
 (let (($x59 (and $x126 $x5)))
 (let (($x212 (= $x59 true)))
 (let (($x134 (= $x212 true)))
 (let (($x13 (= $x134 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x130 (= $x27 true)))
 (let (($x112 (= $x130 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x180 (= ?x32 input.dst.llvm-%n)))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x37 (and $x35 $x137)))
 (let (($x183 (and $x37 $x112)))
 (let (($x194 (and $x183 $x13)))
 (let (($x60 (and $x194 $x17)))
 (let (($x211 (and $x60 $x56)))
 (let (($x202 (and $x211 $x140)))
 (let (($x298 (and $x202 $x301)))
 (let (($x119 (and $x298 $x289)))
 (let (($x227 (and $x119 $x281)))
 (let (($x350 (and $x227 $x95)))
 (let (($x257 (and $x350 $x340)))
 (let (($x31 (and $x257 $x263)))
 (let (($x15 (and $x31 $x336)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and (not $x292) $x15)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x267 $x259)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x215 $x167)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x273 $x287)))
 (let (($x67 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x323 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x303 (=> (and $x73 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x67)))))
 (let (($x111 (and $x303 $x6)))
 (let (($x329 (=> $x111 $x360)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (bvsge ?x40 (_ bv0 32))))
 (let (($x220 (= $x117 true)))
 (let (($x360 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1271X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1271X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1271X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1270X)))
 (= $x86 false)))
 ))
 (let (($x150 (and $x96 $x213)))
 (let (($x336 (= $x150 true)))
 (let (($x346 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1265X (_ bv4 32)))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x79)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x256)))
 (let ((?x46 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1265X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x262 (= ?x46 ?x92)))))))))
 ))
 (let (($x278 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1264X) (bvult input.ind-%var1264X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x262 $x26))))
 ))
 (let (($x333 (and $x278 $x346)))
 (let (($x263 (= $x333 true)))
 (let (($x181 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1259X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1259X) (_ bv0 32)))))
 ))
 (let (($x258 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1258X)))
 (= $x86 false)))
 ))
 (let (($x331 (and $x258 $x181)))
 (let (($x340 (= $x331 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x29)))
 (let (($x186 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x349 (= $x186 true)))
 (let (($x95 (= $x349 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (= $x163 true)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x240 (bvsub ?x24 ?x47)))
 (let (($x198 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x240) (bvult ?x24 ?x240))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x284 (bvmul (_ bv4 64) ?x218)))
 (let ((?x41 ((_ extract 63 32) ?x284)))
 (let (($x129 (= (_ bv0 32) ?x41)))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x247 (and (and (and true $x300) $x129) $x198)))
 (let (($x164 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x20 (and $x164 $x247)))
 (let (($x248 (= true $x20)))
 (let (($x73 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x73 $x248)))
 (let (($x269 (= $x251 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x199 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x199 true)))
 (let (($x201 (= $x22 true)))
 (let (($x140 (= $x201 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x235 (= $x115 true)))
 (let (($x190 (= $x235 true)))
 (let (($x56 (= $x190 true)))
 (let (($x245 (= $x73 true)))
 (let (($x133 (= $x245 true)))
 (let (($x17 (= $x133 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x179)))
 (let ((?x210 (bvand symbol.1 (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x210)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x145 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x146 (= input.memlabel-mem--symbol.1_end ?x145)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x110 (and $x9 $x146)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x77 $x110)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x148 $x74)))
 (let (($x118 (not $x33)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x135 $x76)))
 (let (($x62 (and (not $x64) $x118)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x155 $x139)))
 (let (($x94 (not $x103)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x166 $x48)))
 (let (($x161 (and (not $x149) $x94)))
 (let (($x189 (and (and (and (and (and (and $x161 $x62) $x147) $x8) $x51) $x78) $x113)))
 (let (($x82 (and $x189 $x171)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x98 $x82)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x131 $x176)))))))
 (let (($x59 (and $x126 $x5)))
 (let (($x212 (= $x59 true)))
 (let (($x134 (= $x212 true)))
 (let (($x13 (= $x134 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x16 true)))
 (let (($x130 (= $x27 true)))
 (let (($x112 (= $x130 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x180 (= ?x32 input.dst.llvm-%n)))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x37 (and $x35 $x137)))
 (let (($x183 (and $x37 $x112)))
 (let (($x194 (and $x183 $x13)))
 (let (($x60 (and $x194 $x17)))
 (let (($x211 (and $x60 $x56)))
 (let (($x202 (and $x211 $x140)))
 (let (($x298 (and $x202 $x301)))
 (let (($x119 (and $x298 $x289)))
 (let (($x227 (and $x119 $x281)))
 (let (($x350 (and $x227 $x95)))
 (let (($x257 (and $x350 $x340)))
 (let (($x31 (and $x257 $x263)))
 (let (($x15 (and $x31 $x336)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and (not $x292) $x15)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x267 $x259)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x215 $x167)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x273 $x287)))
 (let (($x67 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x323 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x303 (=> (and $x73 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x67)))))
 (let (($x111 (and $x303 $x6)))
 (let (($x329 (=> $x111 $x360)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (bvule ?x100 input.dst.llvm-%n)))
 (let (($x80 (= $x42 true)))
 (let (($x197 (= $x80 true)))
 (let (($x328 (forall ((input.ind-%var1289X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1289X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1289X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1288X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1288X)))
 (= $x332 false)))
 ))
 (let (($x325 (and $x354 $x328)))
 (let (($x348 (= $x325 true)))
 (let (($x355 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var1283X (_ bv4 32)))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x65)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x34)))
 (let ((?x96 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1283X)))
 (let (($x39 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1283X)))
 (=> $x39 (= ?x96 ?x120)))))))))
 ))
 (let (($x346 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1282X) (bvult input.ind-%var1282X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x39 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1282X)))
 (= $x39 $x272))))
 ))
 (let (($x275 (and $x346 $x355)))
 (let (($x352 (= $x275 true)))
 (let (($x343 (forall ((input.ind-%var1277X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1277X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1277X) (_ bv0 32)))))
 ))
 (let (($x331 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1276X)))
 (= $x332 false)))
 ))
 (let (($x69 (and $x331 $x343)))
 (let (($x242 (= $x69 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x349 (= ?x32 input.dst.llvm-%n)))
 (let (($x95 (= $x349 true)))
 (let (($x350 (= $x95 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x324)))
 (let (($x227 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x218 (bvsub ?x24 ?x47)))
 (let (($x246 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x218) (bvult ?x24 ?x218))))
 (let ((?x226 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x226)))
 (let ((?x203 ((_ extract 63 32) ?x300)))
 (let (($x170 (= (_ bv0 32) ?x203)))
 (let (($x221 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x239 (and (and (and true $x221) $x170) $x246)))
 (let (($x202 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x168 (and $x202 $x239)))
 (let (($x198 (= true $x168)))
 (let (($x296 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x296 $x198)))
 (let (($x20 (= $x247 true)))
 (let (($x248 (= $x20 true)))
 (let (($x251 (= $x248 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x56 (= $x190 true)))
 (let (($x211 (= $x56 true)))
 (let (($x199 (= $x211 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x133 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x134 (= $x296 true)))
 (let (($x13 (= $x134 true)))
 (let (($x194 (= $x13 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x110)))
 (let ((?x145 (bvand symbol.1 (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x145)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x156 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x157 (= input.memlabel-mem--symbol.1_end ?x156)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (and $x147 $x157)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x121 $x8)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x135 $x76)))
 (let (($x144 (not $x64)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x103 $x94)))
 (let (($x74 (and (not $x161) $x144)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x166 $x48)))
 (let (($x162 (not $x149)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x126 $x138)))
 (let (($x139 (and (not $x98) $x162)))
 (let (($x113 (and (and (and (and (and (and $x139 $x74) $x33) $x62) $x63) $x9) $x146)))
 (let (($x189 (and $x113 $x51)))
 (let (($x112 (= symbol.1 dst_symbol_addr.1)))
 (let (($x179 (and $x112 $x189)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x106 $x131)))))))
 (let (($x171 (and $x50 $x179)))
 (let (($x82 (= $x171 true)))
 (let (($x5 (= $x82 true)))
 (let (($x59 (= $x5 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x37 (= $x137 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x16 (and $x35 $x37)))
 (let (($x212 (and $x16 $x59)))
 (let (($x245 (and $x212 $x194)))
 (let (($x235 (and $x245 $x115)))
 (let (($x22 (and $x235 $x199)))
 (let (($x269 (and $x22 $x251)))
 (let (($x311 (and $x269 $x163)))
 (let (($x243 (and $x311 $x169)))
 (let (($x186 (and $x243 $x141)))
 (let (($x255 (and $x186 $x350)))
 (let (($x291 (and $x255 $x242)))
 (let (($x160 (and $x291 $x352)))
 (let (($x223 (and $x160 $x348)))
 (let (($x334 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and (not $x334) $x223)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and $x225 $x337)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x351 (and $x314 $x359)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x216 $x351)))
 (let (($x206 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x273 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x206)))))
 (let (($x358 (=> (and $x296 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x206)))))
 (let (($x91 (and $x358 $x277)))
 (let (($x70 (=> $x91 $x197)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (bvule ?x100 input.dst.llvm-%n)))
 (let (($x80 (= $x42 true)))
 (let (($x197 (= $x80 true)))
 (let (($x328 (forall ((input.ind-%var1289X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1289X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1289X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1288X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1288X)))
 (= $x332 false)))
 ))
 (let (($x325 (and $x354 $x328)))
 (let (($x348 (= $x325 true)))
 (let (($x355 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var1283X (_ bv4 32)))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x65)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x34)))
 (let ((?x96 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1283X)))
 (let (($x39 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1283X)))
 (=> $x39 (= ?x96 ?x120)))))))))
 ))
 (let (($x346 (forall ((input.ind-%var1282X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1282X) (bvult input.ind-%var1282X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x39 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1282X)))
 (= $x39 $x272))))
 ))
 (let (($x275 (and $x346 $x355)))
 (let (($x352 (= $x275 true)))
 (let (($x343 (forall ((input.ind-%var1277X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1277X)))
 (=> $x332 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1277X) (_ bv0 32)))))
 ))
 (let (($x331 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1276X)))
 (= $x332 false)))
 ))
 (let (($x69 (and $x331 $x343)))
 (let (($x242 (= $x69 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x127)))
 (let (($x349 (= ?x32 input.dst.llvm-%n)))
 (let (($x95 (= $x349 true)))
 (let (($x350 (= $x95 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x324)))
 (let (($x227 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x288 true)))
 (let (($x119 (= $x289 true)))
 (let (($x169 (= $x119 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x163 (= $x298 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x218 (bvsub ?x24 ?x47)))
 (let (($x246 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x218) (bvult ?x24 ?x218))))
 (let ((?x226 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x226)))
 (let ((?x203 ((_ extract 63 32) ?x300)))
 (let (($x170 (= (_ bv0 32) ?x203)))
 (let (($x221 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x239 (and (and (and true $x221) $x170) $x246)))
 (let (($x202 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x168 (and $x202 $x239)))
 (let (($x198 (= true $x168)))
 (let (($x296 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x296 $x198)))
 (let (($x20 (= $x247 true)))
 (let (($x248 (= $x20 true)))
 (let (($x251 (= $x248 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x56 (= $x190 true)))
 (let (($x211 (= $x56 true)))
 (let (($x199 (= $x211 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x133 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x134 (= $x296 true)))
 (let (($x13 (= $x134 true)))
 (let (($x194 (= $x13 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x110)))
 (let ((?x145 (bvand symbol.1 (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x145)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x156 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x157 (= input.memlabel-mem--symbol.1_end ?x156)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (and $x147 $x157)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x121 $x8)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x135 $x76)))
 (let (($x144 (not $x64)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x103 $x94)))
 (let (($x74 (and (not $x161) $x144)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x166 $x48)))
 (let (($x162 (not $x149)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x126 $x138)))
 (let (($x139 (and (not $x98) $x162)))
 (let (($x113 (and (and (and (and (and (and $x139 $x74) $x33) $x62) $x63) $x9) $x146)))
 (let (($x189 (and $x113 $x51)))
 (let (($x112 (= symbol.1 dst_symbol_addr.1)))
 (let (($x179 (and $x112 $x189)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x106 $x131)))))))
 (let (($x171 (and $x50 $x179)))
 (let (($x82 (= $x171 true)))
 (let (($x5 (= $x82 true)))
 (let (($x59 (= $x5 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x180 true)))
 (let (($x137 (= $x114 true)))
 (let (($x37 (= $x137 true)))
 (let (($x104 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x104 true)))
 (let (($x38 (= $x107 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x154 (and $x116 $x71)))
 (let (($x35 (and $x154 $x38)))
 (let (($x16 (and $x35 $x37)))
 (let (($x212 (and $x16 $x59)))
 (let (($x245 (and $x212 $x194)))
 (let (($x235 (and $x245 $x115)))
 (let (($x22 (and $x235 $x199)))
 (let (($x269 (and $x22 $x251)))
 (let (($x311 (and $x269 $x163)))
 (let (($x243 (and $x311 $x169)))
 (let (($x186 (and $x243 $x141)))
 (let (($x255 (and $x186 $x350)))
 (let (($x291 (and $x255 $x242)))
 (let (($x160 (and $x291 $x352)))
 (let (($x223 (and $x160 $x348)))
 (let (($x334 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and (not $x334) $x223)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and $x225 $x337)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x351 (and $x314 $x359)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x216 $x351)))
 (let (($x206 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x273 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x206)))))
 (let (($x358 (=> (and $x296 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x206)))))
 (let (($x91 (and $x358 $x277)))
 (let (($x70 (=> $x91 $x197)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1315X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x206 (bvadd ?x24 (_ bv3 32))))
 (let ((?x85 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x264 (store ?x85 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x315 (store ?x264 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x19 (store ?x315 ?x206 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x122 (concat (select ?x19 (bvadd ?x213 (_ bv2 32))) (concat (select ?x19 (bvadd ?x213 (_ bv1 32))) (select ?x19 ?x213)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x208 (= input.ind-%var1315X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x306 (= (ite $x208 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x19 (bvadd ?x213 (_ bv3 32))) ?x122))))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (let (($x57 (or $x313 $x208)))
 (=> $x57 $x306))))))))))))))))
 ))
 (let (($x54 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x120 (bvule (_ bv0 32) input.ind-%var1314X)))
 (let (($x299 (and $x120 (bvult input.ind-%var1314X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x208 (= input.ind-%var1314X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (let (($x57 (or $x313 $x208)))
 (= $x57 $x299)))))))
 ))
 (let (($x339 (and $x54 $x196)))
 (let (($x263 (= true true)))
 (let (($x268 (and $x263 $x339)))
 (let (($x285 (= $x268 true)))
 (let (($x26 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1307X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1307X) (_ bv0 32)))))
 ))
 (let (($x167 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1306X)))
 (= $x232 false)))
 ))
 (let (($x265 (and $x167 $x26)))
 (let (($x310 (= $x265 true)))
 (let (($x259 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1301X (_ bv4 32)))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x213))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv2 32))) ?x262)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv3 32))) ?x97)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1301X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1301X)))
 (=> $x313 (= ?x354 ?x86)))))))))
 ))
 (let (($x355 (forall ((input.ind-%var1300X (_ BitVec 32)) )(let (($x120 (bvule (_ bv0 32) input.ind-%var1300X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1300X)))
 (= $x313 (and $x120 (bvult input.ind-%var1300X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x329 (and $x355 $x259)))
 (let (($x271 (= $x329 true)))
 (let (($x150 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1295X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1295X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1294X)))
 (= $x232 false)))
 ))
 (let (($x260 (and $x69 $x150)))
 (let (($x229 (= $x260 true)))
 (let ((?x186 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x186)))
 (let (($x95 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x95 true)))
 (let (($x255 (= $x350 true)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x294)))
 (let ((?x251 (bvand symbol.1 (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x251)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x239 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x239)))
 (let (($x246 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x246 $x168)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x129 $x198)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x300 (and $x158 $x226)))
 (let (($x203 (not $x300)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x159 (and $x200 $x221)))
 (let (($x240 (and (not $x159) $x203)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x201 $x140)))
 (let (($x153 (not $x202)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x211 $x199)))
 (let (($x164 (and (not $x22) $x153)))
 (let (($x119 (and (and (and (and (and (and $x164 $x240) $x284) $x41) $x247) $x248) $x269)))
 (let (($x169 (and $x119 $x301)))
 (let (($x189 (= symbol.1 dst_symbol_addr.1)))
 (let (($x243 (and $x189 $x169)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x212 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x212) (or $x245 $x133)))))))
 (let (($x324 (and $x56 $x243)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x9 true)))
 (let (($x145 (= $x210 true)))
 (let (($x146 (= $x145 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x157 true)))
 (let (($x63 (= $x8 true)))
 (let (($x151 (= $x63 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x62 true)))
 (let (($x121 (= $x78 true)))
 (let (($x147 (= $x121 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x162 (bvsub ?x24 ?x47)))
 (let (($x161 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x162) (bvult ?x24 ?x162))))
 (let ((?x155 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvmul (_ bv4 64) ?x155)))
 (let ((?x48 ((_ extract 63 32) ?x166)))
 (let (($x149 (= (_ bv0 32) ?x48)))
 (let (($x138 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x76 (and (and (and true $x138) $x149) $x161)))
 (let (($x125 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x64 (and $x125 $x76)))
 (let (($x144 (= true $x64)))
 (let (($x336 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (=> $x336 $x144)))
 (let (($x182 (= $x74 true)))
 (let (($x33 (= $x182 true)))
 (let (($x18 (= $x33 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x106 (= $x88 true)))
 (let (($x175 (= $x106 true)))
 (let (($x131 (= $x175 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x173 (= $x7 true)))
 (let (($x55 (= $x173 true)))
 (let (($x81 (= $x55 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x16 (= $x37 true)))
 (let (($x183 (= $x16 true)))
 (let (($x52 (= $x183 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x38 true)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x90 (= $x336 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x104 (and $x154 $x32)))
 (let (($x137 (and $x104 $x114)))
 (let (($x99 (and $x137 $x52)))
 (let (($x44 (and $x99 $x81)))
 (let (($x124 (and $x44 $x131)))
 (let (($x118 (and $x124 $x18)))
 (let (($x156 (and $x118 $x147)))
 (let (($x77 (and $x156 $x151)))
 (let (($x113 (and $x77 $x146)))
 (let (($x141 (and $x113 $x29)))
 (let (($x258 (and $x141 $x255)))
 (let (($x209 (and $x258 $x229)))
 (let (($x117 (and $x209 $x271)))
 (let (($x152 (and $x117 $x310)))
 (let (($x233 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and (not $x233) $x152)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and $x292 $x79)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x193 $x257)))
 (let (($x357 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x357 $x312)))
 (let (($x303 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x216 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x303)))))
 (let (($x87 (=> (and $x336 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x303)))))
 (let (($x142 (and $x87 $x185)))
 (let (($x335 (=> $x142 $x285)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1315X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x206 (bvadd ?x24 (_ bv3 32))))
 (let ((?x85 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x264 (store ?x85 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x315 (store ?x264 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x19 (store ?x315 ?x206 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x122 (concat (select ?x19 (bvadd ?x213 (_ bv2 32))) (concat (select ?x19 (bvadd ?x213 (_ bv1 32))) (select ?x19 ?x213)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x208 (= input.ind-%var1315X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x306 (= (ite $x208 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x19 (bvadd ?x213 (_ bv3 32))) ?x122))))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (let (($x57 (or $x313 $x208)))
 (=> $x57 $x306))))))))))))))))
 ))
 (let (($x54 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x120 (bvule (_ bv0 32) input.ind-%var1314X)))
 (let (($x299 (and $x120 (bvult input.ind-%var1314X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x208 (= input.ind-%var1314X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (let (($x57 (or $x313 $x208)))
 (= $x57 $x299)))))))
 ))
 (let (($x339 (and $x54 $x196)))
 (let (($x263 (= true true)))
 (let (($x268 (and $x263 $x339)))
 (let (($x285 (= $x268 true)))
 (let (($x26 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1307X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1307X) (_ bv0 32)))))
 ))
 (let (($x167 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1306X)))
 (= $x232 false)))
 ))
 (let (($x265 (and $x167 $x26)))
 (let (($x310 (= $x265 true)))
 (let (($x259 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1301X (_ bv4 32)))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x213))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv2 32))) ?x262)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv3 32))) ?x97)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1301X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1301X)))
 (=> $x313 (= ?x354 ?x86)))))))))
 ))
 (let (($x355 (forall ((input.ind-%var1300X (_ BitVec 32)) )(let (($x120 (bvule (_ bv0 32) input.ind-%var1300X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1300X)))
 (= $x313 (and $x120 (bvult input.ind-%var1300X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x329 (and $x355 $x259)))
 (let (($x271 (= $x329 true)))
 (let (($x150 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1295X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1295X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1294X)))
 (= $x232 false)))
 ))
 (let (($x260 (and $x69 $x150)))
 (let (($x229 (= $x260 true)))
 (let ((?x186 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x186)))
 (let (($x95 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x95 true)))
 (let (($x255 (= $x350 true)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x294)))
 (let ((?x251 (bvand symbol.1 (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x251)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x239 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x239)))
 (let (($x246 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x246 $x168)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x129 $x198)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x300 (and $x158 $x226)))
 (let (($x203 (not $x300)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x159 (and $x200 $x221)))
 (let (($x240 (and (not $x159) $x203)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x201 $x140)))
 (let (($x153 (not $x202)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x211 $x199)))
 (let (($x164 (and (not $x22) $x153)))
 (let (($x119 (and (and (and (and (and (and $x164 $x240) $x284) $x41) $x247) $x248) $x269)))
 (let (($x169 (and $x119 $x301)))
 (let (($x189 (= symbol.1 dst_symbol_addr.1)))
 (let (($x243 (and $x189 $x169)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x212 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x212) (or $x245 $x133)))))))
 (let (($x324 (and $x56 $x243)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x9 true)))
 (let (($x145 (= $x210 true)))
 (let (($x146 (= $x145 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x157 true)))
 (let (($x63 (= $x8 true)))
 (let (($x151 (= $x63 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x62 true)))
 (let (($x121 (= $x78 true)))
 (let (($x147 (= $x121 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x162 (bvsub ?x24 ?x47)))
 (let (($x161 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x162) (bvult ?x24 ?x162))))
 (let ((?x155 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvmul (_ bv4 64) ?x155)))
 (let ((?x48 ((_ extract 63 32) ?x166)))
 (let (($x149 (= (_ bv0 32) ?x48)))
 (let (($x138 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x76 (and (and (and true $x138) $x149) $x161)))
 (let (($x125 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x64 (and $x125 $x76)))
 (let (($x144 (= true $x64)))
 (let (($x336 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (=> $x336 $x144)))
 (let (($x182 (= $x74 true)))
 (let (($x33 (= $x182 true)))
 (let (($x18 (= $x33 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x106 (= $x88 true)))
 (let (($x175 (= $x106 true)))
 (let (($x131 (= $x175 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x173 (= $x7 true)))
 (let (($x55 (= $x173 true)))
 (let (($x81 (= $x55 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x16 (= $x37 true)))
 (let (($x183 (= $x16 true)))
 (let (($x52 (= $x183 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x38 true)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x90 (= $x336 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x123)))
 (let (($x14 (= ?x10 input.dst.llvm-%n)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x128 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x154 (and $x105 $x71)))
 (let (($x104 (and $x154 $x32)))
 (let (($x137 (and $x104 $x114)))
 (let (($x99 (and $x137 $x52)))
 (let (($x44 (and $x99 $x81)))
 (let (($x124 (and $x44 $x131)))
 (let (($x118 (and $x124 $x18)))
 (let (($x156 (and $x118 $x147)))
 (let (($x77 (and $x156 $x151)))
 (let (($x113 (and $x77 $x146)))
 (let (($x141 (and $x113 $x29)))
 (let (($x258 (and $x141 $x255)))
 (let (($x209 (and $x258 $x229)))
 (let (($x117 (and $x209 $x271)))
 (let (($x152 (and $x117 $x310)))
 (let (($x233 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and (not $x233) $x152)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and $x292 $x79)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x193 $x257)))
 (let (($x357 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x357 $x312)))
 (let (($x303 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x216 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x303)))))
 (let (($x87 (=> (and $x336 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x303)))))
 (let (($x142 (and $x87 $x185)))
 (let (($x335 (=> $x142 $x285)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (not $x328)))
 (let (($x348 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (=> $x348 $x278)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x175 (bvsub ?x24 ?x47)))
 (let (($x43 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x175) (bvult ?x24 ?x175))))
 (let ((?x81 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x81)))
 (let ((?x88 ((_ extract 63 32) ?x44)))
 (let (($x106 (= (_ bv0 32) ?x88)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x50 (and (and (and true $x173) $x106) $x43)))
 (let (($x16 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x112 (and $x16 $x50)))
 (let (($x126 (= true $x112)))
 (let (($x138 (=> $x348 $x126)))
 (let (($x111 (=> (and $x138 $x348) $x278)))
 (let (($x242 (= $x111 true)))
 (let (($x39 (= $x242 true)))
 (let (($x268 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1333X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1333X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1332X)))
 (= $x258 false)))
 ))
 (let (($x285 (and $x122 $x268)))
 (let (($x335 (= $x285 true)))
 (let (($x342 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let ((?x299 (bvadd symbol.1 (bvmul input.ind-%var1327X (_ bv4 32)))))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x231)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x75)))
 (let ((?x15 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1327X)))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (=> $x322 (= ?x15 ?x217)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1326X) (bvult input.ind-%var1326X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1326X)))
 (= $x322 $x340))))
 ))
 (let (($x19 (and $x262 $x342)))
 (let (($x327 (= $x19 true)))
 (let (($x34 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1321X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1321X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1320X)))
 (= $x258 false)))
 ))
 (let (($x347 (and $x69 $x34)))
 (let (($x297 (= $x347 true)))
 (let ((?x301 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x301)))
 (let (($x29 (= ?x169 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x243 (= ?x169 input.dst.llvm-%n)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x248)))
 (let (($x251 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x251 true)))
 (let (($x119 (= $x269 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x203)))
 (let ((?x226 (bvand symbol.1 (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x226)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x200 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x221 (and $x153 $x200)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x202 $x221)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x189 (and $x56 $x51)))
 (let (($x211 (not $x189)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x60 $x115)))
 (let (($x22 (and (not $x235) $x211)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x134 $x13)))
 (let (($x194 (not $x245)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x5 $x59)))
 (let (($x17 (and (not $x212) $x194)))
 (let (($x311 (and (and (and (and (and (and $x17 $x22) $x184) $x140) $x159) $x158) $x300)))
 (let (($x129 (and $x311 $x240)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x246 (and $x78 $x129)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x63 (or (bvugt input.memlabel-mem--symbol.1_begin ?x156) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x63) (or $x210 $x145)))))))
 (let (($x239 (and $x82 $x246)))
 (let (($x168 (= $x239 true)))
 (let (($x198 (= $x168 true)))
 (let (($x247 (= $x198 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x182 (= $x74 true)))
 (let (($x33 (= $x182 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x135 (= $x149 true)))
 (let (($x139 (= $x135 true)))
 (let (($x148 (= $x138 true)))
 (let (($x98 (= $x148 true)))
 (let (($x155 (= $x98 true)))
 (let (($x107 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x38 (= $x107 true)))
 (let (($x35 (= $x38 true)))
 (let (($x180 (= $x35 true)))
 (let (($x154 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x71 (and $x128 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x114 (and $x104 $x180)))
 (let (($x166 (and $x114 $x155)))
 (let (($x162 (and $x166 $x139)))
 (let (($x64 (and $x162 $x76)))
 (let (($x18 (and $x64 $x33)))
 (let (($x288 (and $x18 $x247)))
 (let (($x294 (and $x288 $x119)))
 (let (($x227 (and $x294 $x281)))
 (let (($x349 (and $x227 $x186)))
 (let (($x355 (and $x349 $x297)))
 (let (($x93 (and $x355 $x327)))
 (let (($x53 (and $x93 $x335)))
 (let (($x334 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x334 $x53)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x261 (and $x267 $x276)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x215 $x261)))
 (let (($x358 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x357 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x358)))))
 (let (($x307 (=> (and $x348 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x358)))))
 (let (($x132 (and $x307 $x110)))
 (let (($x275 (=> $x132 $x39)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (not $x328)))
 (let (($x348 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (=> $x348 $x278)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x175 (bvsub ?x24 ?x47)))
 (let (($x43 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x175) (bvult ?x24 ?x175))))
 (let ((?x81 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x81)))
 (let ((?x88 ((_ extract 63 32) ?x44)))
 (let (($x106 (= (_ bv0 32) ?x88)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x50 (and (and (and true $x173) $x106) $x43)))
 (let (($x16 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x112 (and $x16 $x50)))
 (let (($x126 (= true $x112)))
 (let (($x138 (=> $x348 $x126)))
 (let (($x111 (=> (and $x138 $x348) $x278)))
 (let (($x242 (= $x111 true)))
 (let (($x39 (= $x242 true)))
 (let (($x268 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1333X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1333X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1332X)))
 (= $x258 false)))
 ))
 (let (($x285 (and $x122 $x268)))
 (let (($x335 (= $x285 true)))
 (let (($x342 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let ((?x299 (bvadd symbol.1 (bvmul input.ind-%var1327X (_ bv4 32)))))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x231)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x75)))
 (let ((?x15 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1327X)))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (=> $x322 (= ?x15 ?x217)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1326X) (bvult input.ind-%var1326X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1326X)))
 (= $x322 $x340))))
 ))
 (let (($x19 (and $x262 $x342)))
 (let (($x327 (= $x19 true)))
 (let (($x34 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1321X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1321X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1320X)))
 (= $x258 false)))
 ))
 (let (($x347 (and $x69 $x34)))
 (let (($x297 (= $x347 true)))
 (let ((?x301 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x301)))
 (let (($x29 (= ?x169 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x243 (= ?x169 input.dst.llvm-%n)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x248)))
 (let (($x251 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x251 true)))
 (let (($x119 (= $x269 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x203)))
 (let ((?x226 (bvand symbol.1 (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x226)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x200 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x221 (and $x153 $x200)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x202 $x221)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x189 (and $x56 $x51)))
 (let (($x211 (not $x189)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x60 $x115)))
 (let (($x22 (and (not $x235) $x211)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x134 $x13)))
 (let (($x194 (not $x245)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x5 $x59)))
 (let (($x17 (and (not $x212) $x194)))
 (let (($x311 (and (and (and (and (and (and $x17 $x22) $x184) $x140) $x159) $x158) $x300)))
 (let (($x129 (and $x311 $x240)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x246 (and $x78 $x129)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x63 (or (bvugt input.memlabel-mem--symbol.1_begin ?x156) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x63) (or $x210 $x145)))))))
 (let (($x239 (and $x82 $x246)))
 (let (($x168 (= $x239 true)))
 (let (($x198 (= $x168 true)))
 (let (($x247 (= $x198 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x182 (= $x74 true)))
 (let (($x33 (= $x182 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x48 true)))
 (let (($x135 (= $x149 true)))
 (let (($x139 (= $x135 true)))
 (let (($x148 (= $x138 true)))
 (let (($x98 (= $x148 true)))
 (let (($x155 (= $x98 true)))
 (let (($x107 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x38 (= $x107 true)))
 (let (($x35 (= $x38 true)))
 (let (($x180 (= $x35 true)))
 (let (($x154 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x154 true)))
 (let (($x127 (= $x90 true)))
 (let (($x32 (= $x127 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x123 (= $x23 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x71 (and $x128 $x136)))
 (let (($x104 (and $x71 $x32)))
 (let (($x114 (and $x104 $x180)))
 (let (($x166 (and $x114 $x155)))
 (let (($x162 (and $x166 $x139)))
 (let (($x64 (and $x162 $x76)))
 (let (($x18 (and $x64 $x33)))
 (let (($x288 (and $x18 $x247)))
 (let (($x294 (and $x288 $x119)))
 (let (($x227 (and $x294 $x281)))
 (let (($x349 (and $x227 $x186)))
 (let (($x355 (and $x349 $x297)))
 (let (($x93 (and $x355 $x327)))
 (let (($x53 (and $x93 $x335)))
 (let (($x334 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x334 $x53)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x261 (and $x267 $x276)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x215 $x261)))
 (let (($x358 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x357 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x358)))))
 (let (($x307 (=> (and $x348 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x358)))))
 (let (($x132 (and $x307 $x110)))
 (let (($x275 (=> $x132 $x39)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x66 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x84 (bvmul (_ bv4294967295 32) ?x66)))
 (let ((?x83 (bvneg ?x84)))
 (let (($x332 (= ?x83 ?x234)))
 (let (($x181 (= $x332 true)))
 (let (($x333 (forall ((input.ind-%var1351X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1351X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1351X) (_ bv0 32)))))
 ))
 (let (($x232 (forall ((input.ind-%var1350X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1350X)))
 (= $x355 false)))
 ))
 (let (($x346 (and $x232 $x333)))
 (let (($x209 (= $x346 true)))
 (let (($x265 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let ((?x97 (bvadd symbol.1 (bvmul input.ind-%var1345X (_ bv4 32)))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x97))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv2 32))) ?x205)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv3 32))) ?x117)))
 (let ((?x261 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1345X)))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x75 (= ?x261 ?x263)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x122 (and (bvule (_ bv0 32) input.ind-%var1344X) (bvult input.ind-%var1344X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x75 $x122))))
 ))
 (let (($x310 (and $x285 $x265)))
 (let (($x26 (= $x310 true)))
 (let (($x58 (forall ((input.ind-%var1339X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1339X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1339X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1338X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1338X)))
 (= $x355 false)))
 ))
 (let (($x85 (and $x340 $x58)))
 (let (($x54 (= $x85 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x343 (bvneg ?x258)))
 (let (($x69 (= ?x343 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x251 true)))
 (let (($x119 (= $x269 true)))
 (let (($x294 (= $x119 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x226 (bvsub ?x24 ?x47)))
 (let (($x240 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x226) (bvult ?x24 ?x226))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x218)))
 (let ((?x158 ((_ extract 63 32) ?x170)))
 (let (($x41 (= (_ bv0 32) ?x158)))
 (let (($x221 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x239 (and (and (and true $x221) $x41) $x240)))
 (let (($x163 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x168 (and $x163 $x239)))
 (let (($x198 (= true $x168)))
 (let (($x271 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x271 $x198)))
 (let (($x288 (= $x247 true)))
 (let (($x20 (= $x288 true)))
 (let (($x248 (= $x20 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x211 true)))
 (let (($x298 (= $x22 true)))
 (let (($x184 (= $x298 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x199 (= $x235 true)))
 (let (($x56 (= $x199 true)))
 (let (($x51 (= $x56 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x194 (= $x245 true)))
 (let (($x17 (= $x194 true)))
 (let (($x60 (= $x17 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x212 (= $x59 true)))
 (let (($x133 (= $x212 true)))
 (let (($x134 (= $x133 true)))
 (let (($x82 (= $x271 true)))
 (let (($x62 (= $x82 true)))
 (let (($x78 (= $x62 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x147)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x18)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x76 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x64 (= input.memlabel-mem--symbol.1_end ?x76)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (and $x94 $x64)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x103 $x144)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x148 $x98)))
 (let (($x166 (not $x155)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x112 $x126)))
 (let (($x149 (and (not $x138) $x166)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x131 $x175)))
 (let (($x176 (not $x124)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x88 $x106)))
 (let (($x50 (and (not $x130) $x176)))
 (let (($x77 (and (and (and (and (and (and $x50 $x149) $x135) $x162) $x74) $x33) $x121)))
 (let (($x210 (and $x77 $x190)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x9 (and $x104 $x210)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x137 (or (bvugt input.memlabel-mem--symbol.1_begin ?x35) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x137) (or $x183 $x99)))))))
 (let (($x145 (and $x44 $x9)))
 (let (($x146 (= $x145 true)))
 (let (($x113 (= $x146 true)))
 (let (($x179 (= $x113 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x10)))
 (let (($x136 (= ?x128 input.dst.llvm-%n)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x116 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x90 (and $x14 $x154)))
 (let (($x171 (and $x90 $x179)))
 (let (($x5 (and $x171 $x78)))
 (let (($x13 (and $x5 $x134)))
 (let (($x115 (and $x13 $x60)))
 (let (($x189 (and $x115 $x51)))
 (let (($x284 (and $x189 $x184)))
 (let (($x289 (and $x284 $x248)))
 (let (($x301 (and $x289 $x294)))
 (let (($x227 (and $x301 $x281)))
 (let (($x255 (and $x227 $x349)))
 (let (($x120 (and $x255 $x313)))
 (let (($x21 (and $x120 $x54)))
 (let (($x152 (and $x21 $x26)))
 (let (($x57 (and $x152 $x209)))
 (let (($x23 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x23) $x57)))
 (let (($x233 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x230 (and $x233 $x86)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x225 $x230)))
 (let (($x314 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x314 $x196)))
 (let (($x87 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x215 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x266 (=> (and $x271 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x87)))))
 (let (($x339 (and $x266 $x306)))
 (let (($x223 (=> $x339 $x181)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x66 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x84 (bvmul (_ bv4294967295 32) ?x66)))
 (let ((?x83 (bvneg ?x84)))
 (let (($x332 (= ?x83 ?x234)))
 (let (($x181 (= $x332 true)))
 (let (($x333 (forall ((input.ind-%var1351X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1351X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1351X) (_ bv0 32)))))
 ))
 (let (($x232 (forall ((input.ind-%var1350X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1350X)))
 (= $x355 false)))
 ))
 (let (($x346 (and $x232 $x333)))
 (let (($x209 (= $x346 true)))
 (let (($x265 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let ((?x97 (bvadd symbol.1 (bvmul input.ind-%var1345X (_ bv4 32)))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x97))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv2 32))) ?x205)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x97 (_ bv3 32))) ?x117)))
 (let ((?x261 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1345X)))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x75 (= ?x261 ?x263)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x122 (and (bvule (_ bv0 32) input.ind-%var1344X) (bvult input.ind-%var1344X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x75 $x122))))
 ))
 (let (($x310 (and $x285 $x265)))
 (let (($x26 (= $x310 true)))
 (let (($x58 (forall ((input.ind-%var1339X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1339X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1339X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1338X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1338X)))
 (= $x355 false)))
 ))
 (let (($x85 (and $x340 $x58)))
 (let (($x54 (= $x85 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x343 (bvneg ?x258)))
 (let (($x69 (= ?x343 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x251 true)))
 (let (($x119 (= $x269 true)))
 (let (($x294 (= $x119 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x226 (bvsub ?x24 ?x47)))
 (let (($x240 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x226) (bvult ?x24 ?x226))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x218)))
 (let ((?x158 ((_ extract 63 32) ?x170)))
 (let (($x41 (= (_ bv0 32) ?x158)))
 (let (($x221 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x239 (and (and (and true $x221) $x41) $x240)))
 (let (($x163 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x168 (and $x163 $x239)))
 (let (($x198 (= true $x168)))
 (let (($x271 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x271 $x198)))
 (let (($x288 (= $x247 true)))
 (let (($x20 (= $x288 true)))
 (let (($x248 (= $x20 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x211 true)))
 (let (($x298 (= $x22 true)))
 (let (($x184 (= $x298 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x199 (= $x235 true)))
 (let (($x56 (= $x199 true)))
 (let (($x51 (= $x56 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x194 (= $x245 true)))
 (let (($x17 (= $x194 true)))
 (let (($x60 (= $x17 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x212 (= $x59 true)))
 (let (($x133 (= $x212 true)))
 (let (($x134 (= $x133 true)))
 (let (($x82 (= $x271 true)))
 (let (($x62 (= $x82 true)))
 (let (($x78 (= $x62 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x147)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x18)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x76 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x64 (= input.memlabel-mem--symbol.1_end ?x76)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (and $x94 $x64)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x103 $x144)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x148 $x98)))
 (let (($x166 (not $x155)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x112 $x126)))
 (let (($x149 (and (not $x138) $x166)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x131 $x175)))
 (let (($x176 (not $x124)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x88 $x106)))
 (let (($x50 (and (not $x130) $x176)))
 (let (($x77 (and (and (and (and (and (and $x50 $x149) $x135) $x162) $x74) $x33) $x121)))
 (let (($x210 (and $x77 $x190)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x9 (and $x104 $x210)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x137 (or (bvugt input.memlabel-mem--symbol.1_begin ?x35) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x137) (or $x183 $x99)))))))
 (let (($x145 (and $x44 $x9)))
 (let (($x146 (= $x145 true)))
 (let (($x113 (= $x146 true)))
 (let (($x179 (= $x113 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x10)))
 (let (($x136 (= ?x128 input.dst.llvm-%n)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x116 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x90 (and $x14 $x154)))
 (let (($x171 (and $x90 $x179)))
 (let (($x5 (and $x171 $x78)))
 (let (($x13 (and $x5 $x134)))
 (let (($x115 (and $x13 $x60)))
 (let (($x189 (and $x115 $x51)))
 (let (($x284 (and $x189 $x184)))
 (let (($x289 (and $x284 $x248)))
 (let (($x301 (and $x289 $x294)))
 (let (($x227 (and $x301 $x281)))
 (let (($x255 (and $x227 $x349)))
 (let (($x120 (and $x255 $x313)))
 (let (($x21 (and $x120 $x54)))
 (let (($x152 (and $x21 $x26)))
 (let (($x57 (and $x152 $x209)))
 (let (($x23 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x23) $x57)))
 (let (($x233 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x230 (and $x233 $x86)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x225 $x230)))
 (let (($x314 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x314 $x196)))
 (let (($x87 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x215 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x266 (=> (and $x271 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x87)))))
 (let (($x339 (and $x266 $x306)))
 (let (($x223 (=> $x339 $x181)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x286 (bvule ?x260 (_ bv399 32))))
 (let (($x53 (= $x286 true)))
 (let (($x92 (= $x53 true)))
 (let (($x100 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1369X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x329 false)))
 ))
 (let (($x295 (and $x242 $x100)))
 (let (($x299 (= $x295 true)))
 (let (($x347 (forall ((input.ind-%var1363X (_ BitVec 32)) )(let ((?x127 (bvadd symbol.1 (bvmul input.ind-%var1363X (_ bv4 32)))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x335 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x177)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x335)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1363X)))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1363X)))
 (=> $x95 (= ?x232 ?x178)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1362X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1362X) (bvult input.ind-%var1362X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1362X)))
 (= $x95 $x257))))
 ))
 (let (($x278 (and $x265 $x347)))
 (let (($x256 (= $x278 true)))
 (let (($x132 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1357X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1357X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (= $x329 false)))
 ))
 (let (($x96 (and $x85 $x132)))
 (let (($x97 (= $x96 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x343)))
 (let (($x150 (= ?x69 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x141 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x255 (= $x349 true)))
 (let (($x243 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x269 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x119 (= $x269 true)))
 (let (($x294 (= $x119 true)))
 (let (($x301 (= $x294 true)))
 (let ((?x246 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x246)))
 (let ((?x158 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x158)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x200 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x221 (= input.memlabel-mem--symbol.1_end ?x200)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x129 (and $x164 $x221)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x202 $x129)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (and $x211 $x22)))
 (let (($x184 (not $x298)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x189 (and $x56 $x51)))
 (let (($x201 (and (not $x189) $x184)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x194 $x17)))
 (let (($x115 (not $x60)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x134 $x13)))
 (let (($x199 (and (not $x245) $x115)))
 (let (($x168 (and (and (and (and (and (and $x199 $x201) $x140) $x153) $x159) $x170) $x41)))
 (let (($x198 (and $x168 $x300)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x247 (and $x121 $x198)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x190) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x171 $x82)))))))
 (let (($x288 (and $x133 $x247)))
 (let (($x20 (= $x288 true)))
 (let (($x248 (= $x20 true)))
 (let (($x289 (= $x248 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x63 (= $x74 true)))
 (let (($x182 (= $x63 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x98)))
 (let (($x157 (= ?x155 input.dst.llvm-%n)))
 (let (($x139 (= $x157 true)))
 (let (($x162 (= $x139 true)))
 (let (($x166 (= ?x155 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x166 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x32 (bvsub ?x24 ?x47)))
 (let (($x130 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x32) (bvult ?x24 ?x32))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x173)))
 (let ((?x55 ((_ extract 63 32) ?x125)))
 (let (($x44 (= (_ bv0 32) ?x55)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x175 (and (and (and true $x99) $x44) $x130)))
 (let (($x137 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x124 (and $x137 $x175)))
 (let (($x176 (= true $x124)))
 (let (($x328 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x328 $x176)))
 (let (($x112 (= $x50 true)))
 (let (($x126 (= $x112 true)))
 (let (($x138 (= $x126 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (= $x328 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x154 (and $x128 $x71)))
 (let (($x35 (and $x154 $x81)))
 (let (($x48 (and $x35 $x138)))
 (let (($x135 (and $x48 $x156)))
 (let (($x8 (and $x135 $x162)))
 (let (($x64 (and $x8 $x76)))
 (let (($x33 (and $x64 $x182)))
 (let (($x251 (and $x33 $x289)))
 (let (($x169 (and $x251 $x301)))
 (let (($x29 (and $x169 $x227)))
 (let (($x258 (and $x29 $x255)))
 (let (($x297 (and $x258 $x120)))
 (let (($x167 (and $x297 $x97)))
 (let (($x213 (and $x167 $x256)))
 (let (($x231 (and $x213 $x299)))
 (let (($x174 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and (not $x174) $x231)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x11 $x185)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x292 $x208)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x262 (and $x193 $x19)))
 (let (($x307 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x307)))))
 (let (($x222 (=> (and $x328 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x307)))))
 (let (($x68 (and $x222 $x262)))
 (let (($x241 (=> $x68 $x92)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x286 (bvule ?x260 (_ bv399 32))))
 (let (($x53 (= $x286 true)))
 (let (($x92 (= $x53 true)))
 (let (($x100 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1369X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x329 false)))
 ))
 (let (($x295 (and $x242 $x100)))
 (let (($x299 (= $x295 true)))
 (let (($x347 (forall ((input.ind-%var1363X (_ BitVec 32)) )(let ((?x127 (bvadd symbol.1 (bvmul input.ind-%var1363X (_ bv4 32)))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x335 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x177)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x335)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1363X)))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1363X)))
 (=> $x95 (= ?x232 ?x178)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1362X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1362X) (bvult input.ind-%var1362X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1362X)))
 (= $x95 $x257))))
 ))
 (let (($x278 (and $x265 $x347)))
 (let (($x256 (= $x278 true)))
 (let (($x132 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1357X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1357X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (= $x329 false)))
 ))
 (let (($x96 (and $x85 $x132)))
 (let (($x97 (= $x96 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x343)))
 (let (($x150 (= ?x69 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x141 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x255 (= $x349 true)))
 (let (($x243 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x269 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x119 (= $x269 true)))
 (let (($x294 (= $x119 true)))
 (let (($x301 (= $x294 true)))
 (let ((?x246 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x246)))
 (let ((?x158 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x158)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x200 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x221 (= input.memlabel-mem--symbol.1_end ?x200)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x129 (and $x164 $x221)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x202 $x129)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (and $x211 $x22)))
 (let (($x184 (not $x298)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x189 (and $x56 $x51)))
 (let (($x201 (and (not $x189) $x184)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x194 $x17)))
 (let (($x115 (not $x60)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x134 $x13)))
 (let (($x199 (and (not $x245) $x115)))
 (let (($x168 (and (and (and (and (and (and $x199 $x201) $x140) $x153) $x159) $x170) $x41)))
 (let (($x198 (and $x168 $x300)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x247 (and $x121 $x198)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x190) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x171 $x82)))))))
 (let (($x288 (and $x133 $x247)))
 (let (($x20 (= $x288 true)))
 (let (($x248 (= $x20 true)))
 (let (($x289 (= $x248 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x63 (= $x74 true)))
 (let (($x182 (= $x63 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x98)))
 (let (($x157 (= ?x155 input.dst.llvm-%n)))
 (let (($x139 (= $x157 true)))
 (let (($x162 (= $x139 true)))
 (let (($x166 (= ?x155 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x166 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x32 (bvsub ?x24 ?x47)))
 (let (($x130 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x32) (bvult ?x24 ?x32))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x173)))
 (let ((?x55 ((_ extract 63 32) ?x125)))
 (let (($x44 (= (_ bv0 32) ?x55)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x175 (and (and (and true $x99) $x44) $x130)))
 (let (($x137 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x124 (and $x137 $x175)))
 (let (($x176 (= true $x124)))
 (let (($x328 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x328 $x176)))
 (let (($x112 (= $x50 true)))
 (let (($x126 (= $x112 true)))
 (let (($x138 (= $x126 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (= $x328 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x154 (and $x128 $x71)))
 (let (($x35 (and $x154 $x81)))
 (let (($x48 (and $x35 $x138)))
 (let (($x135 (and $x48 $x156)))
 (let (($x8 (and $x135 $x162)))
 (let (($x64 (and $x8 $x76)))
 (let (($x33 (and $x64 $x182)))
 (let (($x251 (and $x33 $x289)))
 (let (($x169 (and $x251 $x301)))
 (let (($x29 (and $x169 $x227)))
 (let (($x258 (and $x29 $x255)))
 (let (($x297 (and $x258 $x120)))
 (let (($x167 (and $x297 $x97)))
 (let (($x213 (and $x167 $x256)))
 (let (($x231 (and $x213 $x299)))
 (let (($x174 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and (not $x174) $x231)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x11 $x185)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x292 $x208)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x262 (and $x193 $x19)))
 (let (($x307 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x307)))))
 (let (($x222 (=> (and $x328 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x307)))))
 (let (($x68 (and $x222 $x262)))
 (let (($x241 (=> $x68 $x92)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x73 (bvsle ?x26 (_ bv399 32))))
 (let (($x118 (= $x73 true)))
 (let (($x111 (= $x118 true)))
 (let (($x122 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1387X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1387X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1386X)))
 (= $x93 false)))
 ))
 (let (($x160 (and $x230 $x122)))
 (let (($x72 (= $x160 true)))
 (let (($x86 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let ((?x333 (bvadd symbol.1 (bvmul input.ind-%var1381X (_ bv4 32)))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x333))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv2 32))) ?x75)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv3 32))) ?x142)))
 (let ((?x242 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1381X)))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1381X)))
 (=> $x12 (= ?x242 ?x355)))))))))
 ))
 (let (($x347 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1380X) (bvult input.ind-%var1380X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1380X)))
 (= $x12 $x315))))
 ))
 (let (($x332 (and $x347 $x86)))
 (let (($x181 (= $x332 true)))
 (let (($x346 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1375X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1375X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1374X)))
 (= $x93 false)))
 ))
 (let (($x195 (and $x96 $x346)))
 (let (($x127 (= $x195 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x69)))
 (let (($x313 (= ?x150 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x186 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x349 (= $x186 true)))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x324 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x119 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x119 true)))
 (let (($x301 (= $x294 true)))
 (let (($x169 (= $x301 true)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x170)))
 (let ((?x240 (bvand symbol.1 (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x240)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x202 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x202)))
 (let (($x203 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x200 (and $x203 $x164)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x153 $x200)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (and $x211 $x22)))
 (let (($x184 (not $x298)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (and $x51 $x189)))
 (let (($x226 (and (not $x284) $x184)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x194 $x17)))
 (let (($x115 (not $x60)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x13 $x245)))
 (let (($x56 (and (not $x235) $x115)))
 (let (($x198 (and (and (and (and (and (and $x56 $x226) $x140) $x163) $x221) $x159) $x218)))
 (let (($x247 (and $x198 $x239)))
 (let (($x212 (= symbol.1 dst_symbol_addr.1)))
 (let (($x288 (and $x212 $x247)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x113 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x113) (or $x62 $x78)))))))
 (let (($x20 (and $x134 $x288)))
 (let (($x248 (= $x20 true)))
 (let (($x289 (= $x248 true)))
 (let (($x251 (= $x289 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x63 (= $x74 true)))
 (let (($x182 (= $x63 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x98)))
 (let (($x157 (= ?x155 input.dst.llvm-%n)))
 (let (($x139 (= $x157 true)))
 (let (($x162 (= $x139 true)))
 (let (($x166 (= ?x155 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x166 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x44 (bvsub ?x24 ?x47)))
 (let (($x88 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x44) (bvult ?x24 ?x44))))
 (let ((?x7 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x7)))
 (let ((?x125 ((_ extract 63 32) ?x173)))
 (let (($x55 (= (_ bv0 32) ?x125)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x175 (and (and (and true $x99) $x55) $x88)))
 (let (($x137 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x124 (and $x137 $x175)))
 (let (($x176 (= true $x124)))
 (let (($x209 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x209 $x176)))
 (let (($x112 (= $x50 true)))
 (let (($x126 (= $x112 true)))
 (let (($x138 (= $x126 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (= $x209 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x154 (and $x128 $x71)))
 (let (($x35 (and $x154 $x81)))
 (let (($x48 (and $x35 $x138)))
 (let (($x135 (and $x48 $x156)))
 (let (($x8 (and $x135 $x162)))
 (let (($x64 (and $x8 $x76)))
 (let (($x33 (and $x64 $x182)))
 (let (($x269 (and $x33 $x251)))
 (let (($x243 (and $x269 $x169)))
 (let (($x141 (and $x243 $x29)))
 (let (($x343 (and $x141 $x258)))
 (let (($x340 (and $x343 $x297)))
 (let (($x276 (and $x340 $x127)))
 (let (($x84 (and $x276 $x181)))
 (let (($x259 (and $x84 $x72)))
 (let (($x342 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and (not $x342) $x259)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x23 $x205)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x334 $x21)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x337 (and $x267 $x268)))
 (let (($x266 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x193 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x266)))))
 (let (($x323 (=> (and $x209 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x266)))))
 (let (($x237 (and $x323 $x337)))
 (let (($x331 (=> $x237 $x111)))
 (not $x331)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x73 (bvsle ?x26 (_ bv399 32))))
 (let (($x118 (= $x73 true)))
 (let (($x111 (= $x118 true)))
 (let (($x122 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1387X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1387X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1386X)))
 (= $x93 false)))
 ))
 (let (($x160 (and $x230 $x122)))
 (let (($x72 (= $x160 true)))
 (let (($x86 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let ((?x333 (bvadd symbol.1 (bvmul input.ind-%var1381X (_ bv4 32)))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x333))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv2 32))) ?x75)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv3 32))) ?x142)))
 (let ((?x242 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1381X)))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1381X)))
 (=> $x12 (= ?x242 ?x355)))))))))
 ))
 (let (($x347 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1380X) (bvult input.ind-%var1380X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1380X)))
 (= $x12 $x315))))
 ))
 (let (($x332 (and $x347 $x86)))
 (let (($x181 (= $x332 true)))
 (let (($x346 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1375X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1375X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1374X)))
 (= $x93 false)))
 ))
 (let (($x195 (and $x96 $x346)))
 (let (($x127 (= $x195 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x69)))
 (let (($x313 (= ?x150 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x186 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x349 (= $x186 true)))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x324 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x119 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x119 true)))
 (let (($x301 (= $x294 true)))
 (let (($x169 (= $x301 true)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x170)))
 (let ((?x240 (bvand symbol.1 (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x240)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x202 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x164 (= input.memlabel-mem--symbol.1_end ?x202)))
 (let (($x203 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x200 (and $x203 $x164)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x153 $x200)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (and $x211 $x22)))
 (let (($x184 (not $x298)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (and $x51 $x189)))
 (let (($x226 (and (not $x284) $x184)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x194 $x17)))
 (let (($x115 (not $x60)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x13 $x245)))
 (let (($x56 (and (not $x235) $x115)))
 (let (($x198 (and (and (and (and (and (and $x56 $x226) $x140) $x163) $x221) $x159) $x218)))
 (let (($x247 (and $x198 $x239)))
 (let (($x212 (= symbol.1 dst_symbol_addr.1)))
 (let (($x288 (and $x212 $x247)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x113 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x113) (or $x62 $x78)))))))
 (let (($x20 (and $x134 $x288)))
 (let (($x248 (= $x20 true)))
 (let (($x289 (= $x248 true)))
 (let (($x251 (= $x289 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x63 (= $x74 true)))
 (let (($x182 (= $x63 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x98)))
 (let (($x157 (= ?x155 input.dst.llvm-%n)))
 (let (($x139 (= $x157 true)))
 (let (($x162 (= $x139 true)))
 (let (($x166 (= ?x155 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x166 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x44 (bvsub ?x24 ?x47)))
 (let (($x88 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x44) (bvult ?x24 ?x44))))
 (let ((?x7 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x7)))
 (let ((?x125 ((_ extract 63 32) ?x173)))
 (let (($x55 (= (_ bv0 32) ?x125)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x175 (and (and (and true $x99) $x55) $x88)))
 (let (($x137 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x124 (and $x137 $x175)))
 (let (($x176 (= true $x124)))
 (let (($x209 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x209 $x176)))
 (let (($x112 (= $x50 true)))
 (let (($x126 (= $x112 true)))
 (let (($x138 (= $x126 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (= $x209 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x154 (and $x128 $x71)))
 (let (($x35 (and $x154 $x81)))
 (let (($x48 (and $x35 $x138)))
 (let (($x135 (and $x48 $x156)))
 (let (($x8 (and $x135 $x162)))
 (let (($x64 (and $x8 $x76)))
 (let (($x33 (and $x64 $x182)))
 (let (($x269 (and $x33 $x251)))
 (let (($x243 (and $x269 $x169)))
 (let (($x141 (and $x243 $x29)))
 (let (($x343 (and $x141 $x258)))
 (let (($x340 (and $x343 $x297)))
 (let (($x276 (and $x340 $x127)))
 (let (($x84 (and $x276 $x181)))
 (let (($x259 (and $x84 $x72)))
 (let (($x342 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and (not $x342) $x259)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x23 $x205)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x334 $x21)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x337 (and $x267 $x268)))
 (let (($x266 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x193 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x266)))))
 (let (($x323 (=> (and $x209 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x266)))))
 (let (($x237 (and $x323 $x337)))
 (let (($x331 (=> $x237 $x111)))
 (not $x331)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x256 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x151 (bvsge ?x256 (_ bv0 32))))
 (let (($x275 (= $x151 true)))
 (let (($x234 (= $x275 true)))
 (let (($x257 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1405X) (_ bv0 32)))))
 ))
 (let (($x208 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1404X)))
 (= $x263 false)))
 ))
 (let (($x66 (and $x208 $x257)))
 (let (($x217 (= $x66 true)))
 (let (($x185 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let ((?x100 (bvadd symbol.1 (bvmul input.ind-%var1399X (_ bv4 32)))))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x100))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv2 32))) ?x95)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv3 32))) ?x109)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1399X)))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x310 (= ?x230 ?x329)))))))))
 ))
 (let (($x86 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1398X) (bvult input.ind-%var1398X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x310 $x31))))
 ))
 (let (($x241 (and $x86 $x185)))
 (let (($x325 (= $x241 true)))
 (let (($x295 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1393X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1393X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1392X)))
 (= $x263 false)))
 ))
 (let (($x350 (and $x195 $x295)))
 (let (($x333 (= $x350 true)))
 (let ((?x150 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x150)))
 (let (($x120 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x349 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x281 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x294 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x294 true)))
 (let (($x169 (= $x301 true)))
 (let (($x243 (= $x169 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x159)))
 (let ((?x246 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x246)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x203 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x168 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x202 (and $x168 $x203)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x163 $x202)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (and $x211 $x22)))
 (let (($x184 (not $x298)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x201 (and $x189 $x284)))
 (let (($x158 (and (not $x201) $x184)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x194 $x17)))
 (let (($x115 (not $x60)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x245 $x235)))
 (let (($x51 (and (not $x199) $x115)))
 (let (($x247 (and (and (and (and (and (and $x51 $x158) $x140) $x311) $x164) $x221) $x129)))
 (let (($x288 (and $x247 $x300)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x20 (and $x121 $x288)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x179 (or (bvugt input.memlabel-mem--symbol.1_begin ?x146) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x179) (or $x5 $x59)))))))
 (let (($x248 (and $x13 $x20)))
 (let (($x289 (= $x248 true)))
 (let (($x251 (= $x289 true)))
 (let (($x269 (= $x251 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x63 (= $x74 true)))
 (let (($x182 (= $x63 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x98)))
 (let (($x157 (= ?x155 input.dst.llvm-%n)))
 (let (($x139 (= $x157 true)))
 (let (($x162 (= $x139 true)))
 (let (($x166 (= ?x155 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x166 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x55 (bvsub ?x24 ?x47)))
 (let (($x104 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x55) (bvult ?x24 ?x55))))
 (let ((?x43 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x43)))
 (let ((?x173 ((_ extract 63 32) ?x7)))
 (let (($x125 (= (_ bv0 32) ?x173)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x175 (and (and (and true $x99) $x125) $x104)))
 (let (($x137 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x124 (and $x137 $x175)))
 (let (($x176 (= true $x124)))
 (let (($x299 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x299 $x176)))
 (let (($x112 (= $x50 true)))
 (let (($x126 (= $x112 true)))
 (let (($x138 (= $x126 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (= $x299 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x154 (and $x128 $x71)))
 (let (($x35 (and $x154 $x81)))
 (let (($x48 (and $x35 $x138)))
 (let (($x135 (and $x48 $x156)))
 (let (($x8 (and $x135 $x162)))
 (let (($x64 (and $x8 $x76)))
 (let (($x33 (and $x64 $x182)))
 (let (($x119 (and $x33 $x269)))
 (let (($x324 (and $x119 $x243)))
 (let (($x186 (and $x324 $x141)))
 (let (($x69 (and $x186 $x343)))
 (let (($x85 (and $x69 $x340)))
 (let (($x354 (and $x85 $x333)))
 (let (($x286 (and $x354 $x325)))
 (let (($x83 (and $x286 $x217)))
 (let (($x187 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x187) $x83)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x174 $x177)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x233 $x167)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x225 $x312)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x267 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x299 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x306 (and $x273 $x101)))
 (let (($x79 (=> $x306 $x234)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x256 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x151 (bvsge ?x256 (_ bv0 32))))
 (let (($x275 (= $x151 true)))
 (let (($x234 (= $x275 true)))
 (let (($x257 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1405X) (_ bv0 32)))))
 ))
 (let (($x208 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1404X)))
 (= $x263 false)))
 ))
 (let (($x66 (and $x208 $x257)))
 (let (($x217 (= $x66 true)))
 (let (($x185 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let ((?x100 (bvadd symbol.1 (bvmul input.ind-%var1399X (_ bv4 32)))))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x100))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv2 32))) ?x95)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv3 32))) ?x109)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1399X)))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x310 (= ?x230 ?x329)))))))))
 ))
 (let (($x86 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1398X) (bvult input.ind-%var1398X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x310 $x31))))
 ))
 (let (($x241 (and $x86 $x185)))
 (let (($x325 (= $x241 true)))
 (let (($x295 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1393X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1393X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1392X)))
 (= $x263 false)))
 ))
 (let (($x350 (and $x195 $x295)))
 (let (($x333 (= $x350 true)))
 (let ((?x150 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x150)))
 (let (($x120 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x349 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x281 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x294 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x294 true)))
 (let (($x169 (= $x301 true)))
 (let (($x243 (= $x169 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x159)))
 (let ((?x246 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x246)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x203 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x168 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x202 (and $x168 $x203)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x163 $x202)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (and $x211 $x22)))
 (let (($x184 (not $x298)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x201 (and $x189 $x284)))
 (let (($x158 (and (not $x201) $x184)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x194 $x17)))
 (let (($x115 (not $x60)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x245 $x235)))
 (let (($x51 (and (not $x199) $x115)))
 (let (($x247 (and (and (and (and (and (and $x51 $x158) $x140) $x311) $x164) $x221) $x129)))
 (let (($x288 (and $x247 $x300)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x20 (and $x121 $x288)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x179 (or (bvugt input.memlabel-mem--symbol.1_begin ?x146) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x179) (or $x5 $x59)))))))
 (let (($x248 (and $x13 $x20)))
 (let (($x289 (= $x248 true)))
 (let (($x251 (= $x289 true)))
 (let (($x269 (= $x251 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x144 true)))
 (let (($x63 (= $x74 true)))
 (let (($x182 (= $x63 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x103 true)))
 (let (($x161 (= $x94 true)))
 (let (($x76 (= $x161 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x98)))
 (let (($x157 (= ?x155 input.dst.llvm-%n)))
 (let (($x139 (= $x157 true)))
 (let (($x162 (= $x139 true)))
 (let (($x166 (= ?x155 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x166 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x55 (bvsub ?x24 ?x47)))
 (let (($x104 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x55) (bvult ?x24 ?x55))))
 (let ((?x43 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x43)))
 (let ((?x173 ((_ extract 63 32) ?x7)))
 (let (($x125 (= (_ bv0 32) ?x173)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x175 (and (and (and true $x99) $x125) $x104)))
 (let (($x137 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x124 (and $x137 $x175)))
 (let (($x176 (= true $x124)))
 (let (($x299 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x299 $x176)))
 (let (($x112 (= $x50 true)))
 (let (($x126 (= $x112 true)))
 (let (($x138 (= $x126 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x123 (= $x299 true)))
 (let (($x10 (= $x123 true)))
 (let (($x128 (= $x10 true)))
 (let (($x154 (and $x128 $x71)))
 (let (($x35 (and $x154 $x81)))
 (let (($x48 (and $x35 $x138)))
 (let (($x135 (and $x48 $x156)))
 (let (($x8 (and $x135 $x162)))
 (let (($x64 (and $x8 $x76)))
 (let (($x33 (and $x64 $x182)))
 (let (($x119 (and $x33 $x269)))
 (let (($x324 (and $x119 $x243)))
 (let (($x186 (and $x324 $x141)))
 (let (($x69 (and $x186 $x343)))
 (let (($x85 (and $x69 $x340)))
 (let (($x354 (and $x85 $x333)))
 (let (($x286 (and $x354 $x325)))
 (let (($x83 (and $x286 $x217)))
 (let (($x187 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x187) $x83)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x174 $x177)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x233 $x167)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x225 $x312)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x267 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x299 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x306 (and $x273 $x101)))
 (let (($x79 (=> $x306 $x234)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (bvule ?x181 (_ bv399 32))))
 (let (($x223 (= $x77 true)))
 (let (($x92 (= $x223 true)))
 (let (($x315 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1423X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1423X) (_ bv0 32)))))
 ))
 (let (($x21 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1422X)))
 (= $x178 false)))
 ))
 (let (($x260 (and $x21 $x315)))
 (let (($x264 (= $x260 true)))
 (let (($x205 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x122 (bvadd symbol.1 (bvmul input.ind-%var1417X (_ bv4 32)))))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x122))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv2 32))) ?x12)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv3 32))) ?x252)))
 (let ((?x208 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1417X)))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1417X)))
 (=> $x278 (= ?x208 ?x93)))))))))
 ))
 (let (($x185 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var1416X) (bvult input.ind-%var1416X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1416X)))
 (= $x278 $x58))))
 ))
 (let (($x331 (and $x185 $x205)))
 (let (($x229 (= $x331 true)))
 (let (($x160 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1411X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1411X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1410X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1410X)))
 (= $x178 false)))
 ))
 (let (($x15 (and $x350 $x160)))
 (let (($x100 (= $x15 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x313)))
 (let (($x297 (= ?x120 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let (($x255 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x69 (= $x343 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x159 (bvsub ?x24 ?x47)))
 (let (($x248 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x159) (bvult ?x24 ?x159))))
 (let ((?x239 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvmul (_ bv4 64) ?x239)))
 (let ((?x129 ((_ extract 63 32) ?x246)))
 (let (($x247 (= (_ bv0 32) ?x129)))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x269 (and (and (and true $x200) $x247) $x248)))
 (let (($x153 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x119 (and $x153 $x269)))
 (let (($x294 (= true $x119)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x72 $x294)))
 (let (($x169 (= $x301 true)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x140 true)))
 (let (($x41 (= $x218 true)))
 (let (($x311 (= $x41 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x298 (= $x22 true)))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x284 (= $x72 true)))
 (let (($x201 (= $x284 true)))
 (let (($x226 (= $x201 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x134)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x133)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x179 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x179)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (and $x171 $x62)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x113 $x82)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x144 $x74)))
 (let (($x182 (not $x63)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x161 $x76)))
 (let (($x9 (and (not $x64) $x182)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x157 $x139)))
 (let (($x8 (not $x162)))
 (let (($x156 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x149 $x156)))
 (let (($x94 (and (not $x135) $x8)))
 (let (($x199 (and (and (and (and (and (and $x94 $x9) $x145) $x146) $x5) $x59) $x18)))
 (let (($x56 (and $x199 $x147)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x194 (and $x88 $x56)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x112 $x126)))))))
 (let (($x17 (and $x166 $x194)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x51 (= $x115 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x99 true)))
 (let (($x106 (= $x32 true)))
 (let (($x43 (= $x106 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x16 (= ?x81 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x52 (and $x137 $x183)))
 (let (($x7 (and $x52 $x43)))
 (let (($x189 (and $x7 $x51)))
 (let (($x211 (and $x189 $x226)))
 (let (($x240 (and $x211 $x158)))
 (let (($x198 (and $x240 $x311)))
 (let (($x281 (and $x198 $x324)))
 (let (($x349 (and $x281 $x186)))
 (let (($x150 (and $x349 $x69)))
 (let (($x96 (and $x150 $x85)))
 (let (($x110 (and $x96 $x100)))
 (let (($x73 (and $x110 $x229)))
 (let (($x53 (and $x73 $x264)))
 (let (($x196 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and (not $x196) $x53)))
 (let (($x342 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x342 $x75)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x34 (and $x11 $x276)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x292 $x34)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x225 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x216 (=> (and $x72 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x262 (and $x216 $x228)))
 (let (($x261 (=> $x262 $x92)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (bvule ?x181 (_ bv399 32))))
 (let (($x223 (= $x77 true)))
 (let (($x92 (= $x223 true)))
 (let (($x315 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1423X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1423X) (_ bv0 32)))))
 ))
 (let (($x21 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1422X)))
 (= $x178 false)))
 ))
 (let (($x260 (and $x21 $x315)))
 (let (($x264 (= $x260 true)))
 (let (($x205 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x122 (bvadd symbol.1 (bvmul input.ind-%var1417X (_ bv4 32)))))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x122))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv2 32))) ?x12)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv3 32))) ?x252)))
 (let ((?x208 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1417X)))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1417X)))
 (=> $x278 (= ?x208 ?x93)))))))))
 ))
 (let (($x185 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var1416X) (bvult input.ind-%var1416X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1416X)))
 (= $x278 $x58))))
 ))
 (let (($x331 (and $x185 $x205)))
 (let (($x229 (= $x331 true)))
 (let (($x160 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1411X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1411X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1410X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1410X)))
 (= $x178 false)))
 ))
 (let (($x15 (and $x350 $x160)))
 (let (($x100 (= $x15 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x313)))
 (let (($x297 (= ?x120 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let (($x255 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x69 (= $x343 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x159 (bvsub ?x24 ?x47)))
 (let (($x248 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x159) (bvult ?x24 ?x159))))
 (let ((?x239 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvmul (_ bv4 64) ?x239)))
 (let ((?x129 ((_ extract 63 32) ?x246)))
 (let (($x247 (= (_ bv0 32) ?x129)))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x269 (and (and (and true $x200) $x247) $x248)))
 (let (($x153 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x119 (and $x153 $x269)))
 (let (($x294 (= true $x119)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x72 $x294)))
 (let (($x169 (= $x301 true)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x140 true)))
 (let (($x41 (= $x218 true)))
 (let (($x311 (= $x41 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x298 (= $x22 true)))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x284 (= $x72 true)))
 (let (($x201 (= $x284 true)))
 (let (($x226 (= $x201 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x134)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x133)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x179 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x179)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (and $x171 $x62)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x113 $x82)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x144 $x74)))
 (let (($x182 (not $x63)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x161 $x76)))
 (let (($x9 (and (not $x64) $x182)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x157 $x139)))
 (let (($x8 (not $x162)))
 (let (($x156 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x149 $x156)))
 (let (($x94 (and (not $x135) $x8)))
 (let (($x199 (and (and (and (and (and (and $x94 $x9) $x145) $x146) $x5) $x59) $x18)))
 (let (($x56 (and $x199 $x147)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x194 (and $x88 $x56)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x112 $x126)))))))
 (let (($x17 (and $x166 $x194)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x51 (= $x115 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x99 true)))
 (let (($x106 (= $x32 true)))
 (let (($x43 (= $x106 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x16 (= ?x81 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x52 (and $x137 $x183)))
 (let (($x7 (and $x52 $x43)))
 (let (($x189 (and $x7 $x51)))
 (let (($x211 (and $x189 $x226)))
 (let (($x240 (and $x211 $x158)))
 (let (($x198 (and $x240 $x311)))
 (let (($x281 (and $x198 $x324)))
 (let (($x349 (and $x281 $x186)))
 (let (($x150 (and $x349 $x69)))
 (let (($x96 (and $x150 $x85)))
 (let (($x110 (and $x96 $x100)))
 (let (($x73 (and $x110 $x229)))
 (let (($x53 (and $x73 $x264)))
 (let (($x196 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and (not $x196) $x53)))
 (let (($x342 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x342 $x75)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x34 (and $x11 $x276)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x292 $x34)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x225 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x216 (=> (and $x72 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x262 (and $x216 $x228)))
 (let (($x261 (=> $x262 $x92)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x190 (bvsle ?x325 (_ bv399 32))))
 (let (($x296 (= $x190 true)))
 (let (($x111 (= $x296 true)))
 (let (($x31 (forall ((input.ind-%var1441X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1441X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1441X) (_ bv0 32)))))
 ))
 (let (($x167 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1440X)))
 (= $x355 false)))
 ))
 (let (($x26 (and $x167 $x31)))
 (let (($x285 (= $x26 true)))
 (let (($x177 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1435X (_ bv4 32)))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x310)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x322)))
 (let ((?x21 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1435X)))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1435X)))
 (=> $x332 (= ?x21 ?x263)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var1434X) (bvult input.ind-%var1434X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1434X)))
 (= $x332 $x132))))
 ))
 (let (($x79 (and $x205 $x177)))
 (let (($x39 (= $x79 true)))
 (let (($x66 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1429X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x355 false)))
 ))
 (let (($x152 (and $x15 $x66)))
 (let (($x122 (= $x152 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x120)))
 (let (($x340 (= ?x297 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x258 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x343 (= $x258 true)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x251 (bvsub ?x24 ?x47)))
 (let (($x20 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x251) (bvult ?x24 ?x251))))
 (let ((?x239 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvmul (_ bv4 64) ?x239)))
 (let ((?x129 ((_ extract 63 32) ?x246)))
 (let (($x247 (= (_ bv0 32) ?x129)))
 (let (($x289 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x119 (and (and (and true $x289) $x247) $x20)))
 (let (($x202 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x294 (and $x202 $x119)))
 (let (($x301 (= true $x294)))
 (let (($x217 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (=> $x217 $x301)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x218 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x218 true)))
 (let (($x311 (= $x41 true)))
 (let (($x198 (= $x311 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x240 (= $x158 true)))
 (let (($x201 (= $x217 true)))
 (let (($x226 (= $x201 true)))
 (let (($x211 (= $x226 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x59)))
 (let ((?x245 (bvand symbol.1 (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x245)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x113 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x171 (= input.memlabel-mem--symbol.1_end ?x113)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (and $x121 $x171)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x146 $x179)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x144 $x74)))
 (let (($x182 (not $x63)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x76 $x64)))
 (let (($x13 (and (not $x33) $x182)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x157 $x139)))
 (let (($x8 (not $x162)))
 (let (($x135 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x156 $x135)))
 (let (($x161 (and (not $x103) $x8)))
 (let (($x56 (and (and (and (and (and (and $x161 $x13) $x145) $x212) $x62) $x5) $x78)))
 (let (($x194 (and $x56 $x235)))
 (let (($x155 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x155 $x194)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x176 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x176) (or $x138 $x48)))))))
 (let (($x60 (and $x149 $x17)))
 (let (($x115 (= $x60 true)))
 (let (($x51 (= $x115 true)))
 (let (($x189 (= $x51 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x99 true)))
 (let (($x106 (= $x32 true)))
 (let (($x43 (= $x106 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x16 (= ?x81 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x52 (and $x137 $x183)))
 (let (($x7 (and $x52 $x43)))
 (let (($x284 (and $x7 $x189)))
 (let (($x22 (and $x284 $x211)))
 (let (($x140 (and $x22 $x240)))
 (let (($x163 (and $x140 $x198)))
 (let (($x227 (and $x163 $x281)))
 (let (($x255 (and $x227 $x349)))
 (let (($x313 (and $x255 $x150)))
 (let (($x195 (and $x313 $x96)))
 (let (($x327 (and $x195 $x122)))
 (let (($x151 (and $x327 $x39)))
 (let (($x118 (and $x151 $x285)))
 (let (($x19 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and (not $x19) $x118)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x187 $x95)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x57 (and $x23 $x354)))
 (let (($x334 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x143 (and $x334 $x57)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x357 (=> (and $x217 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x337 (and $x357 $x143)))
 (let (($x232 (=> $x337 $x111)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x190 (bvsle ?x325 (_ bv399 32))))
 (let (($x296 (= $x190 true)))
 (let (($x111 (= $x296 true)))
 (let (($x31 (forall ((input.ind-%var1441X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1441X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1441X) (_ bv0 32)))))
 ))
 (let (($x167 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1440X)))
 (= $x355 false)))
 ))
 (let (($x26 (and $x167 $x31)))
 (let (($x285 (= $x26 true)))
 (let (($x177 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1435X (_ bv4 32)))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x310)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x322)))
 (let ((?x21 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1435X)))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1435X)))
 (=> $x332 (= ?x21 ?x263)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var1434X) (bvult input.ind-%var1434X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1434X)))
 (= $x332 $x132))))
 ))
 (let (($x79 (and $x205 $x177)))
 (let (($x39 (= $x79 true)))
 (let (($x66 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1429X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x355 false)))
 ))
 (let (($x152 (and $x15 $x66)))
 (let (($x122 (= $x152 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x120)))
 (let (($x340 (= ?x297 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x258 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x343 (= $x258 true)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x29 true)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x251 (bvsub ?x24 ?x47)))
 (let (($x20 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x251) (bvult ?x24 ?x251))))
 (let ((?x239 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvmul (_ bv4 64) ?x239)))
 (let ((?x129 ((_ extract 63 32) ?x246)))
 (let (($x247 (= (_ bv0 32) ?x129)))
 (let (($x289 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x119 (and (and (and true $x289) $x247) $x20)))
 (let (($x202 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x294 (and $x202 $x119)))
 (let (($x301 (= true $x294)))
 (let (($x217 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (=> $x217 $x301)))
 (let (($x243 (= $x169 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x218 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x218 true)))
 (let (($x311 (= $x41 true)))
 (let (($x198 (= $x311 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x240 (= $x158 true)))
 (let (($x201 (= $x217 true)))
 (let (($x226 (= $x201 true)))
 (let (($x211 (= $x226 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x59)))
 (let ((?x245 (bvand symbol.1 (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x245)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x113 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x171 (= input.memlabel-mem--symbol.1_end ?x113)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (and $x121 $x171)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x146 $x179)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x144 $x74)))
 (let (($x182 (not $x63)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x76 $x64)))
 (let (($x13 (and (not $x33) $x182)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x157 $x139)))
 (let (($x8 (not $x162)))
 (let (($x135 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x156 $x135)))
 (let (($x161 (and (not $x103) $x8)))
 (let (($x56 (and (and (and (and (and (and $x161 $x13) $x145) $x212) $x62) $x5) $x78)))
 (let (($x194 (and $x56 $x235)))
 (let (($x155 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x155 $x194)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x176 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x176) (or $x138 $x48)))))))
 (let (($x60 (and $x149 $x17)))
 (let (($x115 (= $x60 true)))
 (let (($x51 (= $x115 true)))
 (let (($x189 (= $x51 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x99 true)))
 (let (($x106 (= $x32 true)))
 (let (($x43 (= $x106 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x16 (= ?x81 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x52 (and $x137 $x183)))
 (let (($x7 (and $x52 $x43)))
 (let (($x284 (and $x7 $x189)))
 (let (($x22 (and $x284 $x211)))
 (let (($x140 (and $x22 $x240)))
 (let (($x163 (and $x140 $x198)))
 (let (($x227 (and $x163 $x281)))
 (let (($x255 (and $x227 $x349)))
 (let (($x313 (and $x255 $x150)))
 (let (($x195 (and $x313 $x96)))
 (let (($x327 (and $x195 $x122)))
 (let (($x151 (and $x327 $x39)))
 (let (($x118 (and $x151 $x285)))
 (let (($x19 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and (not $x19) $x118)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x187 $x95)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x57 (and $x23 $x354)))
 (let (($x334 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x143 (and $x334 $x57)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x357 (=> (and $x217 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x337 (and $x357 $x143)))
 (let (($x232 (=> $x337 $x111)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (bvsge ?x229 (_ bv0 32))))
 (let (($x336 (= $x173 true)))
 (let (($x234 (= $x336 true)))
 (let (($x58 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1459X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1459X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1458X)))
 (= $x329 false)))
 ))
 (let (($x256 (and $x276 $x58)))
 (let (($x265 (= $x256 true)))
 (let (($x75 (forall ((input.ind-%var1453X (_ BitVec 32)) )(let ((?x315 (bvadd symbol.1 (bvmul input.ind-%var1453X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x315))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv2 32))) ?x278)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv3 32))) ?x54)))
 (let ((?x167 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1453X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1453X)))
 (=> $x241 (= ?x167 ?x178)))))))))
 ))
 (let (($x177 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let (($x346 (and (bvule (_ bv0 32) input.ind-%var1452X) (bvult input.ind-%var1452X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1452X)))
 (= $x241 $x346))))
 ))
 (let (($x261 (and $x177 $x75)))
 (let (($x339 (= $x261 true)))
 (let (($x260 (forall ((input.ind-%var1447X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1447X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1447X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var1446X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1446X)))
 (= $x329 false)))
 ))
 (let (($x213 (and $x152 $x260)))
 (let (($x257 (= $x213 true)))
 (let ((?x297 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x340 (bvneg ?x297)))
 (let (($x85 (= ?x340 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x343 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x255 (= $x349 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x269 (bvsub ?x24 ?x47)))
 (let (($x288 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x269) (bvult ?x24 ?x269))))
 (let ((?x239 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvmul (_ bv4 64) ?x239)))
 (let ((?x129 ((_ extract 63 32) ?x246)))
 (let (($x247 (= (_ bv0 32) ?x129)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x294 (and (and (and true $x248) $x247) $x288)))
 (let (($x164 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x301 (and $x164 $x294)))
 (let (($x169 (= true $x301)))
 (let (($x264 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x243 (=> $x264 $x169)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x311 (= $x41 true)))
 (let (($x198 (= $x311 true)))
 (let (($x163 (= $x198 true)))
 (let (($x184 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x158 (= $x184 true)))
 (let (($x240 (= $x158 true)))
 (let (($x140 (= $x240 true)))
 (let (($x226 (= $x264 true)))
 (let (($x211 (= $x226 true)))
 (let (($x22 (= $x211 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x5)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x134)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x121 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x199 $x121)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x212 $x113)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x144 $x74)))
 (let (($x182 (not $x63)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x64 $x33)))
 (let (($x133 (and (not $x9) $x182)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x157 $x139)))
 (let (($x8 (not $x162)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x135 $x103)))
 (let (($x76 (and (not $x94) $x8)))
 (let (($x194 (and (and (and (and (and (and $x76 $x133) $x145) $x210) $x171) $x62) $x82)))
 (let (($x17 (and $x194 $x147)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x60 (and $x88 $x17)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x50 (or (bvugt input.memlabel-mem--symbol.1_begin ?x124) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x50) (or $x148 $x98)))))))
 (let (($x115 (and $x156 $x60)))
 (let (($x51 (= $x115 true)))
 (let (($x189 (= $x51 true)))
 (let (($x284 (= $x189 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x99 true)))
 (let (($x106 (= $x32 true)))
 (let (($x43 (= $x106 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x16 (= ?x81 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x52 (and $x137 $x183)))
 (let (($x7 (and $x52 $x43)))
 (let (($x201 (and $x7 $x284)))
 (let (($x298 (and $x201 $x22)))
 (let (($x218 (and $x298 $x140)))
 (let (($x168 (and $x218 $x163)))
 (let (($x29 (and $x168 $x227)))
 (let (($x258 (and $x29 $x255)))
 (let (($x120 (and $x258 $x313)))
 (let (($x350 (and $x120 $x195)))
 (let (($x117 (and $x350 $x257)))
 (let (($x77 (and $x117 $x339)))
 (let (($x275 (and $x77 $x265)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and (not $x268) $x275)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x196 $x12)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x174 $x110)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x233 $x231)))
 (let (($x216 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x334 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x216)))))
 (let (($x215 (=> (and $x264 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x216)))))
 (let (($x101 (and $x215 $x67)))
 (let (($x242 (=> $x101 $x234)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (bvsge ?x229 (_ bv0 32))))
 (let (($x336 (= $x173 true)))
 (let (($x234 (= $x336 true)))
 (let (($x58 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1459X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1459X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1458X)))
 (= $x329 false)))
 ))
 (let (($x256 (and $x276 $x58)))
 (let (($x265 (= $x256 true)))
 (let (($x75 (forall ((input.ind-%var1453X (_ BitVec 32)) )(let ((?x315 (bvadd symbol.1 (bvmul input.ind-%var1453X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x315))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv2 32))) ?x278)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv3 32))) ?x54)))
 (let ((?x167 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1453X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1453X)))
 (=> $x241 (= ?x167 ?x178)))))))))
 ))
 (let (($x177 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let (($x346 (and (bvule (_ bv0 32) input.ind-%var1452X) (bvult input.ind-%var1452X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1452X)))
 (= $x241 $x346))))
 ))
 (let (($x261 (and $x177 $x75)))
 (let (($x339 (= $x261 true)))
 (let (($x260 (forall ((input.ind-%var1447X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1447X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1447X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var1446X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1446X)))
 (= $x329 false)))
 ))
 (let (($x213 (and $x152 $x260)))
 (let (($x257 (= $x213 true)))
 (let ((?x297 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x340 (bvneg ?x297)))
 (let (($x85 (= ?x340 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x343 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x141 true)))
 (let (($x349 (= $x186 true)))
 (let (($x255 (= $x349 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x269 (bvsub ?x24 ?x47)))
 (let (($x288 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x269) (bvult ?x24 ?x269))))
 (let ((?x239 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvmul (_ bv4 64) ?x239)))
 (let ((?x129 ((_ extract 63 32) ?x246)))
 (let (($x247 (= (_ bv0 32) ?x129)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x294 (and (and (and true $x248) $x247) $x288)))
 (let (($x164 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x301 (and $x164 $x294)))
 (let (($x169 (= true $x301)))
 (let (($x264 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x243 (=> $x264 $x169)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x311 (= $x41 true)))
 (let (($x198 (= $x311 true)))
 (let (($x163 (= $x198 true)))
 (let (($x184 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x158 (= $x184 true)))
 (let (($x240 (= $x158 true)))
 (let (($x140 (= $x240 true)))
 (let (($x226 (= $x264 true)))
 (let (($x211 (= $x226 true)))
 (let (($x22 (= $x211 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x5)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x134)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x121 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x199 $x121)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x212 $x113)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x144 $x74)))
 (let (($x182 (not $x63)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x64 $x33)))
 (let (($x133 (and (not $x9) $x182)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x157 $x139)))
 (let (($x8 (not $x162)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x135 $x103)))
 (let (($x76 (and (not $x94) $x8)))
 (let (($x194 (and (and (and (and (and (and $x76 $x133) $x145) $x210) $x171) $x62) $x82)))
 (let (($x17 (and $x194 $x147)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x60 (and $x88 $x17)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x50 (or (bvugt input.memlabel-mem--symbol.1_begin ?x124) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x50) (or $x148 $x98)))))))
 (let (($x115 (and $x156 $x60)))
 (let (($x51 (= $x115 true)))
 (let (($x189 (= $x51 true)))
 (let (($x284 (= $x189 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x99 true)))
 (let (($x106 (= $x32 true)))
 (let (($x43 (= $x106 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x16 (= ?x81 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x52 (and $x137 $x183)))
 (let (($x7 (and $x52 $x43)))
 (let (($x201 (and $x7 $x284)))
 (let (($x298 (and $x201 $x22)))
 (let (($x218 (and $x298 $x140)))
 (let (($x168 (and $x218 $x163)))
 (let (($x29 (and $x168 $x227)))
 (let (($x258 (and $x29 $x255)))
 (let (($x120 (and $x258 $x313)))
 (let (($x350 (and $x120 $x195)))
 (let (($x117 (and $x350 $x257)))
 (let (($x77 (and $x117 $x339)))
 (let (($x275 (and $x77 $x265)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and (not $x268) $x275)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x196 $x12)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x174 $x110)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x233 $x231)))
 (let (($x216 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x334 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x216)))))
 (let (($x215 (=> (and $x264 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x216)))))
 (let (($x101 (and $x215 $x67)))
 (let (($x242 (=> $x101 $x234)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (bvule ?x39 input.dst.llvm-%n)))
 (let (($x348 (= $x130 true)))
 (let (($x92 (= $x348 true)))
 (let (($x132 (forall ((input.ind-%var1477X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1477X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1477X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1476X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1476X)))
 (= $x93 false)))
 ))
 (let (($x181 (and $x354 $x132)))
 (let (($x347 (= $x181 true)))
 (let (($x95 (forall ((input.ind-%var1471X (_ BitVec 32)) )(let ((?x31 (bvadd symbol.1 (bvmul input.ind-%var1471X (_ bv4 32)))))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x31))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv2 32))) ?x332)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv3 32))) ?x97)))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1471X)))
 (let (($x331 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1471X)))
 (=> $x331 (= ?x276 ?x355)))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1470X (_ BitVec 32)) )(let (($x295 (and (bvule (_ bv0 32) input.ind-%var1470X) (bvult input.ind-%var1470X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x331 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1470X)))
 (= $x331 $x295))))
 ))
 (let (($x232 (and $x75 $x95)))
 (let (($x68 (= $x232 true)))
 (let (($x26 (forall ((input.ind-%var1465X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1465X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1465X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1464X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1464X)))
 (= $x93 false)))
 ))
 (let (($x84 (and $x213 $x26)))
 (let (($x315 (= $x84 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x96 (= ?x81 input.dst.llvm-%n)))
 (let (($x195 (= $x96 true)))
 (let (($x350 (= $x195 true)))
 (let ((?x150 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x150)))
 (let (($x120 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x349 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x239 (bvsub ?x24 ?x47)))
 (let (($x119 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x239) (bvult ?x24 ?x239))))
 (let ((?x289 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvmul (_ bv4 64) ?x289)))
 (let ((?x20 ((_ extract 63 32) ?x248)))
 (let (($x221 (= (_ bv0 32) ?x20)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x251 (and (and (and true $x203) $x221) $x119)))
 (let (($x168 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x159 (and $x168 $x251)))
 (let (($x288 (= true $x159)))
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x285 $x288)))
 (let (($x301 (= $x294 true)))
 (let (($x169 (= $x301 true)))
 (let (($x243 (= $x169 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x140 (= $x240 true)))
 (let (($x218 (= $x140 true)))
 (let (($x41 (= $x218 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x211 true)))
 (let (($x298 (= $x22 true)))
 (let (($x184 (= $x298 true)))
 (let (($x189 (= $x285 true)))
 (let (($x284 (= $x189 true)))
 (let (($x201 (= $x284 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x113)))
 (let ((?x146 (bvand symbol.1 (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x146)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x18 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x145 $x18)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x245 $x210)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x64 $x33)))
 (let (($x13 (not $x9)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x162 $x8)))
 (let (($x74 (and (not $x76) $x13)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x135 $x103)))
 (let (($x161 (not $x94)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x156 $x44)))
 (let (($x139 (and (not $x88) $x161)))
 (let (($x82 (and (and (and (and (and (and $x139 $x74) $x63) $x133) $x56) $x199) $x121)))
 (let (($x194 (and $x82 $x171)))
 (let (($x43 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x43 $x194)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x176 (or (bvugt input.memlabel-mem--symbol.1_begin ?x175) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x176) (or $x126 $x148)))))))
 (let (($x147 (and $x55 $x5)))
 (let (($x17 (= $x147 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x52 (= $x183 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x99 (and $x137 $x52)))
 (let (($x51 (and $x99 $x115)))
 (let (($x226 (and $x51 $x201)))
 (let (($x158 (and $x226 $x184)))
 (let (($x311 (and $x158 $x41)))
 (let (($x324 (and $x311 $x243)))
 (let (($x186 (and $x324 $x141)))
 (let (($x69 (and $x186 $x343)))
 (let (($x85 (and $x69 $x340)))
 (let (($x15 (and $x85 $x350)))
 (let (($x335 (and $x15 $x315)))
 (let (($x190 (and $x335 $x68)))
 (let (($x223 (and $x190 $x347)))
 (let (($x312 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x312) $x223)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x19 $x310)))
 (let (($x342 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x342 $x327)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x11 $x259)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x233 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x285 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x228 (and $x314 $x206)))
 (let (($x230 (=> $x228 $x92)))
 (not $x230)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (bvule ?x39 input.dst.llvm-%n)))
 (let (($x348 (= $x130 true)))
 (let (($x92 (= $x348 true)))
 (let (($x132 (forall ((input.ind-%var1477X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1477X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1477X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1476X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1476X)))
 (= $x93 false)))
 ))
 (let (($x181 (and $x354 $x132)))
 (let (($x347 (= $x181 true)))
 (let (($x95 (forall ((input.ind-%var1471X (_ BitVec 32)) )(let ((?x31 (bvadd symbol.1 (bvmul input.ind-%var1471X (_ bv4 32)))))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x31))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv2 32))) ?x332)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv3 32))) ?x97)))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1471X)))
 (let (($x331 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1471X)))
 (=> $x331 (= ?x276 ?x355)))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1470X (_ BitVec 32)) )(let (($x295 (and (bvule (_ bv0 32) input.ind-%var1470X) (bvult input.ind-%var1470X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x331 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1470X)))
 (= $x331 $x295))))
 ))
 (let (($x232 (and $x75 $x95)))
 (let (($x68 (= $x232 true)))
 (let (($x26 (forall ((input.ind-%var1465X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1465X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1465X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1464X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1464X)))
 (= $x93 false)))
 ))
 (let (($x84 (and $x213 $x26)))
 (let (($x315 (= $x84 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x38)))
 (let (($x96 (= ?x81 input.dst.llvm-%n)))
 (let (($x195 (= $x96 true)))
 (let (($x350 (= $x195 true)))
 (let ((?x150 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x150)))
 (let (($x120 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x349 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (= $x281 true)))
 (let (($x29 (= $x227 true)))
 (let (($x141 (= $x29 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x239 (bvsub ?x24 ?x47)))
 (let (($x119 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x239) (bvult ?x24 ?x239))))
 (let ((?x289 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvmul (_ bv4 64) ?x289)))
 (let ((?x20 ((_ extract 63 32) ?x248)))
 (let (($x221 (= (_ bv0 32) ?x20)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x251 (and (and (and true $x203) $x221) $x119)))
 (let (($x168 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x159 (and $x168 $x251)))
 (let (($x288 (= true $x159)))
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x285 $x288)))
 (let (($x301 (= $x294 true)))
 (let (($x169 (= $x301 true)))
 (let (($x243 (= $x169 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x140 (= $x240 true)))
 (let (($x218 (= $x140 true)))
 (let (($x41 (= $x218 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x211 true)))
 (let (($x298 (= $x22 true)))
 (let (($x184 (= $x298 true)))
 (let (($x189 (= $x285 true)))
 (let (($x284 (= $x189 true)))
 (let (($x201 (= $x284 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x113)))
 (let ((?x146 (bvand symbol.1 (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x146)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x18 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x145 $x18)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x245 $x210)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x64 $x33)))
 (let (($x13 (not $x9)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x162 $x8)))
 (let (($x74 (and (not $x76) $x13)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x135 $x103)))
 (let (($x161 (not $x94)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x156 $x44)))
 (let (($x139 (and (not $x88) $x161)))
 (let (($x82 (and (and (and (and (and (and $x139 $x74) $x63) $x133) $x56) $x199) $x121)))
 (let (($x194 (and $x82 $x171)))
 (let (($x43 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x43 $x194)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x176 (or (bvugt input.memlabel-mem--symbol.1_begin ?x175) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x176) (or $x126 $x148)))))))
 (let (($x147 (and $x55 $x5)))
 (let (($x17 (= $x147 true)))
 (let (($x60 (= $x17 true)))
 (let (($x115 (= $x60 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x52 (= $x183 true)))
 (let (($x35 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x35 true)))
 (let (($x114 (= $x180 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x137 (and $x90 $x114)))
 (let (($x99 (and $x137 $x52)))
 (let (($x51 (and $x99 $x115)))
 (let (($x226 (and $x51 $x201)))
 (let (($x158 (and $x226 $x184)))
 (let (($x311 (and $x158 $x41)))
 (let (($x324 (and $x311 $x243)))
 (let (($x186 (and $x324 $x141)))
 (let (($x69 (and $x186 $x343)))
 (let (($x85 (and $x69 $x340)))
 (let (($x15 (and $x85 $x350)))
 (let (($x335 (and $x15 $x315)))
 (let (($x190 (and $x335 $x68)))
 (let (($x223 (and $x190 $x347)))
 (let (($x312 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x312) $x223)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x19 $x310)))
 (let (($x342 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x342 $x327)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x11 $x259)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x233 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x285 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x228 (and $x314 $x206)))
 (let (($x230 (=> $x228 $x92)))
 (not $x230)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x254 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let ((?x58 (bvadd symbol.1 (bvmul input.ind-%var1503X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x357 (bvadd ?x24 (_ bv3 32))))
 (let ((?x45 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x321 (store ?x45 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x356 (store ?x321 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (store ?x356 ?x357 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x279 (concat (select ?x338 (bvadd ?x58 (_ bv2 32))) (concat (select ?x338 (bvadd ?x58 (_ bv1 32))) (select ?x338 ?x58)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1503X)))
 (let (($x351 (= input.ind-%var1503X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x274 (= (ite $x351 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x338 (bvadd ?x58 (_ bv3 32))) ?x279))))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (let (($x277 (or $x79 $x351)))
 (=> $x277 $x274))))))))))))))))
 ))
 (let (($x91 (forall ((input.ind-%var1502X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1502X)))
 (let (($x80 (and $x355 (bvult input.ind-%var1502X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x351 (= input.ind-%var1502X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1502X)))
 (let (($x277 (or $x79 $x351)))
 (= $x277 $x80)))))))
 ))
 (let (($x326 (and $x91 $x254)))
 (let (($x339 (= true true)))
 (let (($x341 (and $x339 $x326)))
 (let (($x192 (= $x341 true)))
 (let (($x346 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1495X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1495X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1494X)))
 (= $x263 false)))
 ))
 (let (($x325 (and $x110 $x346)))
 (let (($x86 (= $x325 true)))
 (let (($x12 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let ((?x58 (bvadd symbol.1 (bvmul input.ind-%var1489X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x58))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x58 (_ bv2 32))) ?x241)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x58 (_ bv3 32))) ?x127)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1489X)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (=> $x79 (= ?x354 ?x329)))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1488X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1488X)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1488X)))
 (= $x79 (and $x355 (bvult input.ind-%var1488X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x242 (and $x95 $x12)))
 (let (($x237 (= $x242 true)))
 (let (($x256 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1483X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1483X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var1482X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1482X)))
 (= $x263 false)))
 ))
 (let (($x286 (and $x84 $x256)))
 (let (($x31 (= $x286 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x85)))
 (let (($x195 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x195 true)))
 (let (($x15 (= $x350 true)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x281)))
 (let ((?x243 (bvand symbol.1 (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x243)))
 (let ((?x301 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x159 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x288 (and $x119 $x159)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x247 $x288)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x248 (and $x200 $x289)))
 (let (($x20 (not $x248)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x300 (and $x170 $x203)))
 (let (($x269 (and (not $x300) $x20)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x198 $x163)))
 (let (($x202 (not $x168)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x218 $x41)))
 (let (($x164 (and (not $x311) $x202)))
 (let (($x258 (and (and (and (and (and (and $x164 $x269) $x246) $x129) $x294) $x169) $x324)))
 (let (($x343 (and $x258 $x227)))
 (let (($x194 (= symbol.1 dst_symbol_addr.1)))
 (let (($x69 (and $x194 $x343)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x226 $x211)))))))
 (let (($x150 (and $x140 $x69)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x199 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x134 (= $x199 true)))
 (let (($x146 (= $x134 true)))
 (let (($x121 (= $x146 true)))
 (let (($x18 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x210 (= $x18 true)))
 (let (($x56 (= $x210 true)))
 (let (($x235 (= $x56 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x133 true)))
 (let (($x245 (= $x62 true)))
 (let (($x145 (= $x245 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x161 (bvsub ?x24 ?x47)))
 (let (($x76 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x161) (bvult ?x24 ?x161))))
 (let ((?x157 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvmul (_ bv4 64) ?x157)))
 (let ((?x103 ((_ extract 63 32) ?x135)))
 (let (($x94 (= (_ bv0 32) ?x103)))
 (let (($x44 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x33 (and (and (and true $x44) $x94) $x76)))
 (let (($x125 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x9 (and $x125 $x33)))
 (let (($x13 (= true $x9)))
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (=> $x265 $x13)))
 (let (($x59 (= $x74 true)))
 (let (($x63 (= $x59 true)))
 (let (($x179 (= $x63 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x126 (= $x50 true)))
 (let (($x138 (= $x126 true)))
 (let (($x148 (= $x138 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x175 true)))
 (let (($x124 (= $x155 true)))
 (let (($x176 (= $x124 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x99 (= $x52 true)))
 (let (($x7 (= $x99 true)))
 (let (($x104 (= $x7 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x137 (= $x114 true)))
 (let (($x16 (= $x137 true)))
 (let (($x37 (= $x16 true)))
 (let (($x107 (= $x265 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x10)))
 (let (($x136 (= ?x128 input.dst.llvm-%n)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x116 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x90 (and $x14 $x154)))
 (let (($x35 (and $x90 $x81)))
 (let (($x183 (and $x35 $x37)))
 (let (($x149 (and $x183 $x104)))
 (let (($x112 (and $x149 $x176)))
 (let (($x48 (and $x112 $x148)))
 (let (($x182 (and $x48 $x179)))
 (let (($x78 (and $x182 $x145)))
 (let (($x212 (and $x78 $x235)))
 (let (($x82 (and $x212 $x121)))
 (let (($x340 (and $x82 $x297)))
 (let (($x152 (and $x340 $x15)))
 (let (($x142 (and $x152 $x31)))
 (let (($x173 (and $x142 $x237)))
 (let (($x296 (and $x173 $x86)))
 (let (($x34 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x34) $x296)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (and $x268 $x278)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x83 (and $x187 $x117)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x23 $x83)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x11 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x193 (=> (and $x265 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x143 (and $x193 $x303)))
 (let (($x36 (=> $x143 $x192)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x254 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let ((?x58 (bvadd symbol.1 (bvmul input.ind-%var1503X (_ bv4 32)))))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x357 (bvadd ?x24 (_ bv3 32))))
 (let ((?x45 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x321 (store ?x45 (bvadd ?x24 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x356 (store ?x321 (bvadd ?x24 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (store ?x356 ?x357 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x279 (concat (select ?x338 (bvadd ?x58 (_ bv2 32))) (concat (select ?x338 (bvadd ?x58 (_ bv1 32))) (select ?x338 ?x58)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1503X)))
 (let (($x351 (= input.ind-%var1503X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x274 (= (ite $x351 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x338 (bvadd ?x58 (_ bv3 32))) ?x279))))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (let (($x277 (or $x79 $x351)))
 (=> $x277 $x274))))))))))))))))
 ))
 (let (($x91 (forall ((input.ind-%var1502X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1502X)))
 (let (($x80 (and $x355 (bvult input.ind-%var1502X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x351 (= input.ind-%var1502X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1502X)))
 (let (($x277 (or $x79 $x351)))
 (= $x277 $x80)))))))
 ))
 (let (($x326 (and $x91 $x254)))
 (let (($x339 (= true true)))
 (let (($x341 (and $x339 $x326)))
 (let (($x192 (= $x341 true)))
 (let (($x346 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1495X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1495X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1494X)))
 (= $x263 false)))
 ))
 (let (($x325 (and $x110 $x346)))
 (let (($x86 (= $x325 true)))
 (let (($x12 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let ((?x58 (bvadd symbol.1 (bvmul input.ind-%var1489X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x58))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x58 (_ bv2 32))) ?x241)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x58 (_ bv3 32))) ?x127)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1489X)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (=> $x79 (= ?x354 ?x329)))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1488X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1488X)))
 (let (($x79 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1488X)))
 (= $x79 (and $x355 (bvult input.ind-%var1488X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x242 (and $x95 $x12)))
 (let (($x237 (= $x242 true)))
 (let (($x256 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1483X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1483X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var1482X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1482X)))
 (= $x263 false)))
 ))
 (let (($x286 (and $x84 $x256)))
 (let (($x31 (= $x286 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x85)))
 (let (($x195 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x195 true)))
 (let (($x15 (= $x350 true)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x281)))
 (let ((?x243 (bvand symbol.1 (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x243)))
 (let ((?x301 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x159 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x288 (and $x119 $x159)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x247 $x288)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x248 (and $x200 $x289)))
 (let (($x20 (not $x248)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x300 (and $x170 $x203)))
 (let (($x269 (and (not $x300) $x20)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x198 $x163)))
 (let (($x202 (not $x168)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x218 $x41)))
 (let (($x164 (and (not $x311) $x202)))
 (let (($x258 (and (and (and (and (and (and $x164 $x269) $x246) $x129) $x294) $x169) $x324)))
 (let (($x343 (and $x258 $x227)))
 (let (($x194 (= symbol.1 dst_symbol_addr.1)))
 (let (($x69 (and $x194 $x343)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x226 $x211)))))))
 (let (($x150 (and $x140 $x69)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x199 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x134 (= $x199 true)))
 (let (($x146 (= $x134 true)))
 (let (($x121 (= $x146 true)))
 (let (($x18 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x210 (= $x18 true)))
 (let (($x56 (= $x210 true)))
 (let (($x235 (= $x56 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x133 true)))
 (let (($x245 (= $x62 true)))
 (let (($x145 (= $x245 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x47)))
 (let ((?x161 (bvsub ?x24 ?x47)))
 (let (($x76 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x24 ?x161) (bvult ?x24 ?x161))))
 (let ((?x157 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvmul (_ bv4 64) ?x157)))
 (let ((?x103 ((_ extract 63 32) ?x135)))
 (let (($x94 (= (_ bv0 32) ?x103)))
 (let (($x44 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x33 (and (and (and true $x44) $x94) $x76)))
 (let (($x125 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x9 (and $x125 $x33)))
 (let (($x13 (= true $x9)))
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (=> $x265 $x13)))
 (let (($x59 (= $x74 true)))
 (let (($x63 (= $x59 true)))
 (let (($x179 (= $x63 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x126 (= $x50 true)))
 (let (($x138 (= $x126 true)))
 (let (($x148 (= $x138 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x175 true)))
 (let (($x124 (= $x155 true)))
 (let (($x176 (= $x124 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x99 (= $x52 true)))
 (let (($x7 (= $x99 true)))
 (let (($x104 (= $x7 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x137 (= $x114 true)))
 (let (($x16 (= $x137 true)))
 (let (($x37 (= $x16 true)))
 (let (($x107 (= $x265 true)))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x10)))
 (let (($x136 (= ?x128 input.dst.llvm-%n)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x116 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x90 (and $x14 $x154)))
 (let (($x35 (and $x90 $x81)))
 (let (($x183 (and $x35 $x37)))
 (let (($x149 (and $x183 $x104)))
 (let (($x112 (and $x149 $x176)))
 (let (($x48 (and $x112 $x148)))
 (let (($x182 (and $x48 $x179)))
 (let (($x78 (and $x182 $x145)))
 (let (($x212 (and $x78 $x235)))
 (let (($x82 (and $x212 $x121)))
 (let (($x340 (and $x82 $x297)))
 (let (($x152 (and $x340 $x15)))
 (let (($x142 (and $x152 $x31)))
 (let (($x173 (and $x142 $x237)))
 (let (($x296 (and $x173 $x86)))
 (let (($x34 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x34) $x296)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (and $x268 $x278)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x83 (and $x187 $x117)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x23 $x83)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x11 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x193 (=> (and $x265 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x143 (and $x193 $x303)))
 (let (($x36 (=> $x143 $x192)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (not $x132)))
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (=> $x265 $x177)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x148 (bvsub ?x307 ?x24)))
 (let (($x125 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x148) (bvult ?x307 ?x148))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x50 (bvmul (_ bv4 64) ?x112)))
 (let ((?x126 ((_ extract 63 32) ?x50)))
 (let (($x138 (= (_ bv0 32) ?x126)))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x43 (and (and (and true $x124) $x138) $x125)))
 (let (($x7 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x156 (and $x7 $x43)))
 (let (($x44 (= true $x156)))
 (let (($x144 (=> $x265 $x44)))
 (let (($x101 (=> (and $x144 $x265) $x177)))
 (let (($x315 (= $x101 true)))
 (let (($x331 (= $x315 true)))
 (let (($x192 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1521X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x213 false)))
 ))
 (let (($x36 (and $x219 $x192)))
 (let (($x249 (= $x36 true)))
 (let (($x338 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1515X (_ bv4 32)))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x220)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x305)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1515X)))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1515X)))
 (=> $x58 (= ?x12 ?x204)))))))))
 ))
 (let (($x127 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) input.ind-%var1514X) (bvult input.ind-%var1514X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1514X)))
 (= $x58 $x205))))
 ))
 (let (($x360 (and $x127 $x338)))
 (let (($x244 (= $x360 true)))
 (let (($x160 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1509X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x213 false)))
 ))
 (let (($x118 (and $x178 $x160)))
 (let (($x95 (= $x118 true)))
 (let ((?x343 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x343)))
 (let (($x340 (= ?x69 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x150 (= ?x69 input.dst.llvm-%n)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let ((?x255 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x255)))
 (let (($x324 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x324 true)))
 (let (($x281 (= $x258 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x269)))
 (let ((?x248 (bvand symbol.1 (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x248)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x170 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x203 (= input.memlabel-mem--symbol.1_end ?x170)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x300 (and $x164 $x203)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x202 $x300)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x171 $x194)))
 (let (($x41 (not $x218)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x184 $x158)))
 (let (($x153 (and (not $x140) $x41)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x284 $x226)))
 (let (($x211 (not $x201)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x115 $x51)))
 (let (($x298 (and (not $x189) $x211)))
 (let (($x247 (and (and (and (and (and (and $x298 $x153) $x198) $x168) $x221) $x289) $x20)))
 (let (($x119 (and $x247 $x29)))
 (let (($x245 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x245 $x119)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x235 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x235) (or $x146 $x121)))))))
 (let (($x159 (and $x60 $x251)))
 (let (($x288 (= $x159 true)))
 (let (($x294 (= $x288 true)))
 (let (($x349 (= $x294 true)))
 (let (($x74 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x63 (= $x59 true)))
 (let (($x179 (= $x63 true)))
 (let (($x8 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x94 true)))
 (let (($x139 (= $x64 true)))
 (let (($x161 (= $x139 true)))
 (let (($x88 (= $x144 true)))
 (let (($x157 (= $x88 true)))
 (let (($x135 (= $x157 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x137 (= $x114 true)))
 (let (($x16 (= $x137 true)))
 (let (($x37 (= $x16 true)))
 (let (($x107 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x35 (= $x81 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x180 (and $x90 $x35)))
 (let (($x183 (and $x180 $x37)))
 (let (($x103 (and $x183 $x135)))
 (let (($x162 (and $x103 $x161)))
 (let (($x13 (and $x162 $x9)))
 (let (($x182 (and $x13 $x179)))
 (let (($x301 (and $x182 $x349)))
 (let (($x227 (and $x301 $x281)))
 (let (($x297 (and $x227 $x120)))
 (let (($x195 (and $x297 $x96)))
 (let (($x354 (and $x195 $x95)))
 (let (($x352 (and $x354 $x244)))
 (let (($x347 (and $x352 $x249)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x34 $x347)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x19 $x72)))
 (let (($x342 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x342 $x87)))
 (let (($x11 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x11)))))
 (let (($x323 (=> (and $x265 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x11)))))
 (let (($x151 (and $x323 $x113)))
 (let (($x232 (=> $x151 $x331)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (not $x132)))
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (=> $x265 $x177)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x148 (bvsub ?x307 ?x24)))
 (let (($x125 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x148) (bvult ?x307 ?x148))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x50 (bvmul (_ bv4 64) ?x112)))
 (let ((?x126 ((_ extract 63 32) ?x50)))
 (let (($x138 (= (_ bv0 32) ?x126)))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x43 (and (and (and true $x124) $x138) $x125)))
 (let (($x7 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x156 (and $x7 $x43)))
 (let (($x44 (= true $x156)))
 (let (($x144 (=> $x265 $x44)))
 (let (($x101 (=> (and $x144 $x265) $x177)))
 (let (($x315 (= $x101 true)))
 (let (($x331 (= $x315 true)))
 (let (($x192 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1521X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x213 false)))
 ))
 (let (($x36 (and $x219 $x192)))
 (let (($x249 (= $x36 true)))
 (let (($x338 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1515X (_ bv4 32)))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x220)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x305)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1515X)))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1515X)))
 (=> $x58 (= ?x12 ?x204)))))))))
 ))
 (let (($x127 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) input.ind-%var1514X) (bvult input.ind-%var1514X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1514X)))
 (= $x58 $x205))))
 ))
 (let (($x360 (and $x127 $x338)))
 (let (($x244 (= $x360 true)))
 (let (($x160 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1509X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x213 false)))
 ))
 (let (($x118 (and $x178 $x160)))
 (let (($x95 (= $x118 true)))
 (let ((?x343 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x343)))
 (let (($x340 (= ?x69 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x150 (= ?x69 input.dst.llvm-%n)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let ((?x255 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x255)))
 (let (($x324 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x324 true)))
 (let (($x281 (= $x258 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x269)))
 (let ((?x248 (bvand symbol.1 (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x248)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x170 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x203 (= input.memlabel-mem--symbol.1_end ?x170)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x300 (and $x164 $x203)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x202 $x300)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x171 $x194)))
 (let (($x41 (not $x218)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x184 $x158)))
 (let (($x153 (and (not $x140) $x41)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x284 $x226)))
 (let (($x211 (not $x201)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x115 $x51)))
 (let (($x298 (and (not $x189) $x211)))
 (let (($x247 (and (and (and (and (and (and $x298 $x153) $x198) $x168) $x221) $x289) $x20)))
 (let (($x119 (and $x247 $x29)))
 (let (($x245 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x245 $x119)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x235 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x235) (or $x146 $x121)))))))
 (let (($x159 (and $x60 $x251)))
 (let (($x288 (= $x159 true)))
 (let (($x294 (= $x288 true)))
 (let (($x349 (= $x294 true)))
 (let (($x74 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x63 (= $x59 true)))
 (let (($x179 (= $x63 true)))
 (let (($x8 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x94 true)))
 (let (($x139 (= $x64 true)))
 (let (($x161 (= $x139 true)))
 (let (($x88 (= $x144 true)))
 (let (($x157 (= $x88 true)))
 (let (($x135 (= $x157 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x137 (= $x114 true)))
 (let (($x16 (= $x137 true)))
 (let (($x37 (= $x16 true)))
 (let (($x107 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x38 (= $x107 true)))
 (let (($x81 (= $x38 true)))
 (let (($x35 (= $x81 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x10 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x90 (and $x105 $x154)))
 (let (($x180 (and $x90 $x35)))
 (let (($x183 (and $x180 $x37)))
 (let (($x103 (and $x183 $x135)))
 (let (($x162 (and $x103 $x161)))
 (let (($x13 (and $x162 $x9)))
 (let (($x182 (and $x13 $x179)))
 (let (($x301 (and $x182 $x349)))
 (let (($x227 (and $x301 $x281)))
 (let (($x297 (and $x227 $x120)))
 (let (($x195 (and $x297 $x96)))
 (let (($x354 (and $x195 $x95)))
 (let (($x352 (and $x354 $x244)))
 (let (($x347 (and $x352 $x249)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x34 $x347)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x19 $x72)))
 (let (($x342 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x342 $x87)))
 (let (($x11 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x11)))))
 (let (($x323 (=> (and $x265 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x11)))))
 (let (($x151 (and $x323 $x113)))
 (let (($x232 (=> $x151 $x331)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x333 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x252 (bvneg ?x333)))
 (let (($x93 (= ?x252 ?x122)))
 (let (($x260 (= $x93 true)))
 (let (($x77 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1539X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x354 false)))
 ))
 (let (($x276 (and $x26 $x77)))
 (let (($x79 (= $x276 true)))
 (let (($x86 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var1533X (_ bv4 32)))))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x39)))
 (let ((?x351 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x110)))
 (let ((?x87 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1533X)))
 (let (($x305 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1533X)))
 (=> $x305 (= ?x87 ?x351)))))))))
 ))
 (let (($x36 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x219 (and (bvule (_ bv0 32) input.ind-%var1532X) (bvult input.ind-%var1532X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x305 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1532X)))
 (= $x305 $x219))))
 ))
 (let (($x296 (and $x36 $x86)))
 (let (($x325 (= $x296 true)))
 (let (($x45 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1527X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1527X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1526X)))
 (= $x354 false)))
 ))
 (let (($x236 (and $x205 $x45)))
 (let (($x224 (= $x236 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x213)))
 (let (($x178 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x178 true)))
 (let (($x355 (= $x286 true)))
 (let (($x340 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x69 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x324 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (= $x324 true)))
 (let (($x281 (= $x258 true)))
 (let (($x227 (= $x281 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x248 (bvsub ?x307 ?x24)))
 (let (($x29 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x248) (bvult ?x307 ?x248))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvmul (_ bv4 64) ?x129)))
 (let ((?x289 ((_ extract 63 32) ?x200)))
 (let (($x186 (= (_ bv0 32) ?x289)))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x159 (and (and (and true $x300) $x186) $x29)))
 (let (($x239 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x288 (and $x239 $x159)))
 (let (($x294 (= true $x288)))
 (let (($x173 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x349 (=> $x173 $x294)))
 (let (($x301 (= $x349 true)))
 (let (($x169 (= $x301 true)))
 (let (($x255 (= $x169 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x41 true)))
 (let (($x246 (= $x153 true)))
 (let (($x198 (= $x246 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x311 (= $x140 true)))
 (let (($x171 (= $x311 true)))
 (let (($x194 (= $x171 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x201 true)))
 (let (($x298 (= $x211 true)))
 (let (($x184 (= $x298 true)))
 (let (($x51 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x51 true)))
 (let (($x22 (= $x189 true)))
 (let (($x284 (= $x22 true)))
 (let (($x60 (= $x173 true)))
 (let (($x62 (= $x60 true)))
 (let (($x245 (= $x62 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x78)))
 (let ((?x182 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x182)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x13 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x74 (and $x76 $x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x8 $x74)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x88 $x157)))
 (let (($x103 (not $x135)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x156 $x44)))
 (let (($x64 (and (not $x144) $x103)))
 (let (($x148 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x48 $x148)))
 (let (($x166 (not $x98)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x126 $x138)))
 (let (($x43 (and (not $x55) $x166)))
 (let (($x199 (and (and (and (and (and (and $x43 $x64) $x139) $x162) $x59) $x179) $x145)))
 (let (($x146 (and $x199 $x17)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x134 (and $x180 $x146)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x104 $x175)))))))
 (let (($x121 (and $x50 $x134)))
 (let (($x82 (= $x121 true)))
 (let (($x5 (= $x82 true)))
 (let (($x147 (= $x5 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x116)))
 (let (($x154 (= ?x105 input.dst.llvm-%n)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x14 (= ?x105 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x38 (and $x71 $x107)))
 (let (($x240 (and $x38 $x147)))
 (let (($x115 (and $x240 $x245)))
 (let (($x226 (and $x115 $x284)))
 (let (($x158 (and $x226 $x184)))
 (let (($x218 (and $x158 $x194)))
 (let (($x141 (and $x218 $x198)))
 (let (($x243 (and $x141 $x255)))
 (let (($x343 (and $x243 $x227)))
 (let (($x297 (and $x343 $x120)))
 (let (($x152 (and $x297 $x195)))
 (let (($x97 (and $x152 $x355)))
 (let (($x287 (and $x97 $x224)))
 (let (($x278 (and $x287 $x325)))
 (let (($x49 (and $x278 $x79)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x10) $x49)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and $x57 $x66)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x326 (and $x268 $x42)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x187 $x326)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x342 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x173 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x341 (and $x273 $x191)))
 (let (($x223 (=> $x341 $x260)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x333 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x252 (bvneg ?x333)))
 (let (($x93 (= ?x252 ?x122)))
 (let (($x260 (= $x93 true)))
 (let (($x77 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1539X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x354 false)))
 ))
 (let (($x276 (and $x26 $x77)))
 (let (($x79 (= $x276 true)))
 (let (($x86 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var1533X (_ bv4 32)))))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x39)))
 (let ((?x351 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x110)))
 (let ((?x87 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1533X)))
 (let (($x305 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1533X)))
 (=> $x305 (= ?x87 ?x351)))))))))
 ))
 (let (($x36 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x219 (and (bvule (_ bv0 32) input.ind-%var1532X) (bvult input.ind-%var1532X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x305 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1532X)))
 (= $x305 $x219))))
 ))
 (let (($x296 (and $x36 $x86)))
 (let (($x325 (= $x296 true)))
 (let (($x45 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1527X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1527X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1526X)))
 (= $x354 false)))
 ))
 (let (($x236 (and $x205 $x45)))
 (let (($x224 (= $x236 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x213)))
 (let (($x178 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x178 true)))
 (let (($x355 (= $x286 true)))
 (let (($x340 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x69 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x324 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (= $x324 true)))
 (let (($x281 (= $x258 true)))
 (let (($x227 (= $x281 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x248 (bvsub ?x307 ?x24)))
 (let (($x29 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x248) (bvult ?x307 ?x248))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvmul (_ bv4 64) ?x129)))
 (let ((?x289 ((_ extract 63 32) ?x200)))
 (let (($x186 (= (_ bv0 32) ?x289)))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x159 (and (and (and true $x300) $x186) $x29)))
 (let (($x239 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x288 (and $x239 $x159)))
 (let (($x294 (= true $x288)))
 (let (($x173 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x349 (=> $x173 $x294)))
 (let (($x301 (= $x349 true)))
 (let (($x169 (= $x301 true)))
 (let (($x255 (= $x169 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x41 true)))
 (let (($x246 (= $x153 true)))
 (let (($x198 (= $x246 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x311 (= $x140 true)))
 (let (($x171 (= $x311 true)))
 (let (($x194 (= $x171 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x201 true)))
 (let (($x298 (= $x211 true)))
 (let (($x184 (= $x298 true)))
 (let (($x51 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x51 true)))
 (let (($x22 (= $x189 true)))
 (let (($x284 (= $x22 true)))
 (let (($x60 (= $x173 true)))
 (let (($x62 (= $x60 true)))
 (let (($x245 (= $x62 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x78)))
 (let ((?x182 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x182)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x13 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x74 (and $x76 $x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x8 $x74)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x88 $x157)))
 (let (($x103 (not $x135)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x156 $x44)))
 (let (($x64 (and (not $x144) $x103)))
 (let (($x148 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x48 $x148)))
 (let (($x166 (not $x98)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x126 $x138)))
 (let (($x43 (and (not $x55) $x166)))
 (let (($x199 (and (and (and (and (and (and $x43 $x64) $x139) $x162) $x59) $x179) $x145)))
 (let (($x146 (and $x199 $x17)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x134 (and $x180 $x146)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x104 $x175)))))))
 (let (($x121 (and $x50 $x134)))
 (let (($x82 (= $x121 true)))
 (let (($x5 (= $x82 true)))
 (let (($x147 (= $x5 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x116)))
 (let (($x154 (= ?x105 input.dst.llvm-%n)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x14 (= ?x105 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x38 (and $x71 $x107)))
 (let (($x240 (and $x38 $x147)))
 (let (($x115 (and $x240 $x245)))
 (let (($x226 (and $x115 $x284)))
 (let (($x158 (and $x226 $x184)))
 (let (($x218 (and $x158 $x194)))
 (let (($x141 (and $x218 $x198)))
 (let (($x243 (and $x141 $x255)))
 (let (($x343 (and $x243 $x227)))
 (let (($x297 (and $x343 $x120)))
 (let (($x152 (and $x297 $x195)))
 (let (($x97 (and $x152 $x355)))
 (let (($x287 (and $x97 $x224)))
 (let (($x278 (and $x287 $x325)))
 (let (($x49 (and $x278 $x79)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x10) $x49)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and $x57 $x66)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x326 (and $x268 $x42)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x187 $x326)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x342 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x173 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x341 (and $x273 $x191)))
 (let (($x223 (=> $x341 $x260)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x254 (bvule ?x31 (_ bv399 32))))
 (let (($x347 (= $x254 true)))
 (let (($x75 (= $x347 true)))
 (let (($x261 (forall ((input.ind-%var1557X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1557X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1557X) (_ bv0 32)))))
 ))
 (let (($x315 (forall ((input.ind-%var1556X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1556X)))
 (= $x237 false)))
 ))
 (let (($x257 (and $x315 $x261)))
 (let (($x359 (= $x257 true)))
 (let (($x118 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let ((?x81 (bvadd symbol.1 (bvmul input.ind-%var1551X (_ bv4 32)))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x81))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv2 32))) ?x80)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv3 32))) ?x249)))
 (let ((?x26 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1551X)))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1551X)))
 (=> $x350 (= ?x26 ?x356)))))))))
 ))
 (let (($x86 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var1550X) (bvult input.ind-%var1550X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (= $x350 $x83))))
 ))
 (let (($x177 (and $x86 $x118)))
 (let (($x54 (= $x177 true)))
 (let (($x151 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1545X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1545X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (= $x237 false)))
 ))
 (let (($x256 (and $x236 $x151)))
 (let (($x329 (= $x256 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x84)))
 (let (($x286 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x355 (= $x286 true)))
 (let (($x97 (= $x355 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x152 (= $x195 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x258 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x281 (= $x258 true)))
 (let (($x227 (= $x281 true)))
 (let (($x343 (= $x227 true)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x251)))
 (let ((?x289 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x289)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x203 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x300 (= input.memlabel-mem--symbol.1_end ?x203)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (and $x170 $x300)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x202 $x119)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x41 $x153)))
 (let (($x198 (not $x246)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x171 $x194)))
 (let (($x163 (and (not $x218) $x198)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x211 $x298)))
 (let (($x158 (not $x184)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x284 $x226)))
 (let (($x311 (and (not $x201) $x158)))
 (let (($x288 (and (and (and (and (and (and $x311 $x163) $x168) $x164) $x221) $x200) $x186)))
 (let (($x294 (and $x288 $x20)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x349 (and $x145 $x294)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x121 (or (bvugt input.memlabel-mem--symbol.1_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x121) (or $x240 $x60)))))))
 (let (($x301 (and $x22 $x349)))
 (let (($x169 (= $x301 true)))
 (let (($x255 (= $x169 true)))
 (let (($x243 (= $x255 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x235 (= $x59 true)))
 (let (($x63 (= $x235 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x157)))
 (let (($x210 (= ?x135 input.dst.llvm-%n)))
 (let (($x161 (= $x210 true)))
 (let (($x162 (= $x161 true)))
 (let (($x103 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x103 true)))
 (let (($x18 (= $x64 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x35 (bvsub ?x307 ?x24)))
 (let (($x55 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x35) (bvult ?x307 ?x35))))
 (let ((?x124 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x106 (bvmul (_ bv4 64) ?x124)))
 (let ((?x176 ((_ extract 63 32) ?x106)))
 (let (($x50 (= (_ bv0 32) ?x176)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x175) $x50) $x55)))
 (let (($x52 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x98 (and $x52 $x148)))
 (let (($x166 (= true $x98)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x132 $x166)))
 (let (($x156 (= $x43 true)))
 (let (($x44 (= $x156 true)))
 (let (($x144 (= $x44 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (= $x132 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x107 (and $x105 $x90)))
 (let (($x16 (and $x107 $x112)))
 (let (($x94 (and $x16 $x144)))
 (let (($x139 (and $x94 $x18)))
 (let (($x56 (and $x139 $x162)))
 (let (($x13 (and $x56 $x9)))
 (let (($x179 (and $x13 $x63)))
 (let (($x324 (and $x179 $x243)))
 (let (($x69 (and $x324 $x343)))
 (let (($x340 (and $x69 $x297)))
 (let (($x213 (and $x340 $x152)))
 (let (($x95 (and $x213 $x97)))
 (let (($x346 (and $x95 $x329)))
 (let (($x109 (and $x346 $x54)))
 (let (($x220 (and $x109 $x359)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and (not $x279) $x220)))
 (let (($x123 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x123 $x143)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x360 (and $x312 $x277)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x196 $x360)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x187 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x357 (=> (and $x132 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x321 (and $x357 $x127)))
 (let (($x6 (=> $x321 $x75)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x254 (bvule ?x31 (_ bv399 32))))
 (let (($x347 (= $x254 true)))
 (let (($x75 (= $x347 true)))
 (let (($x261 (forall ((input.ind-%var1557X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1557X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1557X) (_ bv0 32)))))
 ))
 (let (($x315 (forall ((input.ind-%var1556X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1556X)))
 (= $x237 false)))
 ))
 (let (($x257 (and $x315 $x261)))
 (let (($x359 (= $x257 true)))
 (let (($x118 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let ((?x81 (bvadd symbol.1 (bvmul input.ind-%var1551X (_ bv4 32)))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x81))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv2 32))) ?x80)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv3 32))) ?x249)))
 (let ((?x26 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1551X)))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1551X)))
 (=> $x350 (= ?x26 ?x356)))))))))
 ))
 (let (($x86 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var1550X) (bvult input.ind-%var1550X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (= $x350 $x83))))
 ))
 (let (($x177 (and $x86 $x118)))
 (let (($x54 (= $x177 true)))
 (let (($x151 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1545X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1545X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (= $x237 false)))
 ))
 (let (($x256 (and $x236 $x151)))
 (let (($x329 (= $x256 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x84)))
 (let (($x286 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x355 (= $x286 true)))
 (let (($x97 (= $x355 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x152 (= $x195 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x258 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x281 (= $x258 true)))
 (let (($x227 (= $x281 true)))
 (let (($x343 (= $x227 true)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x251)))
 (let ((?x289 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x289)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x203 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x300 (= input.memlabel-mem--symbol.1_end ?x203)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (and $x170 $x300)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x202 $x119)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x41 $x153)))
 (let (($x198 (not $x246)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x171 $x194)))
 (let (($x163 (and (not $x218) $x198)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x211 $x298)))
 (let (($x158 (not $x184)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x284 $x226)))
 (let (($x311 (and (not $x201) $x158)))
 (let (($x288 (and (and (and (and (and (and $x311 $x163) $x168) $x164) $x221) $x200) $x186)))
 (let (($x294 (and $x288 $x20)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x349 (and $x145 $x294)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x121 (or (bvugt input.memlabel-mem--symbol.1_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x121) (or $x240 $x60)))))))
 (let (($x301 (and $x22 $x349)))
 (let (($x169 (= $x301 true)))
 (let (($x255 (= $x169 true)))
 (let (($x243 (= $x255 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x235 (= $x59 true)))
 (let (($x63 (= $x235 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x157)))
 (let (($x210 (= ?x135 input.dst.llvm-%n)))
 (let (($x161 (= $x210 true)))
 (let (($x162 (= $x161 true)))
 (let (($x103 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x103 true)))
 (let (($x18 (= $x64 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x35 (bvsub ?x307 ?x24)))
 (let (($x55 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x35) (bvult ?x307 ?x35))))
 (let ((?x124 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x106 (bvmul (_ bv4 64) ?x124)))
 (let ((?x176 ((_ extract 63 32) ?x106)))
 (let (($x50 (= (_ bv0 32) ?x176)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x175) $x50) $x55)))
 (let (($x52 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x98 (and $x52 $x148)))
 (let (($x166 (= true $x98)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x132 $x166)))
 (let (($x156 (= $x43 true)))
 (let (($x44 (= $x156 true)))
 (let (($x144 (= $x44 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (= $x132 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x107 (and $x105 $x90)))
 (let (($x16 (and $x107 $x112)))
 (let (($x94 (and $x16 $x144)))
 (let (($x139 (and $x94 $x18)))
 (let (($x56 (and $x139 $x162)))
 (let (($x13 (and $x56 $x9)))
 (let (($x179 (and $x13 $x63)))
 (let (($x324 (and $x179 $x243)))
 (let (($x69 (and $x324 $x343)))
 (let (($x340 (and $x69 $x297)))
 (let (($x213 (and $x340 $x152)))
 (let (($x95 (and $x213 $x97)))
 (let (($x346 (and $x95 $x329)))
 (let (($x109 (and $x346 $x54)))
 (let (($x220 (and $x109 $x359)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and (not $x279) $x220)))
 (let (($x123 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x123 $x143)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x360 (and $x312 $x277)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x196 $x360)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x187 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x357 (=> (and $x132 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x321 (and $x357 $x127)))
 (let (($x6 (=> $x321 $x75)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (bvsle ?x325 (_ bv399 32))))
 (let (($x133 (= $x264 true)))
 (let (($x101 (= $x133 true)))
 (let (($x219 (forall ((input.ind-%var1575X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1575X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1575X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var1574X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1574X)))
 (= $x352 false)))
 ))
 (let (($x190 (and $x42 $x219)))
 (let (($x275 (= $x190 true)))
 (let (($x66 (forall ((input.ind-%var1569X (_ BitVec 32)) )(let ((?x77 (bvadd symbol.1 (bvmul input.ind-%var1569X (_ bv4 32)))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x77))))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv2 32))) ?x305)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv3 32))) ?x339)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1569X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1569X)))
 (=> $x241 (= ?x315 ?x354)))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let (($x361 (and (bvule (_ bv0 32) input.ind-%var1568X) (bvult input.ind-%var1568X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1568X)))
 (= $x241 $x361))))
 ))
 (let (($x93 (and $x118 $x66)))
 (let (($x260 (= $x93 true)))
 (let (($x276 (forall ((input.ind-%var1563X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1563X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1563X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1562X)))
 (= $x352 false)))
 ))
 (let (($x225 (and $x256 $x276)))
 (let (($x81 (= $x225 true)))
 (let ((?x178 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x178)))
 (let (($x355 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x355 true)))
 (let (($x95 (= $x97 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x96 true)))
 (let (($x152 (= $x195 true)))
 (let (($x213 (= $x152 true)))
 (let (($x313 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x281 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x281 true)))
 (let (($x343 (= $x227 true)))
 (let (($x69 (= $x343 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x200)))
 (let ((?x29 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x29)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x202 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x202)))
 (let (($x269 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x269 $x170)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x164 $x203)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x41 $x153)))
 (let (($x198 (not $x246)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x194 $x218)))
 (let (($x248 (and (not $x141) $x198)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x211 $x298)))
 (let (($x158 (not $x184)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x226 $x201)))
 (let (($x171 (and (not $x140) $x158)))
 (let (($x294 (and (and (and (and (and (and $x171 $x248) $x168) $x239) $x300) $x221) $x129)))
 (let (($x349 (and $x294 $x159)))
 (let (($x189 (= symbol.1 dst_symbol_addr.1)))
 (let (($x301 (and $x189 $x349)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x134) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x284 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x62 $x245)))))))
 (let (($x169 (and $x284 $x301)))
 (let (($x255 (= $x169 true)))
 (let (($x243 (= $x255 true)))
 (let (($x324 (= $x243 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x235 (= $x59 true)))
 (let (($x63 (= $x235 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x157)))
 (let (($x210 (= ?x135 input.dst.llvm-%n)))
 (let (($x161 (= $x210 true)))
 (let (($x162 (= $x161 true)))
 (let (($x103 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x103 true)))
 (let (($x18 (= $x64 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x50 (bvsub ?x307 ?x24)))
 (let (($x126 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x50) (bvult ?x307 ?x50))))
 (let ((?x155 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvmul (_ bv4 64) ?x155)))
 (let ((?x106 ((_ extract 63 32) ?x124)))
 (let (($x176 (= (_ bv0 32) ?x106)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x175) $x176) $x126)))
 (let (($x52 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x98 (and $x52 $x148)))
 (let (($x166 (= true $x98)))
 (let (($x79 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x79 $x166)))
 (let (($x156 (= $x43 true)))
 (let (($x44 (= $x156 true)))
 (let (($x144 (= $x44 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (= $x79 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x107 (and $x105 $x90)))
 (let (($x16 (and $x107 $x112)))
 (let (($x94 (and $x16 $x144)))
 (let (($x139 (and $x94 $x18)))
 (let (($x56 (and $x139 $x162)))
 (let (($x13 (and $x56 $x9)))
 (let (($x179 (and $x13 $x63)))
 (let (($x258 (and $x179 $x324)))
 (let (($x150 (and $x258 $x69)))
 (let (($x85 (and $x150 $x340)))
 (let (($x84 (and $x85 $x213)))
 (let (($x205 (and $x84 $x95)))
 (let (($x72 (and $x205 $x81)))
 (let (($x333 (and $x72 $x260)))
 (let (($x242 (and $x333 $x275)))
 (let (($x338 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x338) $x242)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and $x10 $x39)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x34 $x287)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x19 $x192)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x196 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x215 (=> (and $x79 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x267 (and $x215 $x310)))
 (let (($x263 (=> $x267 $x101)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (bvsle ?x325 (_ bv399 32))))
 (let (($x133 (= $x264 true)))
 (let (($x101 (= $x133 true)))
 (let (($x219 (forall ((input.ind-%var1575X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1575X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1575X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var1574X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1574X)))
 (= $x352 false)))
 ))
 (let (($x190 (and $x42 $x219)))
 (let (($x275 (= $x190 true)))
 (let (($x66 (forall ((input.ind-%var1569X (_ BitVec 32)) )(let ((?x77 (bvadd symbol.1 (bvmul input.ind-%var1569X (_ bv4 32)))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x77))))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv2 32))) ?x305)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv3 32))) ?x339)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1569X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1569X)))
 (=> $x241 (= ?x315 ?x354)))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let (($x361 (and (bvule (_ bv0 32) input.ind-%var1568X) (bvult input.ind-%var1568X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1568X)))
 (= $x241 $x361))))
 ))
 (let (($x93 (and $x118 $x66)))
 (let (($x260 (= $x93 true)))
 (let (($x276 (forall ((input.ind-%var1563X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1563X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1563X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1562X)))
 (= $x352 false)))
 ))
 (let (($x225 (and $x256 $x276)))
 (let (($x81 (= $x225 true)))
 (let ((?x178 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x178)))
 (let (($x355 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x355 true)))
 (let (($x95 (= $x97 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x96 true)))
 (let (($x152 (= $x195 true)))
 (let (($x213 (= $x152 true)))
 (let (($x313 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x281 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x281 true)))
 (let (($x343 (= $x227 true)))
 (let (($x69 (= $x343 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x200)))
 (let ((?x29 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x29)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x202 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x202)))
 (let (($x269 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x269 $x170)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x164 $x203)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x41 $x153)))
 (let (($x198 (not $x246)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x194 $x218)))
 (let (($x248 (and (not $x141) $x198)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x211 $x298)))
 (let (($x158 (not $x184)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x226 $x201)))
 (let (($x171 (and (not $x140) $x158)))
 (let (($x294 (and (and (and (and (and (and $x171 $x248) $x168) $x239) $x300) $x221) $x129)))
 (let (($x349 (and $x294 $x159)))
 (let (($x189 (= symbol.1 dst_symbol_addr.1)))
 (let (($x301 (and $x189 $x349)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x134) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x284 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x62 $x245)))))))
 (let (($x169 (and $x284 $x301)))
 (let (($x255 (= $x169 true)))
 (let (($x243 (= $x255 true)))
 (let (($x324 (= $x243 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x235 (= $x59 true)))
 (let (($x63 (= $x235 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x157)))
 (let (($x210 (= ?x135 input.dst.llvm-%n)))
 (let (($x161 (= $x210 true)))
 (let (($x162 (= $x161 true)))
 (let (($x103 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x103 true)))
 (let (($x18 (= $x64 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x50 (bvsub ?x307 ?x24)))
 (let (($x126 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x50) (bvult ?x307 ?x50))))
 (let ((?x155 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvmul (_ bv4 64) ?x155)))
 (let ((?x106 ((_ extract 63 32) ?x124)))
 (let (($x176 (= (_ bv0 32) ?x106)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x175) $x176) $x126)))
 (let (($x52 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x98 (and $x52 $x148)))
 (let (($x166 (= true $x98)))
 (let (($x79 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x79 $x166)))
 (let (($x156 (= $x43 true)))
 (let (($x44 (= $x156 true)))
 (let (($x144 (= $x44 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (= $x79 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x107 (and $x105 $x90)))
 (let (($x16 (and $x107 $x112)))
 (let (($x94 (and $x16 $x144)))
 (let (($x139 (and $x94 $x18)))
 (let (($x56 (and $x139 $x162)))
 (let (($x13 (and $x56 $x9)))
 (let (($x179 (and $x13 $x63)))
 (let (($x258 (and $x179 $x324)))
 (let (($x150 (and $x258 $x69)))
 (let (($x85 (and $x150 $x340)))
 (let (($x84 (and $x85 $x213)))
 (let (($x205 (and $x84 $x95)))
 (let (($x72 (and $x205 $x81)))
 (let (($x333 (and $x72 $x260)))
 (let (($x242 (and $x333 $x275)))
 (let (($x338 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x338) $x242)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and $x10 $x39)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x34 $x287)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x19 $x192)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x196 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x215 (=> (and $x79 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x267 (and $x215 $x310)))
 (let (($x263 (=> $x267 $x101)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x212 (bvsge ?x54 (_ bv0 32))))
 (let (($x232 (= $x212 true)))
 (let (($x122 (= $x232 true)))
 (let (($x83 (forall ((input.ind-%var1593X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1593X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1593X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1592X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1592X)))
 (= $x351 false)))
 ))
 (let (($x197 (and $x277 $x83)))
 (let (($x204 (= $x197 true)))
 (let (($x143 (forall ((input.ind-%var1587X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var1587X (_ bv4 32)))))
 (let ((?x350 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x350)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x91)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1587X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1587X)))
 (=> $x296 (= ?x42 ?x237)))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1586X (_ BitVec 32)) )(let (($x322 (and (bvule (_ bv0 32) input.ind-%var1586X) (bvult input.ind-%var1586X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1586X)))
 (= $x296 $x322))))
 ))
 (let (($x6 (and $x66 $x143)))
 (let (($x73 (= $x6 true)))
 (let (($x257 (forall ((input.ind-%var1581X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1581X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1581X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var1580X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1580X)))
 (= $x351 false)))
 ))
 (let (($x15 (and $x225 $x257)))
 (let (($x77 (= $x15 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x286)))
 (let (($x97 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x97 true)))
 (let (($x205 (= $x95 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x152 (= $x195 true)))
 (let (($x213 (= $x152 true)))
 (let (($x84 (= $x213 true)))
 (let (($x120 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let (($x227 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x343 (= $x227 true)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x221)))
 (let ((?x251 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x251)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x269 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x288 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x202 (and $x288 $x269)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x239 $x202)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x41 $x153)))
 (let (($x198 (not $x246)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (and $x218 $x141)))
 (let (($x289 (and (not $x163) $x198)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x211 $x298)))
 (let (($x158 (not $x184)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x201 $x140)))
 (let (($x194 (and (not $x311) $x158)))
 (let (($x349 (and (and (and (and (and (and $x194 $x289) $x168) $x247) $x170) $x300) $x119)))
 (let (($x301 (and $x349 $x20)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x169 (and $x145 $x301)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x115 $x51)))))))
 (let (($x255 (and $x226 $x169)))
 (let (($x243 (= $x255 true)))
 (let (($x324 (= $x243 true)))
 (let (($x258 (= $x324 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x235 (= $x59 true)))
 (let (($x63 (= $x235 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x157)))
 (let (($x210 (= ?x135 input.dst.llvm-%n)))
 (let (($x161 (= $x210 true)))
 (let (($x162 (= $x161 true)))
 (let (($x103 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x103 true)))
 (let (($x18 (= $x64 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x176 (bvsub ?x307 ?x24)))
 (let (($x180 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x176) (bvult ?x307 ?x176))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvmul (_ bv4 64) ?x125)))
 (let ((?x124 ((_ extract 63 32) ?x155)))
 (let (($x106 (= (_ bv0 32) ?x124)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x175) $x106) $x180)))
 (let (($x52 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x98 (and $x52 $x148)))
 (let (($x166 (= true $x98)))
 (let (($x359 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x359 $x166)))
 (let (($x156 (= $x43 true)))
 (let (($x44 (= $x156 true)))
 (let (($x144 (= $x44 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (= $x359 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x107 (and $x105 $x90)))
 (let (($x16 (and $x107 $x112)))
 (let (($x94 (and $x16 $x144)))
 (let (($x139 (and $x94 $x18)))
 (let (($x56 (and $x139 $x162)))
 (let (($x13 (and $x56 $x9)))
 (let (($x179 (and $x13 $x63)))
 (let (($x281 (and $x179 $x258)))
 (let (($x313 (and $x281 $x150)))
 (let (($x96 (and $x313 $x85)))
 (let (($x178 (and $x96 $x84)))
 (let (($x236 (and $x178 $x205)))
 (let (($x181 (and $x236 $x77)))
 (let (($x254 (and $x181 $x73)))
 (let (($x252 (and $x254 $x204)))
 (let (($x47 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and (not $x47) $x252)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and $x279 $x80)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x57 $x346)))
 (let (($x268 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x268 $x303)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x19 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x359 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x191 (and $x314 $x23)))
 (let (($x117 (=> $x191 $x122)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x212 (bvsge ?x54 (_ bv0 32))))
 (let (($x232 (= $x212 true)))
 (let (($x122 (= $x232 true)))
 (let (($x83 (forall ((input.ind-%var1593X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1593X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1593X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1592X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1592X)))
 (= $x351 false)))
 ))
 (let (($x197 (and $x277 $x83)))
 (let (($x204 (= $x197 true)))
 (let (($x143 (forall ((input.ind-%var1587X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var1587X (_ bv4 32)))))
 (let ((?x350 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x350)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x91)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1587X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1587X)))
 (=> $x296 (= ?x42 ?x237)))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1586X (_ BitVec 32)) )(let (($x322 (and (bvule (_ bv0 32) input.ind-%var1586X) (bvult input.ind-%var1586X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1586X)))
 (= $x296 $x322))))
 ))
 (let (($x6 (and $x66 $x143)))
 (let (($x73 (= $x6 true)))
 (let (($x257 (forall ((input.ind-%var1581X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1581X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1581X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var1580X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1580X)))
 (= $x351 false)))
 ))
 (let (($x15 (and $x225 $x257)))
 (let (($x77 (= $x15 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x286)))
 (let (($x97 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x97 true)))
 (let (($x205 (= $x95 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x152 (= $x195 true)))
 (let (($x213 (= $x152 true)))
 (let (($x84 (= $x213 true)))
 (let (($x120 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let (($x227 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x343 (= $x227 true)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x221)))
 (let ((?x251 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x251)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x269 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x288 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x202 (and $x288 $x269)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x239 $x202)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x41 $x153)))
 (let (($x198 (not $x246)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (and $x218 $x141)))
 (let (($x289 (and (not $x163) $x198)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x211 $x298)))
 (let (($x158 (not $x184)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x201 $x140)))
 (let (($x194 (and (not $x311) $x158)))
 (let (($x349 (and (and (and (and (and (and $x194 $x289) $x168) $x247) $x170) $x300) $x119)))
 (let (($x301 (and $x349 $x20)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x169 (and $x145 $x301)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x115 $x51)))))))
 (let (($x255 (and $x226 $x169)))
 (let (($x243 (= $x255 true)))
 (let (($x324 (= $x243 true)))
 (let (($x258 (= $x324 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x74 true)))
 (let (($x235 (= $x59 true)))
 (let (($x63 (= $x235 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x8 true)))
 (let (($x33 (= $x76 true)))
 (let (($x9 (= $x33 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x157)))
 (let (($x210 (= ?x135 input.dst.llvm-%n)))
 (let (($x161 (= $x210 true)))
 (let (($x162 (= $x161 true)))
 (let (($x103 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x103 true)))
 (let (($x18 (= $x64 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x176 (bvsub ?x307 ?x24)))
 (let (($x180 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x176) (bvult ?x307 ?x176))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvmul (_ bv4 64) ?x125)))
 (let ((?x124 ((_ extract 63 32) ?x155)))
 (let (($x106 (= (_ bv0 32) ?x124)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x175) $x106) $x180)))
 (let (($x52 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x98 (and $x52 $x148)))
 (let (($x166 (= true $x98)))
 (let (($x359 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x359 $x166)))
 (let (($x156 (= $x43 true)))
 (let (($x44 (= $x156 true)))
 (let (($x144 (= $x44 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (= $x359 true)))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x107 (and $x105 $x90)))
 (let (($x16 (and $x107 $x112)))
 (let (($x94 (and $x16 $x144)))
 (let (($x139 (and $x94 $x18)))
 (let (($x56 (and $x139 $x162)))
 (let (($x13 (and $x56 $x9)))
 (let (($x179 (and $x13 $x63)))
 (let (($x281 (and $x179 $x258)))
 (let (($x313 (and $x281 $x150)))
 (let (($x96 (and $x313 $x85)))
 (let (($x178 (and $x96 $x84)))
 (let (($x236 (and $x178 $x205)))
 (let (($x181 (and $x236 $x77)))
 (let (($x254 (and $x181 $x73)))
 (let (($x252 (and $x254 $x204)))
 (let (($x47 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and (not $x47) $x252)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and $x279 $x80)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x57 $x346)))
 (let (($x268 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x268 $x303)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x19 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x359 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x191 (and $x314 $x23)))
 (let (($x117 (=> $x191 $x122)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x199 (bvule ?x260 (_ bv399 32))))
 (let (($x223 (= $x199 true)))
 (let (($x75 (= $x223 true)))
 (let (($x361 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1611X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1610X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1610X)))
 (= $x356 false)))
 ))
 (let (($x31 (and $x287 $x361)))
 (let (($x61 (= $x31 true)))
 (let (($x39 (forall ((input.ind-%var1605X (_ BitVec 32)) )(let ((?x219 (bvadd symbol.1 (bvmul input.ind-%var1605X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x241)))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x100)))
 (let ((?x277 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1605X)))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1605X)))
 (=> $x177 (= ?x277 ?x352)))))))))
 ))
 (let (($x143 (forall ((input.ind-%var1604X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1604X) (bvult input.ind-%var1604X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1604X)))
 (= $x177 $x45))))
 ))
 (let (($x263 (and $x143 $x39)))
 (let (($x142 (= $x263 true)))
 (let (($x190 (forall ((input.ind-%var1599X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1599X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1599X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1598X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1598X)))
 (= $x356 false)))
 ))
 (let (($x12 (and $x15 $x190)))
 (let (($x261 (= $x12 true)))
 (let ((?x355 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x355)))
 (let (($x95 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x95 true)))
 (let (($x236 (= $x205 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (= $x152 true)))
 (let (($x84 (= $x213 true)))
 (let (($x178 (= $x84 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x221 (bvsub ?x307 ?x24)))
 (let (($x255 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x221) (bvult ?x307 ?x221))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x159)))
 (let ((?x119 ((_ extract 63 32) ?x251)))
 (let (($x349 (= (_ bv0 32) ?x119)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x258 (and (and (and true $x203) $x349) $x255)))
 (let (($x164 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x281 (and $x164 $x258)))
 (let (($x227 (= true $x281)))
 (let (($x275 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x343 (=> $x275 $x227)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x129 (= $x168 true)))
 (let (($x186 (= $x129 true)))
 (let (($x247 (= $x186 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x153 true)))
 (let (($x198 (= $x246 true)))
 (let (($x289 (= $x198 true)))
 (let (($x141 (= $x275 true)))
 (let (($x163 (= $x141 true)))
 (let (($x248 (= $x163 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x284)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x22)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let ((?x147 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x147)))
 (let (($x240 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x240 $x62)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x5 $x60)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x74 $x59)))
 (let (($x63 (not $x235)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (and $x33 $x9)))
 (let (($x134 (and (not $x13) $x63)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x210 $x161)))
 (let (($x56 (not $x162)))
 (let (($x18 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x64 $x18)))
 (let (($x76 (and (not $x139) $x56)))
 (let (($x311 (and (and (and (and (and (and $x76 $x134) $x121) $x82) $x115) $x51) $x182)))
 (let (($x171 (and $x311 $x78)))
 (let (($x126 (= symbol.1 dst_symbol_addr.1)))
 (let (($x211 (and $x126 $x171)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x48) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x156 $x44)))))))
 (let (($x298 (and $x103 $x211)))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x194 (= $x158 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x175 true)))
 (let (($x138 (= $x35 true)))
 (let (($x125 (= $x138 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x7 (= ?x112 input.dst.llvm-%n)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x149 (and $x52 $x104)))
 (let (($x155 (and $x149 $x125)))
 (let (($x218 (and $x155 $x194)))
 (let (($x41 (and $x218 $x248)))
 (let (($x29 (and $x41 $x289)))
 (let (($x294 (and $x29 $x247)))
 (let (($x120 (and $x294 $x313)))
 (let (($x195 (and $x120 $x96)))
 (let (($x286 (and $x195 $x178)))
 (let (($x256 (and $x286 $x236)))
 (let (($x113 (and $x256 $x261)))
 (let (($x264 (and $x113 $x142)))
 (let (($x347 (and $x264 $x61)))
 (let (($x326 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x305 (and (not $x326) $x347)))
 (let (($x338 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x338 $x305)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x123 $x72)))
 (let (($x312 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x312 $x160)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x268 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x193 (=> (and $x275 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x127 (and $x193 $x266)))
 (let (($x87 (=> $x127 $x75)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x199 (bvule ?x260 (_ bv399 32))))
 (let (($x223 (= $x199 true)))
 (let (($x75 (= $x223 true)))
 (let (($x361 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1611X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1610X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1610X)))
 (= $x356 false)))
 ))
 (let (($x31 (and $x287 $x361)))
 (let (($x61 (= $x31 true)))
 (let (($x39 (forall ((input.ind-%var1605X (_ BitVec 32)) )(let ((?x219 (bvadd symbol.1 (bvmul input.ind-%var1605X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x241)))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x100)))
 (let ((?x277 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1605X)))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1605X)))
 (=> $x177 (= ?x277 ?x352)))))))))
 ))
 (let (($x143 (forall ((input.ind-%var1604X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1604X) (bvult input.ind-%var1604X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1604X)))
 (= $x177 $x45))))
 ))
 (let (($x263 (and $x143 $x39)))
 (let (($x142 (= $x263 true)))
 (let (($x190 (forall ((input.ind-%var1599X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1599X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1599X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1598X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1598X)))
 (= $x356 false)))
 ))
 (let (($x12 (and $x15 $x190)))
 (let (($x261 (= $x12 true)))
 (let ((?x355 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x355)))
 (let (($x95 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x95 true)))
 (let (($x236 (= $x205 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (= $x152 true)))
 (let (($x84 (= $x213 true)))
 (let (($x178 (= $x84 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x221 (bvsub ?x307 ?x24)))
 (let (($x255 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x221) (bvult ?x307 ?x221))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x159)))
 (let ((?x119 ((_ extract 63 32) ?x251)))
 (let (($x349 (= (_ bv0 32) ?x119)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x258 (and (and (and true $x203) $x349) $x255)))
 (let (($x164 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x281 (and $x164 $x258)))
 (let (($x227 (= true $x281)))
 (let (($x275 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x343 (=> $x275 $x227)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x129 (= $x168 true)))
 (let (($x186 (= $x129 true)))
 (let (($x247 (= $x186 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x153 true)))
 (let (($x198 (= $x246 true)))
 (let (($x289 (= $x198 true)))
 (let (($x141 (= $x275 true)))
 (let (($x163 (= $x141 true)))
 (let (($x248 (= $x163 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x284)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x22)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let ((?x147 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x147)))
 (let (($x240 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x240 $x62)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x5 $x60)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x74 $x59)))
 (let (($x63 (not $x235)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (and $x33 $x9)))
 (let (($x134 (and (not $x13) $x63)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x210 $x161)))
 (let (($x56 (not $x162)))
 (let (($x18 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x64 $x18)))
 (let (($x76 (and (not $x139) $x56)))
 (let (($x311 (and (and (and (and (and (and $x76 $x134) $x121) $x82) $x115) $x51) $x182)))
 (let (($x171 (and $x311 $x78)))
 (let (($x126 (= symbol.1 dst_symbol_addr.1)))
 (let (($x211 (and $x126 $x171)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x48) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x156 $x44)))))))
 (let (($x298 (and $x103 $x211)))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x194 (= $x158 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x175 true)))
 (let (($x138 (= $x35 true)))
 (let (($x125 (= $x138 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x7 (= ?x112 input.dst.llvm-%n)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x149 (and $x52 $x104)))
 (let (($x155 (and $x149 $x125)))
 (let (($x218 (and $x155 $x194)))
 (let (($x41 (and $x218 $x248)))
 (let (($x29 (and $x41 $x289)))
 (let (($x294 (and $x29 $x247)))
 (let (($x120 (and $x294 $x313)))
 (let (($x195 (and $x120 $x96)))
 (let (($x286 (and $x195 $x178)))
 (let (($x256 (and $x286 $x236)))
 (let (($x113 (and $x256 $x261)))
 (let (($x264 (and $x113 $x142)))
 (let (($x347 (and $x264 $x61)))
 (let (($x326 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x305 (and (not $x326) $x347)))
 (let (($x338 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x338 $x305)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x123 $x72)))
 (let (($x312 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x312 $x160)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x268 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x193 (=> (and $x275 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x127 (and $x193 $x266)))
 (let (($x87 (=> $x127 $x75)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (bvsle ?x73 (_ bv399 32))))
 (let (($x217 (= $x17 true)))
 (let (($x101 (= $x217 true)))
 (let (($x322 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1629X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1629X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var1628X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1628X)))
 (= $x354 false)))
 ))
 (let (($x325 (and $x346 $x322)))
 (let (($x36 (= $x325 true)))
 (let (($x80 (forall ((input.ind-%var1623X (_ BitVec 32)) )(let ((?x83 (bvadd symbol.1 (bvmul input.ind-%var1623X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x296)))
 (let ((?x351 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x58)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1623X)))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1623X)))
 (=> $x93 (= ?x287 ?x351)))))))))
 ))
 (let (($x39 (forall ((input.ind-%var1622X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1622X) (bvult input.ind-%var1622X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1622X)))
 (= $x93 $x151))))
 ))
 (let (($x117 (and $x39 $x80)))
 (let (($x331 (= $x117 true)))
 (let (($x197 (forall ((input.ind-%var1617X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1617X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1617X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1616X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1616X)))
 (= $x354 false)))
 ))
 (let (($x278 (and $x12 $x197)))
 (let (($x219 (= $x278 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x97)))
 (let (($x205 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x205 true)))
 (let (($x256 (= $x236 true)))
 (let (($x213 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x213 true)))
 (let (($x178 (= $x84 true)))
 (let (($x286 (= $x178 true)))
 (let (($x340 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x324 (bvsub ?x307 ?x24)))
 (let (($x169 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x324) (bvult ?x307 ?x324))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x159)))
 (let ((?x119 ((_ extract 63 32) ?x251)))
 (let (($x349 (= (_ bv0 32) ?x119)))
 (let (($x243 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x281 (and (and (and true $x243) $x349) $x169)))
 (let (($x202 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x227 (and $x202 $x281)))
 (let (($x343 (= true $x227)))
 (let (($x204 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (=> $x204 $x343)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x129 true)))
 (let (($x247 (= $x186 true)))
 (let (($x294 (= $x247 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x198 (= $x246 true)))
 (let (($x289 (= $x198 true)))
 (let (($x29 (= $x289 true)))
 (let (($x163 (= $x204 true)))
 (let (($x248 (= $x163 true)))
 (let (($x41 (= $x248 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x51)))
 (let ((?x201 (bvand symbol.1 (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x201)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x5 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x240 (= input.memlabel-mem--symbol.1_end ?x5)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x147 (and $x145 $x240)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x82 $x147)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x74 $x59)))
 (let (($x63 (not $x235)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x9 $x13)))
 (let (($x226 (and (not $x179) $x63)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x210 $x161)))
 (let (($x56 (not $x162)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x18 $x139)))
 (let (($x33 (and (not $x8) $x56)))
 (let (($x171 (and (and (and (and (and (and $x33 $x226) $x121) $x189) $x62) $x115) $x245)))
 (let (($x211 (and $x171 $x140)))
 (let (($x135 (= symbol.1 dst_symbol_addr.1)))
 (let (($x298 (and $x135 $x211)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x166 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x166) (or $x144 $x94)))))))
 (let (($x184 (and $x64 $x298)))
 (let (($x158 (= $x184 true)))
 (let (($x194 (= $x158 true)))
 (let (($x218 (= $x194 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x175 true)))
 (let (($x138 (= $x35 true)))
 (let (($x125 (= $x138 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x7 (= ?x112 input.dst.llvm-%n)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x149 (and $x52 $x104)))
 (let (($x155 (and $x149 $x125)))
 (let (($x141 (and $x155 $x218)))
 (let (($x153 (and $x141 $x41)))
 (let (($x168 (and $x153 $x29)))
 (let (($x239 (and $x168 $x294)))
 (let (($x297 (and $x239 $x120)))
 (let (($x152 (and $x297 $x195)))
 (let (($x355 (and $x152 $x286)))
 (let (($x225 (and $x355 $x256)))
 (let (($x244 (and $x225 $x219)))
 (let (($x212 (and $x244 $x331)))
 (let (($x133 (and $x212 $x36)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x350 (and (not $x360) $x133)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x47 $x350)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x10 $x181)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x34 $x49)))
 (let (($x314 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x312 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x314)))))
 (let (($x174 (=> (and $x204 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x314)))))
 (let (($x310 (and $x174 $x292)))
 (let (($x26 (=> $x310 $x101)))
 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (bvsle ?x73 (_ bv399 32))))
 (let (($x217 (= $x17 true)))
 (let (($x101 (= $x217 true)))
 (let (($x322 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1629X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1629X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var1628X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1628X)))
 (= $x354 false)))
 ))
 (let (($x325 (and $x346 $x322)))
 (let (($x36 (= $x325 true)))
 (let (($x80 (forall ((input.ind-%var1623X (_ BitVec 32)) )(let ((?x83 (bvadd symbol.1 (bvmul input.ind-%var1623X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x296)))
 (let ((?x351 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x58)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1623X)))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1623X)))
 (=> $x93 (= ?x287 ?x351)))))))))
 ))
 (let (($x39 (forall ((input.ind-%var1622X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1622X) (bvult input.ind-%var1622X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1622X)))
 (= $x93 $x151))))
 ))
 (let (($x117 (and $x39 $x80)))
 (let (($x331 (= $x117 true)))
 (let (($x197 (forall ((input.ind-%var1617X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1617X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1617X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1616X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1616X)))
 (= $x354 false)))
 ))
 (let (($x278 (and $x12 $x197)))
 (let (($x219 (= $x278 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x97)))
 (let (($x205 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x205 true)))
 (let (($x256 (= $x236 true)))
 (let (($x213 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x213 true)))
 (let (($x178 (= $x84 true)))
 (let (($x286 (= $x178 true)))
 (let (($x340 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (= $x340 true)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x324 (bvsub ?x307 ?x24)))
 (let (($x169 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x324) (bvult ?x307 ?x324))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x159)))
 (let ((?x119 ((_ extract 63 32) ?x251)))
 (let (($x349 (= (_ bv0 32) ?x119)))
 (let (($x243 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x281 (and (and (and true $x243) $x349) $x169)))
 (let (($x202 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x227 (and $x202 $x281)))
 (let (($x343 (= true $x227)))
 (let (($x204 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (=> $x204 $x343)))
 (let (($x150 (= $x69 true)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x129 true)))
 (let (($x247 (= $x186 true)))
 (let (($x294 (= $x247 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x198 (= $x246 true)))
 (let (($x289 (= $x198 true)))
 (let (($x29 (= $x289 true)))
 (let (($x163 (= $x204 true)))
 (let (($x248 (= $x163 true)))
 (let (($x41 (= $x248 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x51)))
 (let ((?x201 (bvand symbol.1 (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x201)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x5 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x240 (= input.memlabel-mem--symbol.1_end ?x5)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x147 (and $x145 $x240)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x82 $x147)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x74 $x59)))
 (let (($x63 (not $x235)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x9 $x13)))
 (let (($x226 (and (not $x179) $x63)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x210 $x161)))
 (let (($x56 (not $x162)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x18 $x139)))
 (let (($x33 (and (not $x8) $x56)))
 (let (($x171 (and (and (and (and (and (and $x33 $x226) $x121) $x189) $x62) $x115) $x245)))
 (let (($x211 (and $x171 $x140)))
 (let (($x135 (= symbol.1 dst_symbol_addr.1)))
 (let (($x298 (and $x135 $x211)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x166 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x166) (or $x144 $x94)))))))
 (let (($x184 (and $x64 $x298)))
 (let (($x158 (= $x184 true)))
 (let (($x194 (= $x158 true)))
 (let (($x218 (= $x194 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x175 true)))
 (let (($x138 (= $x35 true)))
 (let (($x125 (= $x138 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x7 (= ?x112 input.dst.llvm-%n)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x149 (and $x52 $x104)))
 (let (($x155 (and $x149 $x125)))
 (let (($x141 (and $x155 $x218)))
 (let (($x153 (and $x141 $x41)))
 (let (($x168 (and $x153 $x29)))
 (let (($x239 (and $x168 $x294)))
 (let (($x297 (and $x239 $x120)))
 (let (($x152 (and $x297 $x195)))
 (let (($x355 (and $x152 $x286)))
 (let (($x225 (and $x355 $x256)))
 (let (($x244 (and $x225 $x219)))
 (let (($x212 (and $x244 $x331)))
 (let (($x133 (and $x212 $x36)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x350 (and (not $x360) $x133)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x47 $x350)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x10 $x181)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x34 $x49)))
 (let (($x314 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x312 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x314)))))
 (let (($x174 (=> (and $x204 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x314)))))
 (let (($x310 (and $x174 $x292)))
 (let (($x26 (=> $x310 $x101)))
 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (bvsge ?x142 (_ bv0 32))))
 (let (($x285 (= $x124 true)))
 (let (($x122 (= $x285 true)))
 (let (($x45 (forall ((input.ind-%var1647X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1647X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1647X) (_ bv0 32)))))
 ))
 (let (($x72 (forall ((input.ind-%var1646X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1646X)))
 (= $x237 false)))
 ))
 (let (($x54 (and $x72 $x45)))
 (let (($x86 (= $x54 true)))
 (let (($x305 (forall ((input.ind-%var1641X (_ BitVec 32)) )(let ((?x361 (bvadd symbol.1 (bvmul input.ind-%var1641X (_ bv4 32)))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x361))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv2 32))) ?x177)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv3 32))) ?x224)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1641X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1641X)))
 (=> $x6 (= ?x346 ?x356)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1640X (_ BitVec 32)) )(let (($x276 (and (bvule (_ bv0 32) input.ind-%var1640X) (bvult input.ind-%var1640X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1640X)))
 (= $x6 $x276))))
 ))
 (let (($x87 (and $x80 $x305)))
 (let (($x341 (= $x87 true)))
 (let (($x31 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1635X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1635X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1634X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1634X)))
 (= $x237 false)))
 ))
 (let (($x109 (and $x278 $x31)))
 (let (($x83 (= $x109 true)))
 (let ((?x95 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x95)))
 (let (($x236 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x236 true)))
 (let (($x225 (= $x256 true)))
 (let (($x84 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x84 true)))
 (let (($x286 (= $x178 true)))
 (let (($x355 (= $x286 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x152 (= $x195 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x258 (bvsub ?x307 ?x24)))
 (let (($x301 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x258) (bvult ?x307 ?x258))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x159)))
 (let ((?x119 ((_ extract 63 32) ?x251)))
 (let (($x349 (= (_ bv0 32) ?x119)))
 (let (($x255 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x227 (and (and (and true $x255) $x349) $x301)))
 (let (($x170 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x343 (and $x170 $x227)))
 (let (($x69 (= true $x343)))
 (let (($x61 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (=> $x61 $x69)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x247 (= $x186 true)))
 (let (($x294 (= $x247 true)))
 (let (($x239 (= $x294 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x289 (= $x198 true)))
 (let (($x29 (= $x289 true)))
 (let (($x168 (= $x29 true)))
 (let (($x248 (= $x61 true)))
 (let (($x41 (= $x248 true)))
 (let (($x153 (= $x41 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x115)))
 (let ((?x284 (bvand symbol.1 (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x284)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x311 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x5 (and $x311 $x145)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x189 $x5)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x74 $x59)))
 (let (($x63 (not $x235)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x13 $x179)))
 (let (($x22 (and (not $x134) $x63)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x210 $x161)))
 (let (($x56 (not $x162)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x139 $x8)))
 (let (($x9 (and (not $x76) $x56)))
 (let (($x211 (and (and (and (and (and (and $x9 $x22) $x121) $x146) $x240) $x62) $x60)))
 (let (($x298 (and $x211 $x78)))
 (let (($x126 (= symbol.1 dst_symbol_addr.1)))
 (let (($x184 (and $x126 $x298)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x43 (or (bvugt input.memlabel-mem--symbol.1_begin ?x98) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x88 $x157)))))))
 (let (($x158 (and $x18 $x184)))
 (let (($x194 (= $x158 true)))
 (let (($x218 (= $x194 true)))
 (let (($x141 (= $x218 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x175 true)))
 (let (($x138 (= $x35 true)))
 (let (($x125 (= $x138 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x7 (= ?x112 input.dst.llvm-%n)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x149 (and $x52 $x104)))
 (let (($x155 (and $x149 $x125)))
 (let (($x163 (and $x155 $x141)))
 (let (($x246 (and $x163 $x153)))
 (let (($x129 (and $x246 $x168)))
 (let (($x288 (and $x129 $x239)))
 (let (($x340 (and $x288 $x297)))
 (let (($x213 (and $x340 $x152)))
 (let (($x97 (and $x213 $x355)))
 (let (($x15 (and $x97 $x225)))
 (let (($x110 (and $x15 $x83)))
 (let (($x199 (and $x110 $x341)))
 (let (($x232 (and $x199 $x86)))
 (let (($x192 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and (not $x192) $x232)))
 (let (($x326 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and $x326 $x241)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x220 (and $x279 $x113)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x334 (and $x57 $x220)))
 (let (($x193 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x193)))))
 (let (($x342 (=> (and $x61 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x193)))))
 (let (($x23 (and $x342 $x334)))
 (let (($x315 (=> $x23 $x122)))
 (not $x315)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (bvsge ?x142 (_ bv0 32))))
 (let (($x285 (= $x124 true)))
 (let (($x122 (= $x285 true)))
 (let (($x45 (forall ((input.ind-%var1647X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1647X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1647X) (_ bv0 32)))))
 ))
 (let (($x72 (forall ((input.ind-%var1646X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1646X)))
 (= $x237 false)))
 ))
 (let (($x54 (and $x72 $x45)))
 (let (($x86 (= $x54 true)))
 (let (($x305 (forall ((input.ind-%var1641X (_ BitVec 32)) )(let ((?x361 (bvadd symbol.1 (bvmul input.ind-%var1641X (_ bv4 32)))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x361))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv2 32))) ?x177)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv3 32))) ?x224)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1641X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1641X)))
 (=> $x6 (= ?x346 ?x356)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1640X (_ BitVec 32)) )(let (($x276 (and (bvule (_ bv0 32) input.ind-%var1640X) (bvult input.ind-%var1640X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1640X)))
 (= $x6 $x276))))
 ))
 (let (($x87 (and $x80 $x305)))
 (let (($x341 (= $x87 true)))
 (let (($x31 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1635X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1635X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1634X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1634X)))
 (= $x237 false)))
 ))
 (let (($x109 (and $x278 $x31)))
 (let (($x83 (= $x109 true)))
 (let ((?x95 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x95)))
 (let (($x236 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x236 true)))
 (let (($x225 (= $x256 true)))
 (let (($x84 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x84 true)))
 (let (($x286 (= $x178 true)))
 (let (($x355 (= $x286 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x85 true)))
 (let (($x195 (= $x96 true)))
 (let (($x152 (= $x195 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x258 (bvsub ?x307 ?x24)))
 (let (($x301 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x258) (bvult ?x307 ?x258))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvmul (_ bv4 64) ?x159)))
 (let ((?x119 ((_ extract 63 32) ?x251)))
 (let (($x349 (= (_ bv0 32) ?x119)))
 (let (($x255 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x227 (and (and (and true $x255) $x349) $x301)))
 (let (($x170 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x343 (and $x170 $x227)))
 (let (($x69 (= true $x343)))
 (let (($x61 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (=> $x61 $x69)))
 (let (($x313 (= $x150 true)))
 (let (($x120 (= $x313 true)))
 (let (($x297 (= $x120 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x247 (= $x186 true)))
 (let (($x294 (= $x247 true)))
 (let (($x239 (= $x294 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x289 (= $x198 true)))
 (let (($x29 (= $x289 true)))
 (let (($x168 (= $x29 true)))
 (let (($x248 (= $x61 true)))
 (let (($x41 (= $x248 true)))
 (let (($x153 (= $x41 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x115)))
 (let ((?x284 (bvand symbol.1 (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x284)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x311 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x5 (and $x311 $x145)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x189 $x5)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x74 $x59)))
 (let (($x63 (not $x235)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x13 $x179)))
 (let (($x22 (and (not $x134) $x63)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x210 $x161)))
 (let (($x56 (not $x162)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x139 $x8)))
 (let (($x9 (and (not $x76) $x56)))
 (let (($x211 (and (and (and (and (and (and $x9 $x22) $x121) $x146) $x240) $x62) $x60)))
 (let (($x298 (and $x211 $x78)))
 (let (($x126 (= symbol.1 dst_symbol_addr.1)))
 (let (($x184 (and $x126 $x298)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x43 (or (bvugt input.memlabel-mem--symbol.1_begin ?x98) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x88 $x157)))))))
 (let (($x158 (and $x18 $x184)))
 (let (($x194 (= $x158 true)))
 (let (($x218 (= $x194 true)))
 (let (($x141 (= $x218 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x175 true)))
 (let (($x138 (= $x35 true)))
 (let (($x125 (= $x138 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x7 (= ?x112 input.dst.llvm-%n)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x149 (and $x52 $x104)))
 (let (($x155 (and $x149 $x125)))
 (let (($x163 (and $x155 $x141)))
 (let (($x246 (and $x163 $x153)))
 (let (($x129 (and $x246 $x168)))
 (let (($x288 (and $x129 $x239)))
 (let (($x340 (and $x288 $x297)))
 (let (($x213 (and $x340 $x152)))
 (let (($x97 (and $x213 $x355)))
 (let (($x15 (and $x97 $x225)))
 (let (($x110 (and $x15 $x83)))
 (let (($x199 (and $x110 $x341)))
 (let (($x232 (and $x199 $x86)))
 (let (($x192 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and (not $x192) $x232)))
 (let (($x326 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and $x326 $x241)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x220 (and $x279 $x113)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x334 (and $x57 $x220)))
 (let (($x193 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x193)))))
 (let (($x342 (=> (and $x61 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x193)))))
 (let (($x23 (and $x342 $x334)))
 (let (($x315 (=> $x23 $x122)))
 (not $x315)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x331 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x55 (bvule ?x331 input.dst.llvm-%n)))
 (let (($x265 (= $x55 true)))
 (let (($x75 (= $x265 true)))
 (let (($x151 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1665X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1665X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1664X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1664X)))
 (= $x352 false)))
 ))
 (let (($x260 (and $x181 $x151)))
 (let (($x118 (= $x260 true)))
 (let (($x350 (forall ((input.ind-%var1659X (_ BitVec 32)) )(let ((?x322 (bvadd symbol.1 (bvmul input.ind-%var1659X (_ bv4 32)))))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x322))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv2 32))) ?x93)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv3 32))) ?x329)))
 (let ((?x72 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1659X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1659X)))
 (=> $x263 (= ?x72 ?x354)))))))))
 ))
 (let (($x305 (forall ((input.ind-%var1658X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1658X) (bvult input.ind-%var1658X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1658X)))
 (= $x263 $x257))))
 ))
 (let (($x26 (and $x305 $x350)))
 (let (($x321 (= $x26 true)))
 (let (($x325 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1653X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1653X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (= $x352 false)))
 ))
 (let (($x333 (and $x109 $x325)))
 (let (($x361 (= $x333 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x256 (= ?x112 input.dst.llvm-%n)))
 (let (($x225 (= $x256 true)))
 (let (($x15 (= $x225 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x286)))
 (let (($x97 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x97 true)))
 (let (($x205 (= $x95 true)))
 (let (($x195 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x152 (= $x195 true)))
 (let (($x213 (= $x152 true)))
 (let (($x84 (= $x213 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x159 (bvsub ?x307 ?x24)))
 (let (($x281 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x159) (bvult ?x307 ?x159))))
 (let ((?x243 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvmul (_ bv4 64) ?x243)))
 (let ((?x169 ((_ extract 63 32) ?x255)))
 (let (($x300 (= (_ bv0 32) ?x169)))
 (let (($x269 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x324 (and (and (and true $x269) $x300) $x281)))
 (let (($x288 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x221 (and $x288 $x324)))
 (let (($x301 (= true $x221)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x36 $x301)))
 (let (($x343 (= $x227 true)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x168 (= $x29 true)))
 (let (($x129 (= $x168 true)))
 (let (($x186 (= $x129 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x41 true)))
 (let (($x246 (= $x153 true)))
 (let (($x198 (= $x246 true)))
 (let (($x218 (= $x36 true)))
 (let (($x141 (= $x218 true)))
 (let (($x163 (= $x141 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x5)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x82)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x245 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x245)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x121 $x182)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x201 $x146)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x13 $x179)))
 (let (($x226 (not $x134)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x162 $x56)))
 (let (($x59 (and (not $x9) $x226)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x139 $x8)))
 (let (($x33 (not $x76)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x18 $x50)))
 (let (($x161 (and (not $x126) $x33)))
 (let (($x60 (and (and (and (and (and (and $x161 $x59) $x235) $x22) $x171) $x311) $x145)))
 (let (($x211 (and $x60 $x240)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x125 $x211)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x166 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x166) (or $x44 $x88)))))))
 (let (($x78 (and $x176 $x115)))
 (let (($x298 (= $x78 true)))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x175 (and $x52 $x149)))
 (let (($x194 (and $x175 $x158)))
 (let (($x248 (and $x194 $x163)))
 (let (($x289 (and $x248 $x198)))
 (let (($x247 (and $x289 $x186)))
 (let (($x313 (and $x247 $x150)))
 (let (($x96 (and $x313 $x85)))
 (let (($x178 (and $x96 $x84)))
 (let (($x236 (and $x178 $x205)))
 (let (($x12 (and $x236 $x15)))
 (let (($x249 (and $x12 $x361)))
 (let (($x17 (and $x249 $x321)))
 (let (($x223 (and $x17 $x118)))
 (let (($x303 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x303) $x223)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x360 $x296)))
 (let (($x338 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x338 $x244)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x123 $x242)))
 (let (($x174 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x187 (=> (and $x36 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x174)))))
 (let (($x266 (and $x187 $x216)))
 (let (($x42 (=> $x266 $x75)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x331 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x55 (bvule ?x331 input.dst.llvm-%n)))
 (let (($x265 (= $x55 true)))
 (let (($x75 (= $x265 true)))
 (let (($x151 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1665X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1665X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1664X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1664X)))
 (= $x352 false)))
 ))
 (let (($x260 (and $x181 $x151)))
 (let (($x118 (= $x260 true)))
 (let (($x350 (forall ((input.ind-%var1659X (_ BitVec 32)) )(let ((?x322 (bvadd symbol.1 (bvmul input.ind-%var1659X (_ bv4 32)))))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x322))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv2 32))) ?x93)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv3 32))) ?x329)))
 (let ((?x72 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1659X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1659X)))
 (=> $x263 (= ?x72 ?x354)))))))))
 ))
 (let (($x305 (forall ((input.ind-%var1658X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1658X) (bvult input.ind-%var1658X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1658X)))
 (= $x263 $x257))))
 ))
 (let (($x26 (and $x305 $x350)))
 (let (($x321 (= $x26 true)))
 (let (($x325 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1653X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1653X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (= $x352 false)))
 ))
 (let (($x333 (and $x109 $x325)))
 (let (($x361 (= $x333 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x256 (= ?x112 input.dst.llvm-%n)))
 (let (($x225 (= $x256 true)))
 (let (($x15 (= $x225 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x286)))
 (let (($x97 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x97 true)))
 (let (($x205 (= $x95 true)))
 (let (($x195 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x152 (= $x195 true)))
 (let (($x213 (= $x152 true)))
 (let (($x84 (= $x213 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x120 true)))
 (let (($x340 (= $x297 true)))
 (let (($x85 (= $x340 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x159 (bvsub ?x307 ?x24)))
 (let (($x281 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x159) (bvult ?x307 ?x159))))
 (let ((?x243 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvmul (_ bv4 64) ?x243)))
 (let ((?x169 ((_ extract 63 32) ?x255)))
 (let (($x300 (= (_ bv0 32) ?x169)))
 (let (($x269 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x324 (and (and (and true $x269) $x300) $x281)))
 (let (($x288 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x221 (and $x288 $x324)))
 (let (($x301 (= true $x221)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x36 $x301)))
 (let (($x343 (= $x227 true)))
 (let (($x69 (= $x343 true)))
 (let (($x150 (= $x69 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x168 (= $x29 true)))
 (let (($x129 (= $x168 true)))
 (let (($x186 (= $x129 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x41 true)))
 (let (($x246 (= $x153 true)))
 (let (($x198 (= $x246 true)))
 (let (($x218 (= $x36 true)))
 (let (($x141 (= $x218 true)))
 (let (($x163 (= $x141 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x5)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x82)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x245 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x245)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x121 $x182)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x201 $x146)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x13 $x179)))
 (let (($x226 (not $x134)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x162 $x56)))
 (let (($x59 (and (not $x9) $x226)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x139 $x8)))
 (let (($x33 (not $x76)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x18 $x50)))
 (let (($x161 (and (not $x126) $x33)))
 (let (($x60 (and (and (and (and (and (and $x161 $x59) $x235) $x22) $x171) $x311) $x145)))
 (let (($x211 (and $x60 $x240)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x125 $x211)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x166 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x166) (or $x44 $x88)))))))
 (let (($x78 (and $x176 $x115)))
 (let (($x298 (= $x78 true)))
 (let (($x184 (= $x298 true)))
 (let (($x158 (= $x184 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x175 (and $x52 $x149)))
 (let (($x194 (and $x175 $x158)))
 (let (($x248 (and $x194 $x163)))
 (let (($x289 (and $x248 $x198)))
 (let (($x247 (and $x289 $x186)))
 (let (($x313 (and $x247 $x150)))
 (let (($x96 (and $x313 $x85)))
 (let (($x178 (and $x96 $x84)))
 (let (($x236 (and $x178 $x205)))
 (let (($x12 (and $x236 $x15)))
 (let (($x249 (and $x12 $x361)))
 (let (($x17 (and $x249 $x321)))
 (let (($x223 (and $x17 $x118)))
 (let (($x303 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x303) $x223)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x360 $x296)))
 (let (($x338 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x338 $x244)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x123 $x242)))
 (let (($x174 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x187 (=> (and $x36 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x174)))))
 (let (($x266 (and $x187 $x216)))
 (let (($x42 (=> $x266 $x75)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x207 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let ((?x45 (bvadd symbol.1 (bvmul input.ind-%var1691X (_ bv4 32)))))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x174 (bvadd ?x307 (_ bv3 32))))
 (let ((?x131 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x70 (store ?x131 (bvadd ?x307 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x65 (store ?x70 (bvadd ?x307 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x309 (store ?x65 ?x174 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x271 (concat (select ?x309 (bvadd ?x45 (_ bv2 32))) (concat (select ?x309 (bvadd ?x45 (_ bv1 32))) (select ?x309 ?x45)))))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1691X)))
 (let (($x259 (= input.ind-%var1691X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x282 (= (ite $x259 input.spec-%var-i-0.L3%6%bbentry ?x181) (concat (select ?x309 (bvadd ?x45 (_ bv3 32))) ?x271))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (let (($x206 (or $x117 $x259)))
 (=> $x206 $x282))))))))))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1690X)))
 (let (($x348 (and $x354 (bvult input.ind-%var1690X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x259 (= input.ind-%var1690X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1690X)))
 (let (($x206 (or $x117 $x259)))
 (= $x206 $x348)))))))
 ))
 (let (($x293 (and $x228 $x207)))
 (let (($x341 (= true true)))
 (let (($x238 (and $x341 $x293)))
 (let (($x89 (= $x238 true)))
 (let (($x276 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1683X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x351 false)))
 ))
 (let (($x73 (and $x113 $x276)))
 (let (($x66 (= $x73 true)))
 (let (($x241 (forall ((input.ind-%var1677X (_ BitVec 32)) )(let ((?x45 (bvadd symbol.1 (bvmul input.ind-%var1677X (_ bv4 32)))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x45))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x45 (_ bv2 32))) ?x6)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x45 (_ bv3 32))) ?x81)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1677X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1677X)))
 (=> $x117 (= ?x181 ?x237)))))))))
 ))
 (let (($x350 (forall ((input.ind-%var1676X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1676X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1676X)))
 (= $x117 (and $x354 (bvult input.ind-%var1676X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x315 (and $x350 $x241)))
 (let (($x267 (= $x315 true)))
 (let (($x54 (forall ((input.ind-%var1671X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1671X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1671X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1670X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1670X)))
 (= $x351 false)))
 ))
 (let (($x254 (and $x333 $x54)))
 (let (($x322 (= $x254 true)))
 (let ((?x236 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x256 (bvneg ?x236)))
 (let (($x225 (= ?x256 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x225 true)))
 (let (($x12 (= $x15 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x120)))
 (let ((?x150 (bvand symbol.1 (_ bv3 32))))
 (let (($x313 (= (_ bv0 32) ?x150)))
 (let ((?x343 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x343)))
 (let ((?x324 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x221 (= input.memlabel-mem--symbol.1_end ?x324)))
 (let (($x281 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x301 (and $x281 $x221)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x349 $x301)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x255 (and $x203 $x243)))
 (let (($x169 (not $x255)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (and $x200 $x269)))
 (let (($x258 (and (not $x20) $x169)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x294 $x239)))
 (let (($x202 (not $x288)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x129 $x186)))
 (let (($x170 (and (not $x247) $x202)))
 (let (($x213 (and (and (and (and (and (and $x170 $x258) $x251) $x119) $x227) $x69) $x313)))
 (let (($x84 (and $x213 $x297)))
 (let (($x211 (= symbol.1 dst_symbol_addr.1)))
 (let (($x178 (and $x211 $x84)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x194 (or (bvugt input.memlabel-mem--symbol.1_begin ?x298) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x194) (or $x248 $x41)))))))
 (let (($x286 (and $x168 $x178)))
 (let (($x355 (= $x286 true)))
 (let (($x97 (= $x355 true)))
 (let (($x95 (= $x97 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x311 true)))
 (let (($x82 (= $x284 true)))
 (let (($x145 (= $x82 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x182 true)))
 (let (($x171 (= $x146 true)))
 (let (($x140 (= $x171 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x22 true)))
 (let (($x201 (= $x62 true)))
 (let (($x121 (= $x201 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x33 (bvsub ?x307 ?x24)))
 (let (($x9 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x33) (bvult ?x307 ?x33))))
 (let ((?x210 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvmul (_ bv4 64) ?x210)))
 (let ((?x8 ((_ extract 63 32) ?x139)))
 (let (($x76 (= (_ bv0 32) ?x8)))
 (let (($x50 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x179 (and (and (and true $x50) $x76) $x9)))
 (let (($x106 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x134 (and $x106 $x179)))
 (let (($x226 (= true $x134)))
 (let (($x86 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x86 $x226)))
 (let (($x51 (= $x59 true)))
 (let (($x235 (= $x51 true)))
 (let (($x147 (= $x235 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x43 true)))
 (let (($x144 (= $x44 true)))
 (let (($x88 (= $x144 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x135 (= $x148 true)))
 (let (($x98 (= $x135 true)))
 (let (($x166 (= $x98 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x175 (= $x149 true)))
 (let (($x155 (= $x175 true)))
 (let (($x180 (= $x155 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x52 (= $x183 true)))
 (let (($x7 (= $x52 true)))
 (let (($x99 (= $x7 true)))
 (let (($x114 (= $x86 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x116)))
 (let (($x154 (= ?x105 input.dst.llvm-%n)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x14 (= ?x105 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x38 (and $x71 $x107)))
 (let (($x16 (and $x38 $x112)))
 (let (($x104 (and $x16 $x99)))
 (let (($x64 (and $x104 $x180)))
 (let (($x156 (and $x64 $x166)))
 (let (($x94 (and $x156 $x88)))
 (let (($x63 (and $x94 $x147)))
 (let (($x245 (and $x63 $x121)))
 (let (($x189 (and $x245 $x140)))
 (let (($x60 (and $x189 $x145)))
 (let (($x205 (and $x60 $x95)))
 (let (($x278 (and $x205 $x12)))
 (let (($x339 (and $x278 $x322)))
 (let (($x124 (and $x339 $x267)))
 (let (($x217 (and $x124 $x66)))
 (let (($x160 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x160) $x217)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x192 $x177)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x47 $x110)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x233 (and $x10 $x252)))
 (let (($x342 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x342)))))
 (let (($x196 (=> (and $x86 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x342)))))
 (let (($x292 (and $x196 $x233)))
 (let (($x283 (=> $x292 $x89)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x207 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let ((?x45 (bvadd symbol.1 (bvmul input.ind-%var1691X (_ bv4 32)))))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x174 (bvadd ?x307 (_ bv3 32))))
 (let ((?x131 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x70 (store ?x131 (bvadd ?x307 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x65 (store ?x70 (bvadd ?x307 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x309 (store ?x65 ?x174 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x271 (concat (select ?x309 (bvadd ?x45 (_ bv2 32))) (concat (select ?x309 (bvadd ?x45 (_ bv1 32))) (select ?x309 ?x45)))))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1691X)))
 (let (($x259 (= input.ind-%var1691X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x282 (= (ite $x259 input.spec-%var-i-0.L3%6%bbentry ?x181) (concat (select ?x309 (bvadd ?x45 (_ bv3 32))) ?x271))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (let (($x206 (or $x117 $x259)))
 (=> $x206 $x282))))))))))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1690X)))
 (let (($x348 (and $x354 (bvult input.ind-%var1690X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x259 (= input.ind-%var1690X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1690X)))
 (let (($x206 (or $x117 $x259)))
 (= $x206 $x348)))))))
 ))
 (let (($x293 (and $x228 $x207)))
 (let (($x341 (= true true)))
 (let (($x238 (and $x341 $x293)))
 (let (($x89 (= $x238 true)))
 (let (($x276 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1683X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x351 false)))
 ))
 (let (($x73 (and $x113 $x276)))
 (let (($x66 (= $x73 true)))
 (let (($x241 (forall ((input.ind-%var1677X (_ BitVec 32)) )(let ((?x45 (bvadd symbol.1 (bvmul input.ind-%var1677X (_ bv4 32)))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x45))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x45 (_ bv2 32))) ?x6)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x45 (_ bv3 32))) ?x81)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1677X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1677X)))
 (=> $x117 (= ?x181 ?x237)))))))))
 ))
 (let (($x350 (forall ((input.ind-%var1676X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1676X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1676X)))
 (= $x117 (and $x354 (bvult input.ind-%var1676X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x315 (and $x350 $x241)))
 (let (($x267 (= $x315 true)))
 (let (($x54 (forall ((input.ind-%var1671X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1671X)))
 (=> $x351 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1671X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1670X (_ BitVec 32)) )(let (($x351 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1670X)))
 (= $x351 false)))
 ))
 (let (($x254 (and $x333 $x54)))
 (let (($x322 (= $x254 true)))
 (let ((?x236 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x256 (bvneg ?x236)))
 (let (($x225 (= ?x256 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x225 true)))
 (let (($x12 (= $x15 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x120)))
 (let ((?x150 (bvand symbol.1 (_ bv3 32))))
 (let (($x313 (= (_ bv0 32) ?x150)))
 (let ((?x343 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x343)))
 (let ((?x324 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x221 (= input.memlabel-mem--symbol.1_end ?x324)))
 (let (($x281 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x301 (and $x281 $x221)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x349 $x301)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x255 (and $x203 $x243)))
 (let (($x169 (not $x255)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (and $x200 $x269)))
 (let (($x258 (and (not $x20) $x169)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x294 $x239)))
 (let (($x202 (not $x288)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x129 $x186)))
 (let (($x170 (and (not $x247) $x202)))
 (let (($x213 (and (and (and (and (and (and $x170 $x258) $x251) $x119) $x227) $x69) $x313)))
 (let (($x84 (and $x213 $x297)))
 (let (($x211 (= symbol.1 dst_symbol_addr.1)))
 (let (($x178 (and $x211 $x84)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x194 (or (bvugt input.memlabel-mem--symbol.1_begin ?x298) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x194) (or $x248 $x41)))))))
 (let (($x286 (and $x168 $x178)))
 (let (($x355 (= $x286 true)))
 (let (($x97 (= $x355 true)))
 (let (($x95 (= $x97 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x311 true)))
 (let (($x82 (= $x284 true)))
 (let (($x145 (= $x82 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x182 true)))
 (let (($x171 (= $x146 true)))
 (let (($x140 (= $x171 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x22 true)))
 (let (($x201 (= $x62 true)))
 (let (($x121 (= $x201 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let ((?x33 (bvsub ?x307 ?x24)))
 (let (($x9 (ite (bvsge ?x24 (_ bv0 32)) (bvuge ?x307 ?x33) (bvult ?x307 ?x33))))
 (let ((?x210 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvmul (_ bv4 64) ?x210)))
 (let ((?x8 ((_ extract 63 32) ?x139)))
 (let (($x76 (= (_ bv0 32) ?x8)))
 (let (($x50 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x179 (and (and (and true $x50) $x76) $x9)))
 (let (($x106 (= (bvand ?x307 (_ bv4294967292 32)) ?x307)))
 (let (($x134 (and $x106 $x179)))
 (let (($x226 (= true $x134)))
 (let (($x86 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x86 $x226)))
 (let (($x51 (= $x59 true)))
 (let (($x235 (= $x51 true)))
 (let (($x147 (= $x235 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x43 true)))
 (let (($x144 (= $x44 true)))
 (let (($x88 (= $x144 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x135 (= $x148 true)))
 (let (($x98 (= $x135 true)))
 (let (($x166 (= $x98 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x175 (= $x149 true)))
 (let (($x155 (= $x175 true)))
 (let (($x180 (= $x155 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x52 (= $x183 true)))
 (let (($x7 (= $x52 true)))
 (let (($x99 (= $x7 true)))
 (let (($x114 (= $x86 true)))
 (let (($x137 (= $x114 true)))
 (let (($x112 (= $x137 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x116)))
 (let (($x154 (= ?x105 input.dst.llvm-%n)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x14 (= ?x105 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x38 (and $x71 $x107)))
 (let (($x16 (and $x38 $x112)))
 (let (($x104 (and $x16 $x99)))
 (let (($x64 (and $x104 $x180)))
 (let (($x156 (and $x64 $x166)))
 (let (($x94 (and $x156 $x88)))
 (let (($x63 (and $x94 $x147)))
 (let (($x245 (and $x63 $x121)))
 (let (($x189 (and $x245 $x140)))
 (let (($x60 (and $x189 $x145)))
 (let (($x205 (and $x60 $x95)))
 (let (($x278 (and $x205 $x12)))
 (let (($x339 (and $x278 $x322)))
 (let (($x124 (and $x339 $x267)))
 (let (($x217 (and $x124 $x66)))
 (let (($x160 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x160) $x217)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x192 $x177)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x47 $x110)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x233 (and $x10 $x252)))
 (let (($x342 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x342)))))
 (let (($x196 (=> (and $x86 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x342)))))
 (let (($x292 (and $x196 $x233)))
 (let (($x283 (=> $x292 $x89)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x172)))
 (let (($x330 (= $x131 false)))
 (let (($x262 (= $x330 true)))
 (let (($x27 (forall ((input.ind-%var1709X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1709X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1709X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1708X)))
 (= $x96 false)))
 ))
 (let (($x130 (and $x252 $x27)))
 (let (($x348 (= $x130 true)))
 (let (($x113 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let ((?x199 (bvadd symbol.1 (bvmul input.ind-%var1703X (_ bv4 32)))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x199))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv2 32))) ?x6)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv3 32))) ?x197)))
 (let ((?x305 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1703X)))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x97 (= ?x305 ?x315)))))))))
 ))
 (let (($x351 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1702X) (bvult input.ind-%var1702X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x97 $x278))))
 ))
 (let (($x276 (and $x351 $x113)))
 (let (($x73 (= $x276 true)))
 (let (($x120 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1697X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1697X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1696X)))
 (= $x96 false)))
 ))
 (let (($x297 (and $x221 $x120)))
 (let (($x84 (= $x297 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x114)))
 (let (($x169 (= ?x137 input.dst.llvm-%n)))
 (let (($x258 (= $x169 true)))
 (let (($x340 (= $x258 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x269)))
 (let (($x300 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x300 true)))
 (let (($x243 (= $x203 true)))
 (let (($x239 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x288 (= $x239 true)))
 (let (($x202 (= $x288 true)))
 (let (($x170 (= $x202 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x129 true)))
 (let (($x247 (= $x186 true)))
 (let (($x164 (= $x247 true)))
 (let (($x198 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x289 (= $x198 true)))
 (let (($x168 (= $x289 true)))
 (let (($x240 (= $x168 true)))
 (let (($x248 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x248 true)))
 (let (($x41 (= $x163 true)))
 (let (($x153 (= $x41 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x189)))
 (let ((?x171 (bvand symbol.1 (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x171)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x62 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x62)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (and $x22 $x201)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x63 $x121)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x56 $x9)))
 (let (($x134 (not $x179)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x161 $x33)))
 (let (($x59 (and (not $x162) $x134)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x126 $x210)))
 (let (($x8 (not $x139)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x18 $x50)))
 (let (($x13 (and (not $x74) $x8)))
 (let (($x78 (and (and (and (and (and (and $x13 $x59) $x51) $x147) $x245) $x146) $x140)))
 (let (($x29 (and $x78 $x311)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x298 (and $x180 $x29)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x156 (or (bvugt input.memlabel-mem--symbol.1_begin ?x135) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x156) (or $x88 $x94)))))))
 (let (($x184 (and $x125 $x298)))
 (let (($x158 (= $x184 true)))
 (let (($x194 (= $x158 true)))
 (let (($x218 (= $x194 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x7 (= $x52 true)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x112 (= ?x137 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x136 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x107 (and $x14 $x90)))
 (let (($x183 (and $x107 $x37)))
 (let (($x149 (and $x183 $x104)))
 (let (($x141 (and $x149 $x218)))
 (let (($x246 (and $x141 $x153)))
 (let (($x211 (and $x246 $x240)))
 (let (($x294 (and $x211 $x164)))
 (let (($x200 (and $x294 $x170)))
 (let (($x255 (and $x200 $x243)))
 (let (($x251 (and $x255 $x340)))
 (let (($x178 (and $x251 $x84)))
 (let (($x66 (and $x178 $x73)))
 (let (($x327 (and $x66 $x348)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (and $x303 $x327)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x326 $x228)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x279 $x208)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x10 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x19 (=> (and $x172 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x336 (and $x19 $x231)))
 (let (($x70 (=> $x336 $x262)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x172)))
 (let (($x330 (= $x131 false)))
 (let (($x262 (= $x330 true)))
 (let (($x27 (forall ((input.ind-%var1709X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1709X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1709X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1708X)))
 (= $x96 false)))
 ))
 (let (($x130 (and $x252 $x27)))
 (let (($x348 (= $x130 true)))
 (let (($x113 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let ((?x199 (bvadd symbol.1 (bvmul input.ind-%var1703X (_ bv4 32)))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x199))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv2 32))) ?x6)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv3 32))) ?x197)))
 (let ((?x305 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1703X)))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x97 (= ?x305 ?x315)))))))))
 ))
 (let (($x351 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1702X) (bvult input.ind-%var1702X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x97 $x278))))
 ))
 (let (($x276 (and $x351 $x113)))
 (let (($x73 (= $x276 true)))
 (let (($x120 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1697X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1697X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1696X)))
 (= $x96 false)))
 ))
 (let (($x297 (and $x221 $x120)))
 (let (($x84 (= $x297 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x114)))
 (let (($x169 (= ?x137 input.dst.llvm-%n)))
 (let (($x258 (= $x169 true)))
 (let (($x340 (= $x258 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x269)))
 (let (($x300 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x300 true)))
 (let (($x243 (= $x203 true)))
 (let (($x239 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x288 (= $x239 true)))
 (let (($x202 (= $x288 true)))
 (let (($x170 (= $x202 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x129 true)))
 (let (($x247 (= $x186 true)))
 (let (($x164 (= $x247 true)))
 (let (($x198 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x289 (= $x198 true)))
 (let (($x168 (= $x289 true)))
 (let (($x240 (= $x168 true)))
 (let (($x248 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x248 true)))
 (let (($x41 (= $x163 true)))
 (let (($x153 (= $x41 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x189)))
 (let ((?x171 (bvand symbol.1 (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x171)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x62 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x62)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (and $x22 $x201)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x63 $x121)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x56 $x9)))
 (let (($x134 (not $x179)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x161 $x33)))
 (let (($x59 (and (not $x162) $x134)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x126 $x210)))
 (let (($x8 (not $x139)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x18 $x50)))
 (let (($x13 (and (not $x74) $x8)))
 (let (($x78 (and (and (and (and (and (and $x13 $x59) $x51) $x147) $x245) $x146) $x140)))
 (let (($x29 (and $x78 $x311)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x298 (and $x180 $x29)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x156 (or (bvugt input.memlabel-mem--symbol.1_begin ?x135) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x156) (or $x88 $x94)))))))
 (let (($x184 (and $x125 $x298)))
 (let (($x158 (= $x184 true)))
 (let (($x194 (= $x158 true)))
 (let (($x218 (= $x194 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x7 (= $x52 true)))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x112 (= ?x137 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x136 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x136 true)))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x116 (= $x128 true)))
 (let (($x105 (= $x116 true)))
 (let (($x14 (= $x105 true)))
 (let (($x107 (and $x14 $x90)))
 (let (($x183 (and $x107 $x37)))
 (let (($x149 (and $x183 $x104)))
 (let (($x141 (and $x149 $x218)))
 (let (($x246 (and $x141 $x153)))
 (let (($x211 (and $x246 $x240)))
 (let (($x294 (and $x211 $x164)))
 (let (($x200 (and $x294 $x170)))
 (let (($x255 (and $x200 $x243)))
 (let (($x251 (and $x255 $x340)))
 (let (($x178 (and $x251 $x84)))
 (let (($x66 (and $x178 $x73)))
 (let (($x327 (and $x66 $x348)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (and $x303 $x327)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x326 $x228)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x279 $x208)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x10 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x19 (=> (and $x172 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x336 (and $x19 $x231)))
 (let (($x70 (=> $x336 $x262)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x000000f0)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x000000f0)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa0000040)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000f0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x000000f0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa00001cf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa0000040)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa0000040)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000f0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #xa0000043 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xa0000042 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xa0000041 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xa0000040 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x000000f0 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x0000008e)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000008e)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffbba4e4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xedadc744)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0000008e)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000008e)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xedadc747)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffbba673)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xedadc744)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffbba4e4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffbba4e4)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0000008e)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #xffbba4e7 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xffbba4e6 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xffbba4e5 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xffbba4e4 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0000008e x!0)
         (ite (bvule #x0000008f x!0) #x0000008f #x0000008e)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (not $x36)))
 (let (($x271 (=> $x49 $x32)))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x71 (and true $x136)))
 (let (($x154 (= true $x71)))
 (let (($x90 (=> $x49 $x154)))
 (let (($x21 (=> (and $x90 $x49) $x32)))
 (let (($x282 (= $x21 true)))
 (let (($x40 (= $x282 true)))
 (let (($x108 (forall ((input.ind-%var1755X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1755X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1755X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1754X)))
 (= $x54 false)))
 ))
 (let (($x65 (and $x333 $x108)))
 (let (($x290 (= $x65 true)))
 (let (($x217 (forall ((input.ind-%var1749X (_ BitVec 32)) )(let ((?x350 (bvadd symbol.1 (bvmul input.ind-%var1749X (_ bv4 32)))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x350))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv2 32))) ?x117)))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv3 32))) ?x91)))
 (let ((?x204 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1749X)))
 (let (($x252 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1749X)))
 (=> $x252 (= ?x204 ?x152)))))))))
 ))
 (let (($x330 (forall ((input.ind-%var1748X (_ BitVec 32)) )(let (($x336 (and (bvule (_ bv0 32) input.ind-%var1748X) (bvult input.ind-%var1748X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x252 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1748X)))
 (= $x252 $x336))))
 ))
 (let (($x177 (and $x330 $x217)))
 (let (($x225 (= $x177 true)))
 (let (($x267 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1743X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1743X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1742X)))
 (= $x54 false)))
 ))
 (let (($x124 (and $x241 $x267)))
 (let (($x113 (= $x124 true)))
 (let ((?x313 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x313)))
 (let (($x97 (= ?x213 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (= $x97 true)))
 (let (($x15 (= $x12 true)))
 (let (($x120 (= ?x213 input.dst.llvm-%n)))
 (let (($x297 (= $x120 true)))
 (let (($x84 (= $x297 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x251)))
 (let (($x96 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x96 true)))
 (let (($x221 (= $x324 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x164)))
 (let ((?x186 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x186)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x198 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x289 (= input.memlabel-mem--symbol.1_end ?x198)))
 (let (($x246 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (and $x246 $x289)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x153 $x168)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x298 $x184)))
 (let (($x194 (not $x158)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x29 (and $x189 $x311)))
 (let (($x141 (and (not $x29) $x194)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x182 $x146)))
 (let (($x171 (not $x115)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x121 $x245)))
 (let (($x78 (and (not $x60) $x171)))
 (let (($x269 (and (and (and (and (and (and $x78 $x141) $x248) $x41) $x240) $x129) $x247)))
 (let (($x20 (and $x269 $x294)))
 (let (($x33 (= symbol.1 dst_symbol_addr.1)))
 (let (($x300 (and $x33 $x20)))
 (let (($x235 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x134 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x134) (or $x82 $x235)))))))
 (let (($x203 (and $x201 $x300)))
 (let (($x243 (= $x203 true)))
 (let (($x255 (= $x243 true)))
 (let (($x169 (= $x255 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x126 (= $x76 true)))
 (let (($x210 (= $x126 true)))
 (let (($x139 (= $x210 true)))
 (let (($x155 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (= $x155 true)))
 (let (($x18 (= $x180 true)))
 (let (($x50 (= $x18 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x157 true)))
 (let (($x106 (= $x103 true)))
 (let (($x138 (= $x106 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x43 true)))
 (let (($x88 (= $x44 true)))
 (let (($x144 (= $x88 true)))
 (let (($x176 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x135 (= $x176 true)))
 (let (($x98 (= $x135 true)))
 (let (($x166 (= $x98 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x64 (= $x149 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x52 (= $x183 true)))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x114 (= $x38 true)))
 (let (($x7 (and $x114 $x52)))
 (let (($x148 (and $x7 $x64)))
 (let (($x156 (and $x148 $x166)))
 (let (($x94 (and $x156 $x144)))
 (let (($x125 (and $x94 $x138)))
 (let (($x74 (and $x125 $x50)))
 (let (($x8 (and $x74 $x139)))
 (let (($x258 (and $x8 $x169)))
 (let (($x343 (and $x258 $x221)))
 (let (($x178 (and $x343 $x84)))
 (let (($x278 (and $x178 $x15)))
 (let (($x276 (and $x278 $x113)))
 (let (($x227 (and $x276 $x225)))
 (let (($x309 (and $x227 $x290)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x160 $x309)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x338 $x328)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let (($x196 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x279 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x196)))))
 (let (($x268 (=> (and $x36 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x196)))))
 (let (($x67 (and $x268 $x68)))
 (let (($x207 (=> $x67 $x40)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (not $x36)))
 (let (($x271 (=> $x49 $x32)))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x71 (and true $x136)))
 (let (($x154 (= true $x71)))
 (let (($x90 (=> $x49 $x154)))
 (let (($x21 (=> (and $x90 $x49) $x32)))
 (let (($x282 (= $x21 true)))
 (let (($x40 (= $x282 true)))
 (let (($x108 (forall ((input.ind-%var1755X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1755X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1755X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1754X)))
 (= $x54 false)))
 ))
 (let (($x65 (and $x333 $x108)))
 (let (($x290 (= $x65 true)))
 (let (($x217 (forall ((input.ind-%var1749X (_ BitVec 32)) )(let ((?x350 (bvadd symbol.1 (bvmul input.ind-%var1749X (_ bv4 32)))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x350))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv2 32))) ?x117)))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv3 32))) ?x91)))
 (let ((?x204 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1749X)))
 (let (($x252 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1749X)))
 (=> $x252 (= ?x204 ?x152)))))))))
 ))
 (let (($x330 (forall ((input.ind-%var1748X (_ BitVec 32)) )(let (($x336 (and (bvule (_ bv0 32) input.ind-%var1748X) (bvult input.ind-%var1748X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x252 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1748X)))
 (= $x252 $x336))))
 ))
 (let (($x177 (and $x330 $x217)))
 (let (($x225 (= $x177 true)))
 (let (($x267 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1743X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1743X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1742X)))
 (= $x54 false)))
 ))
 (let (($x124 (and $x241 $x267)))
 (let (($x113 (= $x124 true)))
 (let ((?x313 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x313)))
 (let (($x97 (= ?x213 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (= $x97 true)))
 (let (($x15 (= $x12 true)))
 (let (($x120 (= ?x213 input.dst.llvm-%n)))
 (let (($x297 (= $x120 true)))
 (let (($x84 (= $x297 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x251)))
 (let (($x96 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x96 true)))
 (let (($x221 (= $x324 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x164)))
 (let ((?x186 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x186)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x198 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x289 (= input.memlabel-mem--symbol.1_end ?x198)))
 (let (($x246 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (and $x246 $x289)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x153 $x168)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x298 $x184)))
 (let (($x194 (not $x158)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x29 (and $x189 $x311)))
 (let (($x141 (and (not $x29) $x194)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x182 $x146)))
 (let (($x171 (not $x115)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x121 $x245)))
 (let (($x78 (and (not $x60) $x171)))
 (let (($x269 (and (and (and (and (and (and $x78 $x141) $x248) $x41) $x240) $x129) $x247)))
 (let (($x20 (and $x269 $x294)))
 (let (($x33 (= symbol.1 dst_symbol_addr.1)))
 (let (($x300 (and $x33 $x20)))
 (let (($x235 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x134 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x134) (or $x82 $x235)))))))
 (let (($x203 (and $x201 $x300)))
 (let (($x243 (= $x203 true)))
 (let (($x255 (= $x243 true)))
 (let (($x169 (= $x255 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x126 (= $x76 true)))
 (let (($x210 (= $x126 true)))
 (let (($x139 (= $x210 true)))
 (let (($x155 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (= $x155 true)))
 (let (($x18 (= $x180 true)))
 (let (($x50 (= $x18 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x157 true)))
 (let (($x106 (= $x103 true)))
 (let (($x138 (= $x106 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x43 true)))
 (let (($x88 (= $x44 true)))
 (let (($x144 (= $x88 true)))
 (let (($x176 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x135 (= $x176 true)))
 (let (($x98 (= $x135 true)))
 (let (($x166 (= $x98 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x64 (= $x149 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x52 (= $x183 true)))
 (let (($x107 (= $x90 true)))
 (let (($x38 (= $x107 true)))
 (let (($x114 (= $x38 true)))
 (let (($x7 (and $x114 $x52)))
 (let (($x148 (and $x7 $x64)))
 (let (($x156 (and $x148 $x166)))
 (let (($x94 (and $x156 $x144)))
 (let (($x125 (and $x94 $x138)))
 (let (($x74 (and $x125 $x50)))
 (let (($x8 (and $x74 $x139)))
 (let (($x258 (and $x8 $x169)))
 (let (($x343 (and $x258 $x221)))
 (let (($x178 (and $x343 $x84)))
 (let (($x278 (and $x178 $x15)))
 (let (($x276 (and $x278 $x113)))
 (let (($x227 (and $x276 $x225)))
 (let (($x309 (and $x227 $x290)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x160 $x309)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x338 $x328)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x307 (bvadd symbol.1 ?x24)))
 (let (($x196 (and (bvule input.memlabel-mem--symbol.1_begin ?x307) (bvule (bvadd ?x307 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x279 (=> (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32))) (or false (or false $x196)))))
 (let (($x268 (=> (and $x36 (bvule ?x307 (bvsub (bvadd ?x307 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x196)))))
 (let (($x67 (and $x268 $x68)))
 (let (($x207 (=> $x67 $x40)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x361 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1779X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x118)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x27)))
 (let ((?x117 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1779X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1779X)))
 (=> $x131 (= ?x117 ?x39)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1778X)))
 (= $x131 (and (bvule (_ bv0 32) input.ind-%var1778X) (bvult input.ind-%var1778X input.dst.llvm-%n)))))
 ))
 (let (($x263 (and $x70 $x361)))
 (let (($x58 (= true true)))
 (let (($x26 (and $x58 $x263)))
 (let (($x17 (= $x26 true)))
 (let (($x301 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1773X) (_ bv0 32)))))
 ))
 (let (($x72 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x178 false)))
 ))
 (let (($x195 (and $x72 $x301)))
 (let (($x69 (= $x195 true)))
 (let (($x262 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1767X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x118)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x27)))
 (let ((?x117 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1767X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1767X)))
 (=> $x131 (= ?x117 ?x39)))))))))
 ))
 (let (($x260 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let (($x281 (bvule (_ bv0 32) input.ind-%var1766X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1766X)))
 (= $x131 (and $x281 (bvult input.ind-%var1766X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x280 (and $x260 $x262)))
 (let (($x73 (= $x280 true)))
 (let (($x113 (forall ((input.ind-%var1761X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1761X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1761X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1760X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1760X)))
 (= $x178 false)))
 ))
 (let (($x276 (and $x278 $x113)))
 (let (($x252 (= $x276 true)))
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x128)))
 (let (($x221 (= ?x105 input.dst.llvm-%n)))
 (let (($x343 (= $x221 true)))
 (let (($x313 (= $x343 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x269)))
 (let ((?x186 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x186)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x289 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x289)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x240 (and $x198 $x168)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x246 $x240)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x194 $x141)))
 (let (($x248 (not $x239)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x298 $x184)))
 (let (($x163 (and (not $x158) $x248)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x78)))
 (let (($x311 (not $x189)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x182 $x146)))
 (let (($x218 (and (not $x115) $x311)))
 (let (($x255 (and (and (and (and (and (and $x218 $x163) $x41) $x153) $x170) $x200) $x247)))
 (let (($x169 (and $x255 $x164)))
 (let (($x56 (= symbol.1 dst_symbol_addr.1)))
 (let (($x258 (and $x56 $x169)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x235 (or (bvugt input.memlabel-mem--symbol.1_begin ?x284) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x235) (or $x22 $x201)))))))
 (let (($x340 (and $x140 $x258)))
 (let (($x251 (= $x340 true)))
 (let (($x119 (= $x251 true)))
 (let (($x96 (= $x119 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x76 true)))
 (let (($x210 (= $x126 true)))
 (let (($x139 (= $x210 true)))
 (let (($x135 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (not $x135)))
 (let (($x180 (= $x98 true)))
 (let (($x18 (= $x180 true)))
 (let (($x50 (= $x18 true)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x94 (and true $x144)))
 (let (($x157 (= true $x94)))
 (let (($x103 (=> $x98 $x157)))
 (let (($x106 (= $x103 true)))
 (let (($x138 (= $x106 true)))
 (let (($x125 (= $x138 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x64 (= $x149 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x52 (= $x183 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x90)))
 (let (($x38 (= ?x107 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x14 (= ?x105 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x360 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x192 (= $x360 true)))
 (let (($x303 (= $x192 true)))
 (let (($x160 (= $x303 true)))
 (let (($x268 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x314 (= $x268 true)))
 (let (($x338 (= $x314 true)))
 (let (($x47 (= $x338 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x196 (= $x123 true)))
 (let (($x10 (= $x196 true)))
 (let (($x19 (= $x10 true)))
 (let (($x34 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x174 (= $x34 true)))
 (let (($x57 (= $x174 true)))
 (let (($x187 (= $x57 true)))
 (let (($x279 (and $x187 $x19)))
 (let (($x326 (and $x279 $x47)))
 (let (($x49 (and $x326 $x160)))
 (let (($x154 (and $x49 $x71)))
 (let (($x112 (and $x154 $x137)))
 (let (($x7 (and $x112 $x52)))
 (let (($x148 (and $x7 $x64)))
 (let (($x155 (and $x148 $x125)))
 (let (($x74 (and $x155 $x50)))
 (let (($x8 (and $x74 $x139)))
 (let (($x324 (and $x8 $x96)))
 (let (($x213 (and $x324 $x313)))
 (let (($x231 (and $x213 $x252)))
 (let (($x130 (and $x231 $x73)))
 (let (($x325 (and $x130 $x69)))
 (let (($x193 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x236 (and $x193 $x325)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x322 (and $x357 $x236)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x61 $x322)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x199 (and $x86 $x292)))
 (let (($x77 (=> $x199 $x17)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x361 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1779X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x118)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x27)))
 (let ((?x117 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1779X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1779X)))
 (=> $x131 (= ?x117 ?x39)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1778X)))
 (= $x131 (and (bvule (_ bv0 32) input.ind-%var1778X) (bvult input.ind-%var1778X input.dst.llvm-%n)))))
 ))
 (let (($x263 (and $x70 $x361)))
 (let (($x58 (= true true)))
 (let (($x26 (and $x58 $x263)))
 (let (($x17 (= $x26 true)))
 (let (($x301 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1773X) (_ bv0 32)))))
 ))
 (let (($x72 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x178 false)))
 ))
 (let (($x195 (and $x72 $x301)))
 (let (($x69 (= $x195 true)))
 (let (($x262 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1767X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x118)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x27)))
 (let ((?x117 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1767X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1767X)))
 (=> $x131 (= ?x117 ?x39)))))))))
 ))
 (let (($x260 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let (($x281 (bvule (_ bv0 32) input.ind-%var1766X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1766X)))
 (= $x131 (and $x281 (bvult input.ind-%var1766X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x280 (and $x260 $x262)))
 (let (($x73 (= $x280 true)))
 (let (($x113 (forall ((input.ind-%var1761X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1761X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1761X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1760X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1760X)))
 (= $x178 false)))
 ))
 (let (($x276 (and $x278 $x113)))
 (let (($x252 (= $x276 true)))
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x128)))
 (let (($x221 (= ?x105 input.dst.llvm-%n)))
 (let (($x343 (= $x221 true)))
 (let (($x313 (= $x343 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x269)))
 (let ((?x186 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x186)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x289 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x289)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x240 (and $x198 $x168)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x246 $x240)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x194 $x141)))
 (let (($x248 (not $x239)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x298 $x184)))
 (let (($x163 (and (not $x158) $x248)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x78)))
 (let (($x311 (not $x189)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x182 $x146)))
 (let (($x218 (and (not $x115) $x311)))
 (let (($x255 (and (and (and (and (and (and $x218 $x163) $x41) $x153) $x170) $x200) $x247)))
 (let (($x169 (and $x255 $x164)))
 (let (($x56 (= symbol.1 dst_symbol_addr.1)))
 (let (($x258 (and $x56 $x169)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x235 (or (bvugt input.memlabel-mem--symbol.1_begin ?x284) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x235) (or $x22 $x201)))))))
 (let (($x340 (and $x140 $x258)))
 (let (($x251 (= $x340 true)))
 (let (($x119 (= $x251 true)))
 (let (($x96 (= $x119 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x76 true)))
 (let (($x210 (= $x126 true)))
 (let (($x139 (= $x210 true)))
 (let (($x135 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (not $x135)))
 (let (($x180 (= $x98 true)))
 (let (($x18 (= $x180 true)))
 (let (($x50 (= $x18 true)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x94 (and true $x144)))
 (let (($x157 (= true $x94)))
 (let (($x103 (=> $x98 $x157)))
 (let (($x106 (= $x103 true)))
 (let (($x138 (= $x106 true)))
 (let (($x125 (= $x138 true)))
 (let (($x99 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x64 (= $x149 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x52 (= $x183 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x90)))
 (let (($x38 (= ?x107 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x38 true)))
 (let (($x137 (= $x114 true)))
 (let (($x14 (= ?x105 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x14 true)))
 (let (($x71 (= $x136 true)))
 (let (($x360 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x192 (= $x360 true)))
 (let (($x303 (= $x192 true)))
 (let (($x160 (= $x303 true)))
 (let (($x268 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x314 (= $x268 true)))
 (let (($x338 (= $x314 true)))
 (let (($x47 (= $x338 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x196 (= $x123 true)))
 (let (($x10 (= $x196 true)))
 (let (($x19 (= $x10 true)))
 (let (($x34 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x174 (= $x34 true)))
 (let (($x57 (= $x174 true)))
 (let (($x187 (= $x57 true)))
 (let (($x279 (and $x187 $x19)))
 (let (($x326 (and $x279 $x47)))
 (let (($x49 (and $x326 $x160)))
 (let (($x154 (and $x49 $x71)))
 (let (($x112 (and $x154 $x137)))
 (let (($x7 (and $x112 $x52)))
 (let (($x148 (and $x7 $x64)))
 (let (($x155 (and $x148 $x125)))
 (let (($x74 (and $x155 $x50)))
 (let (($x8 (and $x74 $x139)))
 (let (($x324 (and $x8 $x96)))
 (let (($x213 (and $x324 $x313)))
 (let (($x231 (and $x213 $x252)))
 (let (($x130 (and $x231 $x73)))
 (let (($x325 (and $x130 $x69)))
 (let (($x193 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x236 (and $x193 $x325)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x322 (and $x357 $x236)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x61 $x322)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x199 (and $x86 $x292)))
 (let (($x77 (=> $x199 $x17)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x355 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (not $x355)))
 (let (($x150 (or $x355 $x66)))
 (let (($x261 (= $x150 true)))
 (let (($x336 (= $x261 true)))
 (let (($x227 (forall ((input.ind-%var1797X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1797X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1797X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1796X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1796X)))
 (= $x178 false)))
 ))
 (let (($x333 (and $x217 $x227)))
 (let (($x225 (= $x333 true)))
 (let (($x354 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x26 (bvadd symbol.1 (bvmul input.ind-%var1791X (_ bv4 32)))))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x26))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv2 32))) ?x162)))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv3 32))) ?x91)))
 (let ((?x262 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1791X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1791X)))
 (=> $x282 (= ?x262 ?x305)))))))))
 ))
 (let (($x27 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x40 (and (bvule (_ bv0 32) input.ind-%var1790X) (bvult input.ind-%var1790X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1790X)))
 (= $x282 $x40))))
 ))
 (let (($x181 (and $x27 $x354)))
 (let (($x208 (= $x181 true)))
 (let (($x190 (forall ((input.ind-%var1785X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1785X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1785X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1784X)))
 (= $x178 false)))
 ))
 (let (($x260 (and $x267 $x190)))
 (let (($x117 (= $x260 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x96 (= ?x112 input.dst.llvm-%n)))
 (let (($x324 (= $x96 true)))
 (let (($x221 (= $x324 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x164)))
 (let (($x258 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x258 true)))
 (let (($x251 (= $x340 true)))
 (let (($x243 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x243 true)))
 (let (($x247 (= $x186 true)))
 (let (($x255 (= $x247 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x170 true)))
 (let (($x211 (= $x203 true)))
 (let (($x129 (= $x211 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x198 (= $x246 true)))
 (let (($x289 (= $x198 true)))
 (let (($x168 (= $x289 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x20 (= $x41 true)))
 (let (($x202 (= $x20 true)))
 (let (($x153 (= $x202 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x171)))
 (let ((?x115 (bvand symbol.1 (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x115)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x245 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x140 (= input.memlabel-mem--symbol.1_end ?x245)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (and $x121 $x140)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x33 $x62)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x59 $x51)))
 (let (($x147 (not $x235)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x134 $x284)))
 (let (($x22 (and (not $x82) $x147)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x210 $x139)))
 (let (($x9 (not $x8)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x74 $x76)))
 (let (($x60 (and (not $x126) $x9)))
 (let (($x158 (and (and (and (and (and (and $x60 $x22) $x63) $x161) $x56) $x146) $x29)))
 (let (($x288 (and $x158 $x78)))
 (let (($x135 (= symbol.1 dst_symbol_addr.1)))
 (let (($x194 (and $x135 $x288)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x166) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x103 $x106)))))))
 (let (($x141 (and $x50 $x194)))
 (let (($x239 (= $x141 true)))
 (let (($x248 (= $x239 true)))
 (let (($x163 (= $x248 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x128 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x64 (and $x52 $x149)))
 (let (($x294 (and $x64 $x163)))
 (let (($x300 (and $x294 $x153)))
 (let (($x240 (and $x300 $x168)))
 (let (($x200 (and $x240 $x129)))
 (let (($x269 (and $x200 $x255)))
 (let (($x119 (and $x269 $x251)))
 (let (($x343 (and $x119 $x221)))
 (let (($x152 (and $x343 $x117)))
 (let (($x204 (and $x152 $x208)))
 (let (($x108 (and $x204 $x225)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x160 $x108)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x338 $x67)))
 (let ((?x61 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x61)))
 (let (($x10 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x10)))))
 (let (($x357 (=> (and $x355 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x10)))))
 (let (($x259 (and $x357 $x159)))
 (let (($x45 (=> $x259 $x336)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x355 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (not $x355)))
 (let (($x150 (or $x355 $x66)))
 (let (($x261 (= $x150 true)))
 (let (($x336 (= $x261 true)))
 (let (($x227 (forall ((input.ind-%var1797X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1797X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1797X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1796X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1796X)))
 (= $x178 false)))
 ))
 (let (($x333 (and $x217 $x227)))
 (let (($x225 (= $x333 true)))
 (let (($x354 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x26 (bvadd symbol.1 (bvmul input.ind-%var1791X (_ bv4 32)))))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x26))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv2 32))) ?x162)))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv3 32))) ?x91)))
 (let ((?x262 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1791X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1791X)))
 (=> $x282 (= ?x262 ?x305)))))))))
 ))
 (let (($x27 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x40 (and (bvule (_ bv0 32) input.ind-%var1790X) (bvult input.ind-%var1790X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1790X)))
 (= $x282 $x40))))
 ))
 (let (($x181 (and $x27 $x354)))
 (let (($x208 (= $x181 true)))
 (let (($x190 (forall ((input.ind-%var1785X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1785X)))
 (=> $x178 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1785X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1784X)))
 (= $x178 false)))
 ))
 (let (($x260 (and $x267 $x190)))
 (let (($x117 (= $x260 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x137)))
 (let (($x96 (= ?x112 input.dst.llvm-%n)))
 (let (($x324 (= $x96 true)))
 (let (($x221 (= $x324 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x164)))
 (let (($x258 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x258 true)))
 (let (($x251 (= $x340 true)))
 (let (($x243 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x243 true)))
 (let (($x247 (= $x186 true)))
 (let (($x255 (= $x247 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x170 true)))
 (let (($x211 (= $x203 true)))
 (let (($x129 (= $x211 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x198 (= $x246 true)))
 (let (($x289 (= $x198 true)))
 (let (($x168 (= $x289 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x20 (= $x41 true)))
 (let (($x202 (= $x20 true)))
 (let (($x153 (= $x202 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x171)))
 (let ((?x115 (bvand symbol.1 (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x115)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x245 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x140 (= input.memlabel-mem--symbol.1_end ?x245)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (and $x121 $x140)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x33 $x62)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x59 $x51)))
 (let (($x147 (not $x235)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x134 $x284)))
 (let (($x22 (and (not $x82) $x147)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x210 $x139)))
 (let (($x9 (not $x8)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x74 $x76)))
 (let (($x60 (and (not $x126) $x9)))
 (let (($x158 (and (and (and (and (and (and $x60 $x22) $x63) $x161) $x56) $x146) $x29)))
 (let (($x288 (and $x158 $x78)))
 (let (($x135 (= symbol.1 dst_symbol_addr.1)))
 (let (($x194 (and $x135 $x288)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x166) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x103 $x106)))))))
 (let (($x141 (and $x50 $x194)))
 (let (($x239 (= $x141 true)))
 (let (($x248 (= $x239 true)))
 (let (($x163 (= $x248 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x7 true)))
 (let (($x104 (= $x99 true)))
 (let (($x149 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x183 (= $x37 true)))
 (let (($x71 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x71 true)))
 (let (($x90 (= $x154 true)))
 (let (($x107 (= $x90 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x105 (= $x128 true)))
 (let (($x14 (= $x105 true)))
 (let (($x136 (= $x14 true)))
 (let (($x38 (and $x136 $x107)))
 (let (($x52 (and $x38 $x183)))
 (let (($x64 (and $x52 $x149)))
 (let (($x294 (and $x64 $x163)))
 (let (($x300 (and $x294 $x153)))
 (let (($x240 (and $x300 $x168)))
 (let (($x200 (and $x240 $x129)))
 (let (($x269 (and $x200 $x255)))
 (let (($x119 (and $x269 $x251)))
 (let (($x343 (and $x119 $x221)))
 (let (($x152 (and $x343 $x117)))
 (let (($x204 (and $x152 $x208)))
 (let (($x108 (and $x204 $x225)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x160 $x108)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x338 $x67)))
 (let ((?x61 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x24 (bvadd symbol.1 ?x61)))
 (let (($x10 (and (bvule input.memlabel-mem--symbol.1_begin ?x24) (bvule (bvadd ?x24 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false $x10)))))
 (let (($x357 (=> (and $x355 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x10)))))
 (let (($x259 (and $x357 $x159)))
 (let (($x45 (=> $x259 $x336)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x240)))
 (let (($x203 (= ?x170 input.dst.llvm-%n)))
 (let (($x211 (= $x203 true)))
 (let (($x20 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x184 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1803X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x184 false)))
 ))
 (let (($x202 (and $x171 $x20)))
 (let (($x153 (= $x202 true)))
 (let ((?x235 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x33 (concat ?x201 (concat ?x22 ?x235)))))
 (let (($x245 (= ?x121 input.dst.llvm-%n)))
 (let (($x140 (= $x245 true)))
 (let (($x62 (= $x140 true)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (= $x60 true)))
 (let (($x284 (= $x134 true)))
 (let (($x82 (= $x284 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x138)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x157)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x166 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x166)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x43 $x156)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x98 $x44)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x183 (and $x16 $x37)))
 (let (($x52 (not $x183)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x114 $x137)))
 (let (($x99 (and (not $x112) $x52)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x136 $x71)))
 (let (($x90 (not $x154)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x128 $x105)))
 (let (($x38 (and (not $x14) $x90)))
 (let (($x74 (and (and (and (and (and (and $x38 $x99) $x104) $x64) $x88) $x103) $x106)))
 (let (($x76 (and $x74 $x125)))
 (let (($x116 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x116 $x76)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x279 (or (bvugt input.memlabel-mem--symbol.1_begin ?x196) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x279) (or $x338 $x47)))))))
 (let (($x179 (and $x49 $x126)))
 (let (($x210 (= $x179 true)))
 (let (($x139 (= $x210 true)))
 (let (($x8 (= $x139 true)))
 (let (($x145 (and $x8 $x82)))
 (let (($x56 (and $x145 $x62)))
 (let (($x300 (and $x56 $x153)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (and $x193 $x300)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x198 (and $x172 $x246)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x254 $x198)))
 (let (($x129 (=> $x289 $x211)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x240)))
 (let (($x203 (= ?x170 input.dst.llvm-%n)))
 (let (($x211 (= $x203 true)))
 (let (($x20 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x184 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1803X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x184 false)))
 ))
 (let (($x202 (and $x171 $x20)))
 (let (($x153 (= $x202 true)))
 (let ((?x235 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x33 (concat ?x201 (concat ?x22 ?x235)))))
 (let (($x245 (= ?x121 input.dst.llvm-%n)))
 (let (($x140 (= $x245 true)))
 (let (($x62 (= $x140 true)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (= $x60 true)))
 (let (($x284 (= $x134 true)))
 (let (($x82 (= $x284 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x138)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x157)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x166 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x166)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x43 $x156)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x98 $x44)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x183 (and $x16 $x37)))
 (let (($x52 (not $x183)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x114 $x137)))
 (let (($x99 (and (not $x112) $x52)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x136 $x71)))
 (let (($x90 (not $x154)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x128 $x105)))
 (let (($x38 (and (not $x14) $x90)))
 (let (($x74 (and (and (and (and (and (and $x38 $x99) $x104) $x64) $x88) $x103) $x106)))
 (let (($x76 (and $x74 $x125)))
 (let (($x116 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x116 $x76)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x279 (or (bvugt input.memlabel-mem--symbol.1_begin ?x196) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x279) (or $x338 $x47)))))))
 (let (($x179 (and $x49 $x126)))
 (let (($x210 (= $x179 true)))
 (let (($x139 (= $x210 true)))
 (let (($x8 (= $x139 true)))
 (let (($x145 (and $x8 $x82)))
 (let (($x56 (and $x145 $x62)))
 (let (($x300 (and $x56 $x153)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (and $x193 $x300)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x198 (and $x172 $x246)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x254 $x198)))
 (let (($x129 (=> $x289 $x211)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x182)))
 (let (($x248 (= ?x29 input.spec-%var-n-1)))
 (let (($x288 (= $x248 true)))
 (let (($x129 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1809X)))
 (=> $x294 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1809X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1808X)))
 (= $x294 false)))
 ))
 (let (($x200 (and $x153 $x129)))
 (let (($x34 (= $x200 true)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (= $x140 true)))
 (let (($x56 (= $x62 true)))
 (let (($x146 (= $x56 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x82)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x134)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x179 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x210 (= input.memlabel-mem--symbol.1_end ?x179)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x139 (and $x76 $x210)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x125 $x139)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (and $x144 $x94)))
 (let (($x135 (not $x103)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (and $x44 $x88)))
 (let (($x106 (and (not $x176) $x135)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x50 $x98)))
 (let (($x18 (not $x43)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x180 $x149)))
 (let (($x156 (and (not $x64) $x18)))
 (let (($x201 (and (and (and (and (and (and $x156 $x106) $x74) $x138) $x8) $x60) $x284)))
 (let (($x147 (and $x201 $x145)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x22 (and $x104 $x147)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x90 (or (bvugt input.memlabel-mem--symbol.1_begin ?x136) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x90) (or $x112 $x7)))))))
 (let (($x235 (and $x155 $x22)))
 (let (($x189 (= $x235 true)))
 (let (($x161 (= $x189 true)))
 (let (($x121 (= $x161 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x326 (concat ?x47 (concat ?x314 (concat ?x10 ?x123)))))
 (let (($x192 (= ?x326 input.dst.llvm-%n)))
 (let (($x303 (= $x192 true)))
 (let (($x49 (= $x303 true)))
 (let (($x245 (and $x49 $x121)))
 (let (($x184 (and $x245 $x146)))
 (let (($x51 (and $x184 $x34)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x24 $x51)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x86 $x115)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x355 $x239)))
 (let (($x163 (=> $x194 $x288)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x182)))
 (let (($x248 (= ?x29 input.spec-%var-n-1)))
 (let (($x288 (= $x248 true)))
 (let (($x129 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1809X)))
 (=> $x294 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1809X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1808X)))
 (= $x294 false)))
 ))
 (let (($x200 (and $x153 $x129)))
 (let (($x34 (= $x200 true)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (= $x140 true)))
 (let (($x56 (= $x62 true)))
 (let (($x146 (= $x56 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x82)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x134)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x179 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x210 (= input.memlabel-mem--symbol.1_end ?x179)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x139 (and $x76 $x210)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x125 $x139)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (and $x144 $x94)))
 (let (($x135 (not $x103)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (and $x44 $x88)))
 (let (($x106 (and (not $x176) $x135)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x50 $x98)))
 (let (($x18 (not $x43)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x180 $x149)))
 (let (($x156 (and (not $x64) $x18)))
 (let (($x201 (and (and (and (and (and (and $x156 $x106) $x74) $x138) $x8) $x60) $x284)))
 (let (($x147 (and $x201 $x145)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x22 (and $x104 $x147)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x90 (or (bvugt input.memlabel-mem--symbol.1_begin ?x136) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x90) (or $x112 $x7)))))))
 (let (($x235 (and $x155 $x22)))
 (let (($x189 (= $x235 true)))
 (let (($x161 (= $x189 true)))
 (let (($x121 (= $x161 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x326 (concat ?x47 (concat ?x314 (concat ?x10 ?x123)))))
 (let (($x192 (= ?x326 input.dst.llvm-%n)))
 (let (($x303 (= $x192 true)))
 (let (($x49 (= $x303 true)))
 (let (($x245 (and $x49 $x121)))
 (let (($x184 (and $x245 $x146)))
 (let (($x51 (and $x184 $x34)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x24 $x51)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x86 $x115)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x355 $x239)))
 (let (($x163 (=> $x194 $x288)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x171 (= $x158 true)))
 (let (($x20 (= $x171 true)))
 (let (($x163 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1815X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1815X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var1814X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1814X)))
 (= $x203 false)))
 ))
 (let (($x177 (and $x34 $x163)))
 (let (($x268 (= $x177 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x62 (concat ?x121 (concat ?x22 ?x145)))))
 (let (($x146 (= ?x56 input.dst.llvm-%n)))
 (let (($x184 (= $x146 true)))
 (let (($x141 (= $x184 true)))
 (let (($x9 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x9 true)))
 (let (($x311 (= $x60 true)))
 (let (($x134 (= $x311 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x135)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x94)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x98 $x156)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x50 $x44)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x174 (and $x52 $x155)))
 (let (($x116 (not $x174)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x183 (and $x16 $x37)))
 (let (($x180 (and (not $x183) $x116)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x90 $x38)))
 (let (($x112 (not $x114)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x71 $x107)))
 (let (($x7 (and (not $x154) $x112)))
 (let (($x125 (and (and (and (and (and (and $x7 $x180) $x149) $x166) $x88) $x144) $x103)))
 (let (($x76 (and $x125 $x106)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x136 $x76)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x123 (or (bvugt input.memlabel-mem--symbol.1_begin ?x314) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x123) (or $x360 $x192)))))))
 (let (($x179 (and $x14 $x126)))
 (let (($x210 (= $x179 true)))
 (let (($x139 (= $x210 true)))
 (let (($x8 (= $x139 true)))
 (let (($x284 (and $x8 $x134)))
 (let (($x294 (and $x284 $x141)))
 (let (($x342 (and $x294 $x268)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x61 $x342)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x130 $x41)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x254 $x168)))
 (let (($x240 (=> $x198 $x20)))
 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x171 (= $x158 true)))
 (let (($x20 (= $x171 true)))
 (let (($x163 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1815X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1815X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var1814X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1814X)))
 (= $x203 false)))
 ))
 (let (($x177 (and $x34 $x163)))
 (let (($x268 (= $x177 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x62 (concat ?x121 (concat ?x22 ?x145)))))
 (let (($x146 (= ?x56 input.dst.llvm-%n)))
 (let (($x184 (= $x146 true)))
 (let (($x141 (= $x184 true)))
 (let (($x9 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x9 true)))
 (let (($x311 (= $x60 true)))
 (let (($x134 (= $x311 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x135)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x94)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x98 $x156)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x50 $x44)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x174 (and $x52 $x155)))
 (let (($x116 (not $x174)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x183 (and $x16 $x37)))
 (let (($x180 (and (not $x183) $x116)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x90 $x38)))
 (let (($x112 (not $x114)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x71 $x107)))
 (let (($x7 (and (not $x154) $x112)))
 (let (($x125 (and (and (and (and (and (and $x7 $x180) $x149) $x166) $x88) $x144) $x103)))
 (let (($x76 (and $x125 $x106)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x136 $x76)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x123 (or (bvugt input.memlabel-mem--symbol.1_begin ?x314) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x123) (or $x360 $x192)))))))
 (let (($x179 (and $x14 $x126)))
 (let (($x210 (= $x179 true)))
 (let (($x139 (= $x210 true)))
 (let (($x8 (= $x139 true)))
 (let (($x284 (and $x8 $x134)))
 (let (($x294 (and $x284 $x141)))
 (let (($x342 (and $x294 $x268)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x61 $x342)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x130 $x41)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x254 $x168)))
 (let (($x240 (=> $x198 $x20)))
 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (forall ((input.ind-%var1827X (_ BitVec 32)) )(let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x282 (concat ?x152 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32)))))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x27 (concat ?x207 ?x282)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var1826X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1826X) (bvult input.ind-%var1826X (_ bv0 32)))))
 ))
 (let (($x97 (and $x255 $x26)))
 (let (($x129 (= true true)))
 (let (($x83 (and $x129 $x97)))
 (let (($x322 (= $x83 true)))
 (let (($x193 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (=> $x248 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1821X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var1820X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1820X)))
 (= $x248 false)))
 ))
 (let (($x82 (and $x268 $x193)))
 (let (($x211 (= $x82 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x189)))
 (let ((?x140 (bvand symbol.1 (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x140)))
 (let ((?x284 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x284)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x60 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x311 (and $x8 $x60)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x139 $x311)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x103 $x125)))
 (let (($x106 (not $x135)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (and $x144 $x33)))
 (let (($x126 (and (not $x94) $x106)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x156 $x44)))
 (let (($x138 (not $x88)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x98 $x43)))
 (let (($x157 (and (not $x18) $x138)))
 (let (($x245 (and (and (and (and (and (and $x157 $x126) $x179) $x210) $x134) $x201) $x62)))
 (let (($x56 (and $x245 $x161)))
 (let (($x50 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x50 $x56)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x116 $x180)))))))
 (let (($x184 (and $x218 $x146)))
 (let (($x141 (= $x184 true)))
 (let (($x294 (= $x141 true)))
 (let (($x289 (= $x294 true)))
 (let (($x160 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x338 (= $x160 true)))
 (let (($x136 (= $x338 true)))
 (let (($x71 (= $x136 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x303 (concat ?x192 (concat ?x57 (concat ?x196 ?x19)))))
 (let (($x128 (= ?x303 input.dst.llvm-%n)))
 (let (($x105 (= $x128 true)))
 (let (($x14 (= $x105 true)))
 (let (($x107 (and $x14 $x71)))
 (let (($x203 (and $x107 $x289)))
 (let (($x298 (and $x203 $x211)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and $x172 $x298)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x202 (and $x215 $x239)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x355 $x202)))
 (let (($x226 (=> $x153 $x322)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (forall ((input.ind-%var1827X (_ BitVec 32)) )(let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x282 (concat ?x152 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32)))))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1827X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x27 (concat ?x207 ?x282)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var1826X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1826X) (bvult input.ind-%var1826X (_ bv0 32)))))
 ))
 (let (($x97 (and $x255 $x26)))
 (let (($x129 (= true true)))
 (let (($x83 (and $x129 $x97)))
 (let (($x322 (= $x83 true)))
 (let (($x193 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (=> $x248 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1821X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var1820X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1820X)))
 (= $x248 false)))
 ))
 (let (($x82 (and $x268 $x193)))
 (let (($x211 (= $x82 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x189)))
 (let ((?x140 (bvand symbol.1 (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x140)))
 (let ((?x284 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x284)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x60 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x311 (and $x8 $x60)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x139 $x311)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x103 $x125)))
 (let (($x106 (not $x135)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (and $x144 $x33)))
 (let (($x126 (and (not $x94) $x106)))
 (let (($x44 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x156 $x44)))
 (let (($x138 (not $x88)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x98 $x43)))
 (let (($x157 (and (not $x18) $x138)))
 (let (($x245 (and (and (and (and (and (and $x157 $x126) $x179) $x210) $x134) $x201) $x62)))
 (let (($x56 (and $x245 $x161)))
 (let (($x50 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x50 $x56)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x116 $x180)))))))
 (let (($x184 (and $x218 $x146)))
 (let (($x141 (= $x184 true)))
 (let (($x294 (= $x141 true)))
 (let (($x289 (= $x294 true)))
 (let (($x160 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x338 (= $x160 true)))
 (let (($x136 (= $x338 true)))
 (let (($x71 (= $x136 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x303 (concat ?x192 (concat ?x57 (concat ?x196 ?x19)))))
 (let (($x128 (= ?x303 input.dst.llvm-%n)))
 (let (($x105 (= $x128 true)))
 (let (($x14 (= $x105 true)))
 (let (($x107 (and $x14 $x71)))
 (let (($x203 (and $x107 $x289)))
 (let (($x298 (and $x203 $x211)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and $x172 $x298)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x202 (and $x215 $x239)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x355 $x202)))
 (let (($x226 (=> $x153 $x322)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (bvsge ?x206 (_ bv0 32))))
 (let (($x331 (= $x23 true)))
 (let (($x219 (= $x331 true)))
 (let (($x315 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1845X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1845X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1844X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1844X)))
 (= $x217 false)))
 ))
 (let (($x32 (and $x12 $x315)))
 (let (($x348 (= $x32 true)))
 (let (($x222 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let ((?x175 (bvadd symbol.1 (bvmul input.ind-%var1839X (_ bv4 32)))))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x175))))
 (let ((?x351 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x175 (_ bv2 32))) ?x328)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x175 (_ bv3 32))) ?x351)))
 (let ((?x339 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1839X)))
 (let (($x15 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x15 (= ?x339 ?x212)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x65 (and (bvule (_ bv0 32) input.ind-%var1838X) (bvult input.ind-%var1838X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x15 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x15 $x65))))
 ))
 (let (($x89 (and $x213 $x222)))
 (let (($x283 (= $x89 true)))
 (let (($x109 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1833X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x217 false)))
 ))
 (let (($x36 (and $x108 $x109)))
 (let (($x307 (= $x36 true)))
 (let ((?x162 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x162)))
 (let (($x305 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x232 (= $x305 true)))
 (let (($x349 (= $x232 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (= $x341 true)))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (= $x300 true)))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x200 (bvsub ?x130 ?x215)))
 (let (($x221 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x200) (bvult ?x130 ?x200))))
 (let ((?x182 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x115 (bvmul (_ bv4 64) ?x182)))
 (let ((?x258 ((_ extract 63 32) ?x115)))
 (let (($x340 (= (_ bv0 32) ?x258)))
 (let (($x342 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x96 (and (and (and true $x342) $x340) $x221)))
 (let (($x312 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x251 (and $x312 $x96)))
 (let (($x324 (= true $x251)))
 (let (($x164 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (=> $x164 $x324)))
 (let (($x267 (= $x84 true)))
 (let (($x163 (= $x267 true)))
 (let (($x171 (= $x163 true)))
 (let (($x263 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x26 (= $x263 true)))
 (let (($x97 (= $x26 true)))
 (let (($x83 (= $x97 true)))
 (let (($x260 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x260 true)))
 (let (($x40 (= $x282 true)))
 (let (($x262 (= $x40 true)))
 (let (($x293 (= $x164 true)))
 (let (($x207 (= $x293 true)))
 (let (($x117 (= $x207 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x298)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x82)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x177 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x268 (= input.memlabel-mem--symbol.1_end ?x177)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x248 $x268)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x194 $x198)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (and $x189 $x161)))
 (let (($x146 (not $x56)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x140 $x62)))
 (let (($x141 (and (not $x245) $x146)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x311 $x134)))
 (let (($x284 (not $x145)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x63 $x9)))
 (let (($x235 (and (not $x60) $x284)))
 (let (($x186 (and (and (and (and (and (and $x235 $x141) $x294) $x203) $x240) $x193) $x211)))
 (let (($x247 (and $x186 $x239)))
 (let (($x138 (= symbol.1 dst_symbol_addr.1)))
 (let (($x255 (and $x138 $x247)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x126 $x121)))))))
 (let (($x169 (and $x8 $x255)))
 (let (($x356 (= $x169 true)))
 (let (($x190 (= $x356 true)))
 (let (($x118 (= $x190 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x43 (= $x98 true)))
 (let (($x18 (= $x43 true)))
 (let (($x176 (= $x18 true)))
 (let ((?x174 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x174)))
 (let (($x218 (= ?x180 input.dst.llvm-%n)))
 (let (($x137 (= $x218 true)))
 (let (($x90 (= $x137 true)))
 (let (($x59 (= ?x180 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x59 true)))
 (let (($x74 (= $x149 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x64 (and $x155 $x74)))
 (let (($x50 (and $x64 $x90)))
 (let (($x156 (and $x50 $x176)))
 (let (($x27 (and $x156 $x118)))
 (let (($x152 (and $x27 $x117)))
 (let (($x73 (and $x152 $x262)))
 (let (($x322 (and $x73 $x83)))
 (let (($x29 (and $x322 $x171)))
 (let (($x252 (and $x29 $x20)))
 (let (($x17 (and $x252 $x100)))
 (let (($x354 (and $x17 $x349)))
 (let (($x148 (and $x354 $x307)))
 (let (($x238 (and $x148 $x283)))
 (let (($x329 (and $x238 $x348)))
 (let (($x38 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (and (not $x38) $x329)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x71 $x286)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x160 $x81)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x205 (and $x128 $x85)))
 (let (($x19 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x19)))))
 (let (($x172 (=> (and $x164 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x19)))))
 (let (($x224 (and $x172 $x205)))
 (let (($x352 (=> $x224 $x219)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (bvsge ?x206 (_ bv0 32))))
 (let (($x331 (= $x23 true)))
 (let (($x219 (= $x331 true)))
 (let (($x315 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1845X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1845X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1844X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1844X)))
 (= $x217 false)))
 ))
 (let (($x32 (and $x12 $x315)))
 (let (($x348 (= $x32 true)))
 (let (($x222 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let ((?x175 (bvadd symbol.1 (bvmul input.ind-%var1839X (_ bv4 32)))))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x175))))
 (let ((?x351 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x175 (_ bv2 32))) ?x328)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x175 (_ bv3 32))) ?x351)))
 (let ((?x339 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1839X)))
 (let (($x15 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x15 (= ?x339 ?x212)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x65 (and (bvule (_ bv0 32) input.ind-%var1838X) (bvult input.ind-%var1838X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x15 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x15 $x65))))
 ))
 (let (($x89 (and $x213 $x222)))
 (let (($x283 (= $x89 true)))
 (let (($x109 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1833X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x217 false)))
 ))
 (let (($x36 (and $x108 $x109)))
 (let (($x307 (= $x36 true)))
 (let ((?x162 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x162)))
 (let (($x305 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x232 (= $x305 true)))
 (let (($x349 (= $x232 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (= $x341 true)))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (= $x300 true)))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x200 (bvsub ?x130 ?x215)))
 (let (($x221 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x200) (bvult ?x130 ?x200))))
 (let ((?x182 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x115 (bvmul (_ bv4 64) ?x182)))
 (let ((?x258 ((_ extract 63 32) ?x115)))
 (let (($x340 (= (_ bv0 32) ?x258)))
 (let (($x342 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x96 (and (and (and true $x342) $x340) $x221)))
 (let (($x312 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x251 (and $x312 $x96)))
 (let (($x324 (= true $x251)))
 (let (($x164 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (=> $x164 $x324)))
 (let (($x267 (= $x84 true)))
 (let (($x163 (= $x267 true)))
 (let (($x171 (= $x163 true)))
 (let (($x263 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x26 (= $x263 true)))
 (let (($x97 (= $x26 true)))
 (let (($x83 (= $x97 true)))
 (let (($x260 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x260 true)))
 (let (($x40 (= $x282 true)))
 (let (($x262 (= $x40 true)))
 (let (($x293 (= $x164 true)))
 (let (($x207 (= $x293 true)))
 (let (($x117 (= $x207 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x298)))
 (let ((?x82 (bvand symbol.1 (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x82)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x177 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x268 (= input.memlabel-mem--symbol.1_end ?x177)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x248 $x268)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x194 $x198)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (and $x189 $x161)))
 (let (($x146 (not $x56)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x140 $x62)))
 (let (($x141 (and (not $x245) $x146)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x311 $x134)))
 (let (($x284 (not $x145)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x63 $x9)))
 (let (($x235 (and (not $x60) $x284)))
 (let (($x186 (and (and (and (and (and (and $x235 $x141) $x294) $x203) $x240) $x193) $x211)))
 (let (($x247 (and $x186 $x239)))
 (let (($x138 (= symbol.1 dst_symbol_addr.1)))
 (let (($x255 (and $x138 $x247)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x126 $x121)))))))
 (let (($x169 (and $x8 $x255)))
 (let (($x356 (= $x169 true)))
 (let (($x190 (= $x356 true)))
 (let (($x118 (= $x190 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x43 (= $x98 true)))
 (let (($x18 (= $x43 true)))
 (let (($x176 (= $x18 true)))
 (let ((?x174 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x174)))
 (let (($x218 (= ?x180 input.dst.llvm-%n)))
 (let (($x137 (= $x218 true)))
 (let (($x90 (= $x137 true)))
 (let (($x59 (= ?x180 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x59 true)))
 (let (($x74 (= $x149 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x64 (and $x155 $x74)))
 (let (($x50 (and $x64 $x90)))
 (let (($x156 (and $x50 $x176)))
 (let (($x27 (and $x156 $x118)))
 (let (($x152 (and $x27 $x117)))
 (let (($x73 (and $x152 $x262)))
 (let (($x322 (and $x73 $x83)))
 (let (($x29 (and $x322 $x171)))
 (let (($x252 (and $x29 $x20)))
 (let (($x17 (and $x252 $x100)))
 (let (($x354 (and $x17 $x349)))
 (let (($x148 (and $x354 $x307)))
 (let (($x238 (and $x148 $x283)))
 (let (($x329 (and $x238 $x348)))
 (let (($x38 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (and (not $x38) $x329)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x71 $x286)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x160 $x81)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x205 (and $x128 $x85)))
 (let (($x19 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x19)))))
 (let (($x172 (=> (and $x164 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x19)))))
 (let (($x224 (and $x172 $x205)))
 (let (($x352 (=> $x224 $x219)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x350 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x301 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x301)))
 (let ((?x228 (bvneg ?x281)))
 (let (($x54 (= ?x228 ?x350)))
 (let (($x269 (= $x54 true)))
 (let (($x150 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x259 false)))
 ))
 (let (($x280 (and $x236 $x150)))
 (let (($x39 (= $x280 true)))
 (let (($x195 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let ((?x292 (bvadd symbol.1 (bvmul input.ind-%var1857X (_ bv4 32)))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x292))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x292 (_ bv2 32))) ?x159)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x292 (_ bv3 32))) ?x323)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1857X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1857X)))
 (=> $x309 (= ?x12 ?x181)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1856X) (bvult input.ind-%var1856X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1856X)))
 (= $x309 $x151))))
 ))
 (let (($x120 (and $x222 $x195)))
 (let (($x297 (= $x120 true)))
 (let (($x199 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1851X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1851X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1850X)))
 (= $x259 false)))
 ))
 (let (($x70 (and $x36 $x199)))
 (let (($x175 (= $x70 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x91)))
 (let (($x232 (= ?x305 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x349 (= $x232 true)))
 (let (($x354 (= $x349 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let (($x17 (= $x100 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let (($x252 (= $x20 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x267 true)))
 (let (($x171 (= $x163 true)))
 (let (($x29 (= $x171 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x168 (bvsub ?x130 ?x215)))
 (let (($x340 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x168) (bvult ?x130 ?x168))))
 (let ((?x288 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x288)))
 (let ((?x342 ((_ extract 63 32) ?x158)))
 (let (($x343 (= (_ bv0 32) ?x342)))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x200 (and (and (and true $x47) $x343) $x340)))
 (let (($x83 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x178 (and $x83 $x200)))
 (let (($x241 (= true $x178)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (=> $x69 $x241)))
 (let (($x96 (= $x221 true)))
 (let (($x251 (= $x96 true)))
 (let (($x324 (= $x251 true)))
 (let (($x282 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x40 (= $x282 true)))
 (let (($x262 (= $x40 true)))
 (let (($x73 (= $x262 true)))
 (let (($x293 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x207 (= $x293 true)))
 (let (($x117 (= $x207 true)))
 (let (($x152 (= $x117 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x356 (= $x169 true)))
 (let (($x190 (= $x356 true)))
 (let (($x118 (= $x190 true)))
 (let (($x186 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x298 (= $x186 true)))
 (let (($x239 (= $x298 true)))
 (let (($x247 (= $x239 true)))
 (let (($x193 (= $x69 true)))
 (let (($x78 (= $x193 true)))
 (let (($x82 (= $x78 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x141)))
 (let ((?x56 (bvand symbol.1 (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x56)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x284 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x245 (and $x284 $x62)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x145 $x245)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x8 $x88)))
 (let (($x63 (not $x138)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (and $x147 $x210)))
 (let (($x60 (and (not $x22) $x63)))
 (let (($x135 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x125 $x135)))
 (let (($x106 (not $x126)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x94 $x76)))
 (let (($x179 (and (not $x103) $x106)))
 (let (($x194 (and (and (and (and (and (and $x179 $x60) $x201) $x134) $x184) $x161) $x146)))
 (let (($x248 (and $x194 $x202)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x180 $x248)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x137 (or (bvugt input.memlabel-mem--symbol.1_begin ?x74) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x137) (or $x43 $x18)))))))
 (let (($x268 (and $x33 $x177)))
 (let (($x198 (= $x268 true)))
 (let (($x240 (= $x198 true)))
 (let (($x243 (= $x240 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x166)))
 (let (($x183 (= ?x112 input.dst.llvm-%n)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x7 (= $x37 true)))
 (let (($x155 (and $x7 $x52)))
 (let (($x246 (and $x155 $x243)))
 (let (($x211 (and $x246 $x82)))
 (let (($x255 (and $x211 $x247)))
 (let (($x27 (and $x255 $x118)))
 (let (($x260 (and $x27 $x152)))
 (let (($x263 (and $x260 $x73)))
 (let (($x84 (and $x263 $x324)))
 (let (($x300 (and $x84 $x29)))
 (let (($x341 (and $x300 $x252)))
 (let (($x162 (and $x341 $x17)))
 (let (($x204 (and $x162 $x354)))
 (let (($x92 (and $x204 $x175)))
 (let (($x131 (and $x92 $x297)))
 (let (($x337 (and $x131 $x39)))
 (let (($x271 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x271) $x337)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and $x107 $x237)))
 (let (($x338 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x261 (and $x338 $x67)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x105 $x261)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x360 (=> (and $x69 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x80 (and $x360 $x113)))
 (let (($x223 (=> $x80 $x269)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x350 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x301 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x301)))
 (let ((?x228 (bvneg ?x281)))
 (let (($x54 (= ?x228 ?x350)))
 (let (($x269 (= $x54 true)))
 (let (($x150 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x259 false)))
 ))
 (let (($x280 (and $x236 $x150)))
 (let (($x39 (= $x280 true)))
 (let (($x195 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let ((?x292 (bvadd symbol.1 (bvmul input.ind-%var1857X (_ bv4 32)))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x292))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x292 (_ bv2 32))) ?x159)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x292 (_ bv3 32))) ?x323)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1857X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1857X)))
 (=> $x309 (= ?x12 ?x181)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1856X) (bvult input.ind-%var1856X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1856X)))
 (= $x309 $x151))))
 ))
 (let (($x120 (and $x222 $x195)))
 (let (($x297 (= $x120 true)))
 (let (($x199 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1851X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1851X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1850X)))
 (= $x259 false)))
 ))
 (let (($x70 (and $x36 $x199)))
 (let (($x175 (= $x70 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x91)))
 (let (($x232 (= ?x305 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x349 (= $x232 true)))
 (let (($x354 (= $x349 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let (($x17 (= $x100 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let (($x252 (= $x20 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x267 true)))
 (let (($x171 (= $x163 true)))
 (let (($x29 (= $x171 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x168 (bvsub ?x130 ?x215)))
 (let (($x340 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x168) (bvult ?x130 ?x168))))
 (let ((?x288 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x288)))
 (let ((?x342 ((_ extract 63 32) ?x158)))
 (let (($x343 (= (_ bv0 32) ?x342)))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x200 (and (and (and true $x47) $x343) $x340)))
 (let (($x83 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x178 (and $x83 $x200)))
 (let (($x241 (= true $x178)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (=> $x69 $x241)))
 (let (($x96 (= $x221 true)))
 (let (($x251 (= $x96 true)))
 (let (($x324 (= $x251 true)))
 (let (($x282 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x40 (= $x282 true)))
 (let (($x262 (= $x40 true)))
 (let (($x73 (= $x262 true)))
 (let (($x293 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x207 (= $x293 true)))
 (let (($x117 (= $x207 true)))
 (let (($x152 (= $x117 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x356 (= $x169 true)))
 (let (($x190 (= $x356 true)))
 (let (($x118 (= $x190 true)))
 (let (($x186 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x298 (= $x186 true)))
 (let (($x239 (= $x298 true)))
 (let (($x247 (= $x239 true)))
 (let (($x193 (= $x69 true)))
 (let (($x78 (= $x193 true)))
 (let (($x82 (= $x78 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x141)))
 (let ((?x56 (bvand symbol.1 (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x56)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x284 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x245 (and $x284 $x62)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x145 $x245)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x8 $x88)))
 (let (($x63 (not $x138)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (and $x147 $x210)))
 (let (($x60 (and (not $x22) $x63)))
 (let (($x135 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x125 $x135)))
 (let (($x106 (not $x126)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x94 $x76)))
 (let (($x179 (and (not $x103) $x106)))
 (let (($x194 (and (and (and (and (and (and $x179 $x60) $x201) $x134) $x184) $x161) $x146)))
 (let (($x248 (and $x194 $x202)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x180 $x248)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x137 (or (bvugt input.memlabel-mem--symbol.1_begin ?x74) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x137) (or $x43 $x18)))))))
 (let (($x268 (and $x33 $x177)))
 (let (($x198 (= $x268 true)))
 (let (($x240 (= $x198 true)))
 (let (($x243 (= $x240 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x166)))
 (let (($x183 (= ?x112 input.dst.llvm-%n)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x7 (= $x37 true)))
 (let (($x155 (and $x7 $x52)))
 (let (($x246 (and $x155 $x243)))
 (let (($x211 (and $x246 $x82)))
 (let (($x255 (and $x211 $x247)))
 (let (($x27 (and $x255 $x118)))
 (let (($x260 (and $x27 $x152)))
 (let (($x263 (and $x260 $x73)))
 (let (($x84 (and $x263 $x324)))
 (let (($x300 (and $x84 $x29)))
 (let (($x341 (and $x300 $x252)))
 (let (($x162 (and $x341 $x17)))
 (let (($x204 (and $x162 $x354)))
 (let (($x92 (and $x204 $x175)))
 (let (($x131 (and $x92 $x297)))
 (let (($x337 (and $x131 $x39)))
 (let (($x271 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x271) $x337)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and $x107 $x237)))
 (let (($x338 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x261 (and $x338 $x67)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x105 $x261)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x360 (=> (and $x69 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x80 (and $x360 $x113)))
 (let (($x223 (=> $x80 $x269)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x110 (bvule ?x86 (_ bv399 32))))
 (let (($x283 (= $x110 true)))
 (let (($x44 (= $x283 true)))
 (let (($x13 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1881X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1881X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1880X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1880X)))
 (= $x87 false)))
 ))
 (let (($x45 (and $x85 $x13)))
 (let (($x65 (= $x45 true)))
 (let (($x225 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var1875X (_ bv4 32)))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x256)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x89)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x72 (= ?x236 ?x361)))))))))
 ))
 (let (($x195 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x72 $x208))))
 ))
 (let (($x329 (and $x195 $x225)))
 (let (($x286 (= $x329 true)))
 (let (($x32 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1869X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1869X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1868X)))
 (= $x87 false)))
 ))
 (let (($x231 (and $x70 $x32)))
 (let (($x292 (= $x231 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x305)))
 (let (($x349 (= ?x232 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x354 (= $x349 true)))
 (let (($x204 (= $x354 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x100 (= $x77 true)))
 (let (($x17 (= $x100 true)))
 (let (($x162 (= $x17 true)))
 (let (($x41 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x20 (= $x41 true)))
 (let (($x252 (= $x20 true)))
 (let (($x341 (= $x252 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x163 true)))
 (let (($x29 (= $x171 true)))
 (let (($x300 (= $x29 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x34)))
 (let ((?x342 (bvand symbol.1 (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x342)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x312 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x47 (= input.memlabel-mem--symbol.1_end ?x312)))
 (let (($x330 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (and $x330 $x47)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x322 $x119)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x262 (and $x282 $x40)))
 (let (($x73 (not $x262)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x260 (and $x117 $x152)))
 (let (($x26 (and (not $x260) $x73)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x356 $x190)))
 (let (($x27 (not $x118)))
 (let (($x255 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x247 $x255)))
 (let (($x207 (and (not $x169) $x27)))
 (let (($x178 (and (and (and (and (and (and $x207 $x26) $x97) $x226) $x154) $x158) $x343)))
 (let (($x241 (and $x178 $x182)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x221 (and $x146 $x241)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x202 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x202)))
 (let (($x268 (or (bvugt input.memlabel-mem--symbol.1_begin ?x202) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x268) (or $x246 $x193)))))))
 (let (($x96 (and $x239 $x221)))
 (let (($x251 (= $x96 true)))
 (let (($x324 (= $x251 true)))
 (let (($x84 (= $x324 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x245 true)))
 (let (($x203 (= $x184 true)))
 (let (($x189 (= $x203 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x145 true)))
 (let (($x235 (= $x284 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x88)))
 (let (($x153 (= ?x138 input.dst.llvm-%n)))
 (let (($x311 (= $x153 true)))
 (let (($x134 (= $x311 true)))
 (let (($x63 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x63 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x174 (bvsub ?x130 ?x215)))
 (let (($x103 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x174) (bvult ?x130 ?x174))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvmul (_ bv4 64) ?x156)))
 (let ((?x144 ((_ extract 63 32) ?x157)))
 (let (($x33 (= (_ bv0 32) ?x144)))
 (let (($x18 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x18) $x33) $x103)))
 (let (($x137 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x126 (and $x137 $x135)))
 (let (($x106 (= true $x126)))
 (let (($x348 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x348 $x106)))
 (let (($x147 (= $x179 true)))
 (let (($x210 (= $x147 true)))
 (let (($x22 (= $x210 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (= $x348 true)))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x52 (and $x112 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x9 (and $x74 $x22)))
 (let (($x201 (and $x9 $x294)))
 (let (($x289 (and $x201 $x134)))
 (let (($x62 (and $x289 $x140)))
 (let (($x161 (and $x62 $x189)))
 (let (($x267 (and $x161 $x84)))
 (let (($x170 (and $x267 $x300)))
 (let (($x51 (and $x170 $x341)))
 (let (($x91 (and $x51 $x162)))
 (let (($x108 (and $x91 $x204)))
 (let (($x124 (and $x108 $x292)))
 (let (($x352 (and $x124 $x286)))
 (let (($x278 (and $x352 $x65)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and (not $x5) $x278)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x38 $x21)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x136 $x58)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x14 $x328)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x105 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x192 (=> (and $x348 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x313 (and $x192 $x148)))
 (let (($x327 (=> $x313 $x44)))
 (not $x327)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x110 (bvule ?x86 (_ bv399 32))))
 (let (($x283 (= $x110 true)))
 (let (($x44 (= $x283 true)))
 (let (($x13 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1881X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1881X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1880X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1880X)))
 (= $x87 false)))
 ))
 (let (($x45 (and $x85 $x13)))
 (let (($x65 (= $x45 true)))
 (let (($x225 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var1875X (_ bv4 32)))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x256)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x89)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x72 (= ?x236 ?x361)))))))))
 ))
 (let (($x195 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x72 $x208))))
 ))
 (let (($x329 (and $x195 $x225)))
 (let (($x286 (= $x329 true)))
 (let (($x32 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1869X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1869X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1868X)))
 (= $x87 false)))
 ))
 (let (($x231 (and $x70 $x32)))
 (let (($x292 (= $x231 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x305)))
 (let (($x349 (= ?x232 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x354 (= $x349 true)))
 (let (($x204 (= $x354 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x100 (= $x77 true)))
 (let (($x17 (= $x100 true)))
 (let (($x162 (= $x17 true)))
 (let (($x41 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x20 (= $x41 true)))
 (let (($x252 (= $x20 true)))
 (let (($x341 (= $x252 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x163 true)))
 (let (($x29 (= $x171 true)))
 (let (($x300 (= $x29 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x34)))
 (let ((?x342 (bvand symbol.1 (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x342)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x312 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x47 (= input.memlabel-mem--symbol.1_end ?x312)))
 (let (($x330 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (and $x330 $x47)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x322 $x119)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x262 (and $x282 $x40)))
 (let (($x73 (not $x262)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x260 (and $x117 $x152)))
 (let (($x26 (and (not $x260) $x73)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x356 $x190)))
 (let (($x27 (not $x118)))
 (let (($x255 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x247 $x255)))
 (let (($x207 (and (not $x169) $x27)))
 (let (($x178 (and (and (and (and (and (and $x207 $x26) $x97) $x226) $x154) $x158) $x343)))
 (let (($x241 (and $x178 $x182)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x221 (and $x146 $x241)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x202 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x202)))
 (let (($x268 (or (bvugt input.memlabel-mem--symbol.1_begin ?x202) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x268) (or $x246 $x193)))))))
 (let (($x96 (and $x239 $x221)))
 (let (($x251 (= $x96 true)))
 (let (($x324 (= $x251 true)))
 (let (($x84 (= $x324 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x245 true)))
 (let (($x203 (= $x184 true)))
 (let (($x189 (= $x203 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x145 true)))
 (let (($x235 (= $x284 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x88)))
 (let (($x153 (= ?x138 input.dst.llvm-%n)))
 (let (($x311 (= $x153 true)))
 (let (($x134 (= $x311 true)))
 (let (($x63 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x63 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x174 (bvsub ?x130 ?x215)))
 (let (($x103 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x174) (bvult ?x130 ?x174))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvmul (_ bv4 64) ?x156)))
 (let ((?x144 ((_ extract 63 32) ?x157)))
 (let (($x33 (= (_ bv0 32) ?x144)))
 (let (($x18 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x18) $x33) $x103)))
 (let (($x137 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x126 (and $x137 $x135)))
 (let (($x106 (= true $x126)))
 (let (($x348 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x348 $x106)))
 (let (($x147 (= $x179 true)))
 (let (($x210 (= $x147 true)))
 (let (($x22 (= $x210 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (= $x348 true)))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x52 (and $x112 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x9 (and $x74 $x22)))
 (let (($x201 (and $x9 $x294)))
 (let (($x289 (and $x201 $x134)))
 (let (($x62 (and $x289 $x140)))
 (let (($x161 (and $x62 $x189)))
 (let (($x267 (and $x161 $x84)))
 (let (($x170 (and $x267 $x300)))
 (let (($x51 (and $x170 $x341)))
 (let (($x91 (and $x51 $x162)))
 (let (($x108 (and $x91 $x204)))
 (let (($x124 (and $x108 $x292)))
 (let (($x352 (and $x124 $x286)))
 (let (($x278 (and $x352 $x65)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and (not $x5) $x278)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x38 $x21)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x136 $x58)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x14 $x328)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x105 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x192 (=> (and $x348 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x313 (and $x192 $x148)))
 (let (($x327 (=> $x313 $x44)))
 (not $x327)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x297 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x254 (bvsle ?x297 (_ bv399 32))))
 (let (($x219 (= $x254 true)))
 (let (($x81 (= $x219 true)))
 (let (($x151 (forall ((input.ind-%var1899X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1899X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1899X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (= $x212 false)))
 ))
 (let (($x206 (and $x67 $x151)))
 (let (($x227 (= $x206 true)))
 (let (($x237 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x150 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x150))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x150 (_ bv2 32))) ?x309)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x150 (_ bv3 32))) ?x276)))
 (let ((?x85 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x307 (= ?x85 ?x259)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x307 $x290))))
 ))
 (let (($x54 (and $x225 $x237)))
 (let (($x269 (= $x54 true)))
 (let (($x280 (forall ((input.ind-%var1887X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1887X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1887X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var1886X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1886X)))
 (= $x212 false)))
 ))
 (let (($x99 (and $x231 $x280)))
 (let (($x116 (= $x99 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x232)))
 (let (($x354 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x354 true)))
 (let (($x108 (= $x204 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x100 true)))
 (let (($x162 (= $x17 true)))
 (let (($x91 (= $x162 true)))
 (let (($x20 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x252 (= $x20 true)))
 (let (($x341 (= $x252 true)))
 (let (($x51 (= $x341 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x29 (= $x171 true)))
 (let (($x300 (= $x29 true)))
 (let (($x170 (= $x300 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x158)))
 (let ((?x340 (bvand symbol.1 (_ bv3 32))))
 (let (($x288 (= (_ bv0 32) ?x340)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x322 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x330 (= input.memlabel-mem--symbol.1_end ?x322)))
 (let (($x258 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x312 (and $x258 $x330)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x226 $x312)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x262 (and $x282 $x40)))
 (let (($x73 (not $x262)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x263 (and $x152 $x260)))
 (let (($x168 (and (not $x263) $x73)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x356 $x190)))
 (let (($x27 (not $x118)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x255 $x169)))
 (let (($x117 (and (not $x293) $x27)))
 (let (($x241 (and (and (and (and (and (and $x117 $x168) $x97) $x83) $x47) $x154) $x288)))
 (let (($x221 (and $x241 $x200)))
 (let (($x298 (= symbol.1 dst_symbol_addr.1)))
 (let (($x96 (and $x298 $x221)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x240 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x240) (or $x78 $x82)))))))
 (let (($x251 (and $x247 $x96)))
 (let (($x324 (= $x251 true)))
 (let (($x84 (= $x324 true)))
 (let (($x267 (= $x84 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x245 true)))
 (let (($x203 (= $x184 true)))
 (let (($x189 (= $x203 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x145 true)))
 (let (($x235 (= $x284 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x88)))
 (let (($x153 (= ?x138 input.dst.llvm-%n)))
 (let (($x311 (= $x153 true)))
 (let (($x134 (= $x311 true)))
 (let (($x63 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x63 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x33 (bvsub ?x130 ?x215)))
 (let (($x94 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x33) (bvult ?x130 ?x33))))
 (let ((?x176 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x176)))
 (let ((?x157 ((_ extract 63 32) ?x156)))
 (let (($x144 (= (_ bv0 32) ?x157)))
 (let (($x18 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x18) $x144) $x94)))
 (let (($x137 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x126 (and $x137 $x135)))
 (let (($x106 (= true $x126)))
 (let (($x39 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x39 $x106)))
 (let (($x147 (= $x179 true)))
 (let (($x210 (= $x147 true)))
 (let (($x22 (= $x210 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (= $x39 true)))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x52 (and $x112 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x9 (and $x74 $x22)))
 (let (($x201 (and $x9 $x294)))
 (let (($x289 (and $x201 $x134)))
 (let (($x62 (and $x289 $x140)))
 (let (($x161 (and $x62 $x189)))
 (let (($x163 (and $x161 $x267)))
 (let (($x41 (and $x163 $x170)))
 (let (($x77 (and $x41 $x51)))
 (let (($x305 (and $x77 $x91)))
 (let (($x36 (and $x305 $x108)))
 (let (($x238 (and $x36 $x116)))
 (let (($x281 (and $x238 $x269)))
 (let (($x31 (and $x281 $x227)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and (not $x133) $x31)))
 (let (($x271 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x271 $x159)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x71 $x92)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x296 (and $x160 $x275)))
 (let (($x360 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x360)))))
 (let (($x57 (=> (and $x39 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x360)))))
 (let (($x331 (and $x57 $x296)))
 (let (($x187 (=> $x331 $x81)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x297 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x254 (bvsle ?x297 (_ bv399 32))))
 (let (($x219 (= $x254 true)))
 (let (($x81 (= $x219 true)))
 (let (($x151 (forall ((input.ind-%var1899X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1899X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1899X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (= $x212 false)))
 ))
 (let (($x206 (and $x67 $x151)))
 (let (($x227 (= $x206 true)))
 (let (($x237 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x150 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x150))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x150 (_ bv2 32))) ?x309)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x150 (_ bv3 32))) ?x276)))
 (let ((?x85 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x307 (= ?x85 ?x259)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x307 $x290))))
 ))
 (let (($x54 (and $x225 $x237)))
 (let (($x269 (= $x54 true)))
 (let (($x280 (forall ((input.ind-%var1887X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1887X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1887X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var1886X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1886X)))
 (= $x212 false)))
 ))
 (let (($x99 (and $x231 $x280)))
 (let (($x116 (= $x99 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x232)))
 (let (($x354 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x354 true)))
 (let (($x108 (= $x204 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x100 true)))
 (let (($x162 (= $x17 true)))
 (let (($x91 (= $x162 true)))
 (let (($x20 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x252 (= $x20 true)))
 (let (($x341 (= $x252 true)))
 (let (($x51 (= $x341 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x29 (= $x171 true)))
 (let (($x300 (= $x29 true)))
 (let (($x170 (= $x300 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x158)))
 (let ((?x340 (bvand symbol.1 (_ bv3 32))))
 (let (($x288 (= (_ bv0 32) ?x340)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x322 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x330 (= input.memlabel-mem--symbol.1_end ?x322)))
 (let (($x258 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x312 (and $x258 $x330)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x226 $x312)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x262 (and $x282 $x40)))
 (let (($x73 (not $x262)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x263 (and $x152 $x260)))
 (let (($x168 (and (not $x263) $x73)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x356 $x190)))
 (let (($x27 (not $x118)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x255 $x169)))
 (let (($x117 (and (not $x293) $x27)))
 (let (($x241 (and (and (and (and (and (and $x117 $x168) $x97) $x83) $x47) $x154) $x288)))
 (let (($x221 (and $x241 $x200)))
 (let (($x298 (= symbol.1 dst_symbol_addr.1)))
 (let (($x96 (and $x298 $x221)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x240 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x240) (or $x78 $x82)))))))
 (let (($x251 (and $x247 $x96)))
 (let (($x324 (= $x251 true)))
 (let (($x84 (= $x324 true)))
 (let (($x267 (= $x84 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x245 true)))
 (let (($x203 (= $x184 true)))
 (let (($x189 (= $x203 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x145 true)))
 (let (($x235 (= $x284 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x88)))
 (let (($x153 (= ?x138 input.dst.llvm-%n)))
 (let (($x311 (= $x153 true)))
 (let (($x134 (= $x311 true)))
 (let (($x63 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x63 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x33 (bvsub ?x130 ?x215)))
 (let (($x94 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x33) (bvult ?x130 ?x33))))
 (let ((?x176 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x176)))
 (let ((?x157 ((_ extract 63 32) ?x156)))
 (let (($x144 (= (_ bv0 32) ?x157)))
 (let (($x18 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x18) $x144) $x94)))
 (let (($x137 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x126 (and $x137 $x135)))
 (let (($x106 (= true $x126)))
 (let (($x39 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x39 $x106)))
 (let (($x147 (= $x179 true)))
 (let (($x210 (= $x147 true)))
 (let (($x22 (= $x210 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (= $x39 true)))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x52 (and $x112 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x9 (and $x74 $x22)))
 (let (($x201 (and $x9 $x294)))
 (let (($x289 (and $x201 $x134)))
 (let (($x62 (and $x289 $x140)))
 (let (($x161 (and $x62 $x189)))
 (let (($x163 (and $x161 $x267)))
 (let (($x41 (and $x163 $x170)))
 (let (($x77 (and $x41 $x51)))
 (let (($x305 (and $x77 $x91)))
 (let (($x36 (and $x305 $x108)))
 (let (($x238 (and $x36 $x116)))
 (let (($x281 (and $x238 $x269)))
 (let (($x31 (and $x281 $x227)))
 (let (($x133 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and (not $x133) $x31)))
 (let (($x271 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x271 $x159)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x71 $x92)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x296 (and $x160 $x275)))
 (let (($x360 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x360)))))
 (let (($x57 (=> (and $x39 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x360)))))
 (let (($x331 (and $x57 $x296)))
 (let (($x187 (=> $x331 $x81)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x129 (bvsge ?x286 (_ bv0 32))))
 (let (($x224 (= $x129 true)))
 (let (($x350 (= $x224 true)))
 (let (($x208 (forall ((input.ind-%var1917X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1917X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1917X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1916X)))
 (= $x181 false)))
 ))
 (let (($x301 (and $x58 $x208)))
 (let (($x264 (= $x301 true)))
 (let (($x21 (forall ((input.ind-%var1911X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1911X (_ bv4 32)))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x72)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x233)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1911X)))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1911X)))
 (=> $x120 (= ?x67 ?x87)))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1910X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var1910X) (bvult input.ind-%var1910X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1910X)))
 (= $x120 $x109))))
 ))
 (let (($x327 (and $x237 $x21)))
 (let (($x273 (= $x327 true)))
 (let (($x45 (forall ((input.ind-%var1905X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1905X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1905X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var1904X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1904X)))
 (= $x181 false)))
 ))
 (let (($x6 (and $x99 $x45)))
 (let (($x150 (= $x6 true)))
 (let ((?x349 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x349)))
 (let (($x204 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x204 true)))
 (let (($x36 (= $x108 true)))
 (let (($x17 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x162 (= $x17 true)))
 (let (($x91 (= $x162 true)))
 (let (($x305 (= $x91 true)))
 (let (($x252 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x341 (= $x252 true)))
 (let (($x51 (= $x341 true)))
 (let (($x77 (= $x51 true)))
 (let (($x29 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x300 (= $x29 true)))
 (let (($x170 (= $x300 true)))
 (let (($x41 (= $x170 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x154)))
 (let ((?x34 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x34)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x312)))
 (let ((?x226 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x258 (= input.memlabel-mem--symbol.1_end ?x226)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x322 (and $x178 $x258)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (and $x83 $x322)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x262 (and $x282 $x40)))
 (let (($x73 (not $x262)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x260 $x263)))
 (let (($x342 (and (not $x26) $x73)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x356 $x190)))
 (let (($x27 (not $x118)))
 (let (($x293 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x169 $x293)))
 (let (($x152 (and (not $x207) $x27)))
 (let (($x221 (and (and (and (and (and (and $x152 $x342) $x97) $x115) $x330) $x47) $x119)))
 (let (($x96 (and $x221 $x182)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x146 $x96)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x243 (or (bvugt input.memlabel-mem--symbol.1_begin ?x198) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x255 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x243) (or $x211 $x186)))))))
 (let (($x324 (and $x255 $x251)))
 (let (($x84 (= $x324 true)))
 (let (($x267 (= $x84 true)))
 (let (($x163 (= $x267 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x245 true)))
 (let (($x203 (= $x184 true)))
 (let (($x189 (= $x203 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x145 true)))
 (let (($x235 (= $x284 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x88)))
 (let (($x153 (= ?x138 input.dst.llvm-%n)))
 (let (($x311 (= $x153 true)))
 (let (($x134 (= $x311 true)))
 (let (($x63 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x63 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x144 (bvsub ?x130 ?x215)))
 (let (($x180 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x144) (bvult ?x130 ?x144))))
 (let ((?x121 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvmul (_ bv4 64) ?x121)))
 (let ((?x156 ((_ extract 63 32) ?x176)))
 (let (($x157 (= (_ bv0 32) ?x156)))
 (let (($x18 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x18) $x157) $x180)))
 (let (($x137 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x126 (and $x137 $x135)))
 (let (($x106 (= true $x126)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x65 $x106)))
 (let (($x147 (= $x179 true)))
 (let (($x210 (= $x147 true)))
 (let (($x22 (= $x210 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (= $x65 true)))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x52 (and $x112 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x9 (and $x74 $x22)))
 (let (($x201 (and $x9 $x294)))
 (let (($x289 (and $x201 $x134)))
 (let (($x62 (and $x289 $x140)))
 (let (($x161 (and $x62 $x189)))
 (let (($x171 (and $x161 $x163)))
 (let (($x20 (and $x171 $x41)))
 (let (($x100 (and $x20 $x77)))
 (let (($x232 (and $x100 $x305)))
 (let (($x70 (and $x232 $x36)))
 (let (($x66 (and $x70 $x150)))
 (let (($x110 (and $x66 $x273)))
 (let (($x228 (and $x110 $x264)))
 (let (($x23 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and (not $x23) $x228)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x5 $x256)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x325 (and $x107 $x124)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x338 $x325)))
 (let (($x192 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x160 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x192)))))
 (let (($x196 (=> (and $x65 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x192)))))
 (let (($x113 (and $x196 $x303)))
 (let (($x339 (=> $x113 $x350)))
 (not $x339)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x129 (bvsge ?x286 (_ bv0 32))))
 (let (($x224 (= $x129 true)))
 (let (($x350 (= $x224 true)))
 (let (($x208 (forall ((input.ind-%var1917X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1917X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1917X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1916X)))
 (= $x181 false)))
 ))
 (let (($x301 (and $x58 $x208)))
 (let (($x264 (= $x301 true)))
 (let (($x21 (forall ((input.ind-%var1911X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1911X (_ bv4 32)))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x72)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x233)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1911X)))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1911X)))
 (=> $x120 (= ?x67 ?x87)))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1910X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var1910X) (bvult input.ind-%var1910X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1910X)))
 (= $x120 $x109))))
 ))
 (let (($x327 (and $x237 $x21)))
 (let (($x273 (= $x327 true)))
 (let (($x45 (forall ((input.ind-%var1905X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1905X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1905X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var1904X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1904X)))
 (= $x181 false)))
 ))
 (let (($x6 (and $x99 $x45)))
 (let (($x150 (= $x6 true)))
 (let ((?x349 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x349)))
 (let (($x204 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x204 true)))
 (let (($x36 (= $x108 true)))
 (let (($x17 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x162 (= $x17 true)))
 (let (($x91 (= $x162 true)))
 (let (($x305 (= $x91 true)))
 (let (($x252 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x341 (= $x252 true)))
 (let (($x51 (= $x341 true)))
 (let (($x77 (= $x51 true)))
 (let (($x29 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x300 (= $x29 true)))
 (let (($x170 (= $x300 true)))
 (let (($x41 (= $x170 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x154)))
 (let ((?x34 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x34)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x312)))
 (let ((?x226 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x258 (= input.memlabel-mem--symbol.1_end ?x226)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x322 (and $x178 $x258)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (and $x83 $x322)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x262 (and $x282 $x40)))
 (let (($x73 (not $x262)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x260 $x263)))
 (let (($x342 (and (not $x26) $x73)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x356 $x190)))
 (let (($x27 (not $x118)))
 (let (($x293 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x169 $x293)))
 (let (($x152 (and (not $x207) $x27)))
 (let (($x221 (and (and (and (and (and (and $x152 $x342) $x97) $x115) $x330) $x47) $x119)))
 (let (($x96 (and $x221 $x182)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x146 $x96)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x243 (or (bvugt input.memlabel-mem--symbol.1_begin ?x198) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x255 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x243) (or $x211 $x186)))))))
 (let (($x324 (and $x255 $x251)))
 (let (($x84 (= $x324 true)))
 (let (($x267 (= $x84 true)))
 (let (($x163 (= $x267 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x245 true)))
 (let (($x203 (= $x184 true)))
 (let (($x189 (= $x203 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (= $x145 true)))
 (let (($x235 (= $x284 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x88)))
 (let (($x153 (= ?x138 input.dst.llvm-%n)))
 (let (($x311 (= $x153 true)))
 (let (($x134 (= $x311 true)))
 (let (($x63 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x63 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x144 (bvsub ?x130 ?x215)))
 (let (($x180 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x144) (bvult ?x130 ?x144))))
 (let ((?x121 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvmul (_ bv4 64) ?x121)))
 (let ((?x156 ((_ extract 63 32) ?x176)))
 (let (($x157 (= (_ bv0 32) ?x156)))
 (let (($x18 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x18) $x157) $x180)))
 (let (($x137 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x126 (and $x137 $x135)))
 (let (($x106 (= true $x126)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x65 $x106)))
 (let (($x147 (= $x179 true)))
 (let (($x210 (= $x147 true)))
 (let (($x22 (= $x210 true)))
 (let (($x155 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (= $x65 true)))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x52 (and $x112 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x9 (and $x74 $x22)))
 (let (($x201 (and $x9 $x294)))
 (let (($x289 (and $x201 $x134)))
 (let (($x62 (and $x289 $x140)))
 (let (($x161 (and $x62 $x189)))
 (let (($x171 (and $x161 $x163)))
 (let (($x20 (and $x171 $x41)))
 (let (($x100 (and $x20 $x77)))
 (let (($x232 (and $x100 $x305)))
 (let (($x70 (and $x232 $x36)))
 (let (($x66 (and $x70 $x150)))
 (let (($x110 (and $x66 $x273)))
 (let (($x228 (and $x110 $x264)))
 (let (($x23 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and (not $x23) $x228)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x5 $x256)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x325 (and $x107 $x124)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x338 $x325)))
 (let (($x192 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x160 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x192)))))
 (let (($x196 (=> (and $x65 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x192)))))
 (let (($x113 (and $x196 $x303)))
 (let (($x339 (=> $x113 $x350)))
 (not $x339)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x194 (bvule ?x269 (_ bv399 32))))
 (let (($x223 (= $x194 true)))
 (let (($x44 (= $x223 true)))
 (let (($x290 (forall ((input.ind-%var1935X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1935X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1935X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var1934X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1934X)))
 (= $x361 false)))
 ))
 (let (($x86 (and $x92 $x290)))
 (let (($x213 (= $x86 true)))
 (let (($x159 (forall ((input.ind-%var1929X (_ BitVec 32)) )(let ((?x151 (bvadd symbol.1 (bvmul input.ind-%var1929X (_ bv4 32)))))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x307)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x234)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1929X)))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1929X)))
 (=> $x329 (= ?x58 ?x212)))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1928X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1928X) (bvult input.ind-%var1928X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1928X)))
 (= $x329 $x199))))
 ))
 (let (($x187 (and $x21 $x159)))
 (let (($x68 (= $x187 true)))
 (let (($x206 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x6 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x361 false)))
 ))
 (let (($x15 (and $x6 $x206)))
 (let (($x13 (= $x15 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x354)))
 (let (($x108 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x108 true)))
 (let (($x70 (= $x36 true)))
 (let (($x162 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x162 true)))
 (let (($x305 (= $x91 true)))
 (let (($x232 (= $x305 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x51 (= $x341 true)))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x154 (bvsub ?x130 ?x215)))
 (let (($x324 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x154) (bvult ?x130 ?x154))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvmul (_ bv4 64) ?x200)))
 (let ((?x119 ((_ extract 63 32) ?x34)))
 (let (($x221 (= (_ bv0 32) ?x119)))
 (let (($x312 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x163 (and (and (and true $x312) $x221) $x324)))
 (let (($x226 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x171 (and $x226 $x163)))
 (let (($x29 (= true $x171)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x300 (=> $x227 $x29)))
 (let (($x170 (= $x300 true)))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x288 (= $x97 true)))
 (let (($x343 (= $x288 true)))
 (let (($x115 (= $x343 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x262 (= $x40 true)))
 (let (($x73 (= $x262 true)))
 (let (($x342 (= $x73 true)))
 (let (($x263 (= $x227 true)))
 (let (($x26 (= $x263 true)))
 (let (($x168 (= $x26 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x247)))
 (let ((?x239 (bvand symbol.1 (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x239)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x243 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x243)))
 (let (($x246 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x193 (and $x246 $x78)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x240 $x193)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x245 $x184)))
 (let (($x189 (not $x203)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x235 $x140)))
 (let (($x177 (and (not $x62) $x189)))
 (let (($x311 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x153 $x311)))
 (let (($x289 (not $x134)))
 (let (($x294 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x60 $x294)))
 (let (($x284 (and (not $x201) $x289)))
 (let (($x207 (and (and (and (and (and (and $x284 $x177) $x268) $x198) $x211) $x186) $x56)))
 (let (($x117 (and $x207 $x141)))
 (let (($x94 (= symbol.1 dst_symbol_addr.1)))
 (let (($x356 (and $x94 $x117)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x125) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x147 $x210)))))))
 (let (($x190 (and $x63 $x356)))
 (let (($x118 (= $x190 true)))
 (let (($x27 (= $x118 true)))
 (let (($x152 (= $x27 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x18 true)))
 (let (($x76 (= $x174 true)))
 (let (($x121 (= $x76 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x149)))
 (let (($x50 (= ?x139 input.dst.llvm-%n)))
 (let (($x90 (= $x50 true)))
 (let (($x43 (= $x90 true)))
 (let (($x74 (= ?x139 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x137 (and $x155 $x218)))
 (let (($x98 (and $x137 $x43)))
 (let (($x176 (and $x98 $x121)))
 (let (($x260 (and $x176 $x152)))
 (let (($x282 (and $x260 $x168)))
 (let (($x340 (and $x282 $x342)))
 (let (($x241 (and $x340 $x115)))
 (let (($x252 (and $x241 $x20)))
 (let (($x17 (and $x252 $x100)))
 (let (($x349 (and $x17 $x232)))
 (let (($x231 (and $x349 $x70)))
 (let (($x315 (and $x231 $x13)))
 (let (($x254 (and $x315 $x68)))
 (let (($x283 (and $x254 $x213)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x309 (and (not $x261) $x283)))
 (let (($x133 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and $x133 $x309)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x38 $x238)))
 (let (($x136 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x136 $x217)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x338 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x279 (=> (and $x227 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x148 (and $x279 $x61)))
 (let (($x12 (=> $x148 $x44)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x194 (bvule ?x269 (_ bv399 32))))
 (let (($x223 (= $x194 true)))
 (let (($x44 (= $x223 true)))
 (let (($x290 (forall ((input.ind-%var1935X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1935X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1935X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var1934X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1934X)))
 (= $x361 false)))
 ))
 (let (($x86 (and $x92 $x290)))
 (let (($x213 (= $x86 true)))
 (let (($x159 (forall ((input.ind-%var1929X (_ BitVec 32)) )(let ((?x151 (bvadd symbol.1 (bvmul input.ind-%var1929X (_ bv4 32)))))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x307)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x234)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1929X)))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1929X)))
 (=> $x329 (= ?x58 ?x212)))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1928X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1928X) (bvult input.ind-%var1928X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1928X)))
 (= $x329 $x199))))
 ))
 (let (($x187 (and $x21 $x159)))
 (let (($x68 (= $x187 true)))
 (let (($x206 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x6 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x361 false)))
 ))
 (let (($x15 (and $x6 $x206)))
 (let (($x13 (= $x15 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x354)))
 (let (($x108 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x108 true)))
 (let (($x70 (= $x36 true)))
 (let (($x162 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x162 true)))
 (let (($x305 (= $x91 true)))
 (let (($x232 (= $x305 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x51 (= $x341 true)))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x154 (bvsub ?x130 ?x215)))
 (let (($x324 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x154) (bvult ?x130 ?x154))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvmul (_ bv4 64) ?x200)))
 (let ((?x119 ((_ extract 63 32) ?x34)))
 (let (($x221 (= (_ bv0 32) ?x119)))
 (let (($x312 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x163 (and (and (and true $x312) $x221) $x324)))
 (let (($x226 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x171 (and $x226 $x163)))
 (let (($x29 (= true $x171)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x300 (=> $x227 $x29)))
 (let (($x170 (= $x300 true)))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x288 (= $x97 true)))
 (let (($x343 (= $x288 true)))
 (let (($x115 (= $x343 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x262 (= $x40 true)))
 (let (($x73 (= $x262 true)))
 (let (($x342 (= $x73 true)))
 (let (($x263 (= $x227 true)))
 (let (($x26 (= $x263 true)))
 (let (($x168 (= $x26 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x247)))
 (let ((?x239 (bvand symbol.1 (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x239)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x243 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x243)))
 (let (($x246 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x193 (and $x246 $x78)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x240 $x193)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x245 $x184)))
 (let (($x189 (not $x203)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x235 $x140)))
 (let (($x177 (and (not $x62) $x189)))
 (let (($x311 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x153 $x311)))
 (let (($x289 (not $x134)))
 (let (($x294 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x60 $x294)))
 (let (($x284 (and (not $x201) $x289)))
 (let (($x207 (and (and (and (and (and (and $x284 $x177) $x268) $x198) $x211) $x186) $x56)))
 (let (($x117 (and $x207 $x141)))
 (let (($x94 (= symbol.1 dst_symbol_addr.1)))
 (let (($x356 (and $x94 $x117)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x125) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x147 $x210)))))))
 (let (($x190 (and $x63 $x356)))
 (let (($x118 (= $x190 true)))
 (let (($x27 (= $x118 true)))
 (let (($x152 (= $x27 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x18 true)))
 (let (($x76 (= $x174 true)))
 (let (($x121 (= $x76 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x149)))
 (let (($x50 (= ?x139 input.dst.llvm-%n)))
 (let (($x90 (= $x50 true)))
 (let (($x43 (= $x90 true)))
 (let (($x74 (= ?x139 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x137 (and $x155 $x218)))
 (let (($x98 (and $x137 $x43)))
 (let (($x176 (and $x98 $x121)))
 (let (($x260 (and $x176 $x152)))
 (let (($x282 (and $x260 $x168)))
 (let (($x340 (and $x282 $x342)))
 (let (($x241 (and $x340 $x115)))
 (let (($x252 (and $x241 $x20)))
 (let (($x17 (and $x252 $x100)))
 (let (($x349 (and $x17 $x232)))
 (let (($x231 (and $x349 $x70)))
 (let (($x315 (and $x231 $x13)))
 (let (($x254 (and $x315 $x68)))
 (let (($x283 (and $x254 $x213)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x309 (and (not $x261) $x283)))
 (let (($x133 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and $x133 $x309)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x38 $x238)))
 (let (($x136 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x136 $x217)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x338 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x279 (=> (and $x227 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x148 (and $x279 $x61)))
 (let (($x12 (=> $x148 $x44)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (bvsle ?x273 (_ bv399 32))))
 (let (($x24 (= $x202 true)))
 (let (($x81 (= $x24 true)))
 (let (($x109 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1953X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1953X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1952X)))
 (= $x259 false)))
 ))
 (let (($x297 (and $x124 $x109)))
 (let (($x222 (= $x297 true)))
 (let (($x256 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let ((?x208 (bvadd symbol.1 (bvmul input.ind-%var1947X (_ bv4 32)))))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x208))))
 (let ((?x336 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv2 32))) ?x120)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv3 32))) ?x336)))
 (let ((?x92 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1947X)))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (=> $x54 (= ?x92 ?x181)))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1946X (_ BitVec 32)) )(let (($x32 (and (bvule (_ bv0 32) input.ind-%var1946X) (bvult input.ind-%var1946X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1946X)))
 (= $x54 $x32))))
 ))
 (let (($x339 (and $x159 $x256)))
 (let (($x205 (= $x339 true)))
 (let (($x301 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1941X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1940X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1940X)))
 (= $x259 false)))
 ))
 (let (($x131 (and $x15 $x301)))
 (let (($x151 (= $x131 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x204)))
 (let (($x36 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x36 true)))
 (let (($x231 (= $x70 true)))
 (let (($x91 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x305 (= $x91 true)))
 (let (($x232 (= $x305 true)))
 (let (($x349 (= $x232 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let (($x17 (= $x100 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x267 (bvsub ?x130 ?x215)))
 (let (($x251 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x267) (bvult ?x130 ?x267))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvmul (_ bv4 64) ?x200)))
 (let ((?x119 ((_ extract 63 32) ?x34)))
 (let (($x221 (= (_ bv0 32) ?x119)))
 (let (($x84 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x171 (and (and (and true $x84) $x221) $x251)))
 (let (($x322 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x29 (and $x322 $x171)))
 (let (($x300 (= true $x29)))
 (let (($x264 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (=> $x264 $x300)))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let (($x252 (= $x20 true)))
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x343 (= $x288 true)))
 (let (($x115 (= $x343 true)))
 (let (($x241 (= $x115 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x73 (= $x262 true)))
 (let (($x342 (= $x73 true)))
 (let (($x340 (= $x342 true)))
 (let (($x26 (= $x264 true)))
 (let (($x168 (= $x26 true)))
 (let (($x282 (= $x168 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x186)))
 (let ((?x169 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x169)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x240 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x246 (= input.memlabel-mem--symbol.1_end ?x240)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x243 (and $x146 $x246)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x198 $x243)))
 (let (($x298 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x245 $x184)))
 (let (($x189 (not $x203)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x140 $x62)))
 (let (($x255 (and (not $x161) $x189)))
 (let (($x311 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x153 $x311)))
 (let (($x289 (not $x134)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x294 $x201)))
 (let (($x235 (and (not $x145) $x289)))
 (let (($x117 (and (and (and (and (and (and $x235 $x255) $x268) $x298) $x78) $x211) $x82)))
 (let (($x356 (and $x117 $x293)))
 (let (($x138 (= symbol.1 dst_symbol_addr.1)))
 (let (($x190 (and $x138 $x356)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x106 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x106) (or $x22 $x9)))))))
 (let (($x118 (and $x60 $x190)))
 (let (($x27 (= $x118 true)))
 (let (($x152 (= $x27 true)))
 (let (($x260 (= $x152 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x18 true)))
 (let (($x76 (= $x174 true)))
 (let (($x121 (= $x76 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x149)))
 (let (($x50 (= ?x139 input.dst.llvm-%n)))
 (let (($x90 (= $x50 true)))
 (let (($x43 (= $x90 true)))
 (let (($x74 (= ?x139 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x137 (and $x155 $x218)))
 (let (($x98 (and $x137 $x43)))
 (let (($x176 (and $x98 $x121)))
 (let (($x263 (and $x176 $x260)))
 (let (($x40 (and $x263 $x282)))
 (let (($x97 (and $x40 $x340)))
 (let (($x83 (and $x97 $x241)))
 (let (($x341 (and $x83 $x252)))
 (let (($x162 (and $x341 $x17)))
 (let (($x354 (and $x162 $x349)))
 (let (($x99 (and $x354 $x231)))
 (let (($x351 (and $x99 $x151)))
 (let (($x129 (and $x351 $x205)))
 (let (($x219 (and $x129 $x222)))
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and (not $x328) $x219)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x23 $x72)))
 (let (($x271 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x337 (and $x271 $x66)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x326 (and $x71 $x337)))
 (let (($x196 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x196)))))
 (let (($x49 (=> (and $x264 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x196)))))
 (let (($x296 (and $x49 $x326)))
 (let (($x236 (=> $x296 $x81)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (bvsle ?x273 (_ bv399 32))))
 (let (($x24 (= $x202 true)))
 (let (($x81 (= $x24 true)))
 (let (($x109 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1953X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1953X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1952X)))
 (= $x259 false)))
 ))
 (let (($x297 (and $x124 $x109)))
 (let (($x222 (= $x297 true)))
 (let (($x256 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let ((?x208 (bvadd symbol.1 (bvmul input.ind-%var1947X (_ bv4 32)))))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x208))))
 (let ((?x336 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv2 32))) ?x120)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv3 32))) ?x336)))
 (let ((?x92 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1947X)))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (=> $x54 (= ?x92 ?x181)))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1946X (_ BitVec 32)) )(let (($x32 (and (bvule (_ bv0 32) input.ind-%var1946X) (bvult input.ind-%var1946X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1946X)))
 (= $x54 $x32))))
 ))
 (let (($x339 (and $x159 $x256)))
 (let (($x205 (= $x339 true)))
 (let (($x301 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (=> $x259 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1941X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1940X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1940X)))
 (= $x259 false)))
 ))
 (let (($x131 (and $x15 $x301)))
 (let (($x151 (= $x131 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x204)))
 (let (($x36 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x36 true)))
 (let (($x231 (= $x70 true)))
 (let (($x91 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x305 (= $x91 true)))
 (let (($x232 (= $x305 true)))
 (let (($x349 (= $x232 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x77 (= $x51 true)))
 (let (($x100 (= $x77 true)))
 (let (($x17 (= $x100 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x267 (bvsub ?x130 ?x215)))
 (let (($x251 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x267) (bvult ?x130 ?x267))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvmul (_ bv4 64) ?x200)))
 (let ((?x119 ((_ extract 63 32) ?x34)))
 (let (($x221 (= (_ bv0 32) ?x119)))
 (let (($x84 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x171 (and (and (and true $x84) $x221) $x251)))
 (let (($x322 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x29 (and $x322 $x171)))
 (let (($x300 (= true $x29)))
 (let (($x264 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (=> $x264 $x300)))
 (let (($x41 (= $x170 true)))
 (let (($x20 (= $x41 true)))
 (let (($x252 (= $x20 true)))
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x343 (= $x288 true)))
 (let (($x115 (= $x343 true)))
 (let (($x241 (= $x115 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x73 (= $x262 true)))
 (let (($x342 (= $x73 true)))
 (let (($x340 (= $x342 true)))
 (let (($x26 (= $x264 true)))
 (let (($x168 (= $x26 true)))
 (let (($x282 (= $x168 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x186)))
 (let ((?x169 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x169)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x240 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x246 (= input.memlabel-mem--symbol.1_end ?x240)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x243 (and $x146 $x246)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x198 $x243)))
 (let (($x298 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x245 $x184)))
 (let (($x189 (not $x203)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x140 $x62)))
 (let (($x255 (and (not $x161) $x189)))
 (let (($x311 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x153 $x311)))
 (let (($x289 (not $x134)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x294 $x201)))
 (let (($x235 (and (not $x145) $x289)))
 (let (($x117 (and (and (and (and (and (and $x235 $x255) $x268) $x298) $x78) $x211) $x82)))
 (let (($x356 (and $x117 $x293)))
 (let (($x138 (= symbol.1 dst_symbol_addr.1)))
 (let (($x190 (and $x138 $x356)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x106 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x106) (or $x22 $x9)))))))
 (let (($x118 (and $x60 $x190)))
 (let (($x27 (= $x118 true)))
 (let (($x152 (= $x27 true)))
 (let (($x260 (= $x152 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x18 true)))
 (let (($x76 (= $x174 true)))
 (let (($x121 (= $x76 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x149)))
 (let (($x50 (= ?x139 input.dst.llvm-%n)))
 (let (($x90 (= $x50 true)))
 (let (($x43 (= $x90 true)))
 (let (($x74 (= ?x139 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x137 (and $x155 $x218)))
 (let (($x98 (and $x137 $x43)))
 (let (($x176 (and $x98 $x121)))
 (let (($x263 (and $x176 $x260)))
 (let (($x40 (and $x263 $x282)))
 (let (($x97 (and $x40 $x340)))
 (let (($x83 (and $x97 $x241)))
 (let (($x341 (and $x83 $x252)))
 (let (($x162 (and $x341 $x17)))
 (let (($x354 (and $x162 $x349)))
 (let (($x99 (and $x354 $x231)))
 (let (($x351 (and $x99 $x151)))
 (let (($x129 (and $x351 $x205)))
 (let (($x219 (and $x129 $x222)))
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and (not $x328) $x219)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x23 $x72)))
 (let (($x271 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x337 (and $x271 $x66)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x326 (and $x71 $x337)))
 (let (($x196 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x196)))))
 (let (($x49 (=> (and $x264 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x196)))))
 (let (($x296 (and $x49 $x326)))
 (let (($x236 (=> $x296 $x81)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x156 (bvule ?x68 input.dst.llvm-%n)))
 (let (($x355 (= $x156 true)))
 (let (($x350 (= $x355 true)))
 (let (($x199 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1970X)))
 (= $x87 false)))
 ))
 (let (($x286 (and $x238 $x199)))
 (let (($x195 (= $x286 true)))
 (let (($x309 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x290 (bvadd symbol.1 (bvmul input.ind-%var1965X (_ bv4 32)))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x329)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x175)))
 (let ((?x124 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1965X)))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1965X)))
 (=> $x327 (= ?x124 ?x361)))))))))
 ))
 (let (($x256 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1964X) (bvult input.ind-%var1964X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1964X)))
 (= $x327 $x280))))
 ))
 (let (($x12 (and $x256 $x309)))
 (let (($x80 (= $x12 true)))
 (let (($x86 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1959X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x87 false)))
 ))
 (let (($x352 (and $x131 $x86)))
 (let (($x208 (= $x352 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x149)))
 (let (($x70 (= ?x139 input.dst.llvm-%n)))
 (let (($x231 (= $x70 true)))
 (let (($x99 (= $x231 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x232)))
 (let (($x354 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x354 true)))
 (let (($x108 (= $x204 true)))
 (let (($x100 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x100 true)))
 (let (($x162 (= $x17 true)))
 (let (($x91 (= $x162 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x20 true)))
 (let (($x341 (= $x252 true)))
 (let (($x51 (= $x341 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x200 (bvsub ?x130 ?x215)))
 (let (($x163 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x200) (bvult ?x130 ?x200))))
 (let ((?x312 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvmul (_ bv4 64) ?x312)))
 (let ((?x324 ((_ extract 63 32) ?x84)))
 (let (($x47 (= (_ bv0 32) ?x324)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x154 (and (and (and true $x258) $x47) $x163)))
 (let (($x83 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x96 (and $x83 $x154)))
 (let (($x251 (= true $x96)))
 (let (($x213 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (=> $x213 $x251)))
 (let (($x29 (= $x171 true)))
 (let (($x300 (= $x29 true)))
 (let (($x170 (= $x300 true)))
 (let (($x342 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x340 (= $x342 true)))
 (let (($x97 (= $x340 true)))
 (let (($x288 (= $x97 true)))
 (let (($x168 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x168 true)))
 (let (($x40 (= $x282 true)))
 (let (($x262 (= $x40 true)))
 (let (($x152 (= $x213 true)))
 (let (($x260 (= $x152 true)))
 (let (($x263 (= $x260 true)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x243)))
 (let ((?x240 (bvand symbol.1 (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x240)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x56 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x248 (= input.memlabel-mem--symbol.1_end ?x56)))
 (let (($x268 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (and $x268 $x248)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x239 $x298)))
 (let (($x255 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x140 $x62)))
 (let (($x177 (not $x161)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x134 $x289)))
 (let (($x184 (and (not $x235) $x177)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x294 $x201)))
 (let (($x284 (not $x145)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x60 $x144)))
 (let (($x311 (and (not $x138) $x284)))
 (let (($x82 (and (and (and (and (and (and $x311 $x184) $x203) $x255) $x207) $x146) $x246)))
 (let (($x117 (and $x82 $x78)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x186 (and $x121 $x117)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x179 $x22)))))))
 (let (($x293 (and $x157 $x186)))
 (let (($x356 (= $x293 true)))
 (let (($x190 (= $x356 true)))
 (let (($x118 (= $x190 true)))
 (let (($x50 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x90 (= $x50 true)))
 (let (($x43 (= $x90 true)))
 (let (($x98 (= $x43 true)))
 (let (($x74 (= ?x139 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x137 (and $x155 $x218)))
 (let (($x18 (and $x137 $x98)))
 (let (($x27 (and $x18 $x118)))
 (let (($x26 (and $x27 $x263)))
 (let (($x73 (and $x26 $x262)))
 (let (($x343 (and $x73 $x288)))
 (let (($x41 (and $x343 $x170)))
 (let (($x77 (and $x41 $x51)))
 (let (($x305 (and $x77 $x91)))
 (let (($x36 (and $x305 $x108)))
 (let (($x6 (and $x36 $x99)))
 (let (($x323 (and $x6 $x208)))
 (let (($x194 (and $x323 $x80)))
 (let (($x224 (and $x194 $x195)))
 (let (($x275 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x307 (and (not $x275) $x224)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x315 (and $x261 $x307)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x5 $x315)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x107 $x278)))
 (let (($x279 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x279)))))
 (let (($x128 (=> (and $x213 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x279)))))
 (let (($x303 (and $x128 $x123)))
 (let (($x85 (=> $x303 $x350)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x156 (bvule ?x68 input.dst.llvm-%n)))
 (let (($x355 (= $x156 true)))
 (let (($x350 (= $x355 true)))
 (let (($x199 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1970X)))
 (= $x87 false)))
 ))
 (let (($x286 (and $x238 $x199)))
 (let (($x195 (= $x286 true)))
 (let (($x309 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x290 (bvadd symbol.1 (bvmul input.ind-%var1965X (_ bv4 32)))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x329)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x175)))
 (let ((?x124 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1965X)))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1965X)))
 (=> $x327 (= ?x124 ?x361)))))))))
 ))
 (let (($x256 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1964X) (bvult input.ind-%var1964X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1964X)))
 (= $x327 $x280))))
 ))
 (let (($x12 (and $x256 $x309)))
 (let (($x80 (= $x12 true)))
 (let (($x86 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1959X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x87 false)))
 ))
 (let (($x352 (and $x131 $x86)))
 (let (($x208 (= $x352 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x149)))
 (let (($x70 (= ?x139 input.dst.llvm-%n)))
 (let (($x231 (= $x70 true)))
 (let (($x99 (= $x231 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x232)))
 (let (($x354 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x354 true)))
 (let (($x108 (= $x204 true)))
 (let (($x100 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x100 true)))
 (let (($x162 (= $x17 true)))
 (let (($x91 (= $x162 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x20 true)))
 (let (($x341 (= $x252 true)))
 (let (($x51 (= $x341 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x200 (bvsub ?x130 ?x215)))
 (let (($x163 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x200) (bvult ?x130 ?x200))))
 (let ((?x312 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvmul (_ bv4 64) ?x312)))
 (let ((?x324 ((_ extract 63 32) ?x84)))
 (let (($x47 (= (_ bv0 32) ?x324)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x154 (and (and (and true $x258) $x47) $x163)))
 (let (($x83 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x96 (and $x83 $x154)))
 (let (($x251 (= true $x96)))
 (let (($x213 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (=> $x213 $x251)))
 (let (($x29 (= $x171 true)))
 (let (($x300 (= $x29 true)))
 (let (($x170 (= $x300 true)))
 (let (($x342 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x340 (= $x342 true)))
 (let (($x97 (= $x340 true)))
 (let (($x288 (= $x97 true)))
 (let (($x168 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x168 true)))
 (let (($x40 (= $x282 true)))
 (let (($x262 (= $x40 true)))
 (let (($x152 (= $x213 true)))
 (let (($x260 (= $x152 true)))
 (let (($x263 (= $x260 true)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x243)))
 (let ((?x240 (bvand symbol.1 (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x240)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x56 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x248 (= input.memlabel-mem--symbol.1_end ?x56)))
 (let (($x268 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (and $x268 $x248)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x239 $x298)))
 (let (($x255 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x140 $x62)))
 (let (($x177 (not $x161)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x134 $x289)))
 (let (($x184 (and (not $x235) $x177)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x294 $x201)))
 (let (($x284 (not $x145)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x60 $x144)))
 (let (($x311 (and (not $x138) $x284)))
 (let (($x82 (and (and (and (and (and (and $x311 $x184) $x203) $x255) $x207) $x146) $x246)))
 (let (($x117 (and $x82 $x78)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x186 (and $x121 $x117)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x179 $x22)))))))
 (let (($x293 (and $x157 $x186)))
 (let (($x356 (= $x293 true)))
 (let (($x190 (= $x356 true)))
 (let (($x118 (= $x190 true)))
 (let (($x50 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x90 (= $x50 true)))
 (let (($x43 (= $x90 true)))
 (let (($x98 (= $x43 true)))
 (let (($x74 (= ?x139 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x7 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x37 (= $x16 true)))
 (let (($x155 (and $x37 $x52)))
 (let (($x137 (and $x155 $x218)))
 (let (($x18 (and $x137 $x98)))
 (let (($x27 (and $x18 $x118)))
 (let (($x26 (and $x27 $x263)))
 (let (($x73 (and $x26 $x262)))
 (let (($x343 (and $x73 $x288)))
 (let (($x41 (and $x343 $x170)))
 (let (($x77 (and $x41 $x51)))
 (let (($x305 (and $x77 $x91)))
 (let (($x36 (and $x305 $x108)))
 (let (($x6 (and $x36 $x99)))
 (let (($x323 (and $x6 $x208)))
 (let (($x194 (and $x323 $x80)))
 (let (($x224 (and $x194 $x195)))
 (let (($x275 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x307 (and (not $x275) $x224)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x315 (and $x261 $x307)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x5 $x315)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x107 $x278)))
 (let (($x279 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x279)))))
 (let (($x128 (=> (and $x213 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x279)))))
 (let (($x303 (and $x128 $x123)))
 (let (($x85 (=> $x303 $x350)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let ((?x109 (bvadd symbol.1 (bvmul input.ind-%var1997X (_ bv4 32)))))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x279 (bvadd ?x130 (_ bv3 32))))
 (let ((?x48 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x230 (store ?x48 (bvadd ?x130 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x332 (store ?x230 (bvadd ?x130 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x291 (store ?x332 ?x279 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x173 (concat (select ?x291 (bvadd ?x109 (_ bv2 32))) (concat (select ?x291 (bvadd ?x109 (_ bv1 32))) (select ?x291 ?x109)))))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1997X)))
 (let (($x242 (= input.ind-%var1997X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x306 (= (ite $x242 input.spec-%var-i-0.L3%6%bbentry ?x238) (concat (select ?x291 (bvadd ?x109 (_ bv3 32))) ?x173))))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1997X)))
 (let (($x216 (or $x187 $x242)))
 (=> $x216 $x306))))))))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var1996X)))
 (let (($x265 (and $x361 (bvult input.ind-%var1996X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x242 (= input.ind-%var1996X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (let (($x216 (or $x187 $x242)))
 (= $x216 $x265)))))))
 ))
 (let (($x53 (and $x266 $x185)))
 (let (($x205 (= true true)))
 (let (($x299 (and $x205 $x53)))
 (let (($x165 (= $x299 true)))
 (let (($x32 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1989X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x212 false)))
 ))
 (let (($x269 (and $x66 $x32)))
 (let (($x225 (= $x269 true)))
 (let (($x72 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let ((?x109 (bvadd symbol.1 (bvmul input.ind-%var1983X (_ bv4 32)))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x109))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv2 32))) ?x54)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv3 32))) ?x292)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1983X)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (=> $x187 (= ?x238 ?x259)))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var1982X)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1982X)))
 (= $x187 (and $x361 (bvult input.ind-%var1982X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x236 (and $x309 $x72)))
 (let (($x313 (= $x236 true)))
 (let (($x297 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x212 false)))
 ))
 (let (($x281 (and $x352 $x297)))
 (let (($x290 (= $x281 true)))
 (let ((?x36 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x36)))
 (let (($x231 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x231 true)))
 (let (($x6 (= $x99 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x20)))
 (let ((?x170 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x170)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x154 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x154)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (and $x163 $x96)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x221 $x251)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x158 $x312)))
 (let (($x324 (not $x84)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x330 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x182 (and $x330 $x258)))
 (let (($x267 (and (not $x182) $x324)))
 (let (($x241 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x115 $x241)))
 (let (($x226 (not $x83)))
 (let (($x288 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x343 (and $x97 $x288)))
 (let (($x322 (and (not $x343) $x226)))
 (let (($x162 (and (and (and (and (and (and $x322 $x267) $x34) $x119) $x171) $x300) $x41)))
 (let (($x91 (and $x162 $x252)))
 (let (($x117 (= symbol.1 dst_symbol_addr.1)))
 (let (($x305 (and $x117 $x91)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x356 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x356)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x356) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x340 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x26 $x168)))))))
 (let (($x232 (and $x340 $x305)))
 (let (($x349 (= $x232 true)))
 (let (($x354 (= $x349 true)))
 (let (($x204 (= $x354 true)))
 (let (($x146 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x169 (= $x146 true)))
 (let (($x240 (= $x169 true)))
 (let (($x246 (= $x240 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x248 true)))
 (let (($x207 (= $x298 true)))
 (let (($x141 (= $x207 true)))
 (let (($x255 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x255 true)))
 (let (($x239 (= $x211 true)))
 (let (($x268 (= $x239 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x284 (bvsub ?x130 ?x215)))
 (let (($x235 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x284) (bvult ?x130 ?x284))))
 (let ((?x153 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x294 (bvmul (_ bv4 64) ?x153)))
 (let ((?x201 ((_ extract 63 32) ?x294)))
 (let (($x145 (= (_ bv0 32) ?x201)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x62 (and (and (and true $x144) $x145) $x235)))
 (let (($x88 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x161 (and $x88 $x62)))
 (let (($x177 (= true $x161)))
 (let (($x222 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (=> $x222 $x177)))
 (let (($x247 (= $x184 true)))
 (let (($x203 (= $x247 true)))
 (let (($x193 (= $x203 true)))
 (let (($x106 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x179 (= $x106 true)))
 (let (($x147 (= $x179 true)))
 (let (($x22 (= $x147 true)))
 (let (($x33 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x94 (= $x33 true)))
 (let (($x180 (= $x94 true)))
 (let (($x135 (= $x180 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x18 (= $x98 true)))
 (let (($x176 (= $x18 true)))
 (let (($x125 (= $x176 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x137 (= $x218 true)))
 (let (($x50 (= $x137 true)))
 (let (($x90 (= $x50 true)))
 (let (($x59 (= $x222 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x166)))
 (let (($x183 (= ?x112 input.dst.llvm-%n)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x7 (= $x37 true)))
 (let (($x155 (and $x7 $x52)))
 (let (($x74 (and $x155 $x139)))
 (let (($x43 (and $x74 $x90)))
 (let (($x63 (and $x43 $x125)))
 (let (($x126 (and $x63 $x135)))
 (let (($x210 (and $x126 $x22)))
 (let (($x189 (and $x210 $x193)))
 (let (($x56 (and $x189 $x268)))
 (let (($x198 (and $x56 $x141)))
 (let (($x82 (and $x198 $x246)))
 (let (($x108 (and $x82 $x204)))
 (let (($x15 (and $x108 $x6)))
 (let (($x89 (and $x15 $x290)))
 (let (($x202 (and $x89 $x313)))
 (let (($x223 (and $x202 $x225)))
 (let (($x325 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and (not $x325) $x223)))
 (let (($x328 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x351 (and $x328 $x120)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x133 $x351)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x38 $x31)))
 (let (($x49 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x107 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x49)))))
 (let (($x105 (=> (and $x222 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x49)))))
 (let (($x61 (and $x105 $x10)))
 (let (($x358 (=> $x61 $x165)))
 (not $x358)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let ((?x109 (bvadd symbol.1 (bvmul input.ind-%var1997X (_ bv4 32)))))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x279 (bvadd ?x130 (_ bv3 32))))
 (let ((?x48 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x230 (store ?x48 (bvadd ?x130 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x332 (store ?x230 (bvadd ?x130 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x291 (store ?x332 ?x279 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x173 (concat (select ?x291 (bvadd ?x109 (_ bv2 32))) (concat (select ?x291 (bvadd ?x109 (_ bv1 32))) (select ?x291 ?x109)))))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1997X)))
 (let (($x242 (= input.ind-%var1997X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x306 (= (ite $x242 input.spec-%var-i-0.L3%6%bbentry ?x238) (concat (select ?x291 (bvadd ?x109 (_ bv3 32))) ?x173))))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1997X)))
 (let (($x216 (or $x187 $x242)))
 (=> $x216 $x306))))))))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var1996X)))
 (let (($x265 (and $x361 (bvult input.ind-%var1996X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x242 (= input.ind-%var1996X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (let (($x216 (or $x187 $x242)))
 (= $x216 $x265)))))))
 ))
 (let (($x53 (and $x266 $x185)))
 (let (($x205 (= true true)))
 (let (($x299 (and $x205 $x53)))
 (let (($x165 (= $x299 true)))
 (let (($x32 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1989X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x212 false)))
 ))
 (let (($x269 (and $x66 $x32)))
 (let (($x225 (= $x269 true)))
 (let (($x72 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let ((?x109 (bvadd symbol.1 (bvmul input.ind-%var1983X (_ bv4 32)))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x109))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv2 32))) ?x54)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv3 32))) ?x292)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1983X)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (=> $x187 (= ?x238 ?x259)))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var1982X)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1982X)))
 (= $x187 (and $x361 (bvult input.ind-%var1982X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x236 (and $x309 $x72)))
 (let (($x313 (= $x236 true)))
 (let (($x297 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x212 false)))
 ))
 (let (($x281 (and $x352 $x297)))
 (let (($x290 (= $x281 true)))
 (let ((?x36 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x36)))
 (let (($x231 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x231 true)))
 (let (($x6 (= $x99 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x20)))
 (let ((?x170 (bvand symbol.1 (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x170)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x154 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x154)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (and $x163 $x96)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x221 $x251)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x158 $x312)))
 (let (($x324 (not $x84)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x330 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x182 (and $x330 $x258)))
 (let (($x267 (and (not $x182) $x324)))
 (let (($x241 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x115 $x241)))
 (let (($x226 (not $x83)))
 (let (($x288 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x343 (and $x97 $x288)))
 (let (($x322 (and (not $x343) $x226)))
 (let (($x162 (and (and (and (and (and (and $x322 $x267) $x34) $x119) $x171) $x300) $x41)))
 (let (($x91 (and $x162 $x252)))
 (let (($x117 (= symbol.1 dst_symbol_addr.1)))
 (let (($x305 (and $x117 $x91)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x356 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x356)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x356) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x340 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x26 $x168)))))))
 (let (($x232 (and $x340 $x305)))
 (let (($x349 (= $x232 true)))
 (let (($x354 (= $x349 true)))
 (let (($x204 (= $x354 true)))
 (let (($x146 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x169 (= $x146 true)))
 (let (($x240 (= $x169 true)))
 (let (($x246 (= $x240 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x248 true)))
 (let (($x207 (= $x298 true)))
 (let (($x141 (= $x207 true)))
 (let (($x255 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x255 true)))
 (let (($x239 (= $x211 true)))
 (let (($x268 (= $x239 true)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x284 (bvsub ?x130 ?x215)))
 (let (($x235 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x284) (bvult ?x130 ?x284))))
 (let ((?x153 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x294 (bvmul (_ bv4 64) ?x153)))
 (let ((?x201 ((_ extract 63 32) ?x294)))
 (let (($x145 (= (_ bv0 32) ?x201)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x62 (and (and (and true $x144) $x145) $x235)))
 (let (($x88 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x161 (and $x88 $x62)))
 (let (($x177 (= true $x161)))
 (let (($x222 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (=> $x222 $x177)))
 (let (($x247 (= $x184 true)))
 (let (($x203 (= $x247 true)))
 (let (($x193 (= $x203 true)))
 (let (($x106 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x179 (= $x106 true)))
 (let (($x147 (= $x179 true)))
 (let (($x22 (= $x147 true)))
 (let (($x33 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x94 (= $x33 true)))
 (let (($x180 (= $x94 true)))
 (let (($x135 (= $x180 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x18 (= $x98 true)))
 (let (($x176 (= $x18 true)))
 (let (($x125 (= $x176 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x137 (= $x218 true)))
 (let (($x50 (= $x137 true)))
 (let (($x90 (= $x50 true)))
 (let (($x59 (= $x222 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x166)))
 (let (($x183 (= ?x112 input.dst.llvm-%n)))
 (let (($x104 (= $x183 true)))
 (let (($x52 (= $x104 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x7 (= $x37 true)))
 (let (($x155 (and $x7 $x52)))
 (let (($x74 (and $x155 $x139)))
 (let (($x43 (and $x74 $x90)))
 (let (($x63 (and $x43 $x125)))
 (let (($x126 (and $x63 $x135)))
 (let (($x210 (and $x126 $x22)))
 (let (($x189 (and $x210 $x193)))
 (let (($x56 (and $x189 $x268)))
 (let (($x198 (and $x56 $x141)))
 (let (($x82 (and $x198 $x246)))
 (let (($x108 (and $x82 $x204)))
 (let (($x15 (and $x108 $x6)))
 (let (($x89 (and $x15 $x290)))
 (let (($x202 (and $x89 $x313)))
 (let (($x223 (and $x202 $x225)))
 (let (($x325 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and (not $x325) $x223)))
 (let (($x328 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x351 (and $x328 $x120)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x133 $x351)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x38 $x31)))
 (let (($x49 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x107 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x49)))))
 (let (($x105 (=> (and $x222 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x49)))))
 (let (($x61 (and $x105 $x10)))
 (let (($x358 (=> $x61 $x165)))
 (not $x358)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (not $x199)))
 (let (($x195 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (=> $x195 $x159)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x147 (bvsub ?x130 ?x215)))
 (let (($x8 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x147) (bvult ?x130 ?x147))))
 (let ((?x135 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvmul (_ bv4 64) ?x135)))
 (let ((?x106 ((_ extract 63 32) ?x126)))
 (let (($x179 (= (_ bv0 32) ?x106)))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x157 (and (and (and true $x94) $x179) $x8)))
 (let (($x18 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x121 (and $x18 $x157)))
 (let (($x60 (= true $x121)))
 (let (($x144 (=> $x195 $x60)))
 (let (($x296 (=> (and $x144 $x195) $x159)))
 (let (($x208 (= $x296 true)))
 (let (($x327 (= $x208 true)))
 (let (($x299 (forall ((input.ind-%var2015X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2015X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2015X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2014X)))
 (= $x15 false)))
 ))
 (let (($x165 (and $x173 $x299)))
 (let (($x358 (= $x165 true)))
 (let (($x111 (forall ((input.ind-%var2009X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var2009X (_ bv4 32)))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x220)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x274)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2009X)))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2009X)))
 (=> $x110 (= ?x219 ?x317)))))))))
 ))
 (let (($x54 (forall ((input.ind-%var2008X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var2008X) (bvult input.ind-%var2008X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2008X)))
 (= $x110 $x151))))
 ))
 (let (($x291 (and $x54 $x111)))
 (let (($x122 (= $x291 true)))
 (let (($x175 (forall ((input.ind-%var2003X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2003X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2003X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2002X)))
 (= $x15 false)))
 ))
 (let (($x45 (and $x352 $x175)))
 (let (($x283 (= $x45 true)))
 (let ((?x252 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x252)))
 (let (($x204 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x204 true)))
 (let (($x36 (= $x108 true)))
 (let (($x305 (= ?x91 input.dst.llvm-%n)))
 (let (($x232 (= $x305 true)))
 (let (($x349 (= $x232 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x300)))
 (let (($x170 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x170 true)))
 (let (($x162 (= $x41 true)))
 (let ((?x324 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x324)))
 (let ((?x312 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x312)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x322 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x330 (= input.memlabel-mem--symbol.1_end ?x322)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x258 (and $x226 $x330)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x83 $x258)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x340 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x117 (and $x340 $x78)))
 (let (($x97 (not $x117)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x40 $x262)))
 (let (($x343 (and (not $x73) $x97)))
 (let (($x260 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x152 $x260)))
 (let (($x263 (not $x26)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x190 $x118)))
 (let (($x282 (and (not $x27) $x263)))
 (let (($x77 (and (and (and (and (and (and $x282 $x343) $x178) $x241) $x182) $x158) $x84)))
 (let (($x221 (and $x77 $x267)))
 (let (($x211 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x211 $x221)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x207 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x356 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x207) (or $x169 $x240)))))))
 (let (($x154 (and $x356 $x163)))
 (let (($x96 (= $x154 true)))
 (let (($x251 (= $x96 true)))
 (let (($x171 (= $x251 true)))
 (let (($x177 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x177 true)))
 (let (($x247 (= $x184 true)))
 (let (($x203 (= $x247 true)))
 (let (($x134 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x134 true)))
 (let (($x235 (= $x289 true)))
 (let (($x62 (= $x235 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x201 true)))
 (let (($x140 (= $x145 true)))
 (let (($x311 (= $x140 true)))
 (let (($x245 (= $x144 true)))
 (let (($x138 (= $x245 true)))
 (let (($x153 (= $x138 true)))
 (let (($x64 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x64 true)))
 (let (($x137 (= $x218 true)))
 (let (($x50 (= $x137 true)))
 (let (($x155 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x52 (and $x16 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x90 (and $x74 $x50)))
 (let (($x294 (and $x90 $x153)))
 (let (($x284 (and $x294 $x311)))
 (let (($x161 (and $x284 $x62)))
 (let (($x193 (and $x161 $x203)))
 (let (($x100 (and $x193 $x171)))
 (let (($x20 (and $x100 $x162)))
 (let (($x354 (and $x20 $x349)))
 (let (($x70 (and $x354 $x36)))
 (let (($x309 (and $x70 $x283)))
 (let (($x132 (and $x309 $x122)))
 (let (($x310 (and $x132 $x358)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x275 $x310)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x23 $x65)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x243 (and $x271 $x19)))
 (let (($x128 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x38 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x128)))))
 (let (($x14 (=> (and $x195 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x128)))))
 (let (($x254 (and $x14 $x243)))
 (let (($x12 (=> $x254 $x327)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (not $x199)))
 (let (($x195 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (=> $x195 $x159)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let ((?x147 (bvsub ?x130 ?x215)))
 (let (($x8 (ite (bvsge ?x215 (_ bv0 32)) (bvuge ?x130 ?x147) (bvult ?x130 ?x147))))
 (let ((?x135 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvmul (_ bv4 64) ?x135)))
 (let ((?x106 ((_ extract 63 32) ?x126)))
 (let (($x179 (= (_ bv0 32) ?x106)))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x157 (and (and (and true $x94) $x179) $x8)))
 (let (($x18 (= (bvand ?x130 (_ bv4294967292 32)) ?x130)))
 (let (($x121 (and $x18 $x157)))
 (let (($x60 (= true $x121)))
 (let (($x144 (=> $x195 $x60)))
 (let (($x296 (=> (and $x144 $x195) $x159)))
 (let (($x208 (= $x296 true)))
 (let (($x327 (= $x208 true)))
 (let (($x299 (forall ((input.ind-%var2015X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2015X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2015X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2014X)))
 (= $x15 false)))
 ))
 (let (($x165 (and $x173 $x299)))
 (let (($x358 (= $x165 true)))
 (let (($x111 (forall ((input.ind-%var2009X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var2009X (_ bv4 32)))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x220)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x274)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2009X)))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2009X)))
 (=> $x110 (= ?x219 ?x317)))))))))
 ))
 (let (($x54 (forall ((input.ind-%var2008X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var2008X) (bvult input.ind-%var2008X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2008X)))
 (= $x110 $x151))))
 ))
 (let (($x291 (and $x54 $x111)))
 (let (($x122 (= $x291 true)))
 (let (($x175 (forall ((input.ind-%var2003X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2003X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2003X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2002X)))
 (= $x15 false)))
 ))
 (let (($x45 (and $x352 $x175)))
 (let (($x283 (= $x45 true)))
 (let ((?x252 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x252)))
 (let (($x204 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x204 true)))
 (let (($x36 (= $x108 true)))
 (let (($x305 (= ?x91 input.dst.llvm-%n)))
 (let (($x232 (= $x305 true)))
 (let (($x349 (= $x232 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x300)))
 (let (($x170 (= ?x17 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x170 true)))
 (let (($x162 (= $x41 true)))
 (let ((?x324 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x324)))
 (let ((?x312 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x312)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x322 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x330 (= input.memlabel-mem--symbol.1_end ?x322)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x258 (and $x226 $x330)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x83 $x258)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x340 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x117 (and $x340 $x78)))
 (let (($x97 (not $x117)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x40 $x262)))
 (let (($x343 (and (not $x73) $x97)))
 (let (($x260 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x152 $x260)))
 (let (($x263 (not $x26)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x190 $x118)))
 (let (($x282 (and (not $x27) $x263)))
 (let (($x77 (and (and (and (and (and (and $x282 $x343) $x178) $x241) $x182) $x158) $x84)))
 (let (($x221 (and $x77 $x267)))
 (let (($x211 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x211 $x221)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x207 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x356 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x207) (or $x169 $x240)))))))
 (let (($x154 (and $x356 $x163)))
 (let (($x96 (= $x154 true)))
 (let (($x251 (= $x96 true)))
 (let (($x171 (= $x251 true)))
 (let (($x177 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x177 true)))
 (let (($x247 (= $x184 true)))
 (let (($x203 (= $x247 true)))
 (let (($x134 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x134 true)))
 (let (($x235 (= $x289 true)))
 (let (($x62 (= $x235 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x201 true)))
 (let (($x140 (= $x145 true)))
 (let (($x311 (= $x140 true)))
 (let (($x245 (= $x144 true)))
 (let (($x138 (= $x245 true)))
 (let (($x153 (= $x138 true)))
 (let (($x64 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x64 true)))
 (let (($x137 (= $x218 true)))
 (let (($x50 (= $x137 true)))
 (let (($x155 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x139 (= $x149 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x7 (= $x37 true)))
 (let (($x183 (= $x7 true)))
 (let (($x104 (= $x183 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x166 (= $x114 true)))
 (let (($x112 (= $x166 true)))
 (let (($x16 (= $x112 true)))
 (let (($x52 (and $x16 $x104)))
 (let (($x74 (and $x52 $x139)))
 (let (($x90 (and $x74 $x50)))
 (let (($x294 (and $x90 $x153)))
 (let (($x284 (and $x294 $x311)))
 (let (($x161 (and $x284 $x62)))
 (let (($x193 (and $x161 $x203)))
 (let (($x100 (and $x193 $x171)))
 (let (($x20 (and $x100 $x162)))
 (let (($x354 (and $x20 $x349)))
 (let (($x70 (and $x354 $x36)))
 (let (($x309 (and $x70 $x283)))
 (let (($x132 (and $x309 $x122)))
 (let (($x310 (and $x132 $x358)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x275 $x310)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x23 $x65)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x243 (and $x271 $x19)))
 (let (($x128 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x38 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x128)))))
 (let (($x14 (=> (and $x195 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x128)))))
 (let (($x254 (and $x14 $x243)))
 (let (($x12 (=> $x254 $x327)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (not $x313)))
 (let (($x32 (=> $x217 $x225)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and true $x37)))
 (let (($x183 (= true $x7)))
 (let (($x104 (=> $x217 $x183)))
 (let (($x223 (=> (and $x104 $x217) $x225)))
 (let (($x10 (= $x223 true)))
 (let (($x242 (= $x10 true)))
 (let (($x99 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2033X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2033X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (= $x252 false)))
 ))
 (let (($x202 (and $x292 $x99)))
 (let (($x66 (= $x202 true)))
 (let (($x189 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x19 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x19))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv2 32))) ?x159)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv3 32))) ?x208)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x309 (= ?x285 ?x194)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x309 $x236))))
 ))
 (let (($x109 (and $x265 $x189)))
 (let (($x72 (= $x109 true)))
 (let (($x297 (forall ((input.ind-%var2021X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2021X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2021X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var2020X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2020X)))
 (= $x252 false)))
 ))
 (let (($x187 (and $x349 $x297)))
 (let (($x361 (= $x187 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x163)))
 (let (($x29 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (= $x29 true)))
 (let (($x17 (= $x300 true)))
 (let (($x96 (= ?x154 input.dst.llvm-%n)))
 (let (($x251 (= $x96 true)))
 (let (($x171 (= $x251 true)))
 (let ((?x312 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x312)))
 (let (($x77 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x77 true)))
 (let (($x267 (= $x324 true)))
 (let ((?x341 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x341)))
 (let ((?x97 (bvand symbol.1 (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x97)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x262 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x73 (= input.memlabel-mem--symbol.1_end ?x262)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x288 (and $x40 $x73)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x340 (and $x282 $x288)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x211 $x190)))
 (let (($x27 (not $x118)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x255 (and $x293 $x356)))
 (let (($x152 (and (not $x255) $x27)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x169 $x146)))
 (let (($x246 (not $x240)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x207 $x141)))
 (let (($x186 (and (not $x198) $x246)))
 (let (($x226 (and (and (and (and (and (and $x186 $x152) $x260) $x263) $x340) $x117) $x343)))
 (let (($x322 (and $x226 $x178)))
 (let (($x311 (= symbol.1 dst_symbol_addr.1)))
 (let (($x330 (and $x311 $x322)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x289 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x289)))
 (let (($x161 (or (bvugt input.memlabel-mem--symbol.1_begin ?x289) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x298 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x161) (or $x203 $x193)))))))
 (let (($x258 (and $x298 $x330)))
 (let (($x182 (= $x258 true)))
 (let (($x200 (= $x182 true)))
 (let (($x47 (= $x200 true)))
 (let (($x245 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x245 true)))
 (let (($x153 (= $x138 true)))
 (let (($x294 (= $x153 true)))
 (let (($x8 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x8 true)))
 (let (($x121 (= $x157 true)))
 (let (($x60 (= $x121 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x76 true)))
 (let (($x147 (= $x22 true)))
 (let (($x210 (= $x147 true)))
 (let (($x180 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x135 (= $x180 true)))
 (let (($x126 (= $x135 true)))
 (let (($x106 (= $x126 true)))
 (let (($x176 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x63 (= $x176 true)))
 (let (($x33 (= $x63 true)))
 (let (($x94 (= $x33 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x43 (= $x90 true)))
 (let (($x98 (= $x43 true)))
 (let (($x18 (= $x98 true)))
 (let (($x74 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x137 (= $x218 true)))
 (let (($x52 (= $x104 true)))
 (let (($x155 (= $x52 true)))
 (let (($x59 (= $x155 true)))
 (let (($x50 (and $x59 $x137)))
 (let (($x125 (and $x50 $x18)))
 (let (($x88 (and $x125 $x94)))
 (let (($x179 (and $x88 $x106)))
 (let (($x9 (and $x179 $x210)))
 (let (($x144 (and $x9 $x60)))
 (let (($x201 (and $x144 $x294)))
 (let (($x158 (and $x201 $x47)))
 (let (($x221 (and $x158 $x267)))
 (let (($x100 (and $x221 $x171)))
 (let (($x170 (and $x100 $x17)))
 (let (($x175 (and $x170 $x361)))
 (let (($x131 (and $x175 $x72)))
 (let (($x61 (and $x131 $x66)))
 (let (($x325 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and $x325 $x61)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x351 (and $x261 $x205)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x5 $x351)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let (($x105 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x271 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x105)))))
 (let (($x160 (=> (and $x313 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x105)))))
 (let (($x269 (and $x160 $x31)))
 (let (($x229 (=> $x269 $x242)))
 (not $x229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (not $x313)))
 (let (($x32 (=> $x217 $x225)))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and true $x37)))
 (let (($x183 (= true $x7)))
 (let (($x104 (=> $x217 $x183)))
 (let (($x223 (=> (and $x104 $x217) $x225)))
 (let (($x10 (= $x223 true)))
 (let (($x242 (= $x10 true)))
 (let (($x99 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2033X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2033X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (= $x252 false)))
 ))
 (let (($x202 (and $x292 $x99)))
 (let (($x66 (= $x202 true)))
 (let (($x189 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x19 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x19))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv2 32))) ?x159)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv3 32))) ?x208)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x309 (= ?x285 ?x194)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x309 $x236))))
 ))
 (let (($x109 (and $x265 $x189)))
 (let (($x72 (= $x109 true)))
 (let (($x297 (forall ((input.ind-%var2021X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2021X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2021X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var2020X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2020X)))
 (= $x252 false)))
 ))
 (let (($x187 (and $x349 $x297)))
 (let (($x361 (= $x187 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x163)))
 (let (($x29 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (= $x29 true)))
 (let (($x17 (= $x300 true)))
 (let (($x96 (= ?x154 input.dst.llvm-%n)))
 (let (($x251 (= $x96 true)))
 (let (($x171 (= $x251 true)))
 (let ((?x312 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x312)))
 (let (($x77 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x77 true)))
 (let (($x267 (= $x324 true)))
 (let ((?x341 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x341)))
 (let ((?x97 (bvand symbol.1 (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x97)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x262 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x73 (= input.memlabel-mem--symbol.1_end ?x262)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x288 (and $x40 $x73)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x340 (and $x282 $x288)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x211 $x190)))
 (let (($x27 (not $x118)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x255 (and $x293 $x356)))
 (let (($x152 (and (not $x255) $x27)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x169 $x146)))
 (let (($x246 (not $x240)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x207 $x141)))
 (let (($x186 (and (not $x198) $x246)))
 (let (($x226 (and (and (and (and (and (and $x186 $x152) $x260) $x263) $x340) $x117) $x343)))
 (let (($x322 (and $x226 $x178)))
 (let (($x311 (= symbol.1 dst_symbol_addr.1)))
 (let (($x330 (and $x311 $x322)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x289 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x289)))
 (let (($x161 (or (bvugt input.memlabel-mem--symbol.1_begin ?x289) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x298 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x161) (or $x203 $x193)))))))
 (let (($x258 (and $x298 $x330)))
 (let (($x182 (= $x258 true)))
 (let (($x200 (= $x182 true)))
 (let (($x47 (= $x200 true)))
 (let (($x245 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x245 true)))
 (let (($x153 (= $x138 true)))
 (let (($x294 (= $x153 true)))
 (let (($x8 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x8 true)))
 (let (($x121 (= $x157 true)))
 (let (($x60 (= $x121 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x76 true)))
 (let (($x147 (= $x22 true)))
 (let (($x210 (= $x147 true)))
 (let (($x180 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x135 (= $x180 true)))
 (let (($x126 (= $x135 true)))
 (let (($x106 (= $x126 true)))
 (let (($x176 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x63 (= $x176 true)))
 (let (($x33 (= $x63 true)))
 (let (($x94 (= $x33 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x43 (= $x90 true)))
 (let (($x98 (= $x43 true)))
 (let (($x18 (= $x98 true)))
 (let (($x74 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x137 (= $x218 true)))
 (let (($x52 (= $x104 true)))
 (let (($x155 (= $x52 true)))
 (let (($x59 (= $x155 true)))
 (let (($x50 (and $x59 $x137)))
 (let (($x125 (and $x50 $x18)))
 (let (($x88 (and $x125 $x94)))
 (let (($x179 (and $x88 $x106)))
 (let (($x9 (and $x179 $x210)))
 (let (($x144 (and $x9 $x60)))
 (let (($x201 (and $x144 $x294)))
 (let (($x158 (and $x201 $x47)))
 (let (($x221 (and $x158 $x267)))
 (let (($x100 (and $x221 $x171)))
 (let (($x170 (and $x100 $x17)))
 (let (($x175 (and $x170 $x361)))
 (let (($x131 (and $x175 $x72)))
 (let (($x61 (and $x131 $x66)))
 (let (($x325 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and $x325 $x61)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x351 (and $x261 $x205)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x5 $x351)))
 (let ((?x215 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x130 (bvadd symbol.1 ?x215)))
 (let (($x105 (and (bvule input.memlabel-mem--symbol.1_begin ?x130) (bvule (bvadd ?x130 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x271 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false $x105)))))
 (let (($x160 (=> (and $x313 (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x105)))))
 (let (($x269 (and $x160 $x31)))
 (let (($x229 (=> $x269 $x242)))
 (not $x229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var2057X (_ BitVec 32)) )(let ((?x10 (bvadd symbol.1 (bvmul input.ind-%var2057X (_ bv4 32)))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x264)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x110)))
 (let ((?x159 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2057X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2057X)))
 (=> $x55 (= ?x159 ?x70)))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2056X (_ BitVec 32)) )(let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2056X)))
 (= $x55 (and (bvule (_ bv0 32) input.ind-%var2056X) (bvult input.ind-%var2056X input.dst.llvm-%n)))))
 ))
 (let (($x306 (and $x230 $x185)))
 (let (($x6 (= true true)))
 (let (($x53 (and $x6 $x306)))
 (let (($x75 (= $x53 true)))
 (let (($x317 (forall ((input.ind-%var2051X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2051X)))
 (=> $x100 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2051X) (_ bv0 32)))))
 ))
 (let (($x244 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2050X)))
 (= $x100 false)))
 ))
 (let (($x46 (and $x244 $x317)))
 (let (($x274 (= $x46 true)))
 (let (($x127 (forall ((input.ind-%var2045X (_ BitVec 32)) )(let ((?x10 (bvadd symbol.1 (bvmul input.ind-%var2045X (_ bv4 32)))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x264)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x110)))
 (let ((?x159 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2045X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2045X)))
 (=> $x55 (= ?x159 ?x70)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var2044X (_ BitVec 32)) )(let (($x12 (bvule (_ bv0 32) input.ind-%var2044X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2044X)))
 (= $x55 (and $x12 (bvult input.ind-%var2044X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x120 (and $x296 $x127)))
 (let (($x45 (= $x120 true)))
 (let (($x361 (forall ((input.ind-%var2039X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2039X)))
 (=> $x100 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2039X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var2038X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2038X)))
 (= $x100 false)))
 ))
 (let (($x175 (and $x170 $x361)))
 (let (($x309 (= $x175 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x114)))
 (let (($x267 (= ?x112 input.dst.llvm-%n)))
 (let (($x221 (= $x267 true)))
 (let (($x163 (= $x221 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x341 (= (_ bv0 32) ?x226)))
 (let ((?x97 (bvand symbol.1 (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x97)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x73 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x288 (= input.memlabel-mem--symbol.1_end ?x73)))
 (let (($x262 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x340 (and $x262 $x288)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x40 $x340)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x27 $x152)))
 (let (($x260 (not $x34)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x211 $x190)))
 (let (($x26 (and (not $x118) $x260)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x246 $x186)))
 (let (($x356 (not $x293)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x169 $x146)))
 (let (($x168 (and (not $x240) $x356)))
 (let (($x200 (and (and (and (and (and (and $x168 $x26) $x263) $x282) $x51) $x83) $x343)))
 (let (($x47 (and $x200 $x341)))
 (let (($x289 (= symbol.1 dst_symbol_addr.1)))
 (let (($x158 (and $x289 $x47)))
 (let (($x298 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x193 (or (bvugt input.memlabel-mem--symbol.1_begin ?x184) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x193) (or $x56 $x298)))))))
 (let (($x119 (and $x82 $x158)))
 (let (($x312 (= $x119 true)))
 (let (($x84 (= $x312 true)))
 (let (($x77 (= $x84 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x245 true)))
 (let (($x153 (= $x138 true)))
 (let (($x294 (= $x153 true)))
 (let (($x63 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (not $x63)))
 (let (($x157 (= $x33 true)))
 (let (($x121 (= $x157 true)))
 (let (($x60 (= $x121 true)))
 (let (($x106 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x179 (and true $x106)))
 (let (($x76 (= true $x179)))
 (let (($x22 (=> $x33 $x76)))
 (let (($x147 (= $x22 true)))
 (let (($x210 (= $x147 true)))
 (let (($x9 (= $x210 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x43 (= $x90 true)))
 (let (($x98 (= $x43 true)))
 (let (($x18 (= $x98 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x137 (= $x218 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x104)))
 (let (($x155 (= ?x52 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x7 (= $x37 true)))
 (let (($x261 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x328 (= $x261 true)))
 (let (($x275 (= $x328 true)))
 (let (($x325 (= $x275 true)))
 (let (($x160 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x160 true)))
 (let (($x5 (= $x57 true)))
 (let (($x133 (= $x5 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x107 true)))
 (let (($x38 (= $x105 true)))
 (let (($x14 (= $x38 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x279 (= $x136 true)))
 (let (($x71 (= $x279 true)))
 (let (($x128 (= $x71 true)))
 (let (($x271 (and $x128 $x14)))
 (let (($x23 (and $x271 $x133)))
 (let (($x217 (and $x23 $x325)))
 (let (($x183 (and $x217 $x7)))
 (let (($x139 (and $x183 $x149)))
 (let (($x50 (and $x139 $x137)))
 (let (($x125 (and $x50 $x18)))
 (let (($x8 (and $x125 $x9)))
 (let (($x144 (and $x8 $x60)))
 (let (($x201 (and $x144 $x294)))
 (let (($x324 (and $x201 $x77)))
 (let (($x154 (and $x324 $x163)))
 (let (($x219 (and $x154 $x309)))
 (let (($x234 (and $x219 $x45)))
 (let (($x332 (and $x234 $x274)))
 (let (($x196 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x196 $x332)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and $x360 $x132)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x276 (and $x222 $x165)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x305 (and $x277 $x276)))
 (let (($x116 (=> $x305 $x75)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var2057X (_ BitVec 32)) )(let ((?x10 (bvadd symbol.1 (bvmul input.ind-%var2057X (_ bv4 32)))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x264)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x110)))
 (let ((?x159 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2057X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2057X)))
 (=> $x55 (= ?x159 ?x70)))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2056X (_ BitVec 32)) )(let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2056X)))
 (= $x55 (and (bvule (_ bv0 32) input.ind-%var2056X) (bvult input.ind-%var2056X input.dst.llvm-%n)))))
 ))
 (let (($x306 (and $x230 $x185)))
 (let (($x6 (= true true)))
 (let (($x53 (and $x6 $x306)))
 (let (($x75 (= $x53 true)))
 (let (($x317 (forall ((input.ind-%var2051X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2051X)))
 (=> $x100 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2051X) (_ bv0 32)))))
 ))
 (let (($x244 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2050X)))
 (= $x100 false)))
 ))
 (let (($x46 (and $x244 $x317)))
 (let (($x274 (= $x46 true)))
 (let (($x127 (forall ((input.ind-%var2045X (_ BitVec 32)) )(let ((?x10 (bvadd symbol.1 (bvmul input.ind-%var2045X (_ bv4 32)))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x264)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x110)))
 (let ((?x159 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2045X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2045X)))
 (=> $x55 (= ?x159 ?x70)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var2044X (_ BitVec 32)) )(let (($x12 (bvule (_ bv0 32) input.ind-%var2044X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2044X)))
 (= $x55 (and $x12 (bvult input.ind-%var2044X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x120 (and $x296 $x127)))
 (let (($x45 (= $x120 true)))
 (let (($x361 (forall ((input.ind-%var2039X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2039X)))
 (=> $x100 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2039X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var2038X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2038X)))
 (= $x100 false)))
 ))
 (let (($x175 (and $x170 $x361)))
 (let (($x309 (= $x175 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x114)))
 (let (($x267 (= ?x112 input.dst.llvm-%n)))
 (let (($x221 (= $x267 true)))
 (let (($x163 (= $x221 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x341 (= (_ bv0 32) ?x226)))
 (let ((?x97 (bvand symbol.1 (_ bv3 32))))
 (let (($x343 (= (_ bv0 32) ?x97)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x73 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x288 (= input.memlabel-mem--symbol.1_end ?x73)))
 (let (($x262 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x340 (and $x262 $x288)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x40 $x340)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x27 $x152)))
 (let (($x260 (not $x34)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x211 $x190)))
 (let (($x26 (and (not $x118) $x260)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x246 $x186)))
 (let (($x356 (not $x293)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x169 $x146)))
 (let (($x168 (and (not $x240) $x356)))
 (let (($x200 (and (and (and (and (and (and $x168 $x26) $x263) $x282) $x51) $x83) $x343)))
 (let (($x47 (and $x200 $x341)))
 (let (($x289 (= symbol.1 dst_symbol_addr.1)))
 (let (($x158 (and $x289 $x47)))
 (let (($x298 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x193 (or (bvugt input.memlabel-mem--symbol.1_begin ?x184) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x193) (or $x56 $x298)))))))
 (let (($x119 (and $x82 $x158)))
 (let (($x312 (= $x119 true)))
 (let (($x84 (= $x312 true)))
 (let (($x77 (= $x84 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x245 true)))
 (let (($x153 (= $x138 true)))
 (let (($x294 (= $x153 true)))
 (let (($x63 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (not $x63)))
 (let (($x157 (= $x33 true)))
 (let (($x121 (= $x157 true)))
 (let (($x60 (= $x121 true)))
 (let (($x106 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x179 (and true $x106)))
 (let (($x76 (= true $x179)))
 (let (($x22 (=> $x33 $x76)))
 (let (($x147 (= $x22 true)))
 (let (($x210 (= $x147 true)))
 (let (($x9 (= $x210 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x43 (= $x90 true)))
 (let (($x98 (= $x43 true)))
 (let (($x18 (= $x98 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x64 (= $x74 true)))
 (let (($x218 (= $x64 true)))
 (let (($x137 (= $x218 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x104)))
 (let (($x155 (= ?x52 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x155 true)))
 (let (($x149 (= $x59 true)))
 (let (($x16 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x16 true)))
 (let (($x7 (= $x37 true)))
 (let (($x261 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x328 (= $x261 true)))
 (let (($x275 (= $x328 true)))
 (let (($x325 (= $x275 true)))
 (let (($x160 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x160 true)))
 (let (($x5 (= $x57 true)))
 (let (($x133 (= $x5 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x107 true)))
 (let (($x38 (= $x105 true)))
 (let (($x14 (= $x38 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x279 (= $x136 true)))
 (let (($x71 (= $x279 true)))
 (let (($x128 (= $x71 true)))
 (let (($x271 (and $x128 $x14)))
 (let (($x23 (and $x271 $x133)))
 (let (($x217 (and $x23 $x325)))
 (let (($x183 (and $x217 $x7)))
 (let (($x139 (and $x183 $x149)))
 (let (($x50 (and $x139 $x137)))
 (let (($x125 (and $x50 $x18)))
 (let (($x8 (and $x125 $x9)))
 (let (($x144 (and $x8 $x60)))
 (let (($x201 (and $x144 $x294)))
 (let (($x324 (and $x201 $x77)))
 (let (($x154 (and $x324 $x163)))
 (let (($x219 (and $x154 $x309)))
 (let (($x234 (and $x219 $x45)))
 (let (($x332 (and $x234 $x274)))
 (let (($x196 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x196 $x332)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and $x360 $x132)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x276 (and $x222 $x165)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x305 (and $x277 $x276)))
 (let (($x116 (=> $x305 $x75)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498555/query
