==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x10 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x10 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x60 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x65 (= $x63 $x64)))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x62 (= $x58 $x61)))
 (let (($x66 (and $x62 $x65)))
 (let (($x67 (= $x66 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x31)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x37 $x9)))
 (let (($x50 (and $x33 $x5)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x8 $x50)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x34)))))))
 (let (($x52 (and $x28 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x48 (concat ?x26 (concat ?x19 ?x25)))))
 (let (($x36 (= ?x13 input.dst.llvm-%l)))
 (let (($x15 (= $x36 true)))
 (let (($x16 (= $x15 true)))
 (let (($x56 (and $x16 $x55)))
 (let (($x68 (and $x56 $x67)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x69 (and $x24 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x60 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x65 (= $x63 $x64)))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x62 (= $x58 $x61)))
 (let (($x66 (and $x62 $x65)))
 (let (($x67 (= $x66 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x31)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x37 $x9)))
 (let (($x50 (and $x33 $x5)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x8 $x50)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x34)))))))
 (let (($x52 (and $x28 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x48 (concat ?x26 (concat ?x19 ?x25)))))
 (let (($x36 (= ?x13 input.dst.llvm-%l)))
 (let (($x15 (= $x36 true)))
 (let (($x16 (= $x15 true)))
 (let (($x56 (and $x16 $x55)))
 (let (($x68 (and $x56 $x67)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x69 (and $x24 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1027 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1027 32) (_ bv64 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (= true false)))
 (let (($x75 (= $x74 true)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x66)))
 (let (($x61 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (not $x61)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x63 (_ bv1 32))))
 (let (($x68 (= $x66 $x67)))
 (let (($x64 (= ?x63 (_ bv0 32))))
 (let (($x65 (= $x61 $x64)))
 (let (($x73 (and (and (and $x65 $x68) $x69) $x70)))
 (let (($x27 (= $x73 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x6 $x5)))
 (let (($x53 (and $x50 $x52)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x10 $x53)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x45)))))))
 (let (($x55 (and $x33 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x19 (concat ?x21 (concat ?x13 ?x23)))))
 (let (($x16 (= ?x36 input.dst.llvm-%l)))
 (let (($x18 (= $x16 true)))
 (let (($x44 (= $x18 true)))
 (let (($x59 (and $x44 $x58)))
 (let (($x38 (and $x59 $x27)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x20 (and $x24 $x38)))
 (let (($x76 (=> $x20 $x75)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (= true false)))
 (let (($x75 (= $x74 true)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x66)))
 (let (($x61 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (not $x61)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x63 (_ bv1 32))))
 (let (($x68 (= $x66 $x67)))
 (let (($x64 (= ?x63 (_ bv0 32))))
 (let (($x65 (= $x61 $x64)))
 (let (($x73 (and (and (and $x65 $x68) $x69) $x70)))
 (let (($x27 (= $x73 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x6 $x5)))
 (let (($x53 (and $x50 $x52)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x10 $x53)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x45)))))))
 (let (($x55 (and $x33 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x19 (concat ?x21 (concat ?x13 ?x23)))))
 (let (($x16 (= ?x36 input.dst.llvm-%l)))
 (let (($x18 (= $x16 true)))
 (let (($x44 (= $x18 true)))
 (let (($x59 (and $x44 $x58)))
 (let (($x38 (and $x59 $x27)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x20 (and $x24 $x38)))
 (let (($x76 (=> $x20 $x75)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x76 (= $x75 true)))
 (let (($x72 (= false false)))
 (let (($x63 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x63 $x72)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x65 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x65 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (= $x68 $x71)))
 (let (($x66 (= ?x65 (_ bv0 32))))
 (let (($x67 (= $x63 $x66)))
 (let (($x27 (and (and $x67 $x69) $x70)))
 (let (($x38 (= $x27 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x34 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x9 $x55)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x37)))))))
 (let (($x57 (and $x5 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x36 (concat ?x48 (concat ?x23 ?x47)))))
 (let (($x18 (= ?x15 input.dst.llvm-%l)))
 (let (($x44 (= $x18 true)))
 (let (($x39 (= $x44 true)))
 (let (($x61 (and $x39 $x60)))
 (let (($x20 (and $x61 $x38)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x74 (and $x40 $x20)))
 (let (($x77 (=> $x74 $x76)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x76 (= $x75 true)))
 (let (($x72 (= false false)))
 (let (($x63 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x63 $x72)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x65 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x65 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (= $x68 $x71)))
 (let (($x66 (= ?x65 (_ bv0 32))))
 (let (($x67 (= $x63 $x66)))
 (let (($x27 (and (and $x67 $x69) $x70)))
 (let (($x38 (= $x27 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x34 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x9 $x55)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x37)))))))
 (let (($x57 (and $x5 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x36 (concat ?x48 (concat ?x23 ?x47)))))
 (let (($x18 (= ?x15 input.dst.llvm-%l)))
 (let (($x44 (= $x18 true)))
 (let (($x39 (= $x44 true)))
 (let (($x61 (and $x39 $x60)))
 (let (($x20 (and $x61 $x38)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x74 (and $x40 $x20)))
 (let (($x77 (=> $x74 $x76)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1027 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1027 32) (_ bv64 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (= true false)))
 (let (($x29 (= $x11 true)))
 (let (($x27 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x38 (=> $x65 $x27)))
 (let (($x69 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x69)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x67 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x73 (bvuge ?x67 (_ bv1 32))))
 (let (($x72 (= $x69 $x73)))
 (let (($x68 (= ?x67 (_ bv0 32))))
 (let (($x71 (= $x65 $x68)))
 (let (($x75 (and (and (and $x71 $x72) $x70) $x38)))
 (let (($x76 (= $x75 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x14 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x31 $x57)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x10)))))))
 (let (($x59 (and $x51 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x15 (concat ?x36 (concat ?x19 ?x47)))))
 (let (($x44 (= ?x16 input.dst.llvm-%l)))
 (let (($x39 (= $x44 true)))
 (let (($x30 (= $x39 true)))
 (let (($x63 (and $x30 $x62)))
 (let (($x77 (and $x63 $x76)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x17 (and $x24 $x77)))
 (let (($x25 (=> $x17 $x29)))
 (not $x25))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (= true false)))
 (let (($x29 (= $x11 true)))
 (let (($x27 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x38 (=> $x65 $x27)))
 (let (($x69 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x69)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x67 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x73 (bvuge ?x67 (_ bv1 32))))
 (let (($x72 (= $x69 $x73)))
 (let (($x68 (= ?x67 (_ bv0 32))))
 (let (($x71 (= $x65 $x68)))
 (let (($x75 (and (and (and $x71 $x72) $x70) $x38)))
 (let (($x76 (= $x75 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x14 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x31 $x57)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x10)))))))
 (let (($x59 (and $x51 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x15 (concat ?x36 (concat ?x19 ?x47)))))
 (let (($x44 (= ?x16 input.dst.llvm-%l)))
 (let (($x39 (= $x44 true)))
 (let (($x30 (= $x39 true)))
 (let (($x63 (and $x30 $x62)))
 (let (($x77 (and $x63 $x76)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x17 (and $x24 $x77)))
 (let (($x25 (=> $x17 $x29)))
 (not $x25))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x52 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (=> $x52 true)))
 (let (($x23 (= $x41 true)))
 (let (($x79 (= $x23 true)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x38 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x38 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x11 (= $x77 $x17)))
 (let (($x75 (= ?x38 (_ bv0 32))))
 (let (($x74 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x29 (and $x76 $x11)))
 (let (($x25 (= $x29 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x68 (concat ?x65 (concat ?x61 ?x59)))))
 (let (($x69 (= ?x71 input.dst.llvm-%l)))
 (let (($x73 (= $x69 true)))
 (let (($x72 (= $x73 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x43)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x30 $x50)))
 (let (($x37 (and $x45 $x33)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x15 $x37)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x47)))))))
 (let (($x6 (and $x39 $x10)))
 (let (($x5 (= $x6 true)))
 (let (($x9 (= $x5 true)))
 (let (($x34 (= $x9 true)))
 (let (($x56 (and $x34 $x55)))
 (let (($x20 (and $x56 $x72)))
 (let (($x78 (and $x20 $x25)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x7 (and $x40 $x78)))
 (let (($x80 (=> $x7 $x79)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x52 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (=> $x52 true)))
 (let (($x23 (= $x41 true)))
 (let (($x79 (= $x23 true)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x38 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x38 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x11 (= $x77 $x17)))
 (let (($x75 (= ?x38 (_ bv0 32))))
 (let (($x74 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x74 $x75)))
 (let (($x29 (and $x76 $x11)))
 (let (($x25 (= $x29 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x68 (concat ?x65 (concat ?x61 ?x59)))))
 (let (($x69 (= ?x71 input.dst.llvm-%l)))
 (let (($x73 (= $x69 true)))
 (let (($x72 (= $x73 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x43)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x30 $x50)))
 (let (($x37 (and $x45 $x33)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x15 $x37)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x47)))))))
 (let (($x6 (and $x39 $x10)))
 (let (($x5 (= $x6 true)))
 (let (($x9 (= $x5 true)))
 (let (($x34 (= $x9 true)))
 (let (($x56 (and $x34 $x55)))
 (let (($x20 (and $x56 $x72)))
 (let (($x78 (and $x20 $x25)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x7 (and $x40 $x78)))
 (let (($x80 (=> $x7 $x79)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x80 (= $x76 true)))
 (let ((?x77 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x77 (_ bv1 32))))
 (let (($x29 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x78 (= $x29 $x25)))
 (let (($x17 (= ?x77 (_ bv0 32))))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x11 (= $x75 $x17)))
 (let (($x7 (and $x11 $x78)))
 (let (($x41 (= $x7 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x73 (concat ?x66 (concat ?x60 ?x64)))))
 (let (($x20 (= ?x72 input.dst.llvm-%l)))
 (let (($x70 (= $x20 true)))
 (let (($x74 (= $x70 true)))
 (let (($x54 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x37)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x8 $x43)))
 (let (($x6 (and $x33 $x10)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x36 $x6)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x16)))))))
 (let (($x9 (and $x28 $x5)))
 (let (($x34 (= $x9 true)))
 (let (($x51 (= $x34 true)))
 (let (($x31 (= $x51 true)))
 (let (($x67 (and $x31 $x57)))
 (let (($x27 (and $x67 $x74)))
 (let (($x23 (and $x27 $x41)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x79 (and $x40 $x23)))
 (let (($x81 (=> $x79 $x80)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x80 (= $x76 true)))
 (let ((?x77 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x77 (_ bv1 32))))
 (let (($x29 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x78 (= $x29 $x25)))
 (let (($x17 (= ?x77 (_ bv0 32))))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x11 (= $x75 $x17)))
 (let (($x7 (and $x11 $x78)))
 (let (($x41 (= $x7 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x73 (concat ?x66 (concat ?x60 ?x64)))))
 (let (($x20 (= ?x72 input.dst.llvm-%l)))
 (let (($x70 (= $x20 true)))
 (let (($x74 (= $x70 true)))
 (let (($x54 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x37)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x8 $x43)))
 (let (($x6 (and $x33 $x10)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x36 $x6)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x16)))))))
 (let (($x9 (and $x28 $x5)))
 (let (($x34 (= $x9 true)))
 (let (($x51 (= $x34 true)))
 (let (($x31 (= $x51 true)))
 (let (($x67 (and $x31 $x57)))
 (let (($x27 (and $x67 $x74)))
 (let (($x23 (and $x27 $x41)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x79 (and $x40 $x23)))
 (let (($x81 (=> $x79 $x80)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x80000001
                     #x00)
              #x80000002
              #x00)
       #x80000003
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x58 (= $x11 true)))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x80 (not $x7)))
 (let (($x17 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (not $x17)))
 (let ((?x29 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x29 (_ bv1 32))))
 (let (($x23 (= $x7 $x41)))
 (let (($x25 (= ?x29 (_ bv0 32))))
 (let (($x78 (= $x17 $x25)))
 (let (($x22 (and (and (and $x78 $x23) $x79) $x80)))
 (let (($x32 (= $x22 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x70 (concat ?x71 (concat ?x65 ?x62)))))
 (let (($x27 (= ?x74 input.dst.llvm-%l)))
 (let (($x38 (= $x27 true)))
 (let (($x75 (= $x38 true)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x57 (= $x56 true)))
 (let (($x67 (= $x57 true)))
 (let (($x68 (= $x67 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x6)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x45 $x37)))
 (let (($x9 (and $x10 $x5)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x42 $x9)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x12)))))))
 (let (($x51 (and $x50 $x34)))
 (let (($x31 (= $x51 true)))
 (let (($x14 (= $x31 true)))
 (let (($x52 (= $x14 true)))
 (let (($x69 (and $x52 $x68)))
 (let (($x76 (and $x69 $x75)))
 (let (($x63 (and $x76 $x32)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x13 (and $x40 $x63)))
 (let (($x82 (=> $x13 $x58)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x58 (= $x11 true)))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x80 (not $x7)))
 (let (($x17 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (not $x17)))
 (let ((?x29 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x29 (_ bv1 32))))
 (let (($x23 (= $x7 $x41)))
 (let (($x25 (= ?x29 (_ bv0 32))))
 (let (($x78 (= $x17 $x25)))
 (let (($x22 (and (and (and $x78 $x23) $x79) $x80)))
 (let (($x32 (= $x22 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x70 (concat ?x71 (concat ?x65 ?x62)))))
 (let (($x27 (= ?x74 input.dst.llvm-%l)))
 (let (($x38 (= $x27 true)))
 (let (($x75 (= $x38 true)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x57 (= $x56 true)))
 (let (($x67 (= $x57 true)))
 (let (($x68 (= $x67 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x6)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x45 $x37)))
 (let (($x9 (and $x10 $x5)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x42 $x9)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x12)))))))
 (let (($x51 (and $x50 $x34)))
 (let (($x31 (= $x51 true)))
 (let (($x14 (= $x31 true)))
 (let (($x52 (= $x14 true)))
 (let (($x69 (and $x52 $x68)))
 (let (($x76 (and $x69 $x75)))
 (let (($x63 (and $x76 $x32)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x13 (and $x40 $x63)))
 (let (($x82 (=> $x13 $x58)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x83 (= $x78 true)))
 (let (($x80 (= false false)))
 (let (($x25 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x25 $x80)))
 (let ((?x7 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x79 (bvuge ?x7 (_ bv1 32))))
 (let (($x81 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (= $x81 $x79)))
 (let (($x41 (= ?x7 (_ bv0 32))))
 (let (($x23 (= $x25 $x41)))
 (let (($x63 (and (and $x23 $x24) $x22)))
 (let (($x13 (= $x63 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x38 (concat ?x72 (concat ?x66 ?x61)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let (($x17 (= $x77 true)))
 (let (($x67 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x73 (= $x69 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x9)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x33 $x6)))
 (let (($x51 (and $x5 $x34)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x47 $x51)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x44)))))))
 (let (($x14 (and $x43 $x31)))
 (let (($x52 (= $x14 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x20 (and $x54 $x73)))
 (let (($x11 (and $x20 $x17)))
 (let (($x58 (and $x11 $x13)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x82 (and $x40 $x58)))
 (let (($x49 (=> $x82 $x83)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x83 (= $x78 true)))
 (let (($x80 (= false false)))
 (let (($x25 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x25 $x80)))
 (let ((?x7 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x79 (bvuge ?x7 (_ bv1 32))))
 (let (($x81 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (= $x81 $x79)))
 (let (($x41 (= ?x7 (_ bv0 32))))
 (let (($x23 (= $x25 $x41)))
 (let (($x63 (and (and $x23 $x24) $x22)))
 (let (($x13 (= $x63 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x38 (concat ?x72 (concat ?x66 ?x61)))))
 (let (($x76 (= ?x75 input.dst.llvm-%l)))
 (let (($x77 (= $x76 true)))
 (let (($x17 (= $x77 true)))
 (let (($x67 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x73 (= $x69 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x9)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x33 $x6)))
 (let (($x51 (and $x5 $x34)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x47 $x51)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x44)))))))
 (let (($x14 (and $x43 $x31)))
 (let (($x52 (= $x14 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x20 (and $x54 $x73)))
 (let (($x11 (and $x20 $x17)))
 (let (($x58 (and $x11 $x13)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x82 (and $x40 $x58)))
 (let (($x49 (=> $x82 $x83)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x80000001
                     #x00)
              #x80000002
              #x00)
       #x80000003
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x64 (= $x23 true)))
 (let (($x13 (= false false)))
 (let (($x41 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x58 (=> $x41 $x13)))
 (let (($x32 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x63 (not $x32)))
 (let ((?x81 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x81 (_ bv1 32))))
 (let (($x22 (= $x32 $x80)))
 (let (($x79 (= ?x81 (_ bv0 32))))
 (let (($x24 (= $x41 $x79)))
 (let (($x49 (and (and (and $x24 $x22) $x63) $x58)))
 (let (($x19 (= $x49 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x77 (concat ?x74 (concat ?x71 ?x60)))))
 (let (($x11 (= ?x17 input.dst.llvm-%l)))
 (let (($x29 (= $x11 true)))
 (let (($x25 (= $x29 true)))
 (let (($x69 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x73 (= $x69 true)))
 (let (($x20 (= $x73 true)))
 (let (($x70 (= $x20 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x51)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x10 $x9)))
 (let (($x14 (and $x34 $x31)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x16 $x14)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x30)))))))
 (let (($x53 (and $x37 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x27 (and $x56 $x70)))
 (let (($x78 (and $x27 $x25)))
 (let (($x26 (and $x78 $x19)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x48 (and $x40 $x26)))
 (let (($x59 (=> $x48 $x64)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x64 (= $x23 true)))
 (let (($x13 (= false false)))
 (let (($x41 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x58 (=> $x41 $x13)))
 (let (($x32 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x63 (not $x32)))
 (let ((?x81 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x81 (_ bv1 32))))
 (let (($x22 (= $x32 $x80)))
 (let (($x79 (= ?x81 (_ bv0 32))))
 (let (($x24 (= $x41 $x79)))
 (let (($x49 (and (and (and $x24 $x22) $x63) $x58)))
 (let (($x19 (= $x49 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x77 (concat ?x74 (concat ?x71 ?x60)))))
 (let (($x11 (= ?x17 input.dst.llvm-%l)))
 (let (($x29 (= $x11 true)))
 (let (($x25 (= $x29 true)))
 (let (($x69 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x73 (= $x69 true)))
 (let (($x20 (= $x73 true)))
 (let (($x70 (= $x20 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x51)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x10 $x9)))
 (let (($x14 (and $x34 $x31)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x16 $x14)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x30)))))))
 (let (($x53 (and $x37 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x27 (and $x56 $x70)))
 (let (($x78 (and $x27 $x25)))
 (let (($x26 (and $x78 $x19)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x48 (and $x40 $x26)))
 (let (($x59 (=> $x48 $x64)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x162 (= $x79 true)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x98 ?x96))))
 (let ((?x130 (bvadd ?x102 (_ bv4 32))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x134))))
 (let (($x141 (= (_ bv0 32) ?x140)))
 (let ((?x142 (ite $x141 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x142 (_ bv1 32))))
 (let (($x146 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x148 (= $x146 $x147)))
 (let (($x110 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x22 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x114 (and $x22 $x110)))
 (let (($x149 (=> $x114 $x148)))
 (let (($x143 (= ?x142 (_ bv0 32))))
 (let (($x129 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x144 (= $x129 $x143)))
 (let (($x145 (=> $x114 $x144)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x119))))
 (let (($x126 (= input.spec-%var-l-1.2.1.2.0 ?x125)))
 (let (($x127 (=> $x114 $x126)))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x104 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x111 (bvuge ?x104 (_ bv1 32))))
 (let (($x112 (= $x110 $x111)))
 (let (($x113 (=> $x22 $x112)))
 (let (($x83 (= false false)))
 (let (($x90 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x108 (and $x22 $x90)))
 (let (($x109 (=> $x108 $x83)))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x106 (= $x90 $x105)))
 (let (($x107 (=> $x22 $x106)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x64)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x39)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x86)))
 (let (($x88 (=> $x22 $x87)))
 (let (($x81 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x13 (=> $x81 $x83)))
 (let ((?x24 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x24 (_ bv1 32))))
 (let (($x63 (= $x22 $x82)))
 (let (($x32 (= ?x24 (_ bv0 32))))
 (let (($x80 (= $x81 $x32)))
 (let (($x155 (and (and (and (and (and (and $x80 $x63) $x13) $x88) $x107) $x109) $x113)))
 (let (($x158 (and (and (and $x155 $x127) $x145) $x149)))
 (let (($x159 (= $x158 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x11 (concat ?x66 (concat ?x74 ?x61)))))
 (let (($x25 (= ?x29 input.dst.llvm-%l)))
 (let (($x78 (= $x25 true)))
 (let (($x7 (= $x78 true)))
 (let (($x73 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (= $x73 true)))
 (let (($x70 (= $x20 true)))
 (let (($x27 (= $x70 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x5)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x37 $x10)))
 (let (($x34 (and $x6 $x9)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x14 $x34)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x43)))))))
 (let (($x54 (and $x12 $x51)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x38 (and $x57 $x27)))
 (let (($x41 (and $x38 $x7)))
 (let (($x160 (and $x41 $x159)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x46 $x160)))
 (let (($x163 (=> $x161 $x162)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x162 (= $x79 true)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x98 ?x96))))
 (let ((?x130 (bvadd ?x102 (_ bv4 32))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x134))))
 (let (($x141 (= (_ bv0 32) ?x140)))
 (let ((?x142 (ite $x141 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x142 (_ bv1 32))))
 (let (($x146 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x148 (= $x146 $x147)))
 (let (($x110 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x22 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x114 (and $x22 $x110)))
 (let (($x149 (=> $x114 $x148)))
 (let (($x143 (= ?x142 (_ bv0 32))))
 (let (($x129 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x144 (= $x129 $x143)))
 (let (($x145 (=> $x114 $x144)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x119))))
 (let (($x126 (= input.spec-%var-l-1.2.1.2.0 ?x125)))
 (let (($x127 (=> $x114 $x126)))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x104 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x111 (bvuge ?x104 (_ bv1 32))))
 (let (($x112 (= $x110 $x111)))
 (let (($x113 (=> $x22 $x112)))
 (let (($x83 (= false false)))
 (let (($x90 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x108 (and $x22 $x90)))
 (let (($x109 (=> $x108 $x83)))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x106 (= $x90 $x105)))
 (let (($x107 (=> $x22 $x106)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x64)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x39)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x86)))
 (let (($x88 (=> $x22 $x87)))
 (let (($x81 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x13 (=> $x81 $x83)))
 (let ((?x24 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x24 (_ bv1 32))))
 (let (($x63 (= $x22 $x82)))
 (let (($x32 (= ?x24 (_ bv0 32))))
 (let (($x80 (= $x81 $x32)))
 (let (($x155 (and (and (and (and (and (and $x80 $x63) $x13) $x88) $x107) $x109) $x113)))
 (let (($x158 (and (and (and $x155 $x127) $x145) $x149)))
 (let (($x159 (= $x158 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x11 (concat ?x66 (concat ?x74 ?x61)))))
 (let (($x25 (= ?x29 input.dst.llvm-%l)))
 (let (($x78 (= $x25 true)))
 (let (($x7 (= $x78 true)))
 (let (($x73 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (= $x73 true)))
 (let (($x70 (= $x20 true)))
 (let (($x27 (= $x70 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x5)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x37 $x10)))
 (let (($x34 (and $x6 $x9)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x14 $x34)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x43)))))))
 (let (($x54 (and $x12 $x51)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x38 (and $x57 $x27)))
 (let (($x41 (and $x38 $x7)))
 (let (($x160 (and $x41 $x159)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x46 $x160)))
 (let (($x163 (=> $x161 $x162)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xff)
              #xffff7ff9
              #x7f)
       #xffff7ff8
       #xf8))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff7ffb)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x168 (= $x32 true)))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x109 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x112 (and $x63 $x109)))
 (let (($x147 (and $x112 $x142)))
 (let (($x148 (not $x147)))
 (let (($x126 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x157 (and $x112 $x126)))
 (let (($x146 (not $x157)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x99 (concat ?x95 ?x98))))
 (let ((?x127 (bvadd ?x102 (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x130))))
 (let (($x131 (= (_ bv0 32) ?x133)))
 (let ((?x134 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x134 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x145 (=> $x112 $x144)))
 (let (($x137 (= ?x134 (_ bv0 32))))
 (let (($x140 (= $x126 $x137)))
 (let (($x141 (=> $x112 $x140)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x123))))
 (let (($x119 (= input.spec-%var-l-1.2.1.2.0 ?x116)))
 (let (($x122 (=> $x112 $x119)))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x104 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x104 (_ bv1 32))))
 (let (($x110 (= $x109 $x154)))
 (let (($x111 (=> $x63 $x110)))
 (let (($x13 (= false false)))
 (let (($x90 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x153 (and $x63 $x90)))
 (let (($x108 (=> $x153 $x13)))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x106 (= $x90 $x105)))
 (let (($x107 (=> $x63 $x106)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x26)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x64)))
 (let (($x88 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x152 (=> $x63 $x88)))
 (let (($x24 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x151 (=> $x24 $x13)))
 (let ((?x80 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x80 (_ bv1 32))))
 (let (($x83 (= $x63 $x150)))
 (let (($x22 (= ?x80 (_ bv0 32))))
 (let (($x82 (= $x24 $x22)))
 (let (($x162 (and (and (and (and (and (and $x82 $x83) $x151) $x152) $x107) $x108) $x111)))
 (let (($x77 (and (and (and (and (and $x162 $x122) $x141) $x145) $x146) $x148)))
 (let (($x165 (= $x77 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x25 (concat ?x72 (concat ?x66 ?x5)))))
 (let (($x7 (= ?x78 input.dst.llvm-%l)))
 (let (($x41 (= $x7 true)))
 (let (($x23 (= $x41 true)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x14 (= $x68 true)))
 (let (($x37 (= $x14 true)))
 (let (($x45 (= $x37 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x42)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x16 $x71)))
 (let (($x28 (and $x60 $x21)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x70 $x28)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x47)))))))
 (let (($x34 (and $x76 $x9)))
 (let (($x51 (= $x34 true)))
 (let (($x54 (= $x51 true)))
 (let (($x55 (= $x54 true)))
 (let (($x69 (and $x55 $x45)))
 (let (($x81 (and $x69 $x23)))
 (let (($x166 (and $x81 $x165)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x167 (and $x46 $x166)))
 (let (($x169 (=> $x167 $x168)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x168 (= $x32 true)))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x109 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x112 (and $x63 $x109)))
 (let (($x147 (and $x112 $x142)))
 (let (($x148 (not $x147)))
 (let (($x126 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x157 (and $x112 $x126)))
 (let (($x146 (not $x157)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x99 (concat ?x95 ?x98))))
 (let ((?x127 (bvadd ?x102 (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x130))))
 (let (($x131 (= (_ bv0 32) ?x133)))
 (let ((?x134 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x134 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x145 (=> $x112 $x144)))
 (let (($x137 (= ?x134 (_ bv0 32))))
 (let (($x140 (= $x126 $x137)))
 (let (($x141 (=> $x112 $x140)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x123))))
 (let (($x119 (= input.spec-%var-l-1.2.1.2.0 ?x116)))
 (let (($x122 (=> $x112 $x119)))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x104 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x104 (_ bv1 32))))
 (let (($x110 (= $x109 $x154)))
 (let (($x111 (=> $x63 $x110)))
 (let (($x13 (= false false)))
 (let (($x90 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x153 (and $x63 $x90)))
 (let (($x108 (=> $x153 $x13)))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x106 (= $x90 $x105)))
 (let (($x107 (=> $x63 $x106)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x26)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x64)))
 (let (($x88 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x152 (=> $x63 $x88)))
 (let (($x24 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x151 (=> $x24 $x13)))
 (let ((?x80 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x80 (_ bv1 32))))
 (let (($x83 (= $x63 $x150)))
 (let (($x22 (= ?x80 (_ bv0 32))))
 (let (($x82 (= $x24 $x22)))
 (let (($x162 (and (and (and (and (and (and $x82 $x83) $x151) $x152) $x107) $x108) $x111)))
 (let (($x77 (and (and (and (and (and $x162 $x122) $x141) $x145) $x146) $x148)))
 (let (($x165 (= $x77 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x25 (concat ?x72 (concat ?x66 ?x5)))))
 (let (($x7 (= ?x78 input.dst.llvm-%l)))
 (let (($x41 (= $x7 true)))
 (let (($x23 (= $x41 true)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x14 (= $x68 true)))
 (let (($x37 (= $x14 true)))
 (let (($x45 (= $x37 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x42)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x16 $x71)))
 (let (($x28 (and $x60 $x21)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x70 $x28)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x47)))))))
 (let (($x34 (and $x76 $x9)))
 (let (($x51 (= $x34 true)))
 (let (($x54 (= $x51 true)))
 (let (($x55 (= $x54 true)))
 (let (($x69 (and $x55 $x45)))
 (let (($x81 (and $x69 $x23)))
 (let (($x166 (and $x81 $x165)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x167 (and $x46 $x166)))
 (let (($x169 (=> $x167 $x168)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf401870)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x40)
                                #xbf401877
                                #x00)
                         #xbf401875
                         #x00)
                  #xbf401873
                  #xbf)))
(let ((a!2 (store (store (store (store a!1 #x00000005 #x00) #xbf401874 #x00)
                         #xbf401871
                         #x18)
                  #xbf401876
                  #x00)))
  (store (store (store (store a!2 #x00000006 #x00) #x00000007 #x91)
                #x00000004
                #x00)
         #xbf401870
         #x70))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xbfbfbfbf)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf401873)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2048 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x19 (= (_ bv0 3) ?x48)))
 (let (($x59 (= $x19 true)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x82 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x82 (_ bv1 32))))
 (let (($x83 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (= $x83 $x149)))
 (let (($x63 (= ?x82 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x150 (= $x80 $x63)))
 (let (($x151 (and $x150 $x13)))
 (let (($x158 (= $x151 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x7 (concat ?x65 (concat ?x72 ?x74)))))
 (let (($x23 (= ?x41 input.dst.llvm-%l)))
 (let (($x81 (= $x23 true)))
 (let (($x79 (= $x81 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x37 (= $x14 true)))
 (let (($x45 (= $x37 true)))
 (let (($x69 (= $x45 true)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x21)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x17 $x60)))
 (let (($x9 (and $x42 $x28)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x38 $x9)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x18)))))))
 (let (($x51 (and $x16 $x34)))
 (let (($x54 (= $x51 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x10 (and $x56 $x69)))
 (let (($x24 (and $x10 $x79)))
 (let (($x58 (and $x24 $x158)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x39 (and $x62 $x58)))
 (let (($x84 (=> $x39 $x59)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x19 (= (_ bv0 3) ?x48)))
 (let (($x59 (= $x19 true)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x82 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x82 (_ bv1 32))))
 (let (($x83 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (= $x83 $x149)))
 (let (($x63 (= ?x82 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x150 (= $x80 $x63)))
 (let (($x151 (and $x150 $x13)))
 (let (($x158 (= $x151 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x7 (concat ?x65 (concat ?x72 ?x74)))))
 (let (($x23 (= ?x41 input.dst.llvm-%l)))
 (let (($x81 (= $x23 true)))
 (let (($x79 (= $x81 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x37 (= $x14 true)))
 (let (($x45 (= $x37 true)))
 (let (($x69 (= $x45 true)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x21)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x17 $x60)))
 (let (($x9 (and $x42 $x28)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x38 $x9)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x18)))))))
 (let (($x51 (and $x16 $x34)))
 (let (($x54 (= $x51 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x10 (and $x56 $x69)))
 (let (($x24 (and $x10 $x79)))
 (let (($x58 (and $x24 $x158)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x39 (and $x62 $x58)))
 (let (($x84 (=> $x39 $x59)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x84 (= $x59 true)))
 (let (($x85 (= $x84 true)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x150 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x151 (bvuge ?x150 (_ bv1 32))))
 (let (($x13 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x158 (= $x13 $x151)))
 (let (($x83 (= ?x150 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x149 (= $x82 $x83)))
 (let (($x58 (and $x149 $x158)))
 (let (($x39 (= $x58 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x23 (concat ?x73 (concat ?x65 ?x66)))))
 (let (($x79 (= ?x81 input.dst.llvm-%l)))
 (let (($x24 (= $x79 true)))
 (let (($x32 (= $x24 true)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x45 (= $x37 true)))
 (let (($x69 (= $x45 true)))
 (let (($x10 (= $x69 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x28)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x11 $x42)))
 (let (($x34 (and $x21 $x9)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x70 $x34)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x15)))))))
 (let (($x54 (and $x17 $x51)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x29 (and $x57 $x10)))
 (let (($x80 (and $x29 $x32)))
 (let (($x86 (and $x80 $x39)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x48 (and $x49 $x86)))
 (let (($x27 (=> $x48 $x85)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x84 (= $x59 true)))
 (let (($x85 (= $x84 true)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x150 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x151 (bvuge ?x150 (_ bv1 32))))
 (let (($x13 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x158 (= $x13 $x151)))
 (let (($x83 (= ?x150 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x149 (= $x82 $x83)))
 (let (($x58 (and $x149 $x158)))
 (let (($x39 (= $x58 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x23 (concat ?x73 (concat ?x65 ?x66)))))
 (let (($x79 (= ?x81 input.dst.llvm-%l)))
 (let (($x24 (= $x79 true)))
 (let (($x32 (= $x24 true)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x45 (= $x37 true)))
 (let (($x69 (= $x45 true)))
 (let (($x10 (= $x69 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x28)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x11 $x42)))
 (let (($x34 (and $x21 $x9)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x70 $x34)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x15)))))))
 (let (($x54 (and $x17 $x51)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x29 (and $x57 $x10)))
 (let (($x80 (and $x29 $x32)))
 (let (($x86 (and $x80 $x39)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x48 (and $x49 $x86)))
 (let (($x27 (=> $x48 $x85)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x27 (= $x85 true)))
 (let (($x25 (= $x27 true)))
 (let (($x83 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x149 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x149 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x39 (= $x158 $x58)))
 (let (($x13 (= ?x149 (_ bv0 32))))
 (let (($x150 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x151 (= $x150 $x13)))
 (let (($x86 (and $x151 $x39)))
 (let (($x48 (= $x86 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x79 (concat ?x61 (concat ?x73 ?x72)))))
 (let (($x32 (= ?x24 input.dst.llvm-%l)))
 (let (($x80 (= $x32 true)))
 (let (($x22 (= $x80 true)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x69 (= $x45 true)))
 (let (($x10 (= $x69 true)))
 (let (($x29 (= $x10 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x9)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x71 $x21)))
 (let (($x51 (and $x28 $x34)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x38 $x51)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x36)))))))
 (let (($x55 (and $x11 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x67 (= $x57 true)))
 (let (($x78 (and $x67 $x29)))
 (let (($x82 (and $x78 $x22)))
 (let (($x19 (and $x82 $x48)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x59 (and $x46 $x19)))
 (let (($x40 (=> $x59 $x25)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x27 (= $x85 true)))
 (let (($x25 (= $x27 true)))
 (let (($x83 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x149 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x149 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x39 (= $x158 $x58)))
 (let (($x13 (= ?x149 (_ bv0 32))))
 (let (($x150 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x151 (= $x150 $x13)))
 (let (($x86 (and $x151 $x39)))
 (let (($x48 (= $x86 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x79 (concat ?x61 (concat ?x73 ?x72)))))
 (let (($x32 (= ?x24 input.dst.llvm-%l)))
 (let (($x80 (= $x32 true)))
 (let (($x22 (= $x80 true)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x69 (= $x45 true)))
 (let (($x10 (= $x69 true)))
 (let (($x29 (= $x10 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x9)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x71 $x21)))
 (let (($x51 (and $x28 $x34)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x38 $x51)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x36)))))))
 (let (($x55 (and $x11 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x67 (= $x57 true)))
 (let (($x78 (and $x67 $x29)))
 (let (($x82 (and $x78 $x22)))
 (let (($x19 (and $x82 $x48)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x59 (and $x46 $x19)))
 (let (($x40 (=> $x59 $x25)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b01000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x80000003
                     #x00)
              #x80000001
              #x00)
       #x80000002
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483651 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x26 (= $x23 true)))
 (let (($x64 (= $x26 true)))
 (let (($x86 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x84 (not $x86)))
 (let (($x13 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x59 (not $x13)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x158 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge ?x158 (_ bv1 32))))
 (let (($x19 (= $x86 $x48)))
 (let (($x58 (= ?x158 (_ bv0 32))))
 (let (($x39 (= $x13 $x58)))
 (let (($x25 (and (and (and $x39 $x19) $x59) $x84)))
 (let (($x40 (= $x25 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x80 (concat ?x75 (concat ?x74 ?x66)))))
 (let (($x82 (= ?x22 input.dst.llvm-%l)))
 (let (($x63 (= $x82 true)))
 (let (($x150 (= $x63 true)))
 (let (($x10 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x29 (= $x10 true)))
 (let (($x78 (= $x29 true)))
 (let (($x41 (= $x78 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x51)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x42 $x9)))
 (let (($x55 (and $x34 $x54)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x12 $x55)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x17)))))))
 (let (($x57 (and $x60 $x56)))
 (let (($x67 (= $x57 true)))
 (let (($x68 (= $x67 true)))
 (let (($x14 (= $x68 true)))
 (let (($x81 (and $x14 $x41)))
 (let (($x83 (and $x81 $x150)))
 (let (($x7 (and $x83 $x40)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x49 (and $x46 $x7)))
 (let (($x87 (=> $x49 $x64)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x26 (= $x23 true)))
 (let (($x64 (= $x26 true)))
 (let (($x86 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x84 (not $x86)))
 (let (($x13 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x59 (not $x13)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x158 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge ?x158 (_ bv1 32))))
 (let (($x19 (= $x86 $x48)))
 (let (($x58 (= ?x158 (_ bv0 32))))
 (let (($x39 (= $x13 $x58)))
 (let (($x25 (and (and (and $x39 $x19) $x59) $x84)))
 (let (($x40 (= $x25 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x80 (concat ?x75 (concat ?x74 ?x66)))))
 (let (($x82 (= ?x22 input.dst.llvm-%l)))
 (let (($x63 (= $x82 true)))
 (let (($x150 (= $x63 true)))
 (let (($x10 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x29 (= $x10 true)))
 (let (($x78 (= $x29 true)))
 (let (($x41 (= $x78 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x51)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x42 $x9)))
 (let (($x55 (and $x34 $x54)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x12 $x55)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x17)))))))
 (let (($x57 (and $x60 $x56)))
 (let (($x67 (= $x57 true)))
 (let (($x68 (= $x67 true)))
 (let (($x14 (= $x68 true)))
 (let (($x81 (and $x14 $x41)))
 (let (($x83 (and $x81 $x150)))
 (let (($x7 (and $x83 $x40)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x49 (and $x46 $x7)))
 (let (($x87 (=> $x49 $x64)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x87 (= $x64 true)))
 (let (($x88 (= $x87 true)))
 (let (($x84 (= false false)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x25 (=> $x58 $x84)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x86 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x59 (bvuge ?x86 (_ bv1 32))))
 (let (($x85 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x27 (= $x85 $x59)))
 (let (($x48 (= ?x86 (_ bv0 32))))
 (let (($x19 (= $x58 $x48)))
 (let (($x7 (and (and $x19 $x27) $x25)))
 (let (($x49 (= $x7 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x63 (concat ?x24 (concat ?x61 ?x5)))))
 (let (($x83 (= ?x150 input.dst.llvm-%l)))
 (let (($x149 (= $x83 true)))
 (let (($x13 (= $x149 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (= $x78 true)))
 (let (($x81 (= $x41 true)))
 (let (($x79 (= $x81 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x28 $x51)))
 (let (($x57 (and $x54 $x56)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x44 $x57)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x47)))))))
 (let (($x68 (and $x21 $x67)))
 (let (($x14 (= $x68 true)))
 (let (($x37 (= $x14 true)))
 (let (($x45 (= $x37 true)))
 (let (($x32 (and $x45 $x79)))
 (let (($x151 (and $x32 $x13)))
 (let (($x8 (and $x151 $x49)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x23 (and $x46 $x8)))
 (let (($x30 (=> $x23 $x88)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x87 (= $x64 true)))
 (let (($x88 (= $x87 true)))
 (let (($x84 (= false false)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x25 (=> $x58 $x84)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x86 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x59 (bvuge ?x86 (_ bv1 32))))
 (let (($x85 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x27 (= $x85 $x59)))
 (let (($x48 (= ?x86 (_ bv0 32))))
 (let (($x19 (= $x58 $x48)))
 (let (($x7 (and (and $x19 $x27) $x25)))
 (let (($x49 (= $x7 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x63 (concat ?x24 (concat ?x61 ?x5)))))
 (let (($x83 (= ?x150 input.dst.llvm-%l)))
 (let (($x149 (= $x83 true)))
 (let (($x13 (= $x149 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (= $x78 true)))
 (let (($x81 (= $x41 true)))
 (let (($x79 (= $x81 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x28 $x51)))
 (let (($x57 (and $x54 $x56)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x44 $x57)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x47)))))))
 (let (($x68 (and $x21 $x67)))
 (let (($x14 (= $x68 true)))
 (let (($x37 (= $x14 true)))
 (let (($x45 (= $x37 true)))
 (let (($x32 (and $x45 $x79)))
 (let (($x151 (and $x32 $x13)))
 (let (($x8 (and $x151 $x49)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x23 (and $x46 $x8)))
 (let (($x30 (=> $x23 $x88)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b01000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483651 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x80000003
                     #x00)
              #x80000001
              #x00)
       #x80000002
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x53 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x76 (= $x53 true)))
 (let (($x72 (= $x76 true)))
 (let (($x49 (= false false)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (=> $x48 $x49)))
 (let (($x40 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (not $x40)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x85 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x85 (_ bv1 32))))
 (let (($x25 (= $x40 $x84)))
 (let (($x59 (= ?x85 (_ bv0 32))))
 (let (($x27 (= $x48 $x59)))
 (let (($x64 (and (and (and $x27 $x25) $x7) $x8)))
 (let (($x87 (= $x64 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x149 (concat ?x22 (concat ?x75 ?x73)))))
 (let (($x151 (= ?x13 input.dst.llvm-%l)))
 (let (($x158 (= $x151 true)))
 (let (($x58 (= $x158 true)))
 (let (($x81 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x79 (= $x81 true)))
 (let (($x32 (= $x79 true)))
 (let (($x80 (= $x32 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x34 $x55)))
 (let (($x68 (and $x56 $x67)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x36 $x68)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x70)))))))
 (let (($x37 (and $x9 $x14)))
 (let (($x45 (= $x37 true)))
 (let (($x69 (= $x45 true)))
 (let (($x10 (= $x69 true)))
 (let (($x82 (and $x10 $x80)))
 (let (($x39 (and $x82 $x58)))
 (let (($x88 (and $x39 $x87)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x46 $x88)))
 (let (($x65 (=> $x30 $x72)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x53 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x76 (= $x53 true)))
 (let (($x72 (= $x76 true)))
 (let (($x49 (= false false)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (=> $x48 $x49)))
 (let (($x40 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (not $x40)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x85 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x85 (_ bv1 32))))
 (let (($x25 (= $x40 $x84)))
 (let (($x59 (= ?x85 (_ bv0 32))))
 (let (($x27 (= $x48 $x59)))
 (let (($x64 (and (and (and $x27 $x25) $x7) $x8)))
 (let (($x87 (= $x64 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x149 (concat ?x22 (concat ?x75 ?x73)))))
 (let (($x151 (= ?x13 input.dst.llvm-%l)))
 (let (($x158 (= $x151 true)))
 (let (($x58 (= $x158 true)))
 (let (($x81 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x79 (= $x81 true)))
 (let (($x32 (= $x79 true)))
 (let (($x80 (= $x32 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x34 $x55)))
 (let (($x68 (and $x56 $x67)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x36 $x68)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x70)))))))
 (let (($x37 (and $x9 $x14)))
 (let (($x45 (= $x37 true)))
 (let (($x69 (= $x45 true)))
 (let (($x10 (= $x69 true)))
 (let (($x82 (and $x10 $x80)))
 (let (($x39 (and $x82 $x58)))
 (let (($x88 (and $x39 $x87)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x46 $x88)))
 (let (($x65 (=> $x30 $x72)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x166 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x167 (= $x166 true)))
 (let (($x168 (= $x167 true)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x93 (concat ?x97 ?x95))))
 (let ((?x122 (bvadd ?x102 (_ bv4 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x127))))
 (let (($x156 (= (_ bv0 32) ?x129)))
 (let ((?x130 (ite $x156 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x130 (_ bv1 32))))
 (let (($x134 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x140 (= $x134 $x137)))
 (let (($x108 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x23 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (and $x23 $x108)))
 (let (($x141 (=> $x110 $x140)))
 (let (($x135 (= ?x130 (_ bv0 32))))
 (let (($x119 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x133 (= $x119 $x135)))
 (let (($x131 (=> $x110 $x133)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x117))))
 (let (($x123 (= input.spec-%var-l-1.2.1.2.0 ?x155)))
 (let (($x121 (=> $x110 $x123)))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x104 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x104 (_ bv1 32))))
 (let (($x109 (= $x108 $x161)))
 (let (($x154 (=> $x23 $x109)))
 (let (($x49 (= false false)))
 (let (($x90 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x23 $x90)))
 (let (($x153 (=> $x160 $x49)))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x106 (= $x90 $x105)))
 (let (($x107 (=> $x23 $x106)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x53)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x65)))
 (let (($x66 (= input.spec-%var-l-1.2.0 ?x50)))
 (let (($x159 (=> $x23 $x66)))
 (let (($x59 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (=> $x59 $x49)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x40 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x40 (_ bv1 32))))
 (let (($x26 (= $x23 $x7)))
 (let (($x84 (= ?x40 (_ bv0 32))))
 (let (($x25 (= $x59 $x84)))
 (let (($x35 (and (and (and (and (and (and $x25 $x26) $x8) $x159) $x107) $x153) $x154)))
 (let (($x31 (and (and (and $x35 $x121) $x131) $x141)))
 (let (($x147 (= $x31 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x158 (concat ?x150 (concat ?x24 ?x74)))))
 (let (($x39 (= ?x58 input.dst.llvm-%l)))
 (let (($x86 (= $x39 true)))
 (let (($x48 (= $x86 true)))
 (let (($x32 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x80 (= $x32 true)))
 (let (($x82 (= $x80 true)))
 (let (($x63 (= $x82 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x68)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x54 $x57)))
 (let (($x37 (and $x67 $x14)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x17 $x37)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x71)))))))
 (let (($x69 (and $x51 $x45)))
 (let (($x10 (= $x69 true)))
 (let (($x29 (= $x10 true)))
 (let (($x78 (= $x29 true)))
 (let (($x83 (and $x78 $x63)))
 (let (($x19 (and $x83 $x48)))
 (let (($x148 (and $x19 $x147)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x77 (and $x46 $x148)))
 (let (($x169 (=> $x77 $x168)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x166 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x167 (= $x166 true)))
 (let (($x168 (= $x167 true)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x93 (concat ?x97 ?x95))))
 (let ((?x122 (bvadd ?x102 (_ bv4 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x127))))
 (let (($x156 (= (_ bv0 32) ?x129)))
 (let ((?x130 (ite $x156 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x130 (_ bv1 32))))
 (let (($x134 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x140 (= $x134 $x137)))
 (let (($x108 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x23 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (and $x23 $x108)))
 (let (($x141 (=> $x110 $x140)))
 (let (($x135 (= ?x130 (_ bv0 32))))
 (let (($x119 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x133 (= $x119 $x135)))
 (let (($x131 (=> $x110 $x133)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x117))))
 (let (($x123 (= input.spec-%var-l-1.2.1.2.0 ?x155)))
 (let (($x121 (=> $x110 $x123)))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x104 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x104 (_ bv1 32))))
 (let (($x109 (= $x108 $x161)))
 (let (($x154 (=> $x23 $x109)))
 (let (($x49 (= false false)))
 (let (($x90 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x23 $x90)))
 (let (($x153 (=> $x160 $x49)))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x106 (= $x90 $x105)))
 (let (($x107 (=> $x23 $x106)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x53)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x65)))
 (let (($x66 (= input.spec-%var-l-1.2.0 ?x50)))
 (let (($x159 (=> $x23 $x66)))
 (let (($x59 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (=> $x59 $x49)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x40 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x40 (_ bv1 32))))
 (let (($x26 (= $x23 $x7)))
 (let (($x84 (= ?x40 (_ bv0 32))))
 (let (($x25 (= $x59 $x84)))
 (let (($x35 (and (and (and (and (and (and $x25 $x26) $x8) $x159) $x107) $x153) $x154)))
 (let (($x31 (and (and (and $x35 $x121) $x131) $x141)))
 (let (($x147 (= $x31 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x158 (concat ?x150 (concat ?x24 ?x74)))))
 (let (($x39 (= ?x58 input.dst.llvm-%l)))
 (let (($x86 (= $x39 true)))
 (let (($x48 (= $x86 true)))
 (let (($x32 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x80 (= $x32 true)))
 (let (($x82 (= $x80 true)))
 (let (($x63 (= $x82 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x68)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x54 $x57)))
 (let (($x37 (and $x67 $x14)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x17 $x37)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x71)))))))
 (let (($x69 (and $x51 $x45)))
 (let (($x10 (= $x69 true)))
 (let (($x29 (= $x10 true)))
 (let (($x78 (= $x29 true)))
 (let (($x83 (and $x78 $x63)))
 (let (($x19 (and $x83 $x48)))
 (let (($x148 (and $x19 $x147)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x77 (and $x46 $x148)))
 (let (($x169 (=> $x77 $x168)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b01000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv10 32) (_ bv2 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x30303034)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x4bfb8629)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x30))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x30303030)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x30303030)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x30303030)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x30303034)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x30303037)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x6 (= $x20 true)))
 (let (($x171 (= $x6 true)))
 (let (($x135 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x145 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x164 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x154 (and $x164 $x145)))
 (let (($x140 (and $x154 $x135)))
 (let (($x141 (not $x140)))
 (let (($x121 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x134 (and $x154 $x121)))
 (let (($x137 (not $x134)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x96 ?x99))))
 (let ((?x157 (bvadd ?x103 (_ bv4 32))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x139))))
 (let (($x127 (= (_ bv0 32) ?x163)))
 (let ((?x138 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x138 (_ bv1 32))))
 (let (($x131 (= $x135 $x133)))
 (let (($x146 (=> $x154 $x131)))
 (let (($x129 (= ?x138 (_ bv0 32))))
 (let (($x156 (= $x121 $x129)))
 (let (($x130 (=> $x154 $x156)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x115))))
 (let (($x120 (= input.spec-%var-l-1.2.1.2.0 ?x117)))
 (let (($x155 (=> $x154 $x120)))
 (let (($x104 (= (_ bv0 32) ?x103)))
 (let ((?x105 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x105 (_ bv1 32))))
 (let (($x161 (= $x145 $x108)))
 (let (($x109 (=> $x164 $x161)))
 (let (($x142 (= false false)))
 (let (($x91 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x164 $x91)))
 (let (($x153 (=> $x160 $x142)))
 (let (($x106 (= ?x105 (_ bv0 32))))
 (let (($x107 (= $x91 $x106)))
 (let (($x144 (=> $x164 $x107)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x65)))
 (let (($x143 (= input.spec-%var-l-1.2.0 ?x159)))
 (let (($x89 (=> $x164 $x143)))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x84 $x142)))
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x23 (_ bv1 32))))
 (let (($x8 (= $x164 $x49)))
 (let (($x7 (= ?x23 (_ bv0 32))))
 (let (($x26 (= $x84 $x7)))
 (let (($x166 (and (and (and (and (and (and $x26 $x8) $x64) $x89) $x144) $x153) $x109)))
 (let (($x87 (and (and (and (and (and $x166 $x155) $x130) $x146) $x137) $x141)))
 (let (($x16 (= $x87 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x86 (concat ?x13 (concat ?x22 ?x61)))))
 (let (($x19 (= ?x48 input.dst.llvm-%l)))
 (let (($x85 (= $x19 true)))
 (let (($x59 (= $x85 true)))
 (let (($x82 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x63 (= $x82 true)))
 (let (($x83 (= $x63 true)))
 (let (($x149 (= $x83 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x37)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x56 $x68)))
 (let (($x69 (and $x14 $x45)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x47 $x69)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x42)))))))
 (let (($x29 (and $x55 $x10)))
 (let (($x78 (= $x29 true)))
 (let (($x41 (= $x78 true)))
 (let (($x81 (= $x41 true)))
 (let (($x151 (and $x81 $x149)))
 (let (($x27 (and $x151 $x59)))
 (let (($x11 (and $x27 $x16)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x5 (and $x46 $x11)))
 (let (($x172 (=> $x5 $x171)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (bvsle input.dst.llvm-%l (_ bv8 32))))
 (let (($x6 (= $x20 true)))
 (let (($x171 (= $x6 true)))
 (let (($x135 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x145 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x164 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x154 (and $x164 $x145)))
 (let (($x140 (and $x154 $x135)))
 (let (($x141 (not $x140)))
 (let (($x121 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x134 (and $x154 $x121)))
 (let (($x137 (not $x134)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x96 ?x99))))
 (let ((?x157 (bvadd ?x103 (_ bv4 32))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x139))))
 (let (($x127 (= (_ bv0 32) ?x163)))
 (let ((?x138 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x138 (_ bv1 32))))
 (let (($x131 (= $x135 $x133)))
 (let (($x146 (=> $x154 $x131)))
 (let (($x129 (= ?x138 (_ bv0 32))))
 (let (($x156 (= $x121 $x129)))
 (let (($x130 (=> $x154 $x156)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x115))))
 (let (($x120 (= input.spec-%var-l-1.2.1.2.0 ?x117)))
 (let (($x155 (=> $x154 $x120)))
 (let (($x104 (= (_ bv0 32) ?x103)))
 (let ((?x105 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x105 (_ bv1 32))))
 (let (($x161 (= $x145 $x108)))
 (let (($x109 (=> $x164 $x161)))
 (let (($x142 (= false false)))
 (let (($x91 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x164 $x91)))
 (let (($x153 (=> $x160 $x142)))
 (let (($x106 (= ?x105 (_ bv0 32))))
 (let (($x107 (= $x91 $x106)))
 (let (($x144 (=> $x164 $x107)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x65)))
 (let (($x143 (= input.spec-%var-l-1.2.0 ?x159)))
 (let (($x89 (=> $x164 $x143)))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x84 $x142)))
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x23 (_ bv1 32))))
 (let (($x8 (= $x164 $x49)))
 (let (($x7 (= ?x23 (_ bv0 32))))
 (let (($x26 (= $x84 $x7)))
 (let (($x166 (and (and (and (and (and (and $x26 $x8) $x64) $x89) $x144) $x153) $x109)))
 (let (($x87 (and (and (and (and (and $x166 $x155) $x130) $x146) $x137) $x141)))
 (let (($x16 (= $x87 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x86 (concat ?x13 (concat ?x22 ?x61)))))
 (let (($x19 (= ?x48 input.dst.llvm-%l)))
 (let (($x85 (= $x19 true)))
 (let (($x59 (= $x85 true)))
 (let (($x82 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x63 (= $x82 true)))
 (let (($x83 (= $x63 true)))
 (let (($x149 (= $x83 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x37)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x56 $x68)))
 (let (($x69 (and $x14 $x45)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x47 $x69)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x42)))))))
 (let (($x29 (and $x55 $x10)))
 (let (($x78 (= $x29 true)))
 (let (($x41 (= $x78 true)))
 (let (($x81 (= $x41 true)))
 (let (($x151 (and $x81 $x149)))
 (let (($x27 (and $x151 $x59)))
 (let (($x11 (and $x27 $x16)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x5 (and $x46 $x11)))
 (let (($x172 (=> $x5 $x171)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b01000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv131072 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv10 32) (_ bv2 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00f70000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x7354fd76)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x00f70002
              #xf7)
       #x00000006
       #x98))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00f70000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00f70000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00f70000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00f70003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x164 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (bvuge ?x164 (_ bv1 32))))
 (let (($x65 (= $x142 false)))
 (let (($x76 (= false false)))
 (let (($x49 (= ?x164 (_ bv0 32))))
 (let (($x18 (=> $x49 $x76)))
 (let (($x89 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x49 true)) $x18) $x65)))
 (let (($x53 (not true)))
 (let (($x148 (or $x53 $x89)))
 (let (($x88 (= true true)))
 (let (($x90 (and $x88 $x148)))
 (let (($x91 (= $x90 true)))
 (let (($x31 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x64 (= $x31 $x142)))
 (let (($x7 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (= $x7 $x49)))
 (let (($x147 (and $x8 $x64)))
 (let (($x152 (= $x147 true)))
 (let (($x59 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x27 (= $x59 true)))
 (let (($x40 (= $x27 true)))
 (let (($x84 (= $x40 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x74)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x69 $x39)))
 (let (($x13 (and $x86 $x75)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x45 $x13)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x32)))))))
 (let (($x22 (and $x151 $x150)))
 (let (($x61 (= $x22 true)))
 (let (($x24 (= $x61 true)))
 (let (($x58 (= $x24 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x47 (concat ?x28 (concat ?x71 ?x70)))))
 (let (($x67 (= ?x56 input.dst.llvm-%l)))
 (let (($x68 (= $x67 true)))
 (let (($x14 (= $x68 true)))
 (let (($x48 (and $x14 $x58)))
 (let (($x25 (and $x48 $x84)))
 (let (($x50 (and $x25 $x152)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x66 (and $x46 $x50)))
 (let (($x92 (=> $x66 $x91)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x164 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (bvuge ?x164 (_ bv1 32))))
 (let (($x65 (= $x142 false)))
 (let (($x76 (= false false)))
 (let (($x49 (= ?x164 (_ bv0 32))))
 (let (($x18 (=> $x49 $x76)))
 (let (($x89 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x49 true)) $x18) $x65)))
 (let (($x53 (not true)))
 (let (($x148 (or $x53 $x89)))
 (let (($x88 (= true true)))
 (let (($x90 (and $x88 $x148)))
 (let (($x91 (= $x90 true)))
 (let (($x31 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x64 (= $x31 $x142)))
 (let (($x7 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (= $x7 $x49)))
 (let (($x147 (and $x8 $x64)))
 (let (($x152 (= $x147 true)))
 (let (($x59 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x27 (= $x59 true)))
 (let (($x40 (= $x27 true)))
 (let (($x84 (= $x40 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x74)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x69 $x39)))
 (let (($x13 (and $x86 $x75)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x45 $x13)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x32)))))))
 (let (($x22 (and $x151 $x150)))
 (let (($x61 (= $x22 true)))
 (let (($x24 (= $x61 true)))
 (let (($x58 (= $x24 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x47 (concat ?x28 (concat ?x71 ?x70)))))
 (let (($x67 (= ?x56 input.dst.llvm-%l)))
 (let (($x68 (= $x67 true)))
 (let (($x14 (= $x68 true)))
 (let (($x48 (and $x14 $x58)))
 (let (($x25 (and $x48 $x84)))
 (let (($x50 (and $x25 $x152)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x66 (and $x46 $x50)))
 (let (($x92 (=> $x66 $x91)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x80000003
                     #x00)
              #x80000002
              #x00)
       #x80000001
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv64 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x31 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x31 (_ bv1 32))))
 (let (($x90 (= $x152 false)))
 (let (($x66 (= false false)))
 (let (($x142 (= ?x31 (_ bv0 32))))
 (let (($x148 (=> $x142 $x66)))
 (let (($x98 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x142 true)) $x148) $x90)))
 (let (($x143 (not true)))
 (let (($x12 (or $x143 $x98)))
 (let (($x18 (= true true)))
 (let (($x37 (and $x18 $x12)))
 (let (($x21 (= $x37 true)))
 (let (($x49 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (=> $x49 $x66)))
 (let (($x72 (and (and (= $x49 $x142) (= (bvuge input.spec-%var-l-1.0 (_ bv1 32)) $x152)) $x88)))
 (let (($x30 (= $x72 true)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x25 (= $x84 true)))
 (let (($x23 (= $x25 true)))
 (let (($x7 (= $x23 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x150)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x81 $x75)))
 (let (($x61 (and $x13 $x22)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x78 $x61)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x83)))))))
 (let (($x58 (and $x86 $x24)))
 (let (($x48 (= $x58 true)))
 (let (($x19 (= $x48 true)))
 (let (($x85 (= $x19 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x57 (concat ?x70 (concat ?x28 ?x47)))))
 (let (($x14 (= ?x67 input.dst.llvm-%l)))
 (let (($x10 (= $x14 true)))
 (let (($x29 (= $x10 true)))
 (let (($x59 (and $x29 $x85)))
 (let (($x26 (and $x59 $x7)))
 (let (($x159 (and $x26 $x30)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x76 (and $x46 $x159)))
 (let (($x100 (=> $x76 $x21)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x31 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x31 (_ bv1 32))))
 (let (($x90 (= $x152 false)))
 (let (($x66 (= false false)))
 (let (($x142 (= ?x31 (_ bv0 32))))
 (let (($x148 (=> $x142 $x66)))
 (let (($x98 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x142 true)) $x148) $x90)))
 (let (($x143 (not true)))
 (let (($x12 (or $x143 $x98)))
 (let (($x18 (= true true)))
 (let (($x37 (and $x18 $x12)))
 (let (($x21 (= $x37 true)))
 (let (($x49 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (=> $x49 $x66)))
 (let (($x72 (and (and (= $x49 $x142) (= (bvuge input.spec-%var-l-1.0 (_ bv1 32)) $x152)) $x88)))
 (let (($x30 (= $x72 true)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x25 (= $x84 true)))
 (let (($x23 (= $x25 true)))
 (let (($x7 (= $x23 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x150)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x81 $x75)))
 (let (($x61 (and $x13 $x22)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x78 $x61)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x83)))))))
 (let (($x58 (and $x86 $x24)))
 (let (($x48 (= $x58 true)))
 (let (($x19 (= $x48 true)))
 (let (($x85 (= $x19 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x57 (concat ?x70 (concat ?x28 ?x47)))))
 (let (($x14 (= ?x67 input.dst.llvm-%l)))
 (let (($x10 (= $x14 true)))
 (let (($x29 (= $x10 true)))
 (let (($x59 (and $x29 $x85)))
 (let (($x26 (and $x59 $x7)))
 (let (($x159 (and $x26 $x30)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x76 (and $x46 $x159)))
 (let (($x100 (=> $x76 $x21)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x80000003
                     #x00)
              #x80000002
              #x00)
       #x80000001
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv64 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x147 (_ bv1 32))))
 (let (($x171 (= $x66 false)))
 (let (($x72 (= false false)))
 (let (($x152 (= ?x147 (_ bv0 32))))
 (let (($x6 (=> $x152 $x72)))
 (let (($x15 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x152 true)) $x6) $x171)))
 (let (($x5 (not true)))
 (let (($x43 (or $x5 $x15)))
 (let (($x11 (= true true)))
 (let (($x60 (and $x11 $x43)))
 (let (($x73 (= $x60 true)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x96 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x104 (concat ?x103 (concat ?x93 ?x101))))
 (let ((?x167 (bvadd ?x104 (_ bv4 32))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x125))))
 (let (($x139 (= (_ bv0 32) ?x116)))
 (let ((?x132 (ite $x139 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x132 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x130 (= $x129 $x156)))
 (let (($x165 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x53 $x165)))
 (let (($x168 (=> $x109 $x130)))
 (let (($x163 (= ?x132 (_ bv0 32))))
 (let (($x155 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x127 (= $x155 $x163)))
 (let (($x138 (=> $x109 $x127)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x162))))
 (let (($x112 (= input.spec-%var-l-1.2.1.2.0 ?x115)))
 (let (($x117 (=> $x109 $x112)))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x106 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x145 (bvuge ?x106 (_ bv1 32))))
 (let (($x108 (= $x165 $x145)))
 (let (($x161 (=> $x53 $x108)))
 (let (($x102 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x53 $x102)))
 (let (($x153 (=> $x160 $x72)))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (let (($x144 (= $x102 $x107)))
 (let (($x77 (=> $x53 $x144)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x89)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x92)))
 (let (($x37 (= input.spec-%var-l-1.2.0 ?x12)))
 (let (($x21 (=> $x53 $x37)))
 (let (($x142 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x30 (=> $x142 $x72)))
 (let (($x169 (and (and (and (and (and (= $x142 $x152) (= $x53 $x66)) $x30) $x21) $x77) $x153)))
 (let (($x140 (and (and (and (and $x169 $x161) $x117) $x138) $x168)))
 (let (($x141 (= $x140 true)))
 (let (($x7 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x26 (= $x7 true)))
 (let (($x164 (= $x26 true)))
 (let (($x49 (= $x164 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x24)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x82 $x22)))
 (let (($x48 (and $x61 $x58)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x32 $x48)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x158)))))))
 (let (($x85 (and $x13 $x19)))
 (let (($x59 (= $x85 true)))
 (let (($x27 (= $x59 true)))
 (let (($x40 (= $x27 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x68 (concat ?x47 (concat ?x70 ?x57)))))
 (let (($x29 (= ?x14 input.dst.llvm-%l)))
 (let (($x79 (= $x29 true)))
 (let (($x41 (= $x79 true)))
 (let (($x84 (and $x41 $x40)))
 (let (($x8 (and $x84 $x49)))
 (let (($x87 (and $x8 $x141)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x16 (and $x46 $x87)))
 (let (($x174 (=> $x16 $x73)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x147 (_ bv1 32))))
 (let (($x171 (= $x66 false)))
 (let (($x72 (= false false)))
 (let (($x152 (= ?x147 (_ bv0 32))))
 (let (($x6 (=> $x152 $x72)))
 (let (($x15 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x152 true)) $x6) $x171)))
 (let (($x5 (not true)))
 (let (($x43 (or $x5 $x15)))
 (let (($x11 (= true true)))
 (let (($x60 (and $x11 $x43)))
 (let (($x73 (= $x60 true)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x96 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x104 (concat ?x103 (concat ?x93 ?x101))))
 (let ((?x167 (bvadd ?x104 (_ bv4 32))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x125))))
 (let (($x139 (= (_ bv0 32) ?x116)))
 (let ((?x132 (ite $x139 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x132 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x130 (= $x129 $x156)))
 (let (($x165 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x53 $x165)))
 (let (($x168 (=> $x109 $x130)))
 (let (($x163 (= ?x132 (_ bv0 32))))
 (let (($x155 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x127 (= $x155 $x163)))
 (let (($x138 (=> $x109 $x127)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x162))))
 (let (($x112 (= input.spec-%var-l-1.2.1.2.0 ?x115)))
 (let (($x117 (=> $x109 $x112)))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x106 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x145 (bvuge ?x106 (_ bv1 32))))
 (let (($x108 (= $x165 $x145)))
 (let (($x161 (=> $x53 $x108)))
 (let (($x102 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x53 $x102)))
 (let (($x153 (=> $x160 $x72)))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (let (($x144 (= $x102 $x107)))
 (let (($x77 (=> $x53 $x144)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x89)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x92)))
 (let (($x37 (= input.spec-%var-l-1.2.0 ?x12)))
 (let (($x21 (=> $x53 $x37)))
 (let (($x142 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x30 (=> $x142 $x72)))
 (let (($x169 (and (and (and (and (and (= $x142 $x152) (= $x53 $x66)) $x30) $x21) $x77) $x153)))
 (let (($x140 (and (and (and (and $x169 $x161) $x117) $x138) $x168)))
 (let (($x141 (= $x140 true)))
 (let (($x7 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x26 (= $x7 true)))
 (let (($x164 (= $x26 true)))
 (let (($x49 (= $x164 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x24)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x82 $x22)))
 (let (($x48 (and $x61 $x58)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x32 $x48)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x158)))))))
 (let (($x85 (and $x13 $x19)))
 (let (($x59 (= $x85 true)))
 (let (($x27 (= $x59 true)))
 (let (($x40 (= $x27 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x68 (concat ?x47 (concat ?x70 ?x57)))))
 (let (($x29 (= ?x14 input.dst.llvm-%l)))
 (let (($x79 (= $x29 true)))
 (let (($x41 (= $x79 true)))
 (let (($x84 (and $x41 $x40)))
 (let (($x8 (and $x84 $x49)))
 (let (($x87 (and $x8 $x141)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x16 (and $x46 $x87)))
 (let (($x174 (=> $x16 $x73)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff3100)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xff)
              #xffff3101
              #x31)
       #xffff3100
       #x00))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffff3100)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffff3100)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff3103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff3100)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x50 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x50 (_ bv1 32))))
 (let (($x254 (= $x135 false)))
 (let (($x30 (= false false)))
 (let (($x53 (= ?x50 (_ bv0 32))))
 (let (($x253 (=> $x53 $x30)))
 (let (($x257 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x53 true)) $x253) $x254)))
 (let (($x250 (not true)))
 (let (($x258 (or $x250 $x257)))
 (let (($x249 (= true true)))
 (let (($x259 (and $x249 $x258)))
 (let (($x260 (= $x259 true)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x104 (concat ?x99 (concat ?x96 ?x93))))
 (let ((?x117 (bvadd ?x104 (_ bv4 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x167))))
 (let ((?x43 (bvadd ?x157 (_ bv4 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x175))))
 (let ((?x206 (bvadd ?x178 (_ bv4 32))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x210))))
 (let (($x217 (= (_ bv0 32) ?x216)))
 (let ((?x218 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x218 (_ bv1 32))))
 (let (($x224 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x224 $x225)))
 (let (($x186 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x132 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x88 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (and $x88 $x153)))
 (let (($x156 (and $x108 $x132)))
 (let (($x190 (and $x156 $x186)))
 (let (($x227 (=> $x190 $x226)))
 (let (($x205 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x222 (and $x190 $x205)))
 (let (($x223 (=> $x222 $x30)))
 (let (($x219 (= ?x218 (_ bv0 32))))
 (let (($x220 (= $x205 $x219)))
 (let (($x221 (=> $x190 $x220)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x195))))
 (let (($x202 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x201)))
 (let (($x203 (=> $x190 $x202)))
 (let (($x179 (= (_ bv0 32) ?x178)))
 (let ((?x180 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x180 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x189 (=> $x156 $x188)))
 (let (($x15 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x156 $x15)))
 (let (($x185 (=> $x184 $x30)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x15 $x181)))
 (let (($x183 (=> $x156 $x182)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x87))))
 (let (($x6 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x172)))
 (let (($x173 (=> $x156 $x6)))
 (let (($x112 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x170 (and $x108 $x112)))
 (let (($x129 (=> $x170 $x30)))
 (let (($x123 (= (_ bv0 32) ?x157)))
 (let ((?x125 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x125 (_ bv1 32))))
 (let (($x127 (= $x132 $x163)))
 (let (($x138 (=> $x108 $x127)))
 (let (($x136 (= ?x125 (_ bv0 32))))
 (let (($x116 (= $x112 $x136)))
 (let (($x139 (=> $x108 $x116)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x114))))
 (let (($x162 (= input.spec-%var-l-1.2.1.2.0 ?x154)))
 (let (($x111 (=> $x108 $x162)))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x106 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x106 (_ bv1 32))))
 (let (($x165 (= $x153 $x169)))
 (let (($x145 (=> $x88 $x165)))
 (let (($x102 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x146 (and $x88 $x102)))
 (let (($x160 (=> $x146 $x30)))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (let (($x144 (= $x102 $x107)))
 (let (($x77 (=> $x88 $x144)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x143)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x89)))
 (let (($x21 (= input.spec-%var-l-1.2.0 ?x37)))
 (let (($x131 (=> $x88 $x21)))
 (let (($x147 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x133 (=> $x147 $x30)))
 (let (($x232 (and (and (and (and (and (= $x147 $x53) (= $x88 $x135)) $x133) $x131) $x77) $x160)))
 (let (($x238 (and (and (and (and (and (and $x232 $x145) $x111) $x139) $x138) $x129) $x173)))
 (let (($x244 (and (and (and (and (and (and $x238 $x183) $x185) $x189) $x203) $x221) $x223)))
 (let (($x245 (and $x244 $x227)))
 (let (($x246 (= $x245 true)))
 (let (($x164 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x49 (= $x164 true)))
 (let (($x8 (= $x49 true)))
 (let (($x31 (= $x8 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x22)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x27 $x82)))
 (let (($x24 (and $x150 $x61)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x75 $x24)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x151)))))))
 (let (($x48 (and $x13 $x58)))
 (let (($x40 (= $x48 true)))
 (let (($x84 (= $x40 true)))
 (let (($x25 (= $x84 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x14 (concat ?x70 (concat ?x67 ?x85)))))
 (let (($x79 (= ?x10 input.dst.llvm-%l)))
 (let (($x41 (= $x79 true)))
 (let (($x63 (= $x41 true)))
 (let (($x23 (and $x63 $x25)))
 (let (($x142 (and $x23 $x31)))
 (let (($x247 (and $x142 $x246)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x248 (and $x62 $x247)))
 (let (($x261 (=> $x248 $x260)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x50 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x50 (_ bv1 32))))
 (let (($x254 (= $x135 false)))
 (let (($x30 (= false false)))
 (let (($x53 (= ?x50 (_ bv0 32))))
 (let (($x253 (=> $x53 $x30)))
 (let (($x257 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x53 true)) $x253) $x254)))
 (let (($x250 (not true)))
 (let (($x258 (or $x250 $x257)))
 (let (($x249 (= true true)))
 (let (($x259 (and $x249 $x258)))
 (let (($x260 (= $x259 true)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x104 (concat ?x99 (concat ?x96 ?x93))))
 (let ((?x117 (bvadd ?x104 (_ bv4 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x167))))
 (let ((?x43 (bvadd ?x157 (_ bv4 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x175))))
 (let ((?x206 (bvadd ?x178 (_ bv4 32))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x210))))
 (let (($x217 (= (_ bv0 32) ?x216)))
 (let ((?x218 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x218 (_ bv1 32))))
 (let (($x224 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x226 (= $x224 $x225)))
 (let (($x186 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x132 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x88 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (and $x88 $x153)))
 (let (($x156 (and $x108 $x132)))
 (let (($x190 (and $x156 $x186)))
 (let (($x227 (=> $x190 $x226)))
 (let (($x205 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x222 (and $x190 $x205)))
 (let (($x223 (=> $x222 $x30)))
 (let (($x219 (= ?x218 (_ bv0 32))))
 (let (($x220 (= $x205 $x219)))
 (let (($x221 (=> $x190 $x220)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x195))))
 (let (($x202 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x201)))
 (let (($x203 (=> $x190 $x202)))
 (let (($x179 (= (_ bv0 32) ?x178)))
 (let ((?x180 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x180 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x189 (=> $x156 $x188)))
 (let (($x15 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x156 $x15)))
 (let (($x185 (=> $x184 $x30)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x15 $x181)))
 (let (($x183 (=> $x156 $x182)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x87))))
 (let (($x6 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x172)))
 (let (($x173 (=> $x156 $x6)))
 (let (($x112 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x170 (and $x108 $x112)))
 (let (($x129 (=> $x170 $x30)))
 (let (($x123 (= (_ bv0 32) ?x157)))
 (let ((?x125 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x125 (_ bv1 32))))
 (let (($x127 (= $x132 $x163)))
 (let (($x138 (=> $x108 $x127)))
 (let (($x136 (= ?x125 (_ bv0 32))))
 (let (($x116 (= $x112 $x136)))
 (let (($x139 (=> $x108 $x116)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x114))))
 (let (($x162 (= input.spec-%var-l-1.2.1.2.0 ?x154)))
 (let (($x111 (=> $x108 $x162)))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x106 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x106 (_ bv1 32))))
 (let (($x165 (= $x153 $x169)))
 (let (($x145 (=> $x88 $x165)))
 (let (($x102 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x146 (and $x88 $x102)))
 (let (($x160 (=> $x146 $x30)))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (let (($x144 (= $x102 $x107)))
 (let (($x77 (=> $x88 $x144)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x143)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x89)))
 (let (($x21 (= input.spec-%var-l-1.2.0 ?x37)))
 (let (($x131 (=> $x88 $x21)))
 (let (($x147 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x133 (=> $x147 $x30)))
 (let (($x232 (and (and (and (and (and (= $x147 $x53) (= $x88 $x135)) $x133) $x131) $x77) $x160)))
 (let (($x238 (and (and (and (and (and (and $x232 $x145) $x111) $x139) $x138) $x129) $x173)))
 (let (($x244 (and (and (and (and (and (and $x238 $x183) $x185) $x189) $x203) $x221) $x223)))
 (let (($x245 (and $x244 $x227)))
 (let (($x246 (= $x245 true)))
 (let (($x164 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x49 (= $x164 true)))
 (let (($x8 (= $x49 true)))
 (let (($x31 (= $x8 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x22)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x27 $x82)))
 (let (($x24 (and $x150 $x61)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x75 $x24)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x151)))))))
 (let (($x48 (and $x13 $x58)))
 (let (($x40 (= $x48 true)))
 (let (($x84 (= $x40 true)))
 (let (($x25 (= $x84 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x14 (concat ?x70 (concat ?x67 ?x85)))))
 (let (($x79 (= ?x10 input.dst.llvm-%l)))
 (let (($x41 (= $x79 true)))
 (let (($x63 (= $x41 true)))
 (let (($x23 (and $x63 $x25)))
 (let (($x142 (and $x23 $x31)))
 (let (($x247 (and $x142 $x246)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x248 (and $x62 $x247)))
 (let (($x261 (=> $x248 $x260)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa841cc00)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000006
                                #xcd)
                         #xe4cd3b05
                         #xcc)
                  #xe4cd3b06
                  #x41)))
(let ((a!2 (store (store (store (store a!1 #xa841cc01 #xcc) #xa841cc03 #xa8)
                         #x00000007
                         #xe4)
                  #xa841cc02
                  #x41)))
  (store (store a!2 #x00000005 #x3b) #xe4cd3b07 #xa8))))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x57be33ff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xa841cc00)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xa841cc00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa841cc03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa841cc00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= false true)))
 (let (($x18 (= $x65 true)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x88 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x88 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x133 (= $x228 $x30)))
 (let (($x135 (= ?x88 (_ bv0 32))))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (= $x53 $x135)))
 (let (($x229 (and $x72 $x133)))
 (let (($x159 (= $x229 true)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x142 (= $x31 true)))
 (let (($x64 (= $x142 true)))
 (let (($x147 (= $x64 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x58)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x45 $x61)))
 (let (($x40 (and $x24 $x48)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x9 $x40)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x81)))))))
 (let (($x25 (and $x150 $x84)))
 (let (($x23 (= $x25 true)))
 (let (($x7 (= $x23 true)))
 (let (($x26 (= $x7 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x29 (concat ?x85 (concat ?x70 ?x14)))))
 (let (($x63 (= ?x79 input.dst.llvm-%l)))
 (let (($x51 (= $x63 true)))
 (let (($x47 (= $x51 true)))
 (let (($x164 (and $x47 $x26)))
 (let (($x152 (and $x164 $x147)))
 (let (($x92 (and $x152 $x159)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x12 (and $x62 $x92)))
 (let (($x91 (=> $x12 $x18)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= false true)))
 (let (($x18 (= $x65 true)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x88 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x88 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x133 (= $x228 $x30)))
 (let (($x135 (= ?x88 (_ bv0 32))))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (= $x53 $x135)))
 (let (($x229 (and $x72 $x133)))
 (let (($x159 (= $x229 true)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x142 (= $x31 true)))
 (let (($x64 (= $x142 true)))
 (let (($x147 (= $x64 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x58)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x45 $x61)))
 (let (($x40 (and $x24 $x48)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x9 $x40)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x81)))))))
 (let (($x25 (and $x150 $x84)))
 (let (($x23 (= $x25 true)))
 (let (($x7 (= $x23 true)))
 (let (($x26 (= $x7 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x29 (concat ?x85 (concat ?x70 ?x14)))))
 (let (($x63 (= ?x79 input.dst.llvm-%l)))
 (let (($x51 (= $x63 true)))
 (let (($x47 (= $x51 true)))
 (let (($x164 (and $x47 $x26)))
 (let (($x152 (and $x164 $x147)))
 (let (($x92 (and $x152 $x159)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x12 (and $x62 $x92)))
 (let (($x91 (=> $x12 $x18)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv64 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (= false true)))
 (let (($x143 (= $x98 true)))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x65 (not $x229)))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x12 (not $x135)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x228 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x228 (_ bv1 32))))
 (let (($x92 (= $x229 $x159)))
 (let (($x30 (= ?x228 (_ bv0 32))))
 (let (($x133 (= $x135 $x30)))
 (let (($x148 (and (and (and $x133 $x92) $x12) $x65)))
 (let (($x46 (= $x148 true)))
 (let (($x147 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x152 (= $x147 true)))
 (let (($x50 (= $x152 true)))
 (let (($x53 (= $x50 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x84)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x86 $x48)))
 (let (($x23 (and $x40 $x25)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x151 $x23)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x32)))))))
 (let (($x26 (and $x24 $x7)))
 (let (($x164 (= $x26 true)))
 (let (($x49 (= $x164 true)))
 (let (($x8 (= $x49 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x41 (concat ?x14 (concat ?x85 ?x29)))))
 (let (($x47 (= ?x63 input.dst.llvm-%l)))
 (let (($x69 (= $x47 true)))
 (let (($x83 (= $x69 true)))
 (let (($x31 (and $x83 $x8)))
 (let (($x66 (and $x31 $x53)))
 (let (($x74 (and $x66 $x46)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x36 (and $x62 $x74)))
 (let (($x89 (=> $x36 $x143)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (= false true)))
 (let (($x143 (= $x98 true)))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x65 (not $x229)))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x12 (not $x135)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x228 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x228 (_ bv1 32))))
 (let (($x92 (= $x229 $x159)))
 (let (($x30 (= ?x228 (_ bv0 32))))
 (let (($x133 (= $x135 $x30)))
 (let (($x148 (and (and (and $x133 $x92) $x12) $x65)))
 (let (($x46 (= $x148 true)))
 (let (($x147 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x152 (= $x147 true)))
 (let (($x50 (= $x152 true)))
 (let (($x53 (= $x50 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x84)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x86 $x48)))
 (let (($x23 (and $x40 $x25)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x151 $x23)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x32)))))))
 (let (($x26 (and $x24 $x7)))
 (let (($x164 (= $x26 true)))
 (let (($x49 (= $x164 true)))
 (let (($x8 (= $x49 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x41 (concat ?x14 (concat ?x85 ?x29)))))
 (let (($x47 (= ?x63 input.dst.llvm-%l)))
 (let (($x69 (= $x47 true)))
 (let (($x83 (= $x69 true)))
 (let (($x31 (and $x83 $x8)))
 (let (($x66 (and $x31 $x53)))
 (let (($x74 (and $x66 $x46)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x36 (and $x62 $x74)))
 (let (($x89 (=> $x36 $x143)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (= false true)))
 (let (($x37 (= $x89 true)))
 (let (($x65 (= false false)))
 (let (($x30 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x148 (=> $x30 $x65)))
 (let (($x133 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x229 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x229 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x91 (= $x18 $x12)))
 (let (($x159 (= ?x229 (_ bv0 32))))
 (let (($x92 (= $x30 $x159)))
 (let (($x74 (and (and $x92 $x91) $x148)))
 (let (($x36 (= $x74 true)))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x66 (= $x53 true)))
 (let (($x88 (= $x66 true)))
 (let (($x135 (= $x88 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x7)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x75 $x25)))
 (let (($x164 (and $x23 $x26)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x81 $x164)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x22)))))))
 (let (($x8 (and $x40 $x49)))
 (let (($x31 (= $x8 true)))
 (let (($x142 (= $x31 true)))
 (let (($x64 (= $x142 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x51 (concat ?x29 (concat ?x14 ?x41)))))
 (let (($x83 (= ?x47 input.dst.llvm-%l)))
 (let (($x78 (= $x83 true)))
 (let (($x158 (= $x78 true)))
 (let (($x147 (and $x158 $x64)))
 (let (($x72 (and $x147 $x135)))
 (let (($x98 (and $x72 $x36)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x143 (and $x62 $x98)))
 (let (($x44 (=> $x143 $x37)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (= false true)))
 (let (($x37 (= $x89 true)))
 (let (($x65 (= false false)))
 (let (($x30 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x148 (=> $x30 $x65)))
 (let (($x133 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x229 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x229 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x91 (= $x18 $x12)))
 (let (($x159 (= ?x229 (_ bv0 32))))
 (let (($x92 (= $x30 $x159)))
 (let (($x74 (and (and $x92 $x91) $x148)))
 (let (($x36 (= $x74 true)))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x66 (= $x53 true)))
 (let (($x88 (= $x66 true)))
 (let (($x135 (= $x88 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x7)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x75 $x25)))
 (let (($x164 (and $x23 $x26)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x81 $x164)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x22)))))))
 (let (($x8 (and $x40 $x49)))
 (let (($x31 (= $x8 true)))
 (let (($x142 (= $x31 true)))
 (let (($x64 (= $x142 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x51 (concat ?x29 (concat ?x14 ?x41)))))
 (let (($x83 (= ?x47 input.dst.llvm-%l)))
 (let (($x78 (= $x83 true)))
 (let (($x158 (= $x78 true)))
 (let (($x147 (and $x158 $x64)))
 (let (($x72 (and $x147 $x135)))
 (let (($x98 (and $x72 $x36)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x143 (and $x62 $x98)))
 (let (($x44 (=> $x143 $x37)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv64 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x61 (= false true)))
 (let (($x38 (= $x61 true)))
 (let (($x36 (= false false)))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x98 (=> $x159 $x36)))
 (let (($x46 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x74 (not $x46)))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x18 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x18 (_ bv1 32))))
 (let (($x148 (= $x46 $x65)))
 (let (($x12 (= ?x18 (_ bv0 32))))
 (let (($x91 (= $x159 $x12)))
 (let (($x37 (and (and (and $x91 $x148) $x74) $x98)))
 (let (($x44 (= $x37 true)))
 (let (($x135 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x72 (= $x135 true)))
 (let (($x228 (= $x72 true)))
 (let (($x30 (= $x228 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x49)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x9 $x26)))
 (let (($x31 (and $x164 $x8)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x32 $x31)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x58)))))))
 (let (($x64 (and $x23 $x142)))
 (let (($x147 (= $x64 true)))
 (let (($x152 (= $x147 true)))
 (let (($x50 (= $x152 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x69 (concat ?x41 (concat ?x29 ?x51)))))
 (let (($x158 (= ?x83 input.dst.llvm-%l)))
 (let (($x27 (= $x158 true)))
 (let (($x13 (= $x27 true)))
 (let (($x53 (and $x13 $x50)))
 (let (($x133 (and $x53 $x30)))
 (let (($x82 (and $x133 $x44)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x10 (and $x62 $x82)))
 (let (($x57 (=> $x10 $x38)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x61 (= false true)))
 (let (($x38 (= $x61 true)))
 (let (($x36 (= false false)))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x98 (=> $x159 $x36)))
 (let (($x46 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x74 (not $x46)))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x18 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x18 (_ bv1 32))))
 (let (($x148 (= $x46 $x65)))
 (let (($x12 (= ?x18 (_ bv0 32))))
 (let (($x91 (= $x159 $x12)))
 (let (($x37 (and (and (and $x91 $x148) $x74) $x98)))
 (let (($x44 (= $x37 true)))
 (let (($x135 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x72 (= $x135 true)))
 (let (($x228 (= $x72 true)))
 (let (($x30 (= $x228 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x49)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x9 $x26)))
 (let (($x31 (and $x164 $x8)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x32 $x31)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x58)))))))
 (let (($x64 (and $x23 $x142)))
 (let (($x147 (= $x64 true)))
 (let (($x152 (= $x147 true)))
 (let (($x50 (= $x152 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x69 (concat ?x41 (concat ?x29 ?x51)))))
 (let (($x158 (= ?x83 input.dst.llvm-%l)))
 (let (($x27 (= $x158 true)))
 (let (($x13 (= $x27 true)))
 (let (($x53 (and $x13 $x50)))
 (let (($x133 (and $x53 $x30)))
 (let (($x82 (and $x133 $x44)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x10 (and $x62 $x82)))
 (let (($x57 (=> $x10 $x38)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x49 (not $x164)))
 (let (($x108 (= $x49 false)))
 (let (($x161 (= $x108 true)))
 (let ((?x231 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x231 (_ bv1 32))))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x153 (= $x104 $x232)))
 (let (($x146 (= ?x231 (_ bv0 32))))
 (let (($x96 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x160 (= $x96 $x146)))
 (let (($x169 (and $x160 $x153)))
 (let (($x165 (= $x169 true)))
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x95 (ite $x97 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x95 (_ bv1 32))))
 (let (($x106 (= $x104 $x105)))
 (let (($x93 (= ?x95 (_ bv0 32))))
 (let (($x55 (= $x96 $x93)))
 (let (($x107 (and $x55 $x106)))
 (let (($x144 (= $x107 true)))
 (let ((?x102 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x54 (= (_ bv0 3) ?x102)))
 (let (($x149 (= $x54 true)))
 (let (($x101 (= $x149 true)))
 (let (($x21 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x21 true)))
 (let (($x59 (= $x48 true)))
 (let (($x131 (= $x59 true)))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (bvugt ?x18 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x18 (_ bv3 32)))))
 (let (($x82 (=> (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x74)))))))
 (let (($x12 (=> (and $x49 (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x143 $x74)))))))
 (let (($x91 (= $x12 true)))
 (let (($x10 (= $x91 true)))
 (let (($x61 (= $x10 true)))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x30 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x133 (=> $x30 (or false (or false (and true (or $x53 $x66)))))))
 (let (($x142 (=> (and $x49 $x30) (or false (or false (and true (or $x53 $x66)))))))
 (let (($x64 (= $x142 true)))
 (let (($x229 (= $x64 true)))
 (let (($x159 (= $x229 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x58)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x25 $x86)))
 (let (($x81 (and $x24 $x40)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x63 $x81)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x83)))))))
 (let (($x84 (and $x150 $x75)))
 (let (($x23 (= $x84 true)))
 (let (($x32 (= $x23 true)))
 (let (($x9 (= $x32 true)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= $x62 true)))
 (let (($x69 (= $x14 true)))
 (let (($x7 (and $x69 $x9)))
 (let (($x92 (and $x7 $x159)))
 (let (($x38 (and $x92 $x61)))
 (let (($x230 (and $x38 $x131)))
 (let (($x99 (and $x230 $x101)))
 (let (($x77 (and $x99 $x144)))
 (let (($x145 (and $x77 $x165)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x233 (and $x68 $x145)))
 (let (($x35 (=> $x233 $x161)))
 (not $x35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x49 (not $x164)))
 (let (($x108 (= $x49 false)))
 (let (($x161 (= $x108 true)))
 (let ((?x231 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x231 (_ bv1 32))))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x153 (= $x104 $x232)))
 (let (($x146 (= ?x231 (_ bv0 32))))
 (let (($x96 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x160 (= $x96 $x146)))
 (let (($x169 (and $x160 $x153)))
 (let (($x165 (= $x169 true)))
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x95 (ite $x97 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x95 (_ bv1 32))))
 (let (($x106 (= $x104 $x105)))
 (let (($x93 (= ?x95 (_ bv0 32))))
 (let (($x55 (= $x96 $x93)))
 (let (($x107 (and $x55 $x106)))
 (let (($x144 (= $x107 true)))
 (let ((?x102 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x54 (= (_ bv0 3) ?x102)))
 (let (($x149 (= $x54 true)))
 (let (($x101 (= $x149 true)))
 (let (($x21 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x21 true)))
 (let (($x59 (= $x48 true)))
 (let (($x131 (= $x59 true)))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (bvugt ?x18 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x18 (_ bv3 32)))))
 (let (($x82 (=> (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x74)))))))
 (let (($x12 (=> (and $x49 (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x143 $x74)))))))
 (let (($x91 (= $x12 true)))
 (let (($x10 (= $x91 true)))
 (let (($x61 (= $x10 true)))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x30 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x133 (=> $x30 (or false (or false (and true (or $x53 $x66)))))))
 (let (($x142 (=> (and $x49 $x30) (or false (or false (and true (or $x53 $x66)))))))
 (let (($x64 (= $x142 true)))
 (let (($x229 (= $x64 true)))
 (let (($x159 (= $x229 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x58)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x25 $x86)))
 (let (($x81 (and $x24 $x40)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x63 $x81)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x83)))))))
 (let (($x84 (and $x150 $x75)))
 (let (($x23 (= $x84 true)))
 (let (($x32 (= $x23 true)))
 (let (($x9 (= $x32 true)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= $x62 true)))
 (let (($x69 (= $x14 true)))
 (let (($x7 (and $x69 $x9)))
 (let (($x92 (and $x7 $x159)))
 (let (($x38 (and $x92 $x61)))
 (let (($x230 (and $x38 $x131)))
 (let (($x99 (and $x230 $x101)))
 (let (($x77 (and $x99 $x144)))
 (let (($x145 (and $x77 $x165)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x233 (and $x68 $x145)))
 (let (($x35 (=> $x233 $x161)))
 (not $x35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11001000000000000000000000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000110000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000110000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000110000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1c007ffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1c007fff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x3fff8000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1c007ffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16384 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x8 (not $x49)))
 (let (($x109 (= $x8 false)))
 (let (($x166 (= $x109 true)))
 (let ((?x165 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x165 (_ bv1 32))))
 (let (($x106 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x106 $x108)))
 (let (($x145 (= ?x165 (_ bv0 32))))
 (let (($x97 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x233 (= $x97 $x145)))
 (let (($x85 (and (and (and (not $x97) (not $x106)) $x233) $x161)))
 (let (($x31 (= $x85 true)))
 (let (($x231 (not $x106)))
 (let (($x77 (not $x97)))
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x93 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x55 (_ bv1 32))))
 (let (($x144 (= $x106 $x107)))
 (let (($x104 (= ?x55 (_ bv0 32))))
 (let (($x105 (= $x97 $x104)))
 (let (($x232 (and (and (and $x105 $x144) $x77) $x231)))
 (let (($x153 (= $x232 true)))
 (let ((?x149 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x101 (= (_ bv0 3) ?x149)))
 (let (($x99 (= $x101 true)))
 (let (($x94 (= $x99 true)))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x131 (= $x59 true)))
 (let (($x230 (= $x131 true)))
 (let (($x100 (= $x230 true)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x98 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x65 (_ bv3 32)))))
 (let (($x61 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x98)))))))
 (let (($x44 (=> (and $x8 (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x36 $x98)))))))
 (let (($x148 (= $x44 true)))
 (let (($x38 (= $x148 true)))
 (let (($x57 (= $x38 true)))
 (let (($x72 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x229 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x159 (=> $x229 (or false (or false (and true (or $x135 $x72)))))))
 (let (($x30 (=> (and $x8 $x229) (or false (or false (and true (or $x135 $x72)))))))
 (let (($x50 (= $x30 true)))
 (let (($x92 (= $x50 true)))
 (let (($x18 (= $x92 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x40)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x22 $x24)))
 (let (($x75 (and $x58 $x81)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x158 $x75)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x23 (and $x25 $x84)))
 (let (($x32 (= $x23 true)))
 (let (($x9 (= $x32 true)))
 (let (($x7 (= $x9 true)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x51 (= $x28 true)))
 (let (($x14 (= $x51 true)))
 (let (($x26 (and $x14 $x7)))
 (let (($x46 (and $x26 $x18)))
 (let (($x21 (and $x46 $x57)))
 (let (($x102 (and $x21 $x100)))
 (let (($x96 (and $x102 $x94)))
 (let (($x169 (and $x96 $x153)))
 (let (($x110 (and $x169 $x31)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x79 $x110)))
 (let (($x134 (=> $x118 $x166)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x8 (not $x49)))
 (let (($x109 (= $x8 false)))
 (let (($x166 (= $x109 true)))
 (let ((?x165 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x165 (_ bv1 32))))
 (let (($x106 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x106 $x108)))
 (let (($x145 (= ?x165 (_ bv0 32))))
 (let (($x97 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x233 (= $x97 $x145)))
 (let (($x85 (and (and (and (not $x97) (not $x106)) $x233) $x161)))
 (let (($x31 (= $x85 true)))
 (let (($x231 (not $x106)))
 (let (($x77 (not $x97)))
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x93 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x55 (_ bv1 32))))
 (let (($x144 (= $x106 $x107)))
 (let (($x104 (= ?x55 (_ bv0 32))))
 (let (($x105 (= $x97 $x104)))
 (let (($x232 (and (and (and $x105 $x144) $x77) $x231)))
 (let (($x153 (= $x232 true)))
 (let ((?x149 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x101 (= (_ bv0 3) ?x149)))
 (let (($x99 (= $x101 true)))
 (let (($x94 (= $x99 true)))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x131 (= $x59 true)))
 (let (($x230 (= $x131 true)))
 (let (($x100 (= $x230 true)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x98 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x65 (_ bv3 32)))))
 (let (($x61 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x98)))))))
 (let (($x44 (=> (and $x8 (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x36 $x98)))))))
 (let (($x148 (= $x44 true)))
 (let (($x38 (= $x148 true)))
 (let (($x57 (= $x38 true)))
 (let (($x72 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x229 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x159 (=> $x229 (or false (or false (and true (or $x135 $x72)))))))
 (let (($x30 (=> (and $x8 $x229) (or false (or false (and true (or $x135 $x72)))))))
 (let (($x50 (= $x30 true)))
 (let (($x92 (= $x50 true)))
 (let (($x18 (= $x92 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x40)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x22 $x24)))
 (let (($x75 (and $x58 $x81)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x158 $x75)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x23 (and $x25 $x84)))
 (let (($x32 (= $x23 true)))
 (let (($x9 (= $x32 true)))
 (let (($x7 (= $x9 true)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x51 (= $x28 true)))
 (let (($x14 (= $x51 true)))
 (let (($x26 (and $x14 $x7)))
 (let (($x46 (and $x26 $x18)))
 (let (($x21 (and $x46 $x57)))
 (let (($x102 (and $x21 $x100)))
 (let (($x96 (and $x102 $x94)))
 (let (($x169 (and $x96 $x153)))
 (let (($x110 (and $x169 $x31)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x79 $x110)))
 (let (($x134 (=> $x118 $x166)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x147 (not $x8)))
 (let (($x109 (= $x147 false)))
 (let (($x166 (= $x109 true)))
 (let ((?x165 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x113 (bvuge ?x165 (_ bv1 32))))
 (let (($x144 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (= $x144 $x113)))
 (let (($x145 (= ?x165 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x233 (= $x93 $x145)))
 (let (($x160 (= false false)))
 (let (($x231 (=> $x93 $x160)))
 (let (($x85 (and (and $x231 $x233) $x108)))
 (let (($x31 (= $x85 true)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x105 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x105 (_ bv1 32))))
 (let (($x77 (= $x144 $x146)))
 (let (($x106 (= ?x105 (_ bv0 32))))
 (let (($x107 (= $x93 $x106)))
 (let (($x153 (and (and $x107 $x77) $x231)))
 (let (($x169 (= $x153 true)))
 (let ((?x99 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= (_ bv0 3) ?x99)))
 (let (($x96 (= $x94 true)))
 (let (($x103 (= $x96 true)))
 (let (($x230 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x230 true)))
 (let (($x102 (= $x100 true)))
 (let (($x54 (= $x102 true)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x12 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x74 (_ bv3 32)))))
 (let (($x57 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x12)))))))
 (let (($x10 (=> (and $x147 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x82 $x12)))))))
 (let (($x89 (= $x10 true)))
 (let (($x21 (= $x89 true)))
 (let (($x48 (= $x21 true)))
 (let (($x142 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x92 (or false (or false (and true (or $x133 $x142)))))))
 (let (($x229 (=> (and $x147 $x92) (or false (or false (and true (or $x133 $x142)))))))
 (let (($x88 (= $x229 true)))
 (let (($x46 (= $x88 true)))
 (let (($x65 (= $x46 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x81)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x151 $x58)))
 (let (($x84 (and $x40 $x75)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x62 $x84)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x13)))))))
 (let (($x32 (and $x22 $x23)))
 (let (($x9 (= $x32 true)))
 (let (($x7 (= $x9 true)))
 (let (($x26 (= $x7 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x28 (= $x79 true)))
 (let (($x45 (= $x28 true)))
 (let (($x164 (and $x45 $x26)))
 (let (($x143 (and $x164 $x65)))
 (let (($x59 (and $x143 $x48)))
 (let (($x149 (and $x59 $x54)))
 (let (($x97 (and $x149 $x103)))
 (let (($x35 (and $x97 $x169)))
 (let (($x110 (and $x35 $x31)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x56 $x110)))
 (let (($x134 (=> $x118 $x166)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x147 (not $x8)))
 (let (($x109 (= $x147 false)))
 (let (($x166 (= $x109 true)))
 (let ((?x165 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x113 (bvuge ?x165 (_ bv1 32))))
 (let (($x144 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (= $x144 $x113)))
 (let (($x145 (= ?x165 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x233 (= $x93 $x145)))
 (let (($x160 (= false false)))
 (let (($x231 (=> $x93 $x160)))
 (let (($x85 (and (and $x231 $x233) $x108)))
 (let (($x31 (= $x85 true)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x105 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x105 (_ bv1 32))))
 (let (($x77 (= $x144 $x146)))
 (let (($x106 (= ?x105 (_ bv0 32))))
 (let (($x107 (= $x93 $x106)))
 (let (($x153 (and (and $x107 $x77) $x231)))
 (let (($x169 (= $x153 true)))
 (let ((?x99 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= (_ bv0 3) ?x99)))
 (let (($x96 (= $x94 true)))
 (let (($x103 (= $x96 true)))
 (let (($x230 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x230 true)))
 (let (($x102 (= $x100 true)))
 (let (($x54 (= $x102 true)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x12 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x74 (_ bv3 32)))))
 (let (($x57 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x12)))))))
 (let (($x10 (=> (and $x147 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x82 $x12)))))))
 (let (($x89 (= $x10 true)))
 (let (($x21 (= $x89 true)))
 (let (($x48 (= $x21 true)))
 (let (($x142 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x92 (or false (or false (and true (or $x133 $x142)))))))
 (let (($x229 (=> (and $x147 $x92) (or false (or false (and true (or $x133 $x142)))))))
 (let (($x88 (= $x229 true)))
 (let (($x46 (= $x88 true)))
 (let (($x65 (= $x46 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x81)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x151 $x58)))
 (let (($x84 (and $x40 $x75)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x62 $x84)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x13)))))))
 (let (($x32 (and $x22 $x23)))
 (let (($x9 (= $x32 true)))
 (let (($x7 (= $x9 true)))
 (let (($x26 (= $x7 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x28 (= $x79 true)))
 (let (($x45 (= $x28 true)))
 (let (($x164 (and $x45 $x26)))
 (let (($x143 (and $x164 $x65)))
 (let (($x59 (and $x143 $x48)))
 (let (($x149 (and $x59 $x54)))
 (let (($x97 (and $x149 $x103)))
 (let (($x35 (and $x97 $x169)))
 (let (($x110 (and $x35 $x31)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x56 $x110)))
 (let (($x134 (=> $x118 $x166)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11001000000000000000000000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000110000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000110000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000110000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1c007ffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1c007fff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x3fff8000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1c007ffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x147 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x53 (not $x147)))
 (let (($x66 (= $x53 false)))
 (let (($x83 (= $x66 true)))
 (let ((?x113 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x113 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (= $x77 $x31)))
 (let (($x108 (= ?x113 (_ bv0 32))))
 (let (($x104 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x85 (= $x104 $x108)))
 (let (($x166 (and (and (and (not $x77) (=> $x104 (= false false))) $x85) $x110)))
 (let (($x134 (= $x166 true)))
 (let (($x153 (= false false)))
 (let (($x169 (=> $x104 $x153)))
 (let (($x231 (not $x77)))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x107 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x107 (_ bv1 32))))
 (let (($x160 (= $x77 $x232)))
 (let (($x144 (= ?x107 (_ bv0 32))))
 (let (($x146 (= $x104 $x144)))
 (let (($x145 (and (and (and $x146 $x160) $x231) $x169)))
 (let (($x233 (= $x145 true)))
 (let ((?x96 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x103 (= (_ bv0 3) ?x96)))
 (let (($x97 (= $x103 true)))
 (let (($x95 (= $x97 true)))
 (let (($x102 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x54 (= $x102 true)))
 (let (($x149 (= $x54 true)))
 (let (($x101 (= $x149 true)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x98 (_ bv3 32)))))
 (let (($x48 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x44)))))))
 (let (($x38 (=> (and $x53 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x44)))))))
 (let (($x37 (= $x38 true)))
 (let (($x59 (= $x37 true)))
 (let (($x131 (= $x59 true)))
 (let (($x30 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x46 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x65 (=> $x46 (or false (or false (and true (or $x159 $x30)))))))
 (let (($x92 (=> (and $x53 $x46) (or false (or false (and true (or $x159 $x30)))))))
 (let (($x228 (= $x92 true)))
 (let (($x143 (= $x228 true)))
 (let (($x74 (= $x143 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x75)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x86 $x40)))
 (let (($x23 (and $x81 $x84)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x150 $x23)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x47)))))))
 (let (($x9 (and $x151 $x32)))
 (let (($x7 (= $x9 true)))
 (let (($x26 (= $x7 true)))
 (let (($x164 (= $x26 true)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x41 (= $x56 true)))
 (let (($x28 (= $x41 true)))
 (let (($x49 (and $x28 $x164)))
 (let (($x36 (and $x49 $x74)))
 (let (($x230 (and $x36 $x131)))
 (let (($x99 (and $x230 $x101)))
 (let (($x93 (and $x99 $x95)))
 (let (($x161 (and $x93 $x233)))
 (let (($x114 (and $x161 $x134)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x70 (and $x68 $x114)))
 (let (($x152 (=> $x70 $x83)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x147 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x53 (not $x147)))
 (let (($x66 (= $x53 false)))
 (let (($x83 (= $x66 true)))
 (let ((?x113 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x113 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (= $x77 $x31)))
 (let (($x108 (= ?x113 (_ bv0 32))))
 (let (($x104 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x85 (= $x104 $x108)))
 (let (($x166 (and (and (and (not $x77) (=> $x104 (= false false))) $x85) $x110)))
 (let (($x134 (= $x166 true)))
 (let (($x153 (= false false)))
 (let (($x169 (=> $x104 $x153)))
 (let (($x231 (not $x77)))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x107 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x107 (_ bv1 32))))
 (let (($x160 (= $x77 $x232)))
 (let (($x144 (= ?x107 (_ bv0 32))))
 (let (($x146 (= $x104 $x144)))
 (let (($x145 (and (and (and $x146 $x160) $x231) $x169)))
 (let (($x233 (= $x145 true)))
 (let ((?x96 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x103 (= (_ bv0 3) ?x96)))
 (let (($x97 (= $x103 true)))
 (let (($x95 (= $x97 true)))
 (let (($x102 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x54 (= $x102 true)))
 (let (($x149 (= $x54 true)))
 (let (($x101 (= $x149 true)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x98 (_ bv3 32)))))
 (let (($x48 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x44)))))))
 (let (($x38 (=> (and $x53 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x44)))))))
 (let (($x37 (= $x38 true)))
 (let (($x59 (= $x37 true)))
 (let (($x131 (= $x59 true)))
 (let (($x30 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x46 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x65 (=> $x46 (or false (or false (and true (or $x159 $x30)))))))
 (let (($x92 (=> (and $x53 $x46) (or false (or false (and true (or $x159 $x30)))))))
 (let (($x228 (= $x92 true)))
 (let (($x143 (= $x228 true)))
 (let (($x74 (= $x143 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x75)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x86 $x40)))
 (let (($x23 (and $x81 $x84)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x150 $x23)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x47)))))))
 (let (($x9 (and $x151 $x32)))
 (let (($x7 (= $x9 true)))
 (let (($x26 (= $x7 true)))
 (let (($x164 (= $x26 true)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x41 (= $x56 true)))
 (let (($x28 (= $x41 true)))
 (let (($x49 (and $x28 $x164)))
 (let (($x36 (and $x49 $x74)))
 (let (($x230 (and $x36 $x131)))
 (let (($x99 (and $x230 $x101)))
 (let (($x93 (and $x99 $x95)))
 (let (($x161 (and $x93 $x233)))
 (let (($x114 (and $x161 $x134)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x70 (and $x68 $x114)))
 (let (($x152 (=> $x70 $x83)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x53 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x135 (not $x53)))
 (let (($x269 (= $x135 false)))
 (let (($x270 (= $x269 true)))
 (let ((?x159 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x201))))
 (let ((?x225 (bvadd ?x206 (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x246))))
 (let (($x255 (= (_ bv0 32) ?x252)))
 (let ((?x253 (ite $x255 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x253 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x177 $x258)))
 (let (($x167 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x125 (and $x160 $x167)))
 (let (($x260 (=> $x125 $x259)))
 (let (($x256 (= ?x253 (_ bv0 32))))
 (let (($x33 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x254 (= $x33 $x256)))
 (let (($x257 (=> $x125 $x254)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x218))))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.0 ?x223)))
 (let (($x224 (=> $x125 $x244)))
 (let (($x214 (= (_ bv0 32) ?x206)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x215 (_ bv1 32))))
 (let (($x207 (= $x167 $x209)))
 (let (($x210 (=> $x160 $x207)))
 (let (($x211 (= ?x215 (_ bv0 32))))
 (let (($x83 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x212 (= $x83 $x211)))
 (let (($x208 (=> $x160 $x212)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x50 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem ?x50) (concat ?x199 (concat ?x241 ?x188)))))
 (let (($x193 (= input.spec-%var-l-1.2.0 ?x197)))
 (let (($x194 (=> $x160 $x193)))
 (let ((?x184 (ite $x53 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x184 (_ bv1 32))))
 (let (($x187 (= $x160 $x186)))
 (let (($x185 (= ?x184 (_ bv0 32))))
 (let (($x106 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x240 (= $x106 $x185)))
 (let (($x165 (= false false)))
 (let (($x155 (and $x160 $x83)))
 (let (($x137 (=> $x155 $x165)))
 (let (($x153 (=> $x106 $x165)))
 (let (($x19 (and (and (and (and (and (and $x153 $x137) $x240) $x187) $x194) $x208) $x210)))
 (let (($x265 (and (and (and $x19 $x224) $x257) $x260)))
 (let (($x266 (= $x265 true)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x117 (concat ?x112 (concat ?x111 ?x154))))
 (let ((?x20 (bvadd ?x117 (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x141))))
 (let (($x238 (= (_ bv0 32) ?x173)))
 (let ((?x171 (ite $x238 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (bvuge ?x171 (_ bv1 32))))
 (let (($x39 (= $x177 $x34)))
 (let (($x73 (=> $x125 $x39)))
 (let (($x15 (= ?x171 (_ bv0 32))))
 (let (($x43 (= $x33 $x15)))
 (let (($x176 (=> $x125 $x43)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x132))))
 (let (($x237 (= input.spec-%var-l-1.2.1.2.0 ?x129)))
 (let (($x156 (=> $x125 $x237)))
 (let (($x128 (= (_ bv0 32) ?x117)))
 (let ((?x121 (ite $x128 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x121 (_ bv1 32))))
 (let (($x157 (= $x167 $x126)))
 (let (($x123 (=> $x160 $x157)))
 (let (($x119 (= ?x121 (_ bv0 32))))
 (let (($x122 (= $x83 $x119)))
 (let (($x120 (=> $x160 $x122)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x113)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x31)))
 (let (($x114 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x70 (=> $x160 $x114)))
 (let (($x144 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x146 (ite $x144 (_ bv0 32) (_ bv1 32))))
 (let (($x35 (bvuge ?x146 (_ bv1 32))))
 (let (($x231 (= $x160 $x35)))
 (let (($x77 (= ?x146 (_ bv0 32))))
 (let (($x232 (= $x106 $x77)))
 (let (($x179 (and (and (and (and (and (and $x232 $x231) $x153) $x70) $x120) $x137) $x123)))
 (let (($x182 (and (and (and $x179 $x156) $x176) $x73)))
 (let (($x183 (= $x182 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x95 (= (_ bv0 3) ?x97)))
 (let (($x93 (= $x95 true)))
 (let (($x55 (= $x93 true)))
 (let (($x149 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x101 (= $x149 true)))
 (let (($x99 (= $x101 true)))
 (let (($x94 (= $x99 true)))
 (let ((?x12 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x10 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x12 (_ bv3 32)))))
 (let (($x131 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x10)))))))
 (let (($x21 (=> (and $x135 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x10)))))))
 (let (($x91 (= $x21 true)))
 (let (($x230 (= $x91 true)))
 (let (($x100 (= $x230 true)))
 (let (($x229 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x74 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x159 (_ bv1 32))) (or false (or false (and true (or $x18 $x229)))))))
 (let (($x46 (=> (and $x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x159 (_ bv1 32)))) (or false (or false (and true (or $x18 $x229)))))))
 (let (($x64 (= $x46 true)))
 (let (($x36 (= $x64 true)))
 (let (($x98 (= $x36 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x84)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x151 $x86)))
 (let (($x32 (and $x24 $x23)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x62 $x32)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x25)))))))
 (let (($x7 (and $x29 $x9)))
 (let (($x26 (= $x7 true)))
 (let (($x164 (= $x26 true)))
 (let (($x49 (= $x164 true)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x68 (= $x27 true)))
 (let (($x56 (= $x68 true)))
 (let (($x8 (and $x56 $x49)))
 (let (($x82 (and $x8 $x98)))
 (let (($x102 (and $x82 $x100)))
 (let (($x96 (and $x102 $x94)))
 (let (($x104 (and $x96 $x55)))
 (let (($x239 (and $x104 $x183)))
 (let (($x267 (and $x239 $x266)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x52 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x53 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x135 (not $x53)))
 (let (($x269 (= $x135 false)))
 (let (($x270 (= $x269 true)))
 (let ((?x159 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x201))))
 (let ((?x225 (bvadd ?x206 (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x246))))
 (let (($x255 (= (_ bv0 32) ?x252)))
 (let ((?x253 (ite $x255 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x253 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x177 $x258)))
 (let (($x167 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x125 (and $x160 $x167)))
 (let (($x260 (=> $x125 $x259)))
 (let (($x256 (= ?x253 (_ bv0 32))))
 (let (($x33 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x254 (= $x33 $x256)))
 (let (($x257 (=> $x125 $x254)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x218))))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.0 ?x223)))
 (let (($x224 (=> $x125 $x244)))
 (let (($x214 (= (_ bv0 32) ?x206)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x215 (_ bv1 32))))
 (let (($x207 (= $x167 $x209)))
 (let (($x210 (=> $x160 $x207)))
 (let (($x211 (= ?x215 (_ bv0 32))))
 (let (($x83 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x212 (= $x83 $x211)))
 (let (($x208 (=> $x160 $x212)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x50 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem ?x50) (concat ?x199 (concat ?x241 ?x188)))))
 (let (($x193 (= input.spec-%var-l-1.2.0 ?x197)))
 (let (($x194 (=> $x160 $x193)))
 (let ((?x184 (ite $x53 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x184 (_ bv1 32))))
 (let (($x187 (= $x160 $x186)))
 (let (($x185 (= ?x184 (_ bv0 32))))
 (let (($x106 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x240 (= $x106 $x185)))
 (let (($x165 (= false false)))
 (let (($x155 (and $x160 $x83)))
 (let (($x137 (=> $x155 $x165)))
 (let (($x153 (=> $x106 $x165)))
 (let (($x19 (and (and (and (and (and (and $x153 $x137) $x240) $x187) $x194) $x208) $x210)))
 (let (($x265 (and (and (and $x19 $x224) $x257) $x260)))
 (let (($x266 (= $x265 true)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x154 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x117 (concat ?x112 (concat ?x111 ?x154))))
 (let ((?x20 (bvadd ?x117 (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x141))))
 (let (($x238 (= (_ bv0 32) ?x173)))
 (let ((?x171 (ite $x238 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (bvuge ?x171 (_ bv1 32))))
 (let (($x39 (= $x177 $x34)))
 (let (($x73 (=> $x125 $x39)))
 (let (($x15 (= ?x171 (_ bv0 32))))
 (let (($x43 (= $x33 $x15)))
 (let (($x176 (=> $x125 $x43)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x132))))
 (let (($x237 (= input.spec-%var-l-1.2.1.2.0 ?x129)))
 (let (($x156 (=> $x125 $x237)))
 (let (($x128 (= (_ bv0 32) ?x117)))
 (let ((?x121 (ite $x128 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x121 (_ bv1 32))))
 (let (($x157 (= $x167 $x126)))
 (let (($x123 (=> $x160 $x157)))
 (let (($x119 (= ?x121 (_ bv0 32))))
 (let (($x122 (= $x83 $x119)))
 (let (($x120 (=> $x160 $x122)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x113)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x31)))
 (let (($x114 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x70 (=> $x160 $x114)))
 (let (($x144 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x146 (ite $x144 (_ bv0 32) (_ bv1 32))))
 (let (($x35 (bvuge ?x146 (_ bv1 32))))
 (let (($x231 (= $x160 $x35)))
 (let (($x77 (= ?x146 (_ bv0 32))))
 (let (($x232 (= $x106 $x77)))
 (let (($x179 (and (and (and (and (and (and $x232 $x231) $x153) $x70) $x120) $x137) $x123)))
 (let (($x182 (and (and (and $x179 $x156) $x176) $x73)))
 (let (($x183 (= $x182 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x95 (= (_ bv0 3) ?x97)))
 (let (($x93 (= $x95 true)))
 (let (($x55 (= $x93 true)))
 (let (($x149 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x101 (= $x149 true)))
 (let (($x99 (= $x101 true)))
 (let (($x94 (= $x99 true)))
 (let ((?x12 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x10 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x12 (_ bv3 32)))))
 (let (($x131 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x10)))))))
 (let (($x21 (=> (and $x135 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x10)))))))
 (let (($x91 (= $x21 true)))
 (let (($x230 (= $x91 true)))
 (let (($x100 (= $x230 true)))
 (let (($x229 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x74 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x159 (_ bv1 32))) (or false (or false (and true (or $x18 $x229)))))))
 (let (($x46 (=> (and $x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x159 (_ bv1 32)))) (or false (or false (and true (or $x18 $x229)))))))
 (let (($x64 (= $x46 true)))
 (let (($x36 (= $x64 true)))
 (let (($x98 (= $x36 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x84)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x151 $x86)))
 (let (($x32 (and $x24 $x23)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x62 $x32)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x25)))))))
 (let (($x7 (and $x29 $x9)))
 (let (($x26 (= $x7 true)))
 (let (($x164 (= $x26 true)))
 (let (($x49 (= $x164 true)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x68 (= $x27 true)))
 (let (($x56 (= $x68 true)))
 (let (($x8 (and $x56 $x49)))
 (let (($x82 (and $x8 $x98)))
 (let (($x102 (and $x82 $x100)))
 (let (($x96 (and $x102 $x94)))
 (let (($x104 (and $x96 $x55)))
 (let (($x239 (and $x104 $x183)))
 (let (($x267 (and $x239 $x266)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x52 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ae9685c)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x30000008)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x1a1a1a1a)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x30000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x30000001
                                #x1a)
                         #x3000000a
                         #x1a)
                  #x3000000b
                  #x98)))
(let ((a!2 (store (store (store (store a!1 #x1a121a1f #x1a) #x30000006 #x12)
                         #x30000004
                         #x1a)
                  #x30000007
                  #x1a)))
(let ((a!3 (store (store (store (store a!2 #x1a121a1d #x1a) #x30000008 #x1a)
                         #x3000000b
                         #x98)
                  #x3000000c
                  #x07)))
(let ((a!4 (store (store (store (store a!3 #x30000003 #x98) #x3000000c #x07)
                         #x3000000f
                         #x30)
                  #x30000005
                  #x1a)))
(let ((a!5 (store (store (store (store a!4 #x30000009 #x1a) #x30000008 #x1a)
                         #x1a121a20
                         #x94)
                  #x30000002
                  #x1a)))
(let ((a!6 (store (store (store (store a!5 #x1a121a1a #x1a) #x30000009 #x1a)
                         #x30000000
                         #x1a)
                  #x1a121a1c
                  #x1a)))
  (store (store (store (store a!6 #x1a121a1b #x1a) #x30000007 #x1a)
                #x1a121a1e
                #x1a)
         #x3000000a
         #x1a))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x981a1a1a)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ae9685c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ae9685f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x9 (not $x32)))
 (let (($x277 (= $x9 false)))
 (let (($x278 (= $x277 true)))
 (let ((?x18 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x201))))
 (let ((?x250 (bvadd ?x212 (_ bv4 32))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x227))))
 (let (($x253 (= (_ bv0 32) ?x255)))
 (let ((?x256 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x256 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x238 $x258)))
 (let (($x155 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x231 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x126 (and $x231 $x155)))
 (let (($x260 (=> $x126 $x259)))
 (let (($x254 (= ?x256 (_ bv0 32))))
 (let (($x129 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x129 $x254)))
 (let (($x264 (=> $x126 $x257)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x217))))
 (let (($x263 (= input.spec-%var-l-1.2.1.2.0 ?x224)))
 (let (($x225 (=> $x126 $x263)))
 (let (($x208 (= (_ bv0 32) ?x212)))
 (let ((?x80 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x80 (_ bv1 32))))
 (let (($x243 (= $x155 $x19)))
 (let (($x222 (=> $x231 $x243)))
 (let (($x209 (= ?x80 (_ bv0 32))))
 (let (($x66 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x66 $x209)))
 (let (($x210 (=> $x231 $x207)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x88 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem ?x88) (concat ?x194 (concat ?x200 ?x188)))))
 (let (($x202 (= input.spec-%var-l-1.2.0 ?x205)))
 (let (($x203 (=> $x231 $x202)))
 (let ((?x196 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x196 (_ bv1 32))))
 (let (($x241 (= $x231 $x189)))
 (let (($x191 (= ?x196 (_ bv0 32))))
 (let (($x144 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x199 (= $x144 $x191)))
 (let (($x177 (and $x126 $x238)))
 (let (($x34 (not $x177)))
 (let (($x176 (and $x126 $x129)))
 (let (($x181 (not $x176)))
 (let (($x153 (= false false)))
 (let (($x120 (and $x231 $x66)))
 (let (($x17 (=> $x120 $x153)))
 (let (($x60 (=> $x144 $x153)))
 (let (($x270 (and (and (and (and (and (and $x60 $x17) $x181) $x34) $x199) $x241) $x203)))
 (let (($x273 (and (and (and (and (and $x270 $x210) $x222) $x225) $x264) $x260)))
 (let (($x274 (= $x273 true)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x162 (concat ?x112 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x234 (concat ?x154 (concat ?x63 ?x162))))
 (let ((?x237 (bvadd ?x234 (_ bv4 32))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x33))))
 (let (($x140 (= (_ bv0 32) ?x11)))
 (let ((?x16 (ite $x140 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x16 (_ bv1 32))))
 (let (($x15 (= $x238 $x171)))
 (let (($x43 (=> $x126 $x15)))
 (let (($x141 (= ?x16 (_ bv0 32))))
 (let (($x5 (= $x129 $x141)))
 (let (($x173 (=> $x126 $x5)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x136))))
 (let (($x116 (= input.spec-%var-l-1.2.1.2.0 ?x235)))
 (let (($x132 (=> $x126 $x116)))
 (let (($x117 (= (_ bv0 32) ?x234)))
 (let ((?x128 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x128 (_ bv1 32))))
 (let (($x178 (= $x155 $x137)))
 (let (($x167 (=> $x231 $x178)))
 (let (($x121 (= ?x128 (_ bv0 32))))
 (let (($x119 (= $x66 $x121)))
 (let (($x122 (=> $x231 $x119)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x85)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x114 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x70 (=> $x231 $x114)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x232 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x232 (_ bv1 32))))
 (let (($x165 (= $x231 $x174)))
 (let (($x160 (= ?x232 (_ bv0 32))))
 (let (($x35 (= $x144 $x160)))
 (let (($x261 (and (and (and (and (and (and $x35 $x165) $x60) $x70) $x122) $x17) $x167)))
 (let (($x186 (and (and (and (and (and $x261 $x132) $x173) $x43) $x181) $x34)))
 (let (($x187 (= $x186 true)))
 (let ((?x93 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (= (_ bv0 3) ?x93)))
 (let (($x104 (= $x55 true)))
 (let (($x105 (= $x104 true)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x99 true)))
 (let (($x96 (= $x94 true)))
 (let (($x103 (= $x96 true)))
 (let ((?x44 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (bvugt ?x44 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x44 (_ bv3 32)))))
 (let (($x100 (=> (bvule ?x44 (bvsub (bvadd ?x44 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x38)))))))
 (let (($x59 (=> (and $x9 (bvule ?x44 (bvsub (bvadd ?x44 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x38)))))))
 (let (($x148 (= $x59 true)))
 (let (($x102 (= $x148 true)))
 (let (($x54 (= $x102 true)))
 (let (($x92 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x98 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32))) (or false (or false (and true (or $x65 $x92)))))))
 (let (($x164 (=> (and $x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32)))) (or false (or false (and true (or $x65 $x92)))))))
 (let (($x49 (= $x164 true)))
 (let (($x82 (= $x49 true)))
 (let (($x12 (= $x82 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x86)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x50 $x68)))
 (let (($x22 (and $x56 $x67)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x133 $x22)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x143)))))))
 (let (($x24 (and $x13 $x71)))
 (let (($x84 (= $x24 true)))
 (let (($x25 (= $x84 true)))
 (let (($x14 (= $x25 true)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x79 (= $x52 true)))
 (let (($x8 (= $x79 true)))
 (let (($x158 (and $x8 $x14)))
 (let (($x61 (and $x158 $x12)))
 (let (($x149 (and $x61 $x54)))
 (let (($x97 (and $x149 $x103)))
 (let (($x106 (and $x97 $x105)))
 (let (($x90 (and $x106 $x187)))
 (let (($x275 (and $x90 $x274)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x69 $x275)))
 (let (($x279 (=> $x276 $x278)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x9 (not $x32)))
 (let (($x277 (= $x9 false)))
 (let (($x278 (= $x277 true)))
 (let ((?x18 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x201))))
 (let ((?x250 (bvadd ?x212 (_ bv4 32))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x227))))
 (let (($x253 (= (_ bv0 32) ?x255)))
 (let ((?x256 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x256 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x238 $x258)))
 (let (($x155 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x231 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x126 (and $x231 $x155)))
 (let (($x260 (=> $x126 $x259)))
 (let (($x254 (= ?x256 (_ bv0 32))))
 (let (($x129 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x129 $x254)))
 (let (($x264 (=> $x126 $x257)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x217))))
 (let (($x263 (= input.spec-%var-l-1.2.1.2.0 ?x224)))
 (let (($x225 (=> $x126 $x263)))
 (let (($x208 (= (_ bv0 32) ?x212)))
 (let ((?x80 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x80 (_ bv1 32))))
 (let (($x243 (= $x155 $x19)))
 (let (($x222 (=> $x231 $x243)))
 (let (($x209 (= ?x80 (_ bv0 32))))
 (let (($x66 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x66 $x209)))
 (let (($x210 (=> $x231 $x207)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x88 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem ?x88) (concat ?x194 (concat ?x200 ?x188)))))
 (let (($x202 (= input.spec-%var-l-1.2.0 ?x205)))
 (let (($x203 (=> $x231 $x202)))
 (let ((?x196 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x196 (_ bv1 32))))
 (let (($x241 (= $x231 $x189)))
 (let (($x191 (= ?x196 (_ bv0 32))))
 (let (($x144 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x199 (= $x144 $x191)))
 (let (($x177 (and $x126 $x238)))
 (let (($x34 (not $x177)))
 (let (($x176 (and $x126 $x129)))
 (let (($x181 (not $x176)))
 (let (($x153 (= false false)))
 (let (($x120 (and $x231 $x66)))
 (let (($x17 (=> $x120 $x153)))
 (let (($x60 (=> $x144 $x153)))
 (let (($x270 (and (and (and (and (and (and $x60 $x17) $x181) $x34) $x199) $x241) $x203)))
 (let (($x273 (and (and (and (and (and $x270 $x210) $x222) $x225) $x264) $x260)))
 (let (($x274 (= $x273 true)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x162 (concat ?x112 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x234 (concat ?x154 (concat ?x63 ?x162))))
 (let ((?x237 (bvadd ?x234 (_ bv4 32))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x33))))
 (let (($x140 (= (_ bv0 32) ?x11)))
 (let ((?x16 (ite $x140 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x16 (_ bv1 32))))
 (let (($x15 (= $x238 $x171)))
 (let (($x43 (=> $x126 $x15)))
 (let (($x141 (= ?x16 (_ bv0 32))))
 (let (($x5 (= $x129 $x141)))
 (let (($x173 (=> $x126 $x5)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x136))))
 (let (($x116 (= input.spec-%var-l-1.2.1.2.0 ?x235)))
 (let (($x132 (=> $x126 $x116)))
 (let (($x117 (= (_ bv0 32) ?x234)))
 (let ((?x128 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x128 (_ bv1 32))))
 (let (($x178 (= $x155 $x137)))
 (let (($x167 (=> $x231 $x178)))
 (let (($x121 (= ?x128 (_ bv0 32))))
 (let (($x119 (= $x66 $x121)))
 (let (($x122 (=> $x231 $x119)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x85)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x114 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x70 (=> $x231 $x114)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x232 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x232 (_ bv1 32))))
 (let (($x165 (= $x231 $x174)))
 (let (($x160 (= ?x232 (_ bv0 32))))
 (let (($x35 (= $x144 $x160)))
 (let (($x261 (and (and (and (and (and (and $x35 $x165) $x60) $x70) $x122) $x17) $x167)))
 (let (($x186 (and (and (and (and (and $x261 $x132) $x173) $x43) $x181) $x34)))
 (let (($x187 (= $x186 true)))
 (let ((?x93 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (= (_ bv0 3) ?x93)))
 (let (($x104 (= $x55 true)))
 (let (($x105 (= $x104 true)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x99 true)))
 (let (($x96 (= $x94 true)))
 (let (($x103 (= $x96 true)))
 (let ((?x44 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (bvugt ?x44 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x44 (_ bv3 32)))))
 (let (($x100 (=> (bvule ?x44 (bvsub (bvadd ?x44 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x38)))))))
 (let (($x59 (=> (and $x9 (bvule ?x44 (bvsub (bvadd ?x44 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x38)))))))
 (let (($x148 (= $x59 true)))
 (let (($x102 (= $x148 true)))
 (let (($x54 (= $x102 true)))
 (let (($x92 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x98 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32))) (or false (or false (and true (or $x65 $x92)))))))
 (let (($x164 (=> (and $x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32)))) (or false (or false (and true (or $x65 $x92)))))))
 (let (($x49 (= $x164 true)))
 (let (($x82 (= $x49 true)))
 (let (($x12 (= $x82 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x86)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x50 $x68)))
 (let (($x22 (and $x56 $x67)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x133 $x22)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x143)))))))
 (let (($x24 (and $x13 $x71)))
 (let (($x84 (= $x24 true)))
 (let (($x25 (= $x84 true)))
 (let (($x14 (= $x25 true)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x79 (= $x52 true)))
 (let (($x8 (= $x79 true)))
 (let (($x158 (and $x8 $x14)))
 (let (($x61 (and $x158 $x12)))
 (let (($x149 (and $x61 $x54)))
 (let (($x97 (and $x149 $x103)))
 (let (($x106 (and $x97 $x105)))
 (let (($x90 (and $x106 $x187)))
 (let (($x275 (and $x90 $x274)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x69 $x275)))
 (let (($x279 (=> $x276 $x278)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x45 (not $x69)))
 (let (($x236 (=> $x45 true)))
 (let (($x169 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59))))
 (let (($x101 (and true $x149)))
 (let (($x60 (and $x149 $x101)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x144))))
 (let (($x39 (= (bvand ?x231 (_ bv4294967288 32)) ?x231)))
 (let (($x55 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x153 (and $x55 $x39)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x161 (and (and (and (and (and $x101 $x97) $x55) $x153) $x60) $x169)))
 (let (($x118 (= true $x161)))
 (let (($x166 (=> $x45 $x118)))
 (let (($x170 (=> (and $x166 $x45) true)))
 (let (($x179 (= $x170 true)))
 (let (($x125 (= $x179 true)))
 (let ((?x239 (ite $x69 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x239 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x167 (= $x121 $x178)))
 (let (($x155 (= ?x239 (_ bv0 32))))
 (let (($x152 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x137 (= $x152 $x155)))
 (let (($x261 (and $x137 $x167)))
 (let (($x126 (= $x261 true)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x234 (_ bv1 32))))
 (let (($x122 (= $x121 $x119)))
 (let (($x117 (= ?x234 (_ bv0 32))))
 (let (($x128 (= $x152 $x117)))
 (let (($x183 (and $x128 $x122)))
 (let (($x120 (= $x183 true)))
 (let ((?x124 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x154 (= (_ bv0 3) ?x124)))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x114 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x70 (= $x114 true)))
 (let (($x182 (= $x70 true)))
 (let (($x175 (= $x182 true)))
 (let (($x108 (= $x166 true)))
 (let (($x110 (= $x108 true)))
 (let (($x85 (= $x110 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x230)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x61 $x57)))
 (let (($x48 (and $x10 $x89)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x88 $x48)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x46)))))))
 (let (($x37 (and $x12 $x38)))
 (let (($x131 (= $x37 true)))
 (let (($x21 (= $x131 true)))
 (let (($x91 (= $x21 true)))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x7 (= $x9 true)))
 (let (($x18 (= $x7 true)))
 (let (($x100 (and $x18 $x91)))
 (let (($x233 (and $x100 $x85)))
 (let (($x66 (and $x233 $x175)))
 (let (($x115 (and $x66 $x63)))
 (let (($x17 (and $x115 $x120)))
 (let (($x157 (and $x17 $x126)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x127 (and $x23 $x157)))
 (let (($x67 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x8 (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x14 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x67)))))))
 (let (($x50 (=> (and $x45 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x86 $x67)))))))
 (let (($x76 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x133 (=> $x135 (or false (or false (and true (or $x143 $x76)))))))
 (let (($x78 (=> (and $x45 $x135) (or false (or false (and true (or $x143 $x76)))))))
 (let (($x150 (and $x78 $x50)))
 (let (($x139 (and $x150 $x127)))
 (let (($x123 (=> $x139 $x125)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x45 (not $x69)))
 (let (($x236 (=> $x45 true)))
 (let (($x169 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59))))
 (let (($x101 (and true $x149)))
 (let (($x60 (and $x149 $x101)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x144))))
 (let (($x39 (= (bvand ?x231 (_ bv4294967288 32)) ?x231)))
 (let (($x55 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x153 (and $x55 $x39)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x161 (and (and (and (and (and $x101 $x97) $x55) $x153) $x60) $x169)))
 (let (($x118 (= true $x161)))
 (let (($x166 (=> $x45 $x118)))
 (let (($x170 (=> (and $x166 $x45) true)))
 (let (($x179 (= $x170 true)))
 (let (($x125 (= $x179 true)))
 (let ((?x239 (ite $x69 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x239 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x167 (= $x121 $x178)))
 (let (($x155 (= ?x239 (_ bv0 32))))
 (let (($x152 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x137 (= $x152 $x155)))
 (let (($x261 (and $x137 $x167)))
 (let (($x126 (= $x261 true)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x234 (_ bv1 32))))
 (let (($x122 (= $x121 $x119)))
 (let (($x117 (= ?x234 (_ bv0 32))))
 (let (($x128 (= $x152 $x117)))
 (let (($x183 (and $x128 $x122)))
 (let (($x120 (= $x183 true)))
 (let ((?x124 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x154 (= (_ bv0 3) ?x124)))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x114 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x70 (= $x114 true)))
 (let (($x182 (= $x70 true)))
 (let (($x175 (= $x182 true)))
 (let (($x108 (= $x166 true)))
 (let (($x110 (= $x108 true)))
 (let (($x85 (= $x110 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x230)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x61 $x57)))
 (let (($x48 (and $x10 $x89)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x88 $x48)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x46)))))))
 (let (($x37 (and $x12 $x38)))
 (let (($x131 (= $x37 true)))
 (let (($x21 (= $x131 true)))
 (let (($x91 (= $x21 true)))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x7 (= $x9 true)))
 (let (($x18 (= $x7 true)))
 (let (($x100 (and $x18 $x91)))
 (let (($x233 (and $x100 $x85)))
 (let (($x66 (and $x233 $x175)))
 (let (($x115 (and $x66 $x63)))
 (let (($x17 (and $x115 $x120)))
 (let (($x157 (and $x17 $x126)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x127 (and $x23 $x157)))
 (let (($x67 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x8 (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x14 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x67)))))))
 (let (($x50 (=> (and $x45 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x86 $x67)))))))
 (let (($x76 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x133 (=> $x135 (or false (or false (and true (or $x143 $x76)))))))
 (let (($x78 (=> (and $x45 $x135) (or false (or false (and true (or $x143 $x76)))))))
 (let (($x150 (and $x78 $x50)))
 (let (($x139 (and $x150 $x127)))
 (let (($x123 (=> $x139 $x125)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x144))))
 (let ((?x229 ((_ extract 2 0) ?x153)))
 (let (($x51 (= (_ bv0 3) ?x229)))
 (let (($x163 (= $x51 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x126 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x236 (= $x239 $x139)))
 (let (($x157 (= ?x126 (_ bv0 32))))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x127 (= $x121 $x157)))
 (let (($x170 (and $x127 $x236)))
 (let (($x179 (= $x170 true)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x183 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x183 (_ bv1 32))))
 (let (($x137 (= $x239 $x155)))
 (let (($x120 (= ?x183 (_ bv0 32))))
 (let (($x17 (= $x121 $x120)))
 (let (($x178 (and $x17 $x137)))
 (let (($x167 (= $x178 true)))
 (let ((?x152 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= (_ bv0 3) ?x152)))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x154 (= $x124 true)))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x118 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94))))
 (let (($x145 (and true $x97)))
 (let (($x169 (and $x97 $x145)))
 (let (($x109 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x77 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x73 (and $x77 $x109)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x233 (and (and (and (and (and $x145 $x104) $x77) $x73) $x169) $x118)))
 (let (($x134 (= true $x233)))
 (let (($x75 (not $x45)))
 (let (($x114 (=> $x75 $x134)))
 (let (($x70 (= $x114 true)))
 (let (($x182 (= $x70 true)))
 (let (($x175 (= $x182 true)))
 (let (($x102 (= $x75 true)))
 (let (($x54 (= $x102 true)))
 (let (($x149 (= $x54 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x48)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x57 $x230)))
 (let (($x37 (and $x89 $x38)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x228 $x37)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x164)))))))
 (let (($x21 (and $x44 $x131)))
 (let (($x91 (= $x21 true)))
 (let (($x100 (= $x91 true)))
 (let (($x148 (= $x100 true)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x18 (= $x7 true)))
 (let (($x65 (= $x18 true)))
 (let (($x59 (and $x65 $x148)))
 (let (($x101 (and $x59 $x149)))
 (let (($x66 (and $x101 $x175)))
 (let (($x115 (and $x66 $x63)))
 (let (($x117 (and $x115 $x234)))
 (let (($x261 (and $x117 $x167)))
 (let (($x125 (and $x261 $x179)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x123 (and $x32 $x125)))
 (let (($x71 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd ?x28 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x158 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x71)))))))
 (let (($x68 (=> (and $x75 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x71)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x8 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x27 (=> $x8 (or false (or false (and true (or $x29 $x81)))))))
 (let (($x69 (=> (and $x75 $x8) (or false (or false (and true (or $x29 $x81)))))))
 (let (($x25 (and $x69 $x68)))
 (let (($x136 (and $x25 $x123)))
 (let (($x235 (=> $x136 $x163)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x144))))
 (let ((?x229 ((_ extract 2 0) ?x153)))
 (let (($x51 (= (_ bv0 3) ?x229)))
 (let (($x163 (= $x51 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x126 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x236 (= $x239 $x139)))
 (let (($x157 (= ?x126 (_ bv0 32))))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x127 (= $x121 $x157)))
 (let (($x170 (and $x127 $x236)))
 (let (($x179 (= $x170 true)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x183 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x183 (_ bv1 32))))
 (let (($x137 (= $x239 $x155)))
 (let (($x120 (= ?x183 (_ bv0 32))))
 (let (($x17 (= $x121 $x120)))
 (let (($x178 (and $x17 $x137)))
 (let (($x167 (= $x178 true)))
 (let ((?x152 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= (_ bv0 3) ?x152)))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x154 (= $x124 true)))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x118 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94))))
 (let (($x145 (and true $x97)))
 (let (($x169 (and $x97 $x145)))
 (let (($x109 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x77 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x73 (and $x77 $x109)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x233 (and (and (and (and (and $x145 $x104) $x77) $x73) $x169) $x118)))
 (let (($x134 (= true $x233)))
 (let (($x75 (not $x45)))
 (let (($x114 (=> $x75 $x134)))
 (let (($x70 (= $x114 true)))
 (let (($x182 (= $x70 true)))
 (let (($x175 (= $x182 true)))
 (let (($x102 (= $x75 true)))
 (let (($x54 (= $x102 true)))
 (let (($x149 (= $x54 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x48)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x57 $x230)))
 (let (($x37 (and $x89 $x38)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x228 $x37)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x164)))))))
 (let (($x21 (and $x44 $x131)))
 (let (($x91 (= $x21 true)))
 (let (($x100 (= $x91 true)))
 (let (($x148 (= $x100 true)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x18 (= $x7 true)))
 (let (($x65 (= $x18 true)))
 (let (($x59 (and $x65 $x148)))
 (let (($x101 (and $x59 $x149)))
 (let (($x66 (and $x101 $x175)))
 (let (($x115 (and $x66 $x63)))
 (let (($x117 (and $x115 $x234)))
 (let (($x261 (and $x117 $x167)))
 (let (($x125 (and $x261 $x179)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x123 (and $x32 $x125)))
 (let (($x71 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd ?x28 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x158 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x71)))))))
 (let (($x68 (=> (and $x75 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x71)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x8 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x27 (=> $x8 (or false (or false (and true (or $x29 $x81)))))))
 (let (($x69 (=> (and $x75 $x8) (or false (or false (and true (or $x29 $x81)))))))
 (let (($x25 (and $x69 $x68)))
 (let (($x136 (and $x25 $x123)))
 (let (($x235 (=> $x136 $x163)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x235 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x62 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x129 (concat (select input.dst.llvm-mem ?x62) (concat ?x132 (concat ?x26 ?x235)))))
 (let ((?x237 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x129)))
 (let (($x168 (= (_ bv0 32) ?x237)))
 (let (($x87 (= $x168 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x139 (_ bv1 32))))
 (let (($x178 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x125 (= $x178 $x179)))
 (let (($x236 (= ?x139 (_ bv0 32))))
 (let (($x183 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x170 (= $x183 $x236)))
 (let (($x123 (and $x170 $x125)))
 (let (($x136 (= $x123 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x239 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x239 (_ bv1 32))))
 (let (($x261 (= $x178 $x167)))
 (let (($x155 (= ?x239 (_ bv0 32))))
 (let (($x137 (= $x183 $x155)))
 (let (($x126 (and $x137 $x261)))
 (let (($x157 (= $x126 true)))
 (let ((?x234 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= (_ bv0 3) ?x234)))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= $x115 true)))
 (let (($x152 (= $x112 true)))
 (let (($x66 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x66 true)))
 (let (($x124 (= $x83 true)))
 (let (($x154 (= $x124 true)))
 (let (($x109 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x149 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149))))
 (let (($x103 (and true $x96)))
 (let (($x31 (and $x96 $x103)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x232))))
 (let (($x165 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x166 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x153 (and $x166 $x165)))
 (let (($x55 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x161 (and (and (and (and (and $x103 $x55) $x166) $x153) $x31) $x109)))
 (let (($x118 (= true $x161)))
 (let (($x75 (not $x45)))
 (let (($x233 (=> $x75 $x118)))
 (let (($x134 (= $x233 true)))
 (let (($x114 (= $x134 true)))
 (let (($x70 (= $x114 true)))
 (let (($x148 (= $x75 true)))
 (let (($x59 (= $x148 true)))
 (let (($x102 (= $x59 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x89)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x228 $x10)))
 (let (($x38 (and $x230 $x48)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x74 $x38)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x164)))))))
 (let (($x131 (and $x82 $x37)))
 (let (($x21 (= $x131 true)))
 (let (($x91 (= $x21 true)))
 (let (($x100 (= $x91 true)))
 (let (($x54 (and $x100 $x102)))
 (let (($x182 (and $x54 $x70)))
 (let (($x111 (and $x182 $x154)))
 (let (($x162 (and $x111 $x152)))
 (let (($x119 (and $x162 $x121)))
 (let (($x127 (and $x119 $x157)))
 (let (($x229 (and $x127 $x136)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x51 (and $x7 $x229)))
 (let (($x14 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x8 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x32 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x14)))))))
 (let (($x150 (=> (and $x75 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x84 $x14)))))))
 (let (($x133 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x86 (=> $x56 (or false (or false (and true (or $x13 $x133)))))))
 (let (($x79 (=> (and $x75 $x56) (or false (or false (and true (or $x13 $x133)))))))
 (let (($x67 (and $x79 $x150)))
 (let (($x163 (and $x67 $x51)))
 (let (($x20 (=> $x163 $x87)))
 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x235 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x62 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x129 (concat (select input.dst.llvm-mem ?x62) (concat ?x132 (concat ?x26 ?x235)))))
 (let ((?x237 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x129)))
 (let (($x168 (= (_ bv0 32) ?x237)))
 (let (($x87 (= $x168 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x139 (_ bv1 32))))
 (let (($x178 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x125 (= $x178 $x179)))
 (let (($x236 (= ?x139 (_ bv0 32))))
 (let (($x183 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x170 (= $x183 $x236)))
 (let (($x123 (and $x170 $x125)))
 (let (($x136 (= $x123 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x239 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x239 (_ bv1 32))))
 (let (($x261 (= $x178 $x167)))
 (let (($x155 (= ?x239 (_ bv0 32))))
 (let (($x137 (= $x183 $x155)))
 (let (($x126 (and $x137 $x261)))
 (let (($x157 (= $x126 true)))
 (let ((?x234 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= (_ bv0 3) ?x234)))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= $x115 true)))
 (let (($x152 (= $x112 true)))
 (let (($x66 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x66 true)))
 (let (($x124 (= $x83 true)))
 (let (($x154 (= $x124 true)))
 (let (($x109 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x149 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149))))
 (let (($x103 (and true $x96)))
 (let (($x31 (and $x96 $x103)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x232))))
 (let (($x165 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x166 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x153 (and $x166 $x165)))
 (let (($x55 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x161 (and (and (and (and (and $x103 $x55) $x166) $x153) $x31) $x109)))
 (let (($x118 (= true $x161)))
 (let (($x75 (not $x45)))
 (let (($x233 (=> $x75 $x118)))
 (let (($x134 (= $x233 true)))
 (let (($x114 (= $x134 true)))
 (let (($x70 (= $x114 true)))
 (let (($x148 (= $x75 true)))
 (let (($x59 (= $x148 true)))
 (let (($x102 (= $x59 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x89)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x228 $x10)))
 (let (($x38 (and $x230 $x48)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x74 $x38)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x164)))))))
 (let (($x131 (and $x82 $x37)))
 (let (($x21 (= $x131 true)))
 (let (($x91 (= $x21 true)))
 (let (($x100 (= $x91 true)))
 (let (($x54 (and $x100 $x102)))
 (let (($x182 (and $x54 $x70)))
 (let (($x111 (and $x182 $x154)))
 (let (($x162 (and $x111 $x152)))
 (let (($x119 (and $x162 $x121)))
 (let (($x127 (and $x119 $x157)))
 (let (($x229 (and $x127 $x136)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x51 (and $x7 $x229)))
 (let (($x14 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x8 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x32 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x14)))))))
 (let (($x150 (=> (and $x75 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x84 $x14)))))))
 (let (($x133 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x86 (=> $x56 (or false (or false (and true (or $x13 $x133)))))))
 (let (($x79 (=> (and $x75 $x56) (or false (or false (and true (or $x13 $x133)))))))
 (let (($x67 (and $x79 $x150)))
 (let (($x163 (and $x67 $x51)))
 (let (($x20 (=> $x163 $x87)))
 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf1 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8388600 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8388600 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x237 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x180 (concat (select input.dst.llvm-mem ?x78) (concat ?x30 (concat ?x87 ?x237)))))
 (let ((?x130 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x180)))
 (let (($x156 (= (_ bv0 32) ?x130)))
 (let (($x33 (= $x156 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x229 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (= $x126 $x138)))
 (let (($x51 (= ?x229 (_ bv0 32))))
 (let (($x239 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x163 (= $x239 $x51)))
 (let (($x26 (and (and (and (not $x239) (not $x126)) $x163) $x41)))
 (let (($x235 (= $x26 true)))
 (let (($x236 (not $x126)))
 (let (($x139 (not $x239)))
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x178 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x178 (_ bv1 32))))
 (let (($x127 (= $x126 $x157)))
 (let (($x167 (= ?x178 (_ bv0 32))))
 (let (($x261 (= $x239 $x167)))
 (let (($x125 (and (and (and $x261 $x127) $x139) $x236)))
 (let (($x123 (= $x125 true)))
 (let ((?x121 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x119 (= (_ bv0 3) ?x121)))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x154 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x115 (= $x63 true)))
 (let (($x60 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94))))
 (let (($x93 (and true $x97)))
 (let (($x31 (and $x97 $x93)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x77))))
 (let (($x153 (= (bvand ?x106 (_ bv4294967288 32)) ?x106)))
 (let (($x35 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x169 (and $x35 $x153)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x134 (and (and (and (and (and $x93 $x104) $x35) $x169) $x31) $x60)))
 (let (($x114 (= true $x134)))
 (let (($x75 (not $x45)))
 (let (($x70 (=> $x75 $x114)))
 (let (($x182 (= $x70 true)))
 (let (($x175 (= $x182 true)))
 (let (($x66 (= $x175 true)))
 (let (($x54 (= $x75 true)))
 (let (($x101 (= $x54 true)))
 (let (($x149 (= $x101 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x37)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x230 $x48)))
 (let (($x21 (and $x38 $x131)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x98 $x21)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x88)))))))
 (let (($x100 (and $x10 $x91)))
 (let (($x148 (= $x100 true)))
 (let (($x59 (= $x148 true)))
 (let (($x102 (= $x59 true)))
 (let (($x99 (and $x102 $x149)))
 (let (($x83 (and $x99 $x66)))
 (let (($x112 (and $x83 $x115)))
 (let (($x117 (and $x112 $x234)))
 (let (($x120 (and $x117 $x183)))
 (let (($x136 (and $x120 $x123)))
 (let (($x92 (and $x136 $x235)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x184 (and $x61 $x92)))
 (let (($x68 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd ?x56 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x7 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x68)))))))
 (let (($x23 (=> (and $x75 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x68)))))))
 (let (($x69 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x22 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x71 (=> $x22 (or false (or false (and true (or $x27 $x69)))))))
 (let (($x76 (=> (and $x75 $x22) (or false (or false (and true (or $x27 $x69)))))))
 (let (($x24 (and $x76 $x23)))
 (let (($x129 (and $x24 $x184)))
 (let (($x6 (=> $x129 $x33)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x237 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x180 (concat (select input.dst.llvm-mem ?x78) (concat ?x30 (concat ?x87 ?x237)))))
 (let ((?x130 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x180)))
 (let (($x156 (= (_ bv0 32) ?x130)))
 (let (($x33 (= $x156 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x229 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (= $x126 $x138)))
 (let (($x51 (= ?x229 (_ bv0 32))))
 (let (($x239 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x163 (= $x239 $x51)))
 (let (($x26 (and (and (and (not $x239) (not $x126)) $x163) $x41)))
 (let (($x235 (= $x26 true)))
 (let (($x236 (not $x126)))
 (let (($x139 (not $x239)))
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x178 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x178 (_ bv1 32))))
 (let (($x127 (= $x126 $x157)))
 (let (($x167 (= ?x178 (_ bv0 32))))
 (let (($x261 (= $x239 $x167)))
 (let (($x125 (and (and (and $x261 $x127) $x139) $x236)))
 (let (($x123 (= $x125 true)))
 (let ((?x121 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x119 (= (_ bv0 3) ?x121)))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x154 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x115 (= $x63 true)))
 (let (($x60 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94))))
 (let (($x93 (and true $x97)))
 (let (($x31 (and $x97 $x93)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x77))))
 (let (($x153 (= (bvand ?x106 (_ bv4294967288 32)) ?x106)))
 (let (($x35 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x169 (and $x35 $x153)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x134 (and (and (and (and (and $x93 $x104) $x35) $x169) $x31) $x60)))
 (let (($x114 (= true $x134)))
 (let (($x75 (not $x45)))
 (let (($x70 (=> $x75 $x114)))
 (let (($x182 (= $x70 true)))
 (let (($x175 (= $x182 true)))
 (let (($x66 (= $x175 true)))
 (let (($x54 (= $x75 true)))
 (let (($x101 (= $x54 true)))
 (let (($x149 (= $x101 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x37)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x230 $x48)))
 (let (($x21 (and $x38 $x131)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x98 $x21)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x88)))))))
 (let (($x100 (and $x10 $x91)))
 (let (($x148 (= $x100 true)))
 (let (($x59 (= $x148 true)))
 (let (($x102 (= $x59 true)))
 (let (($x99 (and $x102 $x149)))
 (let (($x83 (and $x99 $x66)))
 (let (($x112 (and $x83 $x115)))
 (let (($x117 (and $x112 $x234)))
 (let (($x120 (and $x117 $x183)))
 (let (($x136 (and $x120 $x123)))
 (let (($x92 (and $x136 $x235)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x184 (and $x61 $x92)))
 (let (($x68 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd ?x56 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x7 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x68)))))))
 (let (($x23 (=> (and $x75 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x68)))))))
 (let (($x69 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x22 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x71 (=> $x22 (or false (or false (and true (or $x27 $x69)))))))
 (let (($x76 (=> (and $x75 $x22) (or false (or false (and true (or $x27 $x69)))))))
 (let (($x24 (and $x76 $x23)))
 (let (($x129 (and $x24 $x184)))
 (let (($x6 (=> $x129 $x33)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x28) (concat ?x20 (concat ?x168 ?x172)))))
 (let ((?x156 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x130)))
 (let (($x33 (= (_ bv0 32) ?x156)))
 (let (($x6 (= $x33 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x51 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (= $x170 $x138)))
 (let (($x163 (= ?x51 (_ bv0 32))))
 (let (($x178 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x116 (= $x178 $x163)))
 (let (($x236 (= false false)))
 (let (($x125 (=> $x178 $x236)))
 (let (($x235 (and (and $x125 $x116) $x41)))
 (let (($x92 (= $x235 true)))
 (let (($x261 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x126 (ite $x261 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x126 (_ bv1 32))))
 (let (($x179 (= $x170 $x139)))
 (let (($x157 (= ?x126 (_ bv0 32))))
 (let (($x127 (= $x178 $x157)))
 (let (($x136 (and (and $x127 $x179) $x125)))
 (let (($x132 (= $x136 true)))
 (let ((?x183 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x120 (= (_ bv0 3) ?x183)))
 (let (($x17 (= $x120 true)))
 (let (($x239 (= $x17 true)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x115 true)))
 (let (($x152 (= $x112 true)))
 (let (($x162 (= $x152 true)))
 (let (($x85 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x145 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x145) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x145))))
 (let (($x73 (and true $x95)))
 (let (($x31 (and $x95 $x73)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x160))))
 (let (($x169 (= (bvand ?x144 (_ bv4294967288 32)) ?x144)))
 (let (($x107 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x118 (and $x107 $x169)))
 (let (($x110 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x182 (and (and (and (and (and $x73 $x110) $x107) $x118) $x31) $x85)))
 (let (($x175 (= true $x182)))
 (let (($x75 (not $x45)))
 (let (($x66 (=> $x75 $x175)))
 (let (($x83 (= $x66 true)))
 (let (($x124 (= $x83 true)))
 (let (($x154 (= $x124 true)))
 (let (($x99 (= $x75 true)))
 (let (($x96 (= $x99 true)))
 (let (($x94 (= $x96 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x91)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x38 $x131)))
 (let (($x148 (and $x21 $x100)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x36 $x148)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x228)))))))
 (let (($x102 (and $x48 $x59)))
 (let (($x54 (= $x102 true)))
 (let (($x101 (= $x54 true)))
 (let (($x149 (= $x101 true)))
 (let (($x103 (and $x149 $x94)))
 (let (($x111 (and $x103 $x154)))
 (let (($x72 (and $x111 $x162)))
 (let (($x119 (and $x72 $x121)))
 (let (($x155 (and $x119 $x239)))
 (let (($x229 (and $x155 $x132)))
 (let (($x184 (and $x229 $x92)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x129 (and $x49 $x184)))
 (let (($x150 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x22 (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x61 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x150)))))))
 (let (($x9 (=> (and $x75 (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x150)))))))
 (let (($x79 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x84 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x14 (=> $x84 (or false (or false (and true (or $x86 $x79)))))))
 (let (($x62 (=> (and $x75 $x84) (or false (or false (and true (or $x86 $x79)))))))
 (let (($x50 (and $x62 $x9)))
 (let (($x52 (and $x50 $x129)))
 (let (($x11 (=> $x52 $x6)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x28) (concat ?x20 (concat ?x168 ?x172)))))
 (let ((?x156 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x130)))
 (let (($x33 (= (_ bv0 32) ?x156)))
 (let (($x6 (= $x33 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x51 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (= $x170 $x138)))
 (let (($x163 (= ?x51 (_ bv0 32))))
 (let (($x178 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x116 (= $x178 $x163)))
 (let (($x236 (= false false)))
 (let (($x125 (=> $x178 $x236)))
 (let (($x235 (and (and $x125 $x116) $x41)))
 (let (($x92 (= $x235 true)))
 (let (($x261 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x126 (ite $x261 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x126 (_ bv1 32))))
 (let (($x179 (= $x170 $x139)))
 (let (($x157 (= ?x126 (_ bv0 32))))
 (let (($x127 (= $x178 $x157)))
 (let (($x136 (and (and $x127 $x179) $x125)))
 (let (($x132 (= $x136 true)))
 (let ((?x183 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x120 (= (_ bv0 3) ?x183)))
 (let (($x17 (= $x120 true)))
 (let (($x239 (= $x17 true)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x115 true)))
 (let (($x152 (= $x112 true)))
 (let (($x162 (= $x152 true)))
 (let (($x85 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x145 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x145) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x145))))
 (let (($x73 (and true $x95)))
 (let (($x31 (and $x95 $x73)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x160))))
 (let (($x169 (= (bvand ?x144 (_ bv4294967288 32)) ?x144)))
 (let (($x107 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x118 (and $x107 $x169)))
 (let (($x110 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x182 (and (and (and (and (and $x73 $x110) $x107) $x118) $x31) $x85)))
 (let (($x175 (= true $x182)))
 (let (($x75 (not $x45)))
 (let (($x66 (=> $x75 $x175)))
 (let (($x83 (= $x66 true)))
 (let (($x124 (= $x83 true)))
 (let (($x154 (= $x124 true)))
 (let (($x99 (= $x75 true)))
 (let (($x96 (= $x99 true)))
 (let (($x94 (= $x96 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x91)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x38 $x131)))
 (let (($x148 (and $x21 $x100)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x36 $x148)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x228)))))))
 (let (($x102 (and $x48 $x59)))
 (let (($x54 (= $x102 true)))
 (let (($x101 (= $x54 true)))
 (let (($x149 (= $x101 true)))
 (let (($x103 (and $x149 $x94)))
 (let (($x111 (and $x103 $x154)))
 (let (($x72 (and $x111 $x162)))
 (let (($x119 (and $x72 $x121)))
 (let (($x155 (and $x119 $x239)))
 (let (($x229 (and $x155 $x132)))
 (let (($x184 (and $x229 $x92)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x129 (and $x49 $x184)))
 (let (($x150 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x22 (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x61 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x150)))))))
 (let (($x9 (=> (and $x75 (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x150)))))))
 (let (($x79 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x84 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x14 (=> $x84 (or false (or false (and true (or $x86 $x79)))))))
 (let (($x62 (=> (and $x75 $x84) (or false (or false (and true (or $x86 $x79)))))))
 (let (($x50 (and $x62 $x9)))
 (let (($x52 (and $x50 $x129)))
 (let (($x11 (=> $x52 $x6)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf1 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8388600 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8388600 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x8) (concat ?x6 (concat ?x130 ?x87)))))
 (let ((?x57 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x159)))
 (let (($x81 (= (_ bv0 32) ?x57)))
 (let (($x44 (= $x81 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x41 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x129 (= $x123 $x184)))
 (let (($x235 (= ?x41 (_ bv0 32))))
 (let (($x126 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x92 (= $x126 $x235)))
 (let (($x237 (and (and (and (not $x123) (=> $x126 (= false false))) $x92) $x129)))
 (let (($x20 (= $x237 true)))
 (let (($x132 (= false false)))
 (let (($x229 (=> $x126 $x132)))
 (let (($x136 (not $x123)))
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x170 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge ?x170 (_ bv1 32))))
 (let (($x125 (= $x123 $x236)))
 (let (($x139 (= ?x170 (_ bv0 32))))
 (let (($x179 (= $x126 $x139)))
 (let (($x116 (and (and (and $x179 $x125) $x136) $x229)))
 (let (($x26 (= $x116 true)))
 (let ((?x239 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x155 (= (_ bv0 3) ?x239)))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x117 (= $x234 true)))
 (let (($x233 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x55 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x55) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x55))))
 (let (($x109 (and true $x113)))
 (let (($x31 (and $x113 $x109)))
 (let ((?x84 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x146))))
 (let (($x118 (= (bvand ?x165 (_ bv4294967288 32)) ?x165)))
 (let (($x105 (= (bvand ?x84 (_ bv4294967292 32)) ?x84)))
 (let (($x114 (and $x105 $x118)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x84 (bvsub ?x84 (_ bv4 32))) (bvult ?x84 (bvsub ?x84 (_ bv4 32))))))
 (let (($x83 (and (and (and (and (and $x109 $x161) $x105) $x114) $x31) $x233)))
 (let (($x124 (= true $x83)))
 (let (($x75 (not $x45)))
 (let (($x154 (=> $x75 $x124)))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x115 (= $x63 true)))
 (let (($x103 (= $x75 true)))
 (let (($x97 (= $x103 true)))
 (let (($x145 (= $x97 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x59)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x21 $x100)))
 (let (($x54 (and $x148 $x102)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x74 $x54)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x230)))))))
 (let (($x149 (and $x131 $x101)))
 (let (($x99 (= $x149 true)))
 (let (($x96 (= $x99 true)))
 (let (($x94 (= $x96 true)))
 (let (($x93 (and $x94 $x145)))
 (let (($x112 (and $x93 $x115)))
 (let (($x128 (and $x112 $x117)))
 (let (($x120 (and $x128 $x183)))
 (let (($x167 (and $x120 $x178)))
 (let (($x138 (and $x167 $x26)))
 (let (($x30 (and $x138 $x20)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x168 (and $x82 $x30)))
 (let (($x23 (bvugt ?x84 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd ?x84 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x49 (=> (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x23)))))))
 (let (($x46 (=> (and $x75 (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x7 $x23)))))))
 (let (($x76 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x158 (or false (or false (and true (or $x71 $x76)))))))
 (let (($x78 (=> (and $x75 $x158) (or false (or false (and true (or $x71 $x76)))))))
 (let (($x25 (and $x78 $x46)))
 (let (($x172 (and $x25 $x168)))
 (let (($x47 (=> $x172 $x44)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x8) (concat ?x6 (concat ?x130 ?x87)))))
 (let ((?x57 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x159)))
 (let (($x81 (= (_ bv0 32) ?x57)))
 (let (($x44 (= $x81 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x41 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x129 (= $x123 $x184)))
 (let (($x235 (= ?x41 (_ bv0 32))))
 (let (($x126 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x92 (= $x126 $x235)))
 (let (($x237 (and (and (and (not $x123) (=> $x126 (= false false))) $x92) $x129)))
 (let (($x20 (= $x237 true)))
 (let (($x132 (= false false)))
 (let (($x229 (=> $x126 $x132)))
 (let (($x136 (not $x123)))
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x170 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge ?x170 (_ bv1 32))))
 (let (($x125 (= $x123 $x236)))
 (let (($x139 (= ?x170 (_ bv0 32))))
 (let (($x179 (= $x126 $x139)))
 (let (($x116 (and (and (and $x179 $x125) $x136) $x229)))
 (let (($x26 (= $x116 true)))
 (let ((?x239 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x155 (= (_ bv0 3) ?x239)))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x117 (= $x234 true)))
 (let (($x233 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x55 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x55) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x55))))
 (let (($x109 (and true $x113)))
 (let (($x31 (and $x113 $x109)))
 (let ((?x84 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x146))))
 (let (($x118 (= (bvand ?x165 (_ bv4294967288 32)) ?x165)))
 (let (($x105 (= (bvand ?x84 (_ bv4294967292 32)) ?x84)))
 (let (($x114 (and $x105 $x118)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x84 (bvsub ?x84 (_ bv4 32))) (bvult ?x84 (bvsub ?x84 (_ bv4 32))))))
 (let (($x83 (and (and (and (and (and $x109 $x161) $x105) $x114) $x31) $x233)))
 (let (($x124 (= true $x83)))
 (let (($x75 (not $x45)))
 (let (($x154 (=> $x75 $x124)))
 (let (($x111 (= $x154 true)))
 (let (($x63 (= $x111 true)))
 (let (($x115 (= $x63 true)))
 (let (($x103 (= $x75 true)))
 (let (($x97 (= $x103 true)))
 (let (($x145 (= $x97 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x59)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x21 $x100)))
 (let (($x54 (and $x148 $x102)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x74 $x54)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x230)))))))
 (let (($x149 (and $x131 $x101)))
 (let (($x99 (= $x149 true)))
 (let (($x96 (= $x99 true)))
 (let (($x94 (= $x96 true)))
 (let (($x93 (and $x94 $x145)))
 (let (($x112 (and $x93 $x115)))
 (let (($x128 (and $x112 $x117)))
 (let (($x120 (and $x128 $x183)))
 (let (($x167 (and $x120 $x178)))
 (let (($x138 (and $x167 $x26)))
 (let (($x30 (and $x138 $x20)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x168 (and $x82 $x30)))
 (let (($x23 (bvugt ?x84 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd ?x84 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x49 (=> (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x23)))))))
 (let (($x46 (=> (and $x75 (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x7 $x23)))))))
 (let (($x76 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x158 (or false (or false (and true (or $x71 $x76)))))))
 (let (($x78 (=> (and $x75 $x158) (or false (or false (and true (or $x71 $x76)))))))
 (let (($x25 (and $x78 $x46)))
 (let (($x172 (and $x25 $x168)))
 (let (($x47 (=> $x172 $x44)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x56) (concat ?x213 (concat ?x272 ?x243)))))
 (let ((?x308 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x216)))
 (let (($x309 (= (_ bv0 32) ?x308)))
 (let (($x310 (= $x309 true)))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x225))))
 (let ((?x278 (bvadd ?x226 (_ bv4 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x53))))
 (let (($x287 (= (_ bv0 32) ?x286)))
 (let ((?x288 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x288 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (= $x202 $x292)))
 (let (($x141 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x51 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x238 (and $x51 $x141)))
 (let (($x294 (=> $x238 $x293)))
 (let (($x289 (= ?x288 (_ bv0 32))))
 (let (($x267 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x290 (= $x267 $x289)))
 (let (($x291 (=> $x238 $x290)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x40))))
 (let (($x276 (= input.spec-%var-l-1.2.1.2.0 ?x275)))
 (let (($x277 (=> $x238 $x276)))
 (let (($x247 (= (_ bv0 32) ?x226)))
 (let ((?x248 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x248 (_ bv1 32))))
 (let (($x253 (= $x141 $x255)))
 (let (($x256 (=> $x51 $x253)))
 (let (($x251 (= ?x248 (_ bv0 32))))
 (let (($x172 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x172 $x251)))
 (let (($x246 (=> $x51 $x227)))
 (let (($x219 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x217 (=> $x51 $x219)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x209 (_ bv1 32))))
 (let (($x19 (= $x51 $x271)))
 (let (($x207 (= ?x209 (_ bv0 32))))
 (let (($x170 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x210 (= $x170 $x207)))
 (let (($x132 (= false false)))
 (let (($x133 (and $x51 $x172)))
 (let (($x16 (=> $x133 $x132)))
 (let (($x229 (=> $x170 $x132)))
 (let (($x300 (and (and (and (and (and (and $x229 $x16) $x210) $x19) $x217) $x246) $x256)))
 (let (($x303 (and (and (and $x300 $x277) $x291) $x294)))
 (let (($x304 (= $x303 true)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x18 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x57 (concat ?x156 ?x130))))
 (let ((?x196 (bvadd ?x81 (_ bv4 32))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x189))))
 (let (($x200 (= (_ bv0 32) ?x190)))
 (let ((?x188 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x203 (bvuge ?x188 (_ bv1 32))))
 (let (($x270 (= $x202 $x203)))
 (let (($x215 (=> $x238 $x270)))
 (let (($x197 (= ?x188 (_ bv0 32))))
 (let (($x42 (= $x267 $x197)))
 (let (($x205 (=> $x238 $x42)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x176))))
 (let (($x90 (= input.spec-%var-l-1.2.1.2.0 ?x187)))
 (let (($x265 (=> $x238 $x90)))
 (let (($x44 (= (_ bv0 32) ?x81)))
 (let ((?x47 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x47 (_ bv1 32))))
 (let (($x173 (= $x141 $x5)))
 (let (($x185 (=> $x51 $x173)))
 (let (($x140 (= ?x47 (_ bv0 32))))
 (let (($x29 (= $x172 $x140)))
 (let (($x89 (=> $x51 $x29)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x41)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x180)))
 (let (($x20 (= input.spec-%var-l-1.2.0 ?x237)))
 (let (($x30 (=> $x51 $x20)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x123 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x136 (bvuge ?x123 (_ bv1 32))))
 (let (($x163 (= $x51 $x136)))
 (let (($x236 (= ?x123 (_ bv0 32))))
 (let (($x125 (= $x170 $x236)))
 (let (($x195 (and (and (and (and (and (and $x125 $x163) $x229) $x30) $x89) $x16) $x185)))
 (let (($x212 (and (and (and $x195 $x265) $x205) $x215)))
 (let (($x208 (= $x212 true)))
 (let ((?x178 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= (_ bv0 3) ?x178)))
 (let (($x261 (= $x167 true)))
 (let (($x126 (= $x261 true)))
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= $x120 true)))
 (let (($x239 (= $x17 true)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x119 (= $x121 true)))
 (let (($x70 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x104 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x104) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x104))))
 (let (($x60 (and true $x166)))
 (let (($x31 (and $x166 $x60)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x39))))
 (let (($x114 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x106 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x175 (and $x106 $x114)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x111 (and (and (and (and (and $x60 $x134) $x106) $x175) $x31) $x70)))
 (let (($x63 (= true $x111)))
 (let (($x75 (not $x45)))
 (let (($x115 (=> $x75 $x63)))
 (let (($x112 (= $x115 true)))
 (let (($x152 (= $x112 true)))
 (let (($x162 (= $x152 true)))
 (let (($x93 (= $x75 true)))
 (let (($x95 (= $x93 true)))
 (let (($x55 (= $x95 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x101)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x148 $x102)))
 (let (($x99 (and $x54 $x149)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x98 $x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x38)))))))
 (let (($x94 (and $x100 $x96)))
 (let (($x103 (= $x94 true)))
 (let (($x97 (= $x103 true)))
 (let (($x145 (= $x97 true)))
 (let (($x73 (and $x145 $x55)))
 (let (($x72 (and $x73 $x162)))
 (let (($x122 (and $x72 $x119)))
 (let (($x155 (and $x122 $x239)))
 (let (($x157 (and $x155 $x126)))
 (let (($x80 (and $x157 $x208)))
 (let (($x305 (and $x80 $x304)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x306 (and $x10 $x305)))
 (let (($x9 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x158 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x82 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x9)))))))
 (let (($x164 (=> (and $x75 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x9)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x150 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32))) (or false (or false (and true (or $x14 $x62)))))))
 (let (($x28 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32)))) (or false (or false (and true (or $x14 $x62)))))))
 (let (($x67 (and $x28 $x164)))
 (let (($x307 (and $x67 $x306)))
 (let (($x311 (=> $x307 $x310)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x56) (concat ?x213 (concat ?x272 ?x243)))))
 (let ((?x308 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x216)))
 (let (($x309 (= (_ bv0 32) ?x308)))
 (let (($x310 (= $x309 true)))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x225))))
 (let ((?x278 (bvadd ?x226 (_ bv4 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x53))))
 (let (($x287 (= (_ bv0 32) ?x286)))
 (let ((?x288 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x288 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (= $x202 $x292)))
 (let (($x141 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x51 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x238 (and $x51 $x141)))
 (let (($x294 (=> $x238 $x293)))
 (let (($x289 (= ?x288 (_ bv0 32))))
 (let (($x267 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x290 (= $x267 $x289)))
 (let (($x291 (=> $x238 $x290)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x40))))
 (let (($x276 (= input.spec-%var-l-1.2.1.2.0 ?x275)))
 (let (($x277 (=> $x238 $x276)))
 (let (($x247 (= (_ bv0 32) ?x226)))
 (let ((?x248 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x248 (_ bv1 32))))
 (let (($x253 (= $x141 $x255)))
 (let (($x256 (=> $x51 $x253)))
 (let (($x251 (= ?x248 (_ bv0 32))))
 (let (($x172 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x172 $x251)))
 (let (($x246 (=> $x51 $x227)))
 (let (($x219 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x217 (=> $x51 $x219)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x209 (_ bv1 32))))
 (let (($x19 (= $x51 $x271)))
 (let (($x207 (= ?x209 (_ bv0 32))))
 (let (($x170 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x210 (= $x170 $x207)))
 (let (($x132 (= false false)))
 (let (($x133 (and $x51 $x172)))
 (let (($x16 (=> $x133 $x132)))
 (let (($x229 (=> $x170 $x132)))
 (let (($x300 (and (and (and (and (and (and $x229 $x16) $x210) $x19) $x217) $x246) $x256)))
 (let (($x303 (and (and (and $x300 $x277) $x291) $x294)))
 (let (($x304 (= $x303 true)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x18 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x57 (concat ?x156 ?x130))))
 (let ((?x196 (bvadd ?x81 (_ bv4 32))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x189))))
 (let (($x200 (= (_ bv0 32) ?x190)))
 (let ((?x188 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x203 (bvuge ?x188 (_ bv1 32))))
 (let (($x270 (= $x202 $x203)))
 (let (($x215 (=> $x238 $x270)))
 (let (($x197 (= ?x188 (_ bv0 32))))
 (let (($x42 (= $x267 $x197)))
 (let (($x205 (=> $x238 $x42)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x176))))
 (let (($x90 (= input.spec-%var-l-1.2.1.2.0 ?x187)))
 (let (($x265 (=> $x238 $x90)))
 (let (($x44 (= (_ bv0 32) ?x81)))
 (let ((?x47 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x47 (_ bv1 32))))
 (let (($x173 (= $x141 $x5)))
 (let (($x185 (=> $x51 $x173)))
 (let (($x140 (= ?x47 (_ bv0 32))))
 (let (($x29 (= $x172 $x140)))
 (let (($x89 (=> $x51 $x29)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x41)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x180)))
 (let (($x20 (= input.spec-%var-l-1.2.0 ?x237)))
 (let (($x30 (=> $x51 $x20)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x123 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x136 (bvuge ?x123 (_ bv1 32))))
 (let (($x163 (= $x51 $x136)))
 (let (($x236 (= ?x123 (_ bv0 32))))
 (let (($x125 (= $x170 $x236)))
 (let (($x195 (and (and (and (and (and (and $x125 $x163) $x229) $x30) $x89) $x16) $x185)))
 (let (($x212 (and (and (and $x195 $x265) $x205) $x215)))
 (let (($x208 (= $x212 true)))
 (let ((?x178 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= (_ bv0 3) ?x178)))
 (let (($x261 (= $x167 true)))
 (let (($x126 (= $x261 true)))
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= $x120 true)))
 (let (($x239 (= $x17 true)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x119 (= $x121 true)))
 (let (($x70 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x104 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x104) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x104))))
 (let (($x60 (and true $x166)))
 (let (($x31 (and $x166 $x60)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x39))))
 (let (($x114 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x106 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x175 (and $x106 $x114)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x111 (and (and (and (and (and $x60 $x134) $x106) $x175) $x31) $x70)))
 (let (($x63 (= true $x111)))
 (let (($x75 (not $x45)))
 (let (($x115 (=> $x75 $x63)))
 (let (($x112 (= $x115 true)))
 (let (($x152 (= $x112 true)))
 (let (($x162 (= $x152 true)))
 (let (($x93 (= $x75 true)))
 (let (($x95 (= $x93 true)))
 (let (($x55 (= $x95 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x101)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x148 $x102)))
 (let (($x99 (and $x54 $x149)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x98 $x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x38)))))))
 (let (($x94 (and $x100 $x96)))
 (let (($x103 (= $x94 true)))
 (let (($x97 (= $x103 true)))
 (let (($x145 (= $x97 true)))
 (let (($x73 (and $x145 $x55)))
 (let (($x72 (and $x73 $x162)))
 (let (($x122 (and $x72 $x119)))
 (let (($x155 (and $x122 $x239)))
 (let (($x157 (and $x155 $x126)))
 (let (($x80 (and $x157 $x208)))
 (let (($x305 (and $x80 $x304)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x306 (and $x10 $x305)))
 (let (($x9 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x158 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x82 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x9)))))))
 (let (($x164 (=> (and $x75 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x9)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x150 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32))) (or false (or false (and true (or $x14 $x62)))))))
 (let (($x28 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32)))) (or false (or false (and true (or $x14 $x62)))))))
 (let (($x67 (and $x28 $x164)))
 (let (($x307 (and $x67 $x306)))
 (let (($x311 (=> $x307 $x310)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv19 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x4848484f)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x48484848)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x48) #x48484853 #x4b))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem ?x22) (concat ?x298 (concat ?x216 ?x223)))))
 (let ((?x316 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x58)))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let (($x318 (= $x317 true)))
 (let ((?x71 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x249))))
 (let ((?x285 (bvadd ?x246 (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x147))))
 (let (($x289 (= (_ bv0 32) ?x288)))
 (let ((?x290 (ite $x289 (_ bv0 32) (_ bv1 32))))
 (let (($x293 (bvuge ?x290 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x188 $x293)))
 (let (($x16 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x173 (and $x211 $x16)))
 (let (($x303 (=> $x173 $x294)))
 (let (($x291 (= ?x290 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x302 (= $x90 $x291)))
 (let (($x292 (=> $x173 $x302)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x254))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x284 (=> $x173 $x278)))
 (let (($x299 (= (_ bv0 32) ?x246)))
 (let ((?x255 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x255 (_ bv1 32))))
 (let (($x274 (= $x16 $x273)))
 (let (($x258 (=> $x211 $x274)))
 (let (($x253 (= ?x255 (_ bv0 32))))
 (let (($x172 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x256 (= $x172 $x253)))
 (let (($x300 (=> $x211 $x256)))
 (let (($x250 (= input.spec-%var-l-1.2.0 ?x58)))
 (let (($x224 (=> $x211 $x250)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x244 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (bvuge ?x244 (_ bv1 32))))
 (let (($x243 (= $x211 $x272)))
 (let (($x213 (= ?x244 (_ bv0 32))))
 (let (($x123 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x222 (= $x123 $x213)))
 (let (($x203 (and $x173 $x188)))
 (let (($x270 (not $x203)))
 (let (($x214 (and $x173 $x90)))
 (let (($x202 (not $x214)))
 (let (($x242 (= false false)))
 (let (($x198 (and $x211 $x172)))
 (let (($x133 (=> $x198 $x242)))
 (let (($x116 (=> $x123 $x242)))
 (let (($x309 (and (and (and (and (and (and $x116 $x133) $x202) $x270) $x222) $x243) $x224)))
 (let (($x13 (and (and (and (and (and $x309 $x300) $x258) $x284) $x292) $x303)))
 (let (($x37 (= $x13 true)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x11 (concat ?x18 ?x156))))
 (let ((?x265 (bvadd ?x81 (_ bv4 32))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x196))))
 (let (($x191 (= (_ bv0 32) ?x268)))
 (let ((?x189 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x189 (_ bv1 32))))
 (let (($x42 (= $x188 $x197)))
 (let (($x205 (=> $x173 $x42)))
 (let (($x204 (= ?x189 (_ bv0 32))))
 (let (($x190 (= $x90 $x204)))
 (let (($x200 (=> $x173 $x190)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x34))))
 (let (($x176 (= input.spec-%var-l-1.2.1.2.0 ?x15)))
 (let (($x177 (=> $x173 $x176)))
 (let (($x44 (= (_ bv0 32) ?x81)))
 (let ((?x47 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x47 (_ bv1 32))))
 (let (($x141 (= $x16 $x192)))
 (let (($x5 (=> $x211 $x141)))
 (let (($x140 (= ?x47 (_ bv0 32))))
 (let (($x29 (= $x172 $x140)))
 (let (($x89 (=> $x211 $x29)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x138)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x41)))
 (let (($x30 (= input.spec-%var-l-1.2.0 ?x20)))
 (let (($x206 (=> $x211 $x30)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x51 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x51 (_ bv1 32))))
 (let (($x229 (= $x211 $x132)))
 (let (($x136 (= ?x51 (_ bv0 32))))
 (let (($x163 (= $x123 $x136)))
 (let (($x209 (and (and (and (and (and (and $x163 $x229) $x116) $x206) $x89) $x133) $x5)))
 (let (($x19 (and (and (and (and (and $x209 $x177) $x200) $x205) $x202) $x270)))
 (let (($x297 (= $x19 true)))
 (let ((?x126 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x157 (= (_ bv0 3) ?x126)))
 (let (($x127 (= $x157 true)))
 (let (($x170 (= $x127 true)))
 (let (($x155 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x119 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x120 (= $x183 true)))
 (let (($x66 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110))))
 (let (($x85 (and true $x35)))
 (let (($x31 (and $x35 $x85)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x108))))
 (let (($x175 (= (bvand ?x169 (_ bv4294967288 32)) ?x169)))
 (let (($x144 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x124 (and $x144 $x175)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x112 (and (and (and (and (and $x85 $x182) $x144) $x124) $x31) $x66)))
 (let (($x152 (= true $x112)))
 (let (($x75 (not $x45)))
 (let (($x162 (=> $x75 $x152)))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x117 (= $x234 true)))
 (let (($x73 (= $x75 true)))
 (let (($x113 (= $x73 true)))
 (let (($x104 (= $x113 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x96)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x54 $x149)))
 (let (($x103 (and $x99 $x94)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x36 $x103)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x21)))))))
 (let (($x145 (and $x102 $x97)))
 (let (($x93 (= $x145 true)))
 (let (($x95 (= $x93 true)))
 (let (($x55 (= $x95 true)))
 (let (($x109 (and $x55 $x104)))
 (let (($x128 (and $x109 $x117)))
 (let (($x17 (and $x128 $x120)))
 (let (($x167 (and $x17 $x178)))
 (let (($x139 (and $x167 $x170)))
 (let (($x220 (and $x139 $x297)))
 (let (($x313 (and $x220 $x37)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x314 (and $x48 $x313)))
 (let (($x46 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd ?x32 (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x10 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x46)))))))
 (let (($x88 (=> (and $x75 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x49 $x46)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x23 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x71 (_ bv1 32))) (or false (or false (and true (or $x68 $x78)))))))
 (let (($x8 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x71 (_ bv1 32)))) (or false (or false (and true (or $x68 $x78)))))))
 (let (($x24 (and $x8 $x88)))
 (let (($x315 (and $x24 $x314)))
 (let (($x319 (=> $x315 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem ?x22) (concat ?x298 (concat ?x216 ?x223)))))
 (let ((?x316 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x58)))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let (($x318 (= $x317 true)))
 (let ((?x71 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x249))))
 (let ((?x285 (bvadd ?x246 (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x147))))
 (let (($x289 (= (_ bv0 32) ?x288)))
 (let ((?x290 (ite $x289 (_ bv0 32) (_ bv1 32))))
 (let (($x293 (bvuge ?x290 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x188 $x293)))
 (let (($x16 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x173 (and $x211 $x16)))
 (let (($x303 (=> $x173 $x294)))
 (let (($x291 (= ?x290 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x302 (= $x90 $x291)))
 (let (($x292 (=> $x173 $x302)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x254))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x284 (=> $x173 $x278)))
 (let (($x299 (= (_ bv0 32) ?x246)))
 (let ((?x255 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x255 (_ bv1 32))))
 (let (($x274 (= $x16 $x273)))
 (let (($x258 (=> $x211 $x274)))
 (let (($x253 (= ?x255 (_ bv0 32))))
 (let (($x172 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x256 (= $x172 $x253)))
 (let (($x300 (=> $x211 $x256)))
 (let (($x250 (= input.spec-%var-l-1.2.0 ?x58)))
 (let (($x224 (=> $x211 $x250)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x244 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (bvuge ?x244 (_ bv1 32))))
 (let (($x243 (= $x211 $x272)))
 (let (($x213 (= ?x244 (_ bv0 32))))
 (let (($x123 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x222 (= $x123 $x213)))
 (let (($x203 (and $x173 $x188)))
 (let (($x270 (not $x203)))
 (let (($x214 (and $x173 $x90)))
 (let (($x202 (not $x214)))
 (let (($x242 (= false false)))
 (let (($x198 (and $x211 $x172)))
 (let (($x133 (=> $x198 $x242)))
 (let (($x116 (=> $x123 $x242)))
 (let (($x309 (and (and (and (and (and (and $x116 $x133) $x202) $x270) $x222) $x243) $x224)))
 (let (($x13 (and (and (and (and (and $x309 $x300) $x258) $x284) $x292) $x303)))
 (let (($x37 (= $x13 true)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x11 (concat ?x18 ?x156))))
 (let ((?x265 (bvadd ?x81 (_ bv4 32))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x196))))
 (let (($x191 (= (_ bv0 32) ?x268)))
 (let ((?x189 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x189 (_ bv1 32))))
 (let (($x42 (= $x188 $x197)))
 (let (($x205 (=> $x173 $x42)))
 (let (($x204 (= ?x189 (_ bv0 32))))
 (let (($x190 (= $x90 $x204)))
 (let (($x200 (=> $x173 $x190)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x34))))
 (let (($x176 (= input.spec-%var-l-1.2.1.2.0 ?x15)))
 (let (($x177 (=> $x173 $x176)))
 (let (($x44 (= (_ bv0 32) ?x81)))
 (let ((?x47 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x47 (_ bv1 32))))
 (let (($x141 (= $x16 $x192)))
 (let (($x5 (=> $x211 $x141)))
 (let (($x140 (= ?x47 (_ bv0 32))))
 (let (($x29 (= $x172 $x140)))
 (let (($x89 (=> $x211 $x29)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x138)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x41)))
 (let (($x30 (= input.spec-%var-l-1.2.0 ?x20)))
 (let (($x206 (=> $x211 $x30)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x51 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x51 (_ bv1 32))))
 (let (($x229 (= $x211 $x132)))
 (let (($x136 (= ?x51 (_ bv0 32))))
 (let (($x163 (= $x123 $x136)))
 (let (($x209 (and (and (and (and (and (and $x163 $x229) $x116) $x206) $x89) $x133) $x5)))
 (let (($x19 (and (and (and (and (and $x209 $x177) $x200) $x205) $x202) $x270)))
 (let (($x297 (= $x19 true)))
 (let ((?x126 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x157 (= (_ bv0 3) ?x126)))
 (let (($x127 (= $x157 true)))
 (let (($x170 (= $x127 true)))
 (let (($x155 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x119 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x120 (= $x183 true)))
 (let (($x66 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110))))
 (let (($x85 (and true $x35)))
 (let (($x31 (and $x35 $x85)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x108))))
 (let (($x175 (= (bvand ?x169 (_ bv4294967288 32)) ?x169)))
 (let (($x144 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x124 (and $x144 $x175)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x112 (and (and (and (and (and $x85 $x182) $x144) $x124) $x31) $x66)))
 (let (($x152 (= true $x112)))
 (let (($x75 (not $x45)))
 (let (($x162 (=> $x75 $x152)))
 (let (($x72 (= $x162 true)))
 (let (($x234 (= $x72 true)))
 (let (($x117 (= $x234 true)))
 (let (($x73 (= $x75 true)))
 (let (($x113 (= $x73 true)))
 (let (($x104 (= $x113 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x96)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x54 $x149)))
 (let (($x103 (and $x99 $x94)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x36 $x103)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x21)))))))
 (let (($x145 (and $x102 $x97)))
 (let (($x93 (= $x145 true)))
 (let (($x95 (= $x93 true)))
 (let (($x55 (= $x95 true)))
 (let (($x109 (and $x55 $x104)))
 (let (($x128 (and $x109 $x117)))
 (let (($x17 (and $x128 $x120)))
 (let (($x167 (and $x17 $x178)))
 (let (($x139 (and $x167 $x170)))
 (let (($x220 (and $x139 $x297)))
 (let (($x313 (and $x220 $x37)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x314 (and $x48 $x313)))
 (let (($x46 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd ?x32 (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x10 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x46)))))))
 (let (($x88 (=> (and $x75 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x49 $x46)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x23 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x71 (_ bv1 32))) (or false (or false (and true (or $x68 $x78)))))))
 (let (($x8 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x71 (_ bv1 32)))) (or false (or false (and true (or $x68 $x78)))))))
 (let (($x24 (and $x8 $x88)))
 (let (($x315 (and $x24 $x314)))
 (let (($x319 (=> $x315 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv19 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000d)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000007
                                #xe5)
                         #x00000010
                         #x52)
                  #x00000005
                  #x88)))
  (store (store (store a!1 #x0000000b #x52) #x00000005 #x88) #x00000007 #xe5)))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x52000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x206)))
 (let (($x168 (= (_ bv0 8) ?x208)))
 (let (($x172 (= $x168 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x237 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x237 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x92 (= $x215 $x235)))
 (let (($x52 (= ?x237 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x26 (= $x51 $x52)))
 (let (($x129 (and $x26 $x92)))
 (let (($x138 (= $x129 true)))
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x211 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x211 (_ bv1 32))))
 (let (($x116 (= $x215 $x242)))
 (let (($x132 (= ?x211 (_ bv0 32))))
 (let (($x229 (= $x51 $x132)))
 (let (($x212 (and $x229 $x116)))
 (let (($x184 (= $x212 true)))
 (let (($x139 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x179 (= $x139 true)))
 (let (($x123 (= $x179 true)))
 (let ((?x167 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x167)))
 (let (($x126 (= $x261 true)))
 (let (($x157 (= $x126 true)))
 (let (($x183 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x183 true)))
 (let (($x17 (= $x120 true)))
 (let (($x155 (= $x17 true)))
 (let (($x115 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60))))
 (let (($x107 (and true $x134)))
 (let (($x63 (and $x134 $x107)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x39))))
 (let (($x175 (= (bvand ?x169 (_ bv4294967288 32)) ?x169)))
 (let (($x111 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x124 (and $x111 $x175)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x162 (and (and (and (and (and $x107 $x106) $x111) $x124) $x63) $x115)))
 (let (($x72 (= true $x162)))
 (let (($x239 (not $x142)))
 (let (($x234 (=> $x239 $x72)))
 (let (($x117 (= $x234 true)))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x104 (= $x239 true)))
 (let (($x109 (= $x104 true)))
 (let (($x166 (= $x109 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x103)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x149 $x96)))
 (let (($x145 (and $x94 $x97)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x65 $x145)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x98)))))))
 (let (($x95 (and $x101 $x93)))
 (let (($x55 (= $x95 true)))
 (let (($x73 (= $x55 true)))
 (let (($x113 (= $x73 true)))
 (let (($x110 (and $x113 $x166)))
 (let (($x119 (and $x110 $x121)))
 (let (($x137 (and $x119 $x155)))
 (let (($x127 (and $x137 $x157)))
 (let (($x236 (and $x127 $x123)))
 (let (($x180 (and $x236 $x184)))
 (let (($x41 (and $x180 $x138)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x20 (and $x38 $x41)))
 (let (($x82 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x56 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x230 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x82)))))))
 (let (($x9 (=> (and $x239 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x82)))))))
 (let (($x150 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x61 (=> $x32 (or false (or false (and true (or $x84 $x150)))))))
 (let (($x76 (=> (and $x239 $x32) (or false (or false (and true (or $x84 $x150)))))))
 (let (($x228 (and $x76 $x9)))
 (let (($x30 (and $x228 $x20)))
 (let (($x135 (=> $x30 $x172)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x206)))
 (let (($x168 (= (_ bv0 8) ?x208)))
 (let (($x172 (= $x168 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x237 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x237 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x92 (= $x215 $x235)))
 (let (($x52 (= ?x237 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x26 (= $x51 $x52)))
 (let (($x129 (and $x26 $x92)))
 (let (($x138 (= $x129 true)))
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x211 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x211 (_ bv1 32))))
 (let (($x116 (= $x215 $x242)))
 (let (($x132 (= ?x211 (_ bv0 32))))
 (let (($x229 (= $x51 $x132)))
 (let (($x212 (and $x229 $x116)))
 (let (($x184 (= $x212 true)))
 (let (($x139 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x179 (= $x139 true)))
 (let (($x123 (= $x179 true)))
 (let ((?x167 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x167)))
 (let (($x126 (= $x261 true)))
 (let (($x157 (= $x126 true)))
 (let (($x183 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x183 true)))
 (let (($x17 (= $x120 true)))
 (let (($x155 (= $x17 true)))
 (let (($x115 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60))))
 (let (($x107 (and true $x134)))
 (let (($x63 (and $x134 $x107)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x39))))
 (let (($x175 (= (bvand ?x169 (_ bv4294967288 32)) ?x169)))
 (let (($x111 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x124 (and $x111 $x175)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x162 (and (and (and (and (and $x107 $x106) $x111) $x124) $x63) $x115)))
 (let (($x72 (= true $x162)))
 (let (($x239 (not $x142)))
 (let (($x234 (=> $x239 $x72)))
 (let (($x117 (= $x234 true)))
 (let (($x128 (= $x117 true)))
 (let (($x121 (= $x128 true)))
 (let (($x104 (= $x239 true)))
 (let (($x109 (= $x104 true)))
 (let (($x166 (= $x109 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x103)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x149 $x96)))
 (let (($x145 (and $x94 $x97)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x65 $x145)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x98)))))))
 (let (($x95 (and $x101 $x93)))
 (let (($x55 (= $x95 true)))
 (let (($x73 (= $x55 true)))
 (let (($x113 (= $x73 true)))
 (let (($x110 (and $x113 $x166)))
 (let (($x119 (and $x110 $x121)))
 (let (($x137 (and $x119 $x155)))
 (let (($x127 (and $x137 $x157)))
 (let (($x236 (and $x127 $x123)))
 (let (($x180 (and $x236 $x184)))
 (let (($x41 (and $x180 $x138)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x20 (and $x38 $x41)))
 (let (($x82 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x56 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x230 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x82)))))))
 (let (($x9 (=> (and $x239 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x82)))))))
 (let (($x150 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x61 (=> $x32 (or false (or false (and true (or $x84 $x150)))))))
 (let (($x76 (=> (and $x239 $x32) (or false (or false (and true (or $x84 $x150)))))))
 (let (($x228 (and $x76 $x9)))
 (let (($x30 (and $x228 $x20)))
 (let (($x135 (=> $x30 $x172)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 #b00000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b10000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf0 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv12582872 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv12582872 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8) (_ bv0 8))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x11)))
 (let (($x18 (= (_ bv0 8) ?x6)))
 (let (($x57 (= $x18 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x138 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x206 (= $x116 $x30)))
 (let (($x41 (= ?x138 (_ bv0 32))))
 (let (($x163 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (= $x163 $x41)))
 (let (($x172 (and (and (and (not $x163) (not $x116)) $x20) $x206)))
 (let (($x135 (= $x172 true)))
 (let (($x237 (not $x116)))
 (let (($x180 (not $x163)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x229 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x229 (_ bv1 32))))
 (let (($x184 (= $x116 $x212)))
 (let (($x215 (= ?x229 (_ bv0 32))))
 (let (($x242 (= $x163 $x215)))
 (let (($x235 (and (and (and $x242 $x184) $x180) $x237)))
 (let (($x92 (= $x235 true)))
 (let (($x123 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x236 (= $x123 true)))
 (let (($x125 (= $x236 true)))
 (let ((?x157 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x127 (= (_ bv0 3) ?x157)))
 (let (($x71 (= $x127 true)))
 (let (($x170 (= $x71 true)))
 (let (($x155 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x167 (= $x178 true)))
 (let (($x31 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x85 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x85) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x85))))
 (let (($x182 (and true $x233)))
 (let (($x63 (and $x233 $x182)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x160))))
 (let (($x124 (= (bvand ?x118 (_ bv4294967288 32)) ?x118)))
 (let (($x165 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x112 (and $x165 $x124)))
 (let (($x144 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x117 (and (and (and (and (and $x182 $x144) $x165) $x112) $x63) $x31)))
 (let (($x128 (= true $x117)))
 (let (($x239 (not $x142)))
 (let (($x121 (=> $x239 $x128)))
 (let (($x119 (= $x121 true)))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x110 (= $x239 true)))
 (let (($x161 (= $x110 true)))
 (let (($x60 (= $x161 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x93)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x94 $x97)))
 (let (($x55 (and $x145 $x95)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x64 $x55)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x36)))))))
 (let (($x113 (and $x96 $x73)))
 (let (($x104 (= $x113 true)))
 (let (($x109 (= $x104 true)))
 (let (($x166 (= $x109 true)))
 (let (($x35 (and $x166 $x60)))
 (let (($x120 (and $x35 $x183)))
 (let (($x261 (and $x120 $x167)))
 (let (($x139 (and $x261 $x170)))
 (let (($x51 (and $x139 $x125)))
 (let (($x129 (and $x51 $x92)))
 (let (($x130 (and $x129 $x135)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x86 (and $x21 $x130)))
 (let (($x10 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x32 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x38 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x10)))))))
 (let (($x24 (=> (and $x239 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x10)))))))
 (let (($x23 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x50 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x49 (=> $x50 (or false (or false (and true (or $x158 $x23)))))))
 (let (($x62 (=> (and $x239 $x50) (or false (or false (and true (or $x158 $x23)))))))
 (let (($x46 (and $x62 $x24)))
 (let (($x131 (and $x46 $x86)))
 (let (($x87 (=> $x131 $x57)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x11)))
 (let (($x18 (= (_ bv0 8) ?x6)))
 (let (($x57 (= $x18 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x138 (_ bv1 32))))
 (let (($x116 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x206 (= $x116 $x30)))
 (let (($x41 (= ?x138 (_ bv0 32))))
 (let (($x163 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (= $x163 $x41)))
 (let (($x172 (and (and (and (not $x163) (not $x116)) $x20) $x206)))
 (let (($x135 (= $x172 true)))
 (let (($x237 (not $x116)))
 (let (($x180 (not $x163)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x229 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x229 (_ bv1 32))))
 (let (($x184 (= $x116 $x212)))
 (let (($x215 (= ?x229 (_ bv0 32))))
 (let (($x242 (= $x163 $x215)))
 (let (($x235 (and (and (and $x242 $x184) $x180) $x237)))
 (let (($x92 (= $x235 true)))
 (let (($x123 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x236 (= $x123 true)))
 (let (($x125 (= $x236 true)))
 (let ((?x157 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x127 (= (_ bv0 3) ?x157)))
 (let (($x71 (= $x127 true)))
 (let (($x170 (= $x71 true)))
 (let (($x155 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x167 (= $x178 true)))
 (let (($x31 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x85 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x85) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x85))))
 (let (($x182 (and true $x233)))
 (let (($x63 (and $x233 $x182)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x160))))
 (let (($x124 (= (bvand ?x118 (_ bv4294967288 32)) ?x118)))
 (let (($x165 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x112 (and $x165 $x124)))
 (let (($x144 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x117 (and (and (and (and (and $x182 $x144) $x165) $x112) $x63) $x31)))
 (let (($x128 (= true $x117)))
 (let (($x239 (not $x142)))
 (let (($x121 (=> $x239 $x128)))
 (let (($x119 (= $x121 true)))
 (let (($x122 (= $x119 true)))
 (let (($x183 (= $x122 true)))
 (let (($x110 (= $x239 true)))
 (let (($x161 (= $x110 true)))
 (let (($x60 (= $x161 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x93)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x94 $x97)))
 (let (($x55 (and $x145 $x95)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x64 $x55)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x36)))))))
 (let (($x113 (and $x96 $x73)))
 (let (($x104 (= $x113 true)))
 (let (($x109 (= $x104 true)))
 (let (($x166 (= $x109 true)))
 (let (($x35 (and $x166 $x60)))
 (let (($x120 (and $x35 $x183)))
 (let (($x261 (and $x120 $x167)))
 (let (($x139 (and $x261 $x170)))
 (let (($x51 (and $x139 $x125)))
 (let (($x129 (and $x51 $x92)))
 (let (($x130 (and $x129 $x135)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x86 (and $x21 $x130)))
 (let (($x10 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x32 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x38 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x10)))))))
 (let (($x24 (=> (and $x239 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x10)))))))
 (let (($x23 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x50 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x49 (=> $x50 (or false (or false (and true (or $x158 $x23)))))))
 (let (($x62 (=> (and $x239 $x50) (or false (or false (and true (or $x158 $x23)))))))
 (let (($x46 (and $x62 $x24)))
 (let (($x131 (and $x46 $x86)))
 (let (($x87 (=> $x131 $x57)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x11)))
 (let (($x18 (= (_ bv0 8) ?x6)))
 (let (($x57 (= $x18 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge ?x138 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x30 (= $x184 $x168)))
 (let (($x41 (= ?x138 (_ bv0 32))))
 (let (($x132 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (= $x132 $x41)))
 (let (($x26 (= false false)))
 (let (($x237 (=> $x132 $x26)))
 (let (($x172 (and (and $x237 $x20) $x30)))
 (let (($x135 (= $x172 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x242 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x242 (_ bv1 32))))
 (let (($x180 (= $x184 $x52)))
 (let (($x116 (= ?x242 (_ bv0 32))))
 (let (($x212 (= $x132 $x116)))
 (let (($x92 (and (and $x212 $x180) $x237)))
 (let (($x129 (= $x92 true)))
 (let (($x125 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x51 (= $x125 true)))
 (let (($x136 (= $x51 true)))
 (let ((?x170 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x139 (= (_ bv0 3) ?x170)))
 (let (($x14 (= $x139 true)))
 (let (($x179 (= $x14 true)))
 (let (($x167 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x167 true)))
 (let (($x126 (= $x261 true)))
 (let (($x157 (= $x126 true)))
 (let (($x152 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x105) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x105))))
 (let (($x154 (and true $x70)))
 (let (($x63 (and $x70 $x154)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x146))))
 (let (($x112 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x174 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x72 (and $x174 $x112)))
 (let (($x66 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x119 (and (and (and (and (and $x154 $x66) $x174) $x72) $x63) $x152)))
 (let (($x122 (= true $x119)))
 (let (($x239 (not $x142)))
 (let (($x183 (=> $x239 $x122)))
 (let (($x120 (= $x183 true)))
 (let (($x17 (= $x120 true)))
 (let (($x155 (= $x17 true)))
 (let (($x35 (= $x239 true)))
 (let (($x134 (= $x35 true)))
 (let (($x85 (= $x134 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x73)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x145 $x95)))
 (let (($x104 (and $x55 $x113)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x12 $x104)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x149)))))))
 (let (($x166 (and $x97 $x109)))
 (let (($x110 (= $x166 true)))
 (let (($x161 (= $x110 true)))
 (let (($x60 (= $x161 true)))
 (let (($x107 (and $x60 $x85)))
 (let (($x137 (and $x107 $x155)))
 (let (($x127 (and $x137 $x157)))
 (let (($x123 (and $x127 $x179)))
 (let (($x163 (and $x123 $x136)))
 (let (($x208 (and $x163 $x129)))
 (let (($x130 (and $x208 $x135)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x86 (and $x148 $x130)))
 (let (($x9 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd ?x50 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x21 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x9)))))))
 (let (($x48 (=> (and $x239 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x230 $x9)))))))
 (let (($x76 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x25 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x82 (=> $x25 (or false (or false (and true (or $x61 $x76)))))))
 (let (($x78 (=> (and $x239 $x25) (or false (or false (and true (or $x61 $x76)))))))
 (let (($x164 (and $x78 $x48)))
 (let (($x131 (and $x164 $x86)))
 (let (($x87 (=> $x131 $x57)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x11)))
 (let (($x18 (= (_ bv0 8) ?x6)))
 (let (($x57 (= $x18 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge ?x138 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x30 (= $x184 $x168)))
 (let (($x41 (= ?x138 (_ bv0 32))))
 (let (($x132 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (= $x132 $x41)))
 (let (($x26 (= false false)))
 (let (($x237 (=> $x132 $x26)))
 (let (($x172 (and (and $x237 $x20) $x30)))
 (let (($x135 (= $x172 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x242 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x242 (_ bv1 32))))
 (let (($x180 (= $x184 $x52)))
 (let (($x116 (= ?x242 (_ bv0 32))))
 (let (($x212 (= $x132 $x116)))
 (let (($x92 (and (and $x212 $x180) $x237)))
 (let (($x129 (= $x92 true)))
 (let (($x125 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x51 (= $x125 true)))
 (let (($x136 (= $x51 true)))
 (let ((?x170 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x139 (= (_ bv0 3) ?x170)))
 (let (($x14 (= $x139 true)))
 (let (($x179 (= $x14 true)))
 (let (($x167 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x167 true)))
 (let (($x126 (= $x261 true)))
 (let (($x157 (= $x126 true)))
 (let (($x152 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x105) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x105))))
 (let (($x154 (and true $x70)))
 (let (($x63 (and $x70 $x154)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x146))))
 (let (($x112 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x174 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x72 (and $x174 $x112)))
 (let (($x66 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x119 (and (and (and (and (and $x154 $x66) $x174) $x72) $x63) $x152)))
 (let (($x122 (= true $x119)))
 (let (($x239 (not $x142)))
 (let (($x183 (=> $x239 $x122)))
 (let (($x120 (= $x183 true)))
 (let (($x17 (= $x120 true)))
 (let (($x155 (= $x17 true)))
 (let (($x35 (= $x239 true)))
 (let (($x134 (= $x35 true)))
 (let (($x85 (= $x134 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x73)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x145 $x95)))
 (let (($x104 (and $x55 $x113)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x12 $x104)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x149)))))))
 (let (($x166 (and $x97 $x109)))
 (let (($x110 (= $x166 true)))
 (let (($x161 (= $x110 true)))
 (let (($x60 (= $x161 true)))
 (let (($x107 (and $x60 $x85)))
 (let (($x137 (and $x107 $x155)))
 (let (($x127 (and $x137 $x157)))
 (let (($x123 (and $x127 $x179)))
 (let (($x163 (and $x123 $x136)))
 (let (($x208 (and $x163 $x129)))
 (let (($x130 (and $x208 $x135)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x86 (and $x148 $x130)))
 (let (($x9 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd ?x50 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x21 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x9)))))))
 (let (($x48 (=> (and $x239 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x230 $x9)))))))
 (let (($x76 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x25 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x82 (=> $x25 (or false (or false (and true (or $x61 $x76)))))))
 (let (($x78 (=> (and $x239 $x25) (or false (or false (and true (or $x61 $x76)))))))
 (let (($x164 (and $x78 $x48)))
 (let (($x131 (and $x164 $x86)))
 (let (($x87 (=> $x131 $x57)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 #b00000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b10000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf0 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv12582872 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv12582872 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8) (_ bv0 8))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x159)))
 (let (($x99 (= (_ bv0 8) ?x7)))
 (let (($x45 (= $x99 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x168 (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (= $x180 $x135)))
 (let (($x30 (= ?x168 (_ bv0 32))))
 (let (($x215 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x172 (= $x215 $x30)))
 (let (($x11 (and (and (and (not $x180) (=> $x215 (= false false))) $x172) $x130)))
 (let (($x6 (= $x11 true)))
 (let (($x92 (= false false)))
 (let (($x129 (=> $x215 $x92)))
 (let (($x237 (not $x180)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x212 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x212 (_ bv1 32))))
 (let (($x26 (= $x180 $x235)))
 (let (($x184 (= ?x212 (_ bv0 32))))
 (let (($x52 (= $x215 $x184)))
 (let (($x41 (and (and (and $x52 $x26) $x237) $x129)))
 (let (($x20 (= $x41 true)))
 (let (($x136 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x163 (= $x136 true)))
 (let (($x211 (= $x163 true)))
 (let ((?x179 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x179)))
 (let (($x143 (= $x123 true)))
 (let (($x236 (= $x143 true)))
 (let (($x157 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x157 true)))
 (let (($x71 (= $x127 true)))
 (let (($x170 (= $x71 true)))
 (let (($x234 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106))))
 (let (($x115 (and true $x83)))
 (let (($x63 (and $x83 $x115)))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x153))))
 (let (($x72 (= (bvand ?x175 (_ bv4294967288 32)) ?x175)))
 (let (($x169 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x128 (and $x169 $x72)))
 (let (($x162 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x120 (and (and (and (and (and $x115 $x162) $x169) $x128) $x63) $x234)))
 (let (($x17 (= true $x120)))
 (let (($x239 (not $x142)))
 (let (($x155 (=> $x239 $x17)))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x167 (= $x178 true)))
 (let (($x107 (= $x239 true)))
 (let (($x233 (= $x107 true)))
 (let (($x105 (= $x233 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x109)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x55 $x113)))
 (let (($x110 (and $x104 $x166)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x65 $x110)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x94)))))))
 (let (($x60 (and $x95 $x161)))
 (let (($x35 (= $x60 true)))
 (let (($x134 (= $x35 true)))
 (let (($x85 (= $x134 true)))
 (let (($x182 (and $x85 $x105)))
 (let (($x261 (and $x182 $x167)))
 (let (($x139 (and $x261 $x170)))
 (let (($x125 (and $x139 $x236)))
 (let (($x132 (and $x125 $x211)))
 (let (($x206 (and $x132 $x20)))
 (let (($x18 (and $x206 $x6)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x57 (and $x101 $x18)))
 (let (($x24 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x228 (bvadd ?x25 (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x228)))
 (let (($x148 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x24)))))))
 (let (($x74 (=> (and $x239 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x38 $x24)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x67 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x10 (=> $x67 (or false (or false (and true (or $x49 $x62)))))))
 (let (($x28 (=> (and $x239 $x67) (or false (or false (and true (or $x49 $x62)))))))
 (let (($x88 (and $x28 $x74)))
 (let (($x87 (and $x88 $x57)))
 (let (($x54 (=> $x87 $x45)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x159)))
 (let (($x99 (= (_ bv0 8) ?x7)))
 (let (($x45 (= $x99 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x135 (bvuge ?x168 (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (= $x180 $x135)))
 (let (($x30 (= ?x168 (_ bv0 32))))
 (let (($x215 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x172 (= $x215 $x30)))
 (let (($x11 (and (and (and (not $x180) (=> $x215 (= false false))) $x172) $x130)))
 (let (($x6 (= $x11 true)))
 (let (($x92 (= false false)))
 (let (($x129 (=> $x215 $x92)))
 (let (($x237 (not $x180)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x212 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x212 (_ bv1 32))))
 (let (($x26 (= $x180 $x235)))
 (let (($x184 (= ?x212 (_ bv0 32))))
 (let (($x52 (= $x215 $x184)))
 (let (($x41 (and (and (and $x52 $x26) $x237) $x129)))
 (let (($x20 (= $x41 true)))
 (let (($x136 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x163 (= $x136 true)))
 (let (($x211 (= $x163 true)))
 (let ((?x179 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x179)))
 (let (($x143 (= $x123 true)))
 (let (($x236 (= $x143 true)))
 (let (($x157 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x157 true)))
 (let (($x71 (= $x127 true)))
 (let (($x170 (= $x71 true)))
 (let (($x234 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106))))
 (let (($x115 (and true $x83)))
 (let (($x63 (and $x83 $x115)))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x153))))
 (let (($x72 (= (bvand ?x175 (_ bv4294967288 32)) ?x175)))
 (let (($x169 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x128 (and $x169 $x72)))
 (let (($x162 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x120 (and (and (and (and (and $x115 $x162) $x169) $x128) $x63) $x234)))
 (let (($x17 (= true $x120)))
 (let (($x239 (not $x142)))
 (let (($x155 (=> $x239 $x17)))
 (let (($x137 (= $x155 true)))
 (let (($x178 (= $x137 true)))
 (let (($x167 (= $x178 true)))
 (let (($x107 (= $x239 true)))
 (let (($x233 (= $x107 true)))
 (let (($x105 (= $x233 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x109)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x55 $x113)))
 (let (($x110 (and $x104 $x166)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x65 $x110)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x94)))))))
 (let (($x60 (and $x95 $x161)))
 (let (($x35 (= $x60 true)))
 (let (($x134 (= $x35 true)))
 (let (($x85 (= $x134 true)))
 (let (($x182 (and $x85 $x105)))
 (let (($x261 (and $x182 $x167)))
 (let (($x139 (and $x261 $x170)))
 (let (($x125 (and $x139 $x236)))
 (let (($x132 (and $x125 $x211)))
 (let (($x206 (and $x132 $x20)))
 (let (($x18 (and $x206 $x6)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x57 (and $x101 $x18)))
 (let (($x24 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x228 (bvadd ?x25 (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x228)))
 (let (($x148 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x24)))))))
 (let (($x74 (=> (and $x239 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x38 $x24)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x67 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x10 (=> $x67 (or false (or false (and true (or $x49 $x62)))))))
 (let (($x28 (=> (and $x239 $x67) (or false (or false (and true (or $x49 $x62)))))))
 (let (($x88 (and $x28 $x74)))
 (let (($x87 (and $x88 $x57)))
 (let (($x54 (=> $x87 $x45)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x13 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x306)))
 (let (($x37 (= (_ bv0 8) ?x13)))
 (let (($x313 (= $x37 true)))
 (let ((?x61 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x219))))
 (let ((?x277 (bvadd ?x251 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x264))))
 (let (($x312 (= (_ bv0 32) ?x284)))
 (let ((?x285 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x285 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x189 $x53)))
 (let (($x133 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x141 (and $x26 $x133)))
 (let (($x280 (=> $x141 $x282)))
 (let (($x286 (= ?x285 (_ bv0 32))))
 (let (($x176 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x287 (= $x176 $x286)))
 (let (($x279 (=> $x141 $x287)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x253))))
 (let (($x311 (= input.spec-%var-l-1.2.1.2.0 ?x258)))
 (let (($x276 (=> $x141 $x311)))
 (let (($x227 (= (_ bv0 32) ?x251)))
 (let ((?x226 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x263 (bvuge ?x226 (_ bv1 32))))
 (let (($x249 (= $x133 $x263)))
 (let (($x248 (=> $x26 $x249)))
 (let (($x247 (= ?x226 (_ bv0 32))))
 (let (($x57 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (= $x57 $x247)))
 (let (($x225 (=> $x26 $x221)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem ?x32) (concat ?x272 (concat ?x213 ?x306)))))
 (let (($x217 (= input.spec-%var-l-1.2.0 ?x245)))
 (let (($x298 (=> $x26 $x217)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x19 (_ bv1 32))))
 (let (($x305 (= $x26 $x304)))
 (let (($x297 (= ?x19 (_ bv0 32))))
 (let (($x116 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x220 (= $x116 $x297)))
 (let (($x138 (= false false)))
 (let (($x80 (and $x26 $x57)))
 (let (($x198 (=> $x80 $x138)))
 (let (($x92 (=> $x116 $x138)))
 (let (($x290 (and (and (and (and (and (and $x92 $x198) $x220) $x305) $x298) $x225) $x248)))
 (let (($x292 (and (and (and $x290 $x276) $x279) $x280)))
 (let (($x69 (= $x292 true)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x45 (concat ?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x33 (concat ?x156 ?x45))))
 (let ((?x177 (bvadd ?x81 (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x265))))
 (let (($x201 (= (_ bv0 32) ?x267)))
 (let ((?x196 (ite $x201 (_ bv0 32) (_ bv1 32))))
 (let (($x204 (bvuge ?x196 (_ bv1 32))))
 (let (($x190 (= $x189 $x204)))
 (let (($x200 (=> $x141 $x190)))
 (let (($x241 (= ?x196 (_ bv0 32))))
 (let (($x268 (= $x176 $x241)))
 (let (($x191 (=> $x141 $x268)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x43))))
 (let (($x34 (= input.spec-%var-l-1.2.1.2.0 ?x195)))
 (let (($x262 (=> $x141 $x34)))
 (let (($x44 (= (_ bv0 32) ?x81)))
 (let ((?x47 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x47 (_ bv1 32))))
 (let (($x16 (= $x133 $x295)))
 (let (($x192 (=> $x26 $x16)))
 (let (($x140 (= ?x47 (_ bv0 32))))
 (let (($x29 (= $x57 $x140)))
 (let (($x89 (=> $x26 $x29)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x86)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x130)))
 (let (($x6 (=> $x26 $x11)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x52 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x52 (_ bv1 32))))
 (let (($x237 (= $x26 $x208)))
 (let (($x180 (= ?x52 (_ bv0 32))))
 (let (($x235 (= $x116 $x180)))
 (let (($x296 (and (and (and (and (and (and $x235 $x237) $x92) $x6) $x89) $x198) $x192)))
 (let (($x271 (and (and (and $x296 $x262) $x191) $x200)))
 (let (($x203 (= $x271 true)))
 (let (($x211 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x132 (= $x211 true)))
 (let (($x229 (= $x132 true)))
 (let ((?x236 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x125 (= (_ bv0 3) ?x236)))
 (let (($x150 (= $x125 true)))
 (let (($x51 (= $x150 true)))
 (let (($x170 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x170 true)))
 (let (($x14 (= $x139 true)))
 (let (($x179 (= $x14 true)))
 (let (($x121 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x144) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x144))))
 (let (($x31 (and true $x111)))
 (let (($x63 (and $x111 $x31)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x231))))
 (let (($x128 (= (bvand ?x124 (_ bv4294967288 32)) ?x124)))
 (let (($x118 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x122 (and $x118 $x128)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x137 (and (and (and (and (and $x31 $x117) $x118) $x122) $x63) $x121)))
 (let (($x178 (= true $x137)))
 (let (($x239 (not $x142)))
 (let (($x167 (=> $x239 $x178)))
 (let (($x261 (= $x167 true)))
 (let (($x126 (= $x261 true)))
 (let (($x157 (= $x126 true)))
 (let (($x182 (= $x239 true)))
 (let (($x70 (= $x182 true)))
 (let (($x106 (= $x70 true)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x161)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x104 $x166)))
 (let (($x35 (and $x110 $x60)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x64 $x35)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x145)))))))
 (let (($x85 (and $x113 $x134)))
 (let (($x107 (= $x85 true)))
 (let (($x233 (= $x107 true)))
 (let (($x105 (= $x233 true)))
 (let (($x154 (and $x105 $x106)))
 (let (($x127 (and $x154 $x157)))
 (let (($x123 (and $x127 $x179)))
 (let (($x136 (and $x123 $x51)))
 (let (($x215 (and $x136 $x229)))
 (let (($x270 (and $x215 $x203)))
 (let (($x293 (and $x270 $x69)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x294 (and $x96 $x293)))
 (let (($x48 (bvugt ?x67 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x67 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x101 (=> (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x48)))))))
 (let (($x98 (=> (and $x239 (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x48)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x9 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x61 (_ bv1 32))) (or false (or false (and true (or $x82 $x78)))))))
 (let (($x8 (=> (and $x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x61 (_ bv1 32)))) (or false (or false (and true (or $x82 $x78)))))))
 (let (($x228 (and $x8 $x98)))
 (let (($x303 (and $x228 $x294)))
 (let (($x314 (=> $x303 $x313)))
 (not $x314))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x13 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x306)))
 (let (($x37 (= (_ bv0 8) ?x13)))
 (let (($x313 (= $x37 true)))
 (let ((?x61 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x219))))
 (let ((?x277 (bvadd ?x251 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x264))))
 (let (($x312 (= (_ bv0 32) ?x284)))
 (let ((?x285 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x285 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x189 $x53)))
 (let (($x133 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x141 (and $x26 $x133)))
 (let (($x280 (=> $x141 $x282)))
 (let (($x286 (= ?x285 (_ bv0 32))))
 (let (($x176 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x287 (= $x176 $x286)))
 (let (($x279 (=> $x141 $x287)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x253))))
 (let (($x311 (= input.spec-%var-l-1.2.1.2.0 ?x258)))
 (let (($x276 (=> $x141 $x311)))
 (let (($x227 (= (_ bv0 32) ?x251)))
 (let ((?x226 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x263 (bvuge ?x226 (_ bv1 32))))
 (let (($x249 (= $x133 $x263)))
 (let (($x248 (=> $x26 $x249)))
 (let (($x247 (= ?x226 (_ bv0 32))))
 (let (($x57 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (= $x57 $x247)))
 (let (($x225 (=> $x26 $x221)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem ?x32) (concat ?x272 (concat ?x213 ?x306)))))
 (let (($x217 (= input.spec-%var-l-1.2.0 ?x245)))
 (let (($x298 (=> $x26 $x217)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x19 (_ bv1 32))))
 (let (($x305 (= $x26 $x304)))
 (let (($x297 (= ?x19 (_ bv0 32))))
 (let (($x116 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x220 (= $x116 $x297)))
 (let (($x138 (= false false)))
 (let (($x80 (and $x26 $x57)))
 (let (($x198 (=> $x80 $x138)))
 (let (($x92 (=> $x116 $x138)))
 (let (($x290 (and (and (and (and (and (and $x92 $x198) $x220) $x305) $x298) $x225) $x248)))
 (let (($x292 (and (and (and $x290 $x276) $x279) $x280)))
 (let (($x69 (= $x292 true)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x45 (concat ?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x33 (concat ?x156 ?x45))))
 (let ((?x177 (bvadd ?x81 (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x265))))
 (let (($x201 (= (_ bv0 32) ?x267)))
 (let ((?x196 (ite $x201 (_ bv0 32) (_ bv1 32))))
 (let (($x204 (bvuge ?x196 (_ bv1 32))))
 (let (($x190 (= $x189 $x204)))
 (let (($x200 (=> $x141 $x190)))
 (let (($x241 (= ?x196 (_ bv0 32))))
 (let (($x268 (= $x176 $x241)))
 (let (($x191 (=> $x141 $x268)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x43))))
 (let (($x34 (= input.spec-%var-l-1.2.1.2.0 ?x195)))
 (let (($x262 (=> $x141 $x34)))
 (let (($x44 (= (_ bv0 32) ?x81)))
 (let ((?x47 (ite $x44 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x47 (_ bv1 32))))
 (let (($x16 (= $x133 $x295)))
 (let (($x192 (=> $x26 $x16)))
 (let (($x140 (= ?x47 (_ bv0 32))))
 (let (($x29 (= $x57 $x140)))
 (let (($x89 (=> $x26 $x29)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x86)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x172)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x130)))
 (let (($x6 (=> $x26 $x11)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x52 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x52 (_ bv1 32))))
 (let (($x237 (= $x26 $x208)))
 (let (($x180 (= ?x52 (_ bv0 32))))
 (let (($x235 (= $x116 $x180)))
 (let (($x296 (and (and (and (and (and (and $x235 $x237) $x92) $x6) $x89) $x198) $x192)))
 (let (($x271 (and (and (and $x296 $x262) $x191) $x200)))
 (let (($x203 (= $x271 true)))
 (let (($x211 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x132 (= $x211 true)))
 (let (($x229 (= $x132 true)))
 (let ((?x236 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x125 (= (_ bv0 3) ?x236)))
 (let (($x150 (= $x125 true)))
 (let (($x51 (= $x150 true)))
 (let (($x170 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x170 true)))
 (let (($x14 (= $x139 true)))
 (let (($x179 (= $x14 true)))
 (let (($x121 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x144) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x144))))
 (let (($x31 (and true $x111)))
 (let (($x63 (and $x111 $x31)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x231))))
 (let (($x128 (= (bvand ?x124 (_ bv4294967288 32)) ?x124)))
 (let (($x118 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x122 (and $x118 $x128)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x137 (and (and (and (and (and $x31 $x117) $x118) $x122) $x63) $x121)))
 (let (($x178 (= true $x137)))
 (let (($x239 (not $x142)))
 (let (($x167 (=> $x239 $x178)))
 (let (($x261 (= $x167 true)))
 (let (($x126 (= $x261 true)))
 (let (($x157 (= $x126 true)))
 (let (($x182 (= $x239 true)))
 (let (($x70 (= $x182 true)))
 (let (($x106 (= $x70 true)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x161)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x104 $x166)))
 (let (($x35 (and $x110 $x60)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x64 $x35)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x145)))))))
 (let (($x85 (and $x113 $x134)))
 (let (($x107 (= $x85 true)))
 (let (($x233 (= $x107 true)))
 (let (($x105 (= $x233 true)))
 (let (($x154 (and $x105 $x106)))
 (let (($x127 (and $x154 $x157)))
 (let (($x123 (and $x127 $x179)))
 (let (($x136 (and $x123 $x51)))
 (let (($x215 (and $x136 $x229)))
 (let (($x270 (and $x215 $x203)))
 (let (($x293 (and $x270 $x69)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x294 (and $x96 $x293)))
 (let (($x48 (bvugt ?x67 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x67 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x101 (=> (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x48)))))))
 (let (($x98 (=> (and $x239 (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x48)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x9 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x61 (_ bv1 32))) (or false (or false (and true (or $x82 $x78)))))))
 (let (($x8 (=> (and $x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x61 (_ bv1 32)))) (or false (or false (and true (or $x82 $x78)))))))
 (let (($x228 (and $x8 $x98)))
 (let (($x303 (and $x228 $x294)))
 (let (($x314 (=> $x303 $x313)))
 (not $x314))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 #b00000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000010000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv402653208 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv402653208 32) (_ bv128 8)) (_ bv402653186 32) (_ bv128 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8) (_ bv0 8))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv402653186 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483667 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffc008)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xb070bffb)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x30303030)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xb070bff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x30)
                                #xb070c000
                                #xbf)
                         #xb070bfff
                         #xf3)
                  #xb070bff7
                  #xb0)))
  (store (store (store a!1 #xb070bfff #xf3) #xb070c002 #xb0) #xb070c001 #x70)))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x30303030)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffc008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffc00b)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x319 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x306)))
 (let (($x320 (= (_ bv0 8) ?x319)))
 (let (($x79 (= $x320 true)))
 (let ((?x49 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x219))))
 (let ((?x301 (bvadd ?x221 (_ bv4 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x260))))
 (let (($x285 (= (_ bv0 32) ?x312)))
 (let ((?x286 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x286 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x201 $x53)))
 (let (($x80 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x295 (and $x237 $x80)))
 (let (($x280 (=> $x295 $x282)))
 (let (($x287 (= ?x286 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x195 $x287)))
 (let (($x302 (=> $x295 $x279)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x255))))
 (let (($x291 (= input.spec-%var-l-1.2.1.2.0 ?x276)))
 (let (($x277 (=> $x295 $x291)))
 (let (($x225 (= (_ bv0 32) ?x221)))
 (let ((?x289 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x289 (_ bv1 32))))
 (let (($x273 (= $x80 $x290)))
 (let (($x274 (=> $x237 $x273)))
 (let (($x263 (= ?x289 (_ bv0 32))))
 (let (($x18 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x249 (= $x18 $x263)))
 (let (($x248 (=> $x237 $x249)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x50 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x309 (concat (select input.dst.llvm-mem ?x50) (concat ?x298 (concat ?x243 ?x306)))))
 (let (($x252 (= input.spec-%var-l-1.2.0 ?x309)))
 (let (($x58 (=> $x237 $x252)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x308 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (bvuge ?x308 (_ bv1 32))))
 (let (($x213 (= $x237 $x244)))
 (let (($x307 (= ?x308 (_ bv0 32))))
 (let (($x184 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x272 (= $x184 $x307)))
 (let (($x189 (and $x295 $x201)))
 (let (($x204 (not $x189)))
 (let (($x191 (and $x295 $x195)))
 (let (($x202 (not $x191)))
 (let (($x92 (= false false)))
 (let (($x89 (and $x237 $x18)))
 (let (($x42 (=> $x89 $x92)))
 (let (($x188 (=> $x184 $x92)))
 (let (($x13 (and (and (and (and (and (and $x188 $x42) $x202) $x204) $x272) $x213) $x58)))
 (let (($x84 (and (and (and (and (and $x13 $x248) $x274) $x277) $x302) $x280)))
 (let (($x93 (= $x84 true)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x54 (concat ?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x22 (concat ?x45 (concat ?x7 ?x54))))
 (let ((?x34 (bvadd ?x22 (_ bv4 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x176))))
 (let (($x90 (= (_ bv0 32) ?x187)))
 (let ((?x207 (ite $x90 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x207 (_ bv1 32))))
 (let (($x241 (= $x201 $x196)))
 (let (($x268 (=> $x295 $x241)))
 (let (($x265 (= ?x207 (_ bv0 32))))
 (let (($x193 (= $x195 $x265)))
 (let (($x267 (=> $x295 $x193)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x5))))
 (let (($x209 (= input.spec-%var-l-1.2.1.2.0 ?x185)))
 (let (($x43 (=> $x295 $x209)))
 (let (($x81 (= (_ bv0 32) ?x22)))
 (let ((?x44 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x44 (_ bv1 32))))
 (let (($x205 (= $x80 $x198)))
 (let (($x133 (=> $x237 $x205)))
 (let (($x47 (= ?x44 (_ bv0 32))))
 (let (($x140 (= $x18 $x47)))
 (let (($x29 (=> $x237 $x140)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x30)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x41)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x130)))
 (let (($x6 (=> $x237 $x11)))
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x235 (ite $x180 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x235 (_ bv1 32))))
 (let (($x138 (= $x237 $x210)))
 (let (($x26 (= ?x235 (_ bv0 32))))
 (let (($x208 (= $x184 $x26)))
 (let (($x281 (and (and (and (and (and (and $x208 $x138) $x188) $x6) $x29) $x42) $x133)))
 (let (($x304 (and (and (and (and (and $x281 $x43) $x267) $x268) $x202) $x204)))
 (let (($x305 (= $x304 true)))
 (let (($x229 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x215 (= $x229 true)))
 (let (($x242 (= $x215 true)))
 (let ((?x51 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x136 (= (_ bv0 3) ?x51)))
 (let (($x23 (= $x136 true)))
 (let (($x163 (= $x23 true)))
 (let (($x179 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x123 (= $x179 true)))
 (let (($x143 (= $x123 true)))
 (let (($x236 (= $x143 true)))
 (let (($x183 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x66 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66))))
 (let (($x152 (and true $x165)))
 (let (($x63 (and $x165 $x152)))
 (let ((?x230 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x232))))
 (let (($x122 (= (bvand ?x112 (_ bv4294967288 32)) ?x112)))
 (let (($x114 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x17 (and $x114 $x122)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv4 32))) (bvult ?x230 (bvsub ?x230 (_ bv4 32))))))
 (let (($x261 (and (and (and (and (and $x152 $x119) $x114) $x17) $x63) $x183)))
 (let (($x126 (= true $x261)))
 (let (($x239 (not $x142)))
 (let (($x157 (=> $x239 $x126)))
 (let (($x127 (= $x157 true)))
 (let (($x71 (= $x127 true)))
 (let (($x170 (= $x71 true)))
 (let (($x154 (= $x239 true)))
 (let (($x83 (= $x154 true)))
 (let (($x144 (= $x83 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x134)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x110 $x60)))
 (let (($x107 (and $x35 $x85)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x12 $x107)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x55)))))))
 (let (($x105 (and $x166 $x233)))
 (let (($x182 (= $x105 true)))
 (let (($x70 (= $x182 true)))
 (let (($x106 (= $x70 true)))
 (let (($x115 (and $x106 $x144)))
 (let (($x139 (and $x115 $x170)))
 (let (($x125 (and $x139 $x236)))
 (let (($x211 (and $x125 $x163)))
 (let (($x116 (and $x211 $x242)))
 (let (($x283 (and $x116 $x305)))
 (let (($x316 (and $x283 $x93)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x317 (and $x97 $x316)))
 (let (($x74 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x230 (_ bv3 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x96 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x74)))))))
 (let (($x36 (=> (and $x239 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x148 $x74)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x24 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x49 (_ bv1 32))) (or false (or false (and true (or $x10 $x28)))))))
 (let (($x56 (=> (and $x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x49 (_ bv1 32)))) (or false (or false (and true (or $x10 $x28)))))))
 (let (($x46 (and $x56 $x36)))
 (let (($x318 (and $x46 $x317)))
 (let (($x27 (=> $x318 $x79)))
 (not $x27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x319 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x306)))
 (let (($x320 (= (_ bv0 8) ?x319)))
 (let (($x79 (= $x320 true)))
 (let ((?x49 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x219))))
 (let ((?x301 (bvadd ?x221 (_ bv4 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x260))))
 (let (($x285 (= (_ bv0 32) ?x312)))
 (let ((?x286 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x286 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x201 $x53)))
 (let (($x80 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x295 (and $x237 $x80)))
 (let (($x280 (=> $x295 $x282)))
 (let (($x287 (= ?x286 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x195 $x287)))
 (let (($x302 (=> $x295 $x279)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x255))))
 (let (($x291 (= input.spec-%var-l-1.2.1.2.0 ?x276)))
 (let (($x277 (=> $x295 $x291)))
 (let (($x225 (= (_ bv0 32) ?x221)))
 (let ((?x289 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x289 (_ bv1 32))))
 (let (($x273 (= $x80 $x290)))
 (let (($x274 (=> $x237 $x273)))
 (let (($x263 (= ?x289 (_ bv0 32))))
 (let (($x18 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x249 (= $x18 $x263)))
 (let (($x248 (=> $x237 $x249)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x50 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x309 (concat (select input.dst.llvm-mem ?x50) (concat ?x298 (concat ?x243 ?x306)))))
 (let (($x252 (= input.spec-%var-l-1.2.0 ?x309)))
 (let (($x58 (=> $x237 $x252)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x308 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (bvuge ?x308 (_ bv1 32))))
 (let (($x213 (= $x237 $x244)))
 (let (($x307 (= ?x308 (_ bv0 32))))
 (let (($x184 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x272 (= $x184 $x307)))
 (let (($x189 (and $x295 $x201)))
 (let (($x204 (not $x189)))
 (let (($x191 (and $x295 $x195)))
 (let (($x202 (not $x191)))
 (let (($x92 (= false false)))
 (let (($x89 (and $x237 $x18)))
 (let (($x42 (=> $x89 $x92)))
 (let (($x188 (=> $x184 $x92)))
 (let (($x13 (and (and (and (and (and (and $x188 $x42) $x202) $x204) $x272) $x213) $x58)))
 (let (($x84 (and (and (and (and (and $x13 $x248) $x274) $x277) $x302) $x280)))
 (let (($x93 (= $x84 true)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x54 (concat ?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x22 (concat ?x45 (concat ?x7 ?x54))))
 (let ((?x34 (bvadd ?x22 (_ bv4 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x176))))
 (let (($x90 (= (_ bv0 32) ?x187)))
 (let ((?x207 (ite $x90 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x207 (_ bv1 32))))
 (let (($x241 (= $x201 $x196)))
 (let (($x268 (=> $x295 $x241)))
 (let (($x265 (= ?x207 (_ bv0 32))))
 (let (($x193 (= $x195 $x265)))
 (let (($x267 (=> $x295 $x193)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x5))))
 (let (($x209 (= input.spec-%var-l-1.2.1.2.0 ?x185)))
 (let (($x43 (=> $x295 $x209)))
 (let (($x81 (= (_ bv0 32) ?x22)))
 (let ((?x44 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x44 (_ bv1 32))))
 (let (($x205 (= $x80 $x198)))
 (let (($x133 (=> $x237 $x205)))
 (let (($x47 (= ?x44 (_ bv0 32))))
 (let (($x140 (= $x18 $x47)))
 (let (($x29 (=> $x237 $x140)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x30)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x41)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x130)))
 (let (($x6 (=> $x237 $x11)))
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x235 (ite $x180 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x235 (_ bv1 32))))
 (let (($x138 (= $x237 $x210)))
 (let (($x26 (= ?x235 (_ bv0 32))))
 (let (($x208 (= $x184 $x26)))
 (let (($x281 (and (and (and (and (and (and $x208 $x138) $x188) $x6) $x29) $x42) $x133)))
 (let (($x304 (and (and (and (and (and $x281 $x43) $x267) $x268) $x202) $x204)))
 (let (($x305 (= $x304 true)))
 (let (($x229 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x215 (= $x229 true)))
 (let (($x242 (= $x215 true)))
 (let ((?x51 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x136 (= (_ bv0 3) ?x51)))
 (let (($x23 (= $x136 true)))
 (let (($x163 (= $x23 true)))
 (let (($x179 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x123 (= $x179 true)))
 (let (($x143 (= $x123 true)))
 (let (($x236 (= $x143 true)))
 (let (($x183 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x66 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66))))
 (let (($x152 (and true $x165)))
 (let (($x63 (and $x165 $x152)))
 (let ((?x230 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x232))))
 (let (($x122 (= (bvand ?x112 (_ bv4294967288 32)) ?x112)))
 (let (($x114 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x17 (and $x114 $x122)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv4 32))) (bvult ?x230 (bvsub ?x230 (_ bv4 32))))))
 (let (($x261 (and (and (and (and (and $x152 $x119) $x114) $x17) $x63) $x183)))
 (let (($x126 (= true $x261)))
 (let (($x239 (not $x142)))
 (let (($x157 (=> $x239 $x126)))
 (let (($x127 (= $x157 true)))
 (let (($x71 (= $x127 true)))
 (let (($x170 (= $x71 true)))
 (let (($x154 (= $x239 true)))
 (let (($x83 (= $x154 true)))
 (let (($x144 (= $x83 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x134)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x110 $x60)))
 (let (($x107 (and $x35 $x85)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x12 $x107)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x55)))))))
 (let (($x105 (and $x166 $x233)))
 (let (($x182 (= $x105 true)))
 (let (($x70 (= $x182 true)))
 (let (($x106 (= $x70 true)))
 (let (($x115 (and $x106 $x144)))
 (let (($x139 (and $x115 $x170)))
 (let (($x125 (and $x139 $x236)))
 (let (($x211 (and $x125 $x163)))
 (let (($x116 (and $x211 $x242)))
 (let (($x283 (and $x116 $x305)))
 (let (($x316 (and $x283 $x93)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x317 (and $x97 $x316)))
 (let (($x74 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x230 (_ bv3 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x96 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x74)))))))
 (let (($x36 (=> (and $x239 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x148 $x74)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x24 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x49 (_ bv1 32))) (or false (or false (and true (or $x10 $x28)))))))
 (let (($x56 (=> (and $x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x49 (_ bv1 32)))) (or false (or false (and true (or $x10 $x28)))))))
 (let (($x46 (and $x56 $x36)))
 (let (($x318 (and $x46 $x317)))
 (let (($x27 (=> $x318 $x79)))
 (not $x27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 #b00000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000010000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv520200 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv520200 32) (_ bv128 8)) (_ bv516098 32) (_ bv128 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8) (_ bv0 8))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv516098 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483667 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x57bb18d4)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x07800009)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00b40000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x07800000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x0780000c
                                #xb4)
                         #x07800009
                         #xb4)
                  #x00000004
                  #x80)))
(let ((a!2 (store (store (store (store a!1 #x07800003 #xb4) #x00000002 #xb4)
                         #x07800000
                         #xb4)
                  #x00000002
                  #xb4)))
  (store a!2 #x00000004 #x80))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xb40000b4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x57bb18d4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x57bb18d7)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x156 (concat (select input.dst.llvm-mem ?x28) (concat ?x57 (concat ?x271 ?x11)))))
 (let ((?x7 ((_ extract 1 0) ?x156)))
 (let ((?x103 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x7)))
 (let (($x33 (= (_ bv0 2) ?x103)))
 (let (($x87 (= $x33 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x86 (_ bv1 32))))
 (let (($x138 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x135 (= $x138 $x206)))
 (let (($x172 (= ?x86 (_ bv0 32))))
 (let (($x180 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (= $x180 $x172)))
 (let (($x168 (and $x20 $x135)))
 (let (($x131 (= $x168 true)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x208 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x208 (_ bv1 32))))
 (let (($x92 (= $x138 $x190)))
 (let (($x237 (= ?x208 (_ bv0 32))))
 (let (($x210 (= $x180 $x237)))
 (let (($x188 (and $x210 $x92)))
 (let (($x200 (= $x188 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= (_ bv0 3) ?x215)))
 (let (($x116 (= $x242 true)))
 (let (($x212 (= $x116 true)))
 (let (($x163 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x211 (= $x163 true)))
 (let (($x76 (= $x211 true)))
 (let (($x143 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x236 (= $x143 true)))
 (let (($x125 (= $x236 true)))
 (let (($x150 (= $x125 true)))
 (let (($x167 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x31 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x31) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x31))))
 (let (($x174 (and true $x117)))
 (let (($x178 (and $x117 $x174)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x231))))
 (let (($x122 (= (bvand ?x112 (_ bv4294967288 32)) ?x112)))
 (let (($x137 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x17 (and $x137 $x122)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x157 (and (and (and (and (and $x174 $x118) $x137) $x17) $x178) $x167)))
 (let (($x127 (= true $x157)))
 (let (($x75 (not $x158)))
 (let (($x71 (=> $x75 $x127)))
 (let (($x170 (= $x71 true)))
 (let (($x139 (= $x170 true)))
 (let (($x14 (= $x139 true)))
 (let (($x144 (= $x75 true)))
 (let (($x115 (= $x144 true)))
 (let (($x111 (= $x115 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x107)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x60 $x134)))
 (let (($x105 (and $x85 $x233)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x59 $x105)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x64)))))))
 (let (($x70 (and $x161 $x182)))
 (let (($x106 (= $x70 true)))
 (let (($x154 (= $x106 true)))
 (let (($x83 (= $x154 true)))
 (let (($x66 (and $x83 $x111)))
 (let (($x179 (and $x66 $x14)))
 (let (($x51 (and $x179 $x150)))
 (let (($x132 (and $x51 $x76)))
 (let (($x184 (and $x132 $x212)))
 (let (($x129 (and $x184 $x200)))
 (let (($x30 (and $x129 $x131)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x41 (and $x145 $x30)))
 (let (($x101 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd ?x32 (_ bv3 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x94 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x101)))))))
 (let (($x48 (=> (and $x75 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x101)))))))
 (let (($x9 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x230 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x21 (=> $x230 (or false (or false (and true (or $x25 $x9)))))))
 (let (($x62 (=> (and $x75 $x230) (or false (or false (and true (or $x25 $x9)))))))
 (let (($x149 (and $x62 $x48)))
 (let (($x130 (and $x149 $x41)))
 (let (($x54 (=> $x130 $x87)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x156 (concat (select input.dst.llvm-mem ?x28) (concat ?x57 (concat ?x271 ?x11)))))
 (let ((?x7 ((_ extract 1 0) ?x156)))
 (let ((?x103 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x7)))
 (let (($x33 (= (_ bv0 2) ?x103)))
 (let (($x87 (= $x33 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x86 (_ bv1 32))))
 (let (($x138 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x135 (= $x138 $x206)))
 (let (($x172 (= ?x86 (_ bv0 32))))
 (let (($x180 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (= $x180 $x172)))
 (let (($x168 (and $x20 $x135)))
 (let (($x131 (= $x168 true)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x208 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x208 (_ bv1 32))))
 (let (($x92 (= $x138 $x190)))
 (let (($x237 (= ?x208 (_ bv0 32))))
 (let (($x210 (= $x180 $x237)))
 (let (($x188 (and $x210 $x92)))
 (let (($x200 (= $x188 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= (_ bv0 3) ?x215)))
 (let (($x116 (= $x242 true)))
 (let (($x212 (= $x116 true)))
 (let (($x163 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x211 (= $x163 true)))
 (let (($x76 (= $x211 true)))
 (let (($x143 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x236 (= $x143 true)))
 (let (($x125 (= $x236 true)))
 (let (($x150 (= $x125 true)))
 (let (($x167 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x31 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x31) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x31))))
 (let (($x174 (and true $x117)))
 (let (($x178 (and $x117 $x174)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x231))))
 (let (($x122 (= (bvand ?x112 (_ bv4294967288 32)) ?x112)))
 (let (($x137 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x17 (and $x137 $x122)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x157 (and (and (and (and (and $x174 $x118) $x137) $x17) $x178) $x167)))
 (let (($x127 (= true $x157)))
 (let (($x75 (not $x158)))
 (let (($x71 (=> $x75 $x127)))
 (let (($x170 (= $x71 true)))
 (let (($x139 (= $x170 true)))
 (let (($x14 (= $x139 true)))
 (let (($x144 (= $x75 true)))
 (let (($x115 (= $x144 true)))
 (let (($x111 (= $x115 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x107)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x60 $x134)))
 (let (($x105 (and $x85 $x233)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x59 $x105)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x64)))))))
 (let (($x70 (and $x161 $x182)))
 (let (($x106 (= $x70 true)))
 (let (($x154 (= $x106 true)))
 (let (($x83 (= $x154 true)))
 (let (($x66 (and $x83 $x111)))
 (let (($x179 (and $x66 $x14)))
 (let (($x51 (and $x179 $x150)))
 (let (($x132 (and $x51 $x76)))
 (let (($x184 (and $x132 $x212)))
 (let (($x129 (and $x184 $x200)))
 (let (($x30 (and $x129 $x131)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x41 (and $x145 $x30)))
 (let (($x101 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd ?x32 (_ bv3 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x94 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x101)))))))
 (let (($x48 (=> (and $x75 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x101)))))))
 (let (($x9 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x230 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x21 (=> $x230 (or false (or false (and true (or $x25 $x9)))))))
 (let (($x62 (=> (and $x75 $x230) (or false (or false (and true (or $x25 $x9)))))))
 (let (($x149 (and $x62 $x48)))
 (let (($x130 (and $x149 $x41)))
 (let (($x54 (=> $x130 $x87)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 #b00)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00000010))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3f693884)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x2e153880)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x2e153880 #x03))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2)
    #b00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3f693884)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3f693887)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8388600 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8388600 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2) (_ bv0 2))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x8) (concat ?x99 (concat ?x33 ?x7)))))
 (let ((?x22 ((_ extract 1 0) ?x49)))
 (let ((?x81 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x22)))
 (let (($x44 (= (_ bv0 2) ?x81)))
 (let (($x47 (= $x44 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x30 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x188 $x45)))
 (let (($x41 (= ?x30 (_ bv0 32))))
 (let (($x208 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x130 (= $x208 $x41)))
 (let (($x271 (and (and (and (not $x208) (not $x188)) $x130) $x18)))
 (let (($x11 (= $x271 true)))
 (let (($x172 (not $x188)))
 (let (($x86 (not $x208)))
 (let (($x210 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x138 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x138 (_ bv1 32))))
 (let (($x129 (= $x188 $x200)))
 (let (($x190 (= ?x138 (_ bv0 32))))
 (let (($x92 (= $x208 $x190)))
 (let (($x135 (and (and (and $x92 $x129) $x86) $x172)))
 (let (($x168 (= $x135 true)))
 (let ((?x212 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x184 (= (_ bv0 3) ?x212)))
 (let (($x52 (= $x184 true)))
 (let (($x180 (= $x52 true)))
 (let (($x132 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x229 (= $x132 true)))
 (let (($x215 (= $x229 true)))
 (let (($x150 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x150 true)))
 (let (($x136 (= $x51 true)))
 (let (($x23 (= $x136 true)))
 (let (($x63 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152))))
 (let (($x119 (and true $x234)))
 (let (($x178 (and $x234 $x119)))
 (let ((?x230 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x146))))
 (let (($x17 (= (bvand ?x72 (_ bv4294967288 32)) ?x72)))
 (let (($x175 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x261 (and $x175 $x17)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv4 32))) (bvult ?x230 (bvsub ?x230 (_ bv4 32))))))
 (let (($x170 (and (and (and (and (and $x119 $x114) $x175) $x261) $x178) $x63)))
 (let (($x139 (= true $x170)))
 (let (($x75 (not $x158)))
 (let (($x14 (=> $x75 $x139)))
 (let (($x179 (= $x14 true)))
 (let (($x123 (= $x179 true)))
 (let (($x143 (= $x123 true)))
 (let (($x66 (= $x75 true)))
 (let (($x162 (= $x66 true)))
 (let (($x31 (= $x162 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x182)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x85 $x233)))
 (let (($x106 (and $x105 $x70)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x100 $x106)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x12)))))))
 (let (($x83 (and $x134 $x154)))
 (let (($x144 (= $x83 true)))
 (let (($x115 (= $x144 true)))
 (let (($x111 (= $x115 true)))
 (let (($x165 (and $x111 $x31)))
 (let (($x236 (and $x165 $x143)))
 (let (($x163 (and $x236 $x23)))
 (let (($x242 (and $x163 $x215)))
 (let (($x235 (and $x242 $x180)))
 (let (($x131 (and $x235 $x168)))
 (let (($x197 (and $x131 $x11)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x159 (and $x55 $x197)))
 (let (($x96 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x230 (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x145 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x96)))))))
 (let (($x46 (=> (and $x75 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x228 $x96)))))))
 (let (($x24 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x164 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x148 (=> $x164 (or false (or false (and true (or $x67 $x24)))))))
 (let (($x78 (=> (and $x75 $x164) (or false (or false (and true (or $x67 $x24)))))))
 (let (($x74 (and $x78 $x46)))
 (let (($x156 (and $x74 $x159)))
 (let (($x140 (=> $x156 $x47)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x8) (concat ?x99 (concat ?x33 ?x7)))))
 (let ((?x22 ((_ extract 1 0) ?x49)))
 (let ((?x81 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x22)))
 (let (($x44 (= (_ bv0 2) ?x81)))
 (let (($x47 (= $x44 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x30 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x188 $x45)))
 (let (($x41 (= ?x30 (_ bv0 32))))
 (let (($x208 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x130 (= $x208 $x41)))
 (let (($x271 (and (and (and (not $x208) (not $x188)) $x130) $x18)))
 (let (($x11 (= $x271 true)))
 (let (($x172 (not $x188)))
 (let (($x86 (not $x208)))
 (let (($x210 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x138 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x138 (_ bv1 32))))
 (let (($x129 (= $x188 $x200)))
 (let (($x190 (= ?x138 (_ bv0 32))))
 (let (($x92 (= $x208 $x190)))
 (let (($x135 (and (and (and $x92 $x129) $x86) $x172)))
 (let (($x168 (= $x135 true)))
 (let ((?x212 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x184 (= (_ bv0 3) ?x212)))
 (let (($x52 (= $x184 true)))
 (let (($x180 (= $x52 true)))
 (let (($x132 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x229 (= $x132 true)))
 (let (($x215 (= $x229 true)))
 (let (($x150 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x150 true)))
 (let (($x136 (= $x51 true)))
 (let (($x23 (= $x136 true)))
 (let (($x63 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152))))
 (let (($x119 (and true $x234)))
 (let (($x178 (and $x234 $x119)))
 (let ((?x230 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x146))))
 (let (($x17 (= (bvand ?x72 (_ bv4294967288 32)) ?x72)))
 (let (($x175 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x261 (and $x175 $x17)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv4 32))) (bvult ?x230 (bvsub ?x230 (_ bv4 32))))))
 (let (($x170 (and (and (and (and (and $x119 $x114) $x175) $x261) $x178) $x63)))
 (let (($x139 (= true $x170)))
 (let (($x75 (not $x158)))
 (let (($x14 (=> $x75 $x139)))
 (let (($x179 (= $x14 true)))
 (let (($x123 (= $x179 true)))
 (let (($x143 (= $x123 true)))
 (let (($x66 (= $x75 true)))
 (let (($x162 (= $x66 true)))
 (let (($x31 (= $x162 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x182)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x85 $x233)))
 (let (($x106 (and $x105 $x70)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x100 $x106)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x12)))))))
 (let (($x83 (and $x134 $x154)))
 (let (($x144 (= $x83 true)))
 (let (($x115 (= $x144 true)))
 (let (($x111 (= $x115 true)))
 (let (($x165 (and $x111 $x31)))
 (let (($x236 (and $x165 $x143)))
 (let (($x163 (and $x236 $x23)))
 (let (($x242 (and $x163 $x215)))
 (let (($x235 (and $x242 $x180)))
 (let (($x131 (and $x235 $x168)))
 (let (($x197 (and $x131 $x11)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x159 (and $x55 $x197)))
 (let (($x96 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x230 (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x145 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x96)))))))
 (let (($x46 (=> (and $x75 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x228 $x96)))))))
 (let (($x24 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x164 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x148 (=> $x164 (or false (or false (and true (or $x67 $x24)))))))
 (let (($x78 (=> (and $x75 $x164) (or false (or false (and true (or $x67 $x24)))))))
 (let (($x74 (and $x78 $x46)))
 (let (($x156 (and $x74 $x159)))
 (let (($x140 (=> $x156 $x47)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x22 (concat (select input.dst.llvm-mem ?x56) (concat ?x87 (concat ?x103 ?x54)))))
 (let ((?x81 ((_ extract 1 0) ?x22)))
 (let ((?x44 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x81)))
 (let (($x47 (= (_ bv0 2) ?x44)))
 (let (($x140 (= $x47 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x41 (_ bv1 32))))
 (let (($x20 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x20 $x45)))
 (let (($x130 (= ?x41 (_ bv0 32))))
 (let (($x138 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x6 (= $x138 $x130)))
 (let (($x172 (= false false)))
 (let (($x135 (=> $x138 $x172)))
 (let (($x11 (and (and $x135 $x6) $x18)))
 (let (($x197 (= $x11 true)))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x188 (_ bv1 32))))
 (let (($x206 (= $x20 $x86)))
 (let (($x200 (= ?x188 (_ bv0 32))))
 (let (($x129 (= $x138 $x200)))
 (let (($x131 (and (and $x129 $x206) $x135)))
 (let (($x57 (= $x131 true)))
 (let ((?x180 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= (_ bv0 3) ?x180)))
 (let (($x26 (= $x235 true)))
 (let (($x208 (= $x26 true)))
 (let (($x242 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x116 (= $x242 true)))
 (let (($x212 (= $x116 true)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x163 (= $x23 true)))
 (let (($x211 (= $x163 true)))
 (let (($x76 (= $x211 true)))
 (let (($x126 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x121 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x155 (and true $x121)))
 (let (($x178 (and $x121 $x155)))
 (let ((?x164 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x153))))
 (let (($x261 (= (bvand ?x128 (_ bv4294967288 32)) ?x128)))
 (let (($x108 (= (bvand ?x164 (_ bv4294967292 32)) ?x164)))
 (let (($x127 (and $x108 $x261)))
 (let (($x183 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x164 (bvsub ?x164 (_ bv4 32))) (bvult ?x164 (bvsub ?x164 (_ bv4 32))))))
 (let (($x179 (and (and (and (and (and $x155 $x183) $x108) $x127) $x178) $x126)))
 (let (($x123 (= true $x179)))
 (let (($x75 (not $x158)))
 (let (($x143 (=> $x75 $x123)))
 (let (($x236 (= $x143 true)))
 (let (($x125 (= $x236 true)))
 (let (($x150 (= $x125 true)))
 (let (($x165 (= $x75 true)))
 (let (($x117 (= $x165 true)))
 (let (($x152 (= $x117 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x154)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x105 $x70)))
 (let (($x144 (and $x106 $x83)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x102 $x144)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x111 (and $x233 $x115)))
 (let (($x66 (= $x111 true)))
 (let (($x162 (= $x66 true)))
 (let (($x31 (= $x162 true)))
 (let (($x174 (and $x31 $x152)))
 (let (($x51 (and $x174 $x150)))
 (let (($x132 (and $x51 $x76)))
 (let (($x184 (and $x132 $x212)))
 (let (($x237 (and $x184 $x208)))
 (let (($x30 (and $x237 $x57)))
 (let (($x159 (and $x30 $x197)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x156 (and $x104 $x159)))
 (let (($x48 (bvugt ?x164 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd ?x164 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x55 (=> (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x48)))))))
 (let (($x97 (=> (and $x75 (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x94 $x48)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x101 (=> $x88 (or false (or false (and true (or $x21 $x62)))))))
 (let (($x28 (=> (and $x75 $x88) (or false (or false (and true (or $x21 $x62)))))))
 (let (($x98 (and $x28 $x97)))
 (let (($x95 (and $x98 $x156)))
 (let (($x29 (=> $x95 $x140)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x22 (concat (select input.dst.llvm-mem ?x56) (concat ?x87 (concat ?x103 ?x54)))))
 (let ((?x81 ((_ extract 1 0) ?x22)))
 (let ((?x44 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x81)))
 (let (($x47 (= (_ bv0 2) ?x44)))
 (let (($x140 (= $x47 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x41 (_ bv1 32))))
 (let (($x20 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x20 $x45)))
 (let (($x130 (= ?x41 (_ bv0 32))))
 (let (($x138 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x6 (= $x138 $x130)))
 (let (($x172 (= false false)))
 (let (($x135 (=> $x138 $x172)))
 (let (($x11 (and (and $x135 $x6) $x18)))
 (let (($x197 (= $x11 true)))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x188 (_ bv1 32))))
 (let (($x206 (= $x20 $x86)))
 (let (($x200 (= ?x188 (_ bv0 32))))
 (let (($x129 (= $x138 $x200)))
 (let (($x131 (and (and $x129 $x206) $x135)))
 (let (($x57 (= $x131 true)))
 (let ((?x180 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= (_ bv0 3) ?x180)))
 (let (($x26 (= $x235 true)))
 (let (($x208 (= $x26 true)))
 (let (($x242 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x116 (= $x242 true)))
 (let (($x212 (= $x116 true)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x163 (= $x23 true)))
 (let (($x211 (= $x163 true)))
 (let (($x76 (= $x211 true)))
 (let (($x126 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x121 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x155 (and true $x121)))
 (let (($x178 (and $x121 $x155)))
 (let ((?x164 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x153))))
 (let (($x261 (= (bvand ?x128 (_ bv4294967288 32)) ?x128)))
 (let (($x108 (= (bvand ?x164 (_ bv4294967292 32)) ?x164)))
 (let (($x127 (and $x108 $x261)))
 (let (($x183 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x164 (bvsub ?x164 (_ bv4 32))) (bvult ?x164 (bvsub ?x164 (_ bv4 32))))))
 (let (($x179 (and (and (and (and (and $x155 $x183) $x108) $x127) $x178) $x126)))
 (let (($x123 (= true $x179)))
 (let (($x75 (not $x158)))
 (let (($x143 (=> $x75 $x123)))
 (let (($x236 (= $x143 true)))
 (let (($x125 (= $x236 true)))
 (let (($x150 (= $x125 true)))
 (let (($x165 (= $x75 true)))
 (let (($x117 (= $x165 true)))
 (let (($x152 (= $x117 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x154)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x105 $x70)))
 (let (($x144 (and $x106 $x83)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x102 $x144)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x111 (and $x233 $x115)))
 (let (($x66 (= $x111 true)))
 (let (($x162 (= $x66 true)))
 (let (($x31 (= $x162 true)))
 (let (($x174 (and $x31 $x152)))
 (let (($x51 (and $x174 $x150)))
 (let (($x132 (and $x51 $x76)))
 (let (($x184 (and $x132 $x212)))
 (let (($x237 (and $x184 $x208)))
 (let (($x30 (and $x237 $x57)))
 (let (($x159 (and $x30 $x197)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x156 (and $x104 $x159)))
 (let (($x48 (bvugt ?x164 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd ?x164 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x55 (=> (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x48)))))))
 (let (($x97 (=> (and $x75 (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x94 $x48)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x101 (=> $x88 (or false (or false (and true (or $x21 $x62)))))))
 (let (($x28 (=> (and $x75 $x88) (or false (or false (and true (or $x21 $x62)))))))
 (let (($x98 (and $x28 $x97)))
 (let (($x95 (and $x98 $x156)))
 (let (($x29 (=> $x95 $x140)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 #b00)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00000010))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8388600 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8388600 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2) (_ bv0 2))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3f693884)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x2e153880)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x2e153880 #x03))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2)
    #b00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3f693884)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3f693887)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x142 (concat (select input.dst.llvm-mem ?x32) (concat ?x47 (concat ?x22 ?x33)))))
 (let ((?x38 ((_ extract 1 0) ?x142)))
 (let ((?x35 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x38)))
 (let (($x68 (= (_ bv0 2) ?x35)))
 (let (($x110 (= $x68 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x18 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x18 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (= $x168 $x159)))
 (let (($x11 (= ?x18 (_ bv0 32))))
 (let (($x188 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x197 (= $x188 $x11)))
 (let (($x7 (and (and (and (not $x168) (=> $x188 (= false false))) $x197) $x156)))
 (let (($x87 (= $x7 true)))
 (let (($x57 (= false false)))
 (let (($x30 (=> $x188 $x57)))
 (let (($x131 (not $x168)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x20 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x172 (bvuge ?x20 (_ bv1 32))))
 (let (($x135 (= $x168 $x172)))
 (let (($x86 (= ?x20 (_ bv0 32))))
 (let (($x206 (= $x188 $x86)))
 (let (($x6 (and (and (and $x206 $x135) $x131) $x30)))
 (let (($x271 (= $x6 true)))
 (let ((?x208 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (= (_ bv0 3) ?x208)))
 (let (($x210 (= $x237 true)))
 (let (($x138 (= $x210 true)))
 (let (($x184 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x52 (= $x184 true)))
 (let (($x180 (= $x52 true)))
 (let (($x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x76 true)))
 (let (($x229 (= $x132 true)))
 (let (($x215 (= $x229 true)))
 (let (($x71 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118))))
 (let (($x167 (and true $x120)))
 (let (($x178 (and $x120 $x167)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x124))))
 (let (($x127 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x112 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x139 (and $x112 $x127)))
 (let (($x157 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x236 (and (and (and (and (and $x167 $x157) $x112) $x139) $x178) $x71)))
 (let (($x125 (= true $x236)))
 (let (($x75 (not $x158)))
 (let (($x150 (=> $x75 $x125)))
 (let (($x51 (= $x150 true)))
 (let (($x136 (= $x51 true)))
 (let (($x23 (= $x136 true)))
 (let (($x174 (= $x75 true)))
 (let (($x234 (= $x174 true)))
 (let (($x169 (= $x234 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x115)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x106 $x83)))
 (let (($x66 (and $x144 $x111)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x59 $x66)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x85)))))))
 (let (($x31 (and $x70 $x162)))
 (let (($x165 (= $x31 true)))
 (let (($x117 (= $x165 true)))
 (let (($x152 (= $x117 true)))
 (let (($x119 (and $x152 $x169)))
 (let (($x163 (and $x119 $x23)))
 (let (($x242 (and $x163 $x215)))
 (let (($x235 (and $x242 $x180)))
 (let (($x190 (and $x235 $x138)))
 (let (($x45 (and $x190 $x271)))
 (let (($x99 (and $x45 $x87)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x103 (and $x161 $x99)))
 (let (($x46 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd ?x88 (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x104 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x46)))))))
 (let (($x65 (=> (and $x75 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x145 $x46)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x228 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x96 (=> $x228 (or false (or false (and true (or $x148 $x78)))))))
 (let (($x8 (=> (and $x75 $x228) (or false (or false (and true (or $x148 $x78)))))))
 (let (($x36 (and $x8 $x65)))
 (let (($x54 (and $x36 $x103)))
 (let (($x82 (=> $x54 $x110)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x142 (concat (select input.dst.llvm-mem ?x32) (concat ?x47 (concat ?x22 ?x33)))))
 (let ((?x38 ((_ extract 1 0) ?x142)))
 (let ((?x35 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x38)))
 (let (($x68 (= (_ bv0 2) ?x35)))
 (let (($x110 (= $x68 true)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x18 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x18 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (= $x168 $x159)))
 (let (($x11 (= ?x18 (_ bv0 32))))
 (let (($x188 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x197 (= $x188 $x11)))
 (let (($x7 (and (and (and (not $x168) (=> $x188 (= false false))) $x197) $x156)))
 (let (($x87 (= $x7 true)))
 (let (($x57 (= false false)))
 (let (($x30 (=> $x188 $x57)))
 (let (($x131 (not $x168)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x20 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x172 (bvuge ?x20 (_ bv1 32))))
 (let (($x135 (= $x168 $x172)))
 (let (($x86 (= ?x20 (_ bv0 32))))
 (let (($x206 (= $x188 $x86)))
 (let (($x6 (and (and (and $x206 $x135) $x131) $x30)))
 (let (($x271 (= $x6 true)))
 (let ((?x208 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (= (_ bv0 3) ?x208)))
 (let (($x210 (= $x237 true)))
 (let (($x138 (= $x210 true)))
 (let (($x184 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x52 (= $x184 true)))
 (let (($x180 (= $x52 true)))
 (let (($x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x76 true)))
 (let (($x229 (= $x132 true)))
 (let (($x215 (= $x229 true)))
 (let (($x71 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118))))
 (let (($x167 (and true $x120)))
 (let (($x178 (and $x120 $x167)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x124))))
 (let (($x127 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x112 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x139 (and $x112 $x127)))
 (let (($x157 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x236 (and (and (and (and (and $x167 $x157) $x112) $x139) $x178) $x71)))
 (let (($x125 (= true $x236)))
 (let (($x75 (not $x158)))
 (let (($x150 (=> $x75 $x125)))
 (let (($x51 (= $x150 true)))
 (let (($x136 (= $x51 true)))
 (let (($x23 (= $x136 true)))
 (let (($x174 (= $x75 true)))
 (let (($x234 (= $x174 true)))
 (let (($x169 (= $x234 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x115)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x106 $x83)))
 (let (($x66 (and $x144 $x111)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x59 $x66)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x85)))))))
 (let (($x31 (and $x70 $x162)))
 (let (($x165 (= $x31 true)))
 (let (($x117 (= $x165 true)))
 (let (($x152 (= $x117 true)))
 (let (($x119 (and $x152 $x169)))
 (let (($x163 (and $x119 $x23)))
 (let (($x242 (and $x163 $x215)))
 (let (($x235 (and $x242 $x180)))
 (let (($x190 (and $x235 $x138)))
 (let (($x45 (and $x190 $x271)))
 (let (($x99 (and $x45 $x87)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x103 (and $x161 $x99)))
 (let (($x46 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd ?x88 (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x104 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x46)))))))
 (let (($x65 (=> (and $x75 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x145 $x46)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x228 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x96 (=> $x228 (or false (or false (and true (or $x148 $x78)))))))
 (let (($x8 (=> (and $x75 $x228) (or false (or false (and true (or $x148 $x78)))))))
 (let (($x36 (and $x8 $x65)))
 (let (($x54 (and $x36 $x103)))
 (let (($x82 (=> $x54 $x110)))
 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x230 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem ?x230) (concat ?x294 (concat ?x308 ?x69)))))
 (let ((?x280 ((_ extract 1 0) ?x303)))
 (let ((?x84 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x280)))
 (let (($x93 (= (_ bv0 2) ?x84)))
 (let (($x316 (= $x93 true)))
 (let ((?x21 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x306))))
 (let ((?x258 (bvadd ?x13 (_ bv4 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x300))))
 (let (($x277 (= (_ bv0 32) ?x291)))
 (let ((?x314 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x314 (_ bv1 32))))
 (let (($x90 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x40 (= $x90 $x257)))
 (let (($x89 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x41 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (and $x41 $x89)))
 (let (($x259 (=> $x198 $x40)))
 (let (($x301 (= ?x314 (_ bv0 32))))
 (let (($x185 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x275 (= $x185 $x301)))
 (let (($x284 (=> $x198 $x275)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x289))))
 (let (($x274 (= input.spec-%var-l-1.2.1.2.0 ?x273)))
 (let (($x313 (=> $x198 $x274)))
 (let (($x226 (= (_ bv0 32) ?x13)))
 (let ((?x247 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge ?x247 (_ bv1 32))))
 (let (($x216 (= $x89 $x218)))
 (let (($x219 (=> $x41 $x216)))
 (let (($x250 (= ?x247 (_ bv0 32))))
 (let (($x54 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x54 $x250)))
 (let (($x223 (=> $x41 $x251)))
 (let (($x224 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x217 (=> $x41 $x224)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x204 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (bvuge ?x204 (_ bv1 32))))
 (let (($x292 (= $x41 $x283)))
 (let (($x304 (= ?x204 (_ bv0 32))))
 (let (($x20 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x305 (= $x20 $x304)))
 (let (($x57 (= false false)))
 (let (($x107 (and $x41 $x54)))
 (let (($x9 (=> $x107 $x57)))
 (let (($x30 (=> $x20 $x57)))
 (let (($x285 (and (and (and (and (and (and $x30 $x9) $x305) $x292) $x217) $x223) $x219)))
 (let (($x279 (and (and (and $x285 $x313) $x284) $x259)))
 (let (($x302 (= $x279 true)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x22 (concat ?x61 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x38 (concat ?x81 ?x22))))
 (let ((?x209 (bvadd ?x35 (_ bv4 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x195))))
 (let (($x15 (= (_ bv0 32) ?x214)))
 (let ((?x262 (ite $x15 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x262 (_ bv1 32))))
 (let (($x265 (= $x90 $x207)))
 (let (($x193 (=> $x198 $x265)))
 (let (($x176 (= ?x262 (_ bv0 32))))
 (let (($x266 (= $x185 $x176)))
 (let (($x187 (=> $x198 $x266)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x16))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.0 ?x141)))
 (let (($x5 (=> $x198 $x192)))
 (let (($x68 (= (_ bv0 32) ?x35)))
 (let ((?x110 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x42 (bvuge ?x110 (_ bv1 32))))
 (let (($x270 (= $x89 $x42)))
 (let (($x80 (=> $x41 $x270)))
 (let (($x82 (= ?x110 (_ bv0 32))))
 (let (($x203 (= $x54 $x82)))
 (let (($x50 (=> $x41 $x203)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x49)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x7)))
 (let (($x99 (=> $x41 $x87)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x168 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x168 (_ bv1 32))))
 (let (($x130 (= $x41 $x131)))
 (let (($x172 (= ?x168 (_ bv0 32))))
 (let (($x135 (= $x20 $x172)))
 (let (($x268 (and (and (and (and (and (and $x135 $x130) $x30) $x99) $x50) $x9) $x80)))
 (let (($x202 (and (and (and $x268 $x5) $x187) $x193)))
 (let (($x147 (= $x202 true)))
 (let ((?x138 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x190 (= (_ bv0 3) ?x138)))
 (let (($x92 (= $x190 true)))
 (let (($x188 (= $x92 true)))
 (let (($x235 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x26 (= $x235 true)))
 (let (($x208 (= $x26 true)))
 (let (($x215 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x215 true)))
 (let (($x116 (= $x242 true)))
 (let (($x212 (= $x116 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x114 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114))))
 (let (($x63 (and true $x137)))
 (let (($x178 (and $x137 $x63)))
 (let ((?x228 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x77))))
 (let (($x139 (= (bvand ?x17 (_ bv4294967288 32)) ?x17)))
 (let (($x72 (= (bvand ?x228 (_ bv4294967292 32)) ?x228)))
 (let (($x123 (and $x72 $x139)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x228 (bvsub ?x228 (_ bv4 32))) (bvult ?x228 (bvsub ?x228 (_ bv4 32))))))
 (let (($x51 (and (and (and (and (and $x63 $x170) $x72) $x123) $x178) $x14)))
 (let (($x136 (= true $x51)))
 (let (($x75 (not $x158)))
 (let (($x23 (=> $x75 $x136)))
 (let (($x163 (= $x23 true)))
 (let (($x211 (= $x163 true)))
 (let (($x76 (= $x211 true)))
 (let (($x119 (= $x75 true)))
 (let (($x121 (= $x119 true)))
 (let (($x118 (= $x121 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x162)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x144 $x111)))
 (let (($x165 (and $x66 $x31)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x100 $x165)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x105)))))))
 (let (($x152 (and $x83 $x117)))
 (let (($x174 (= $x152 true)))
 (let (($x234 (= $x174 true)))
 (let (($x169 (= $x234 true)))
 (let (($x155 (and $x169 $x118)))
 (let (($x132 (and $x155 $x76)))
 (let (($x184 (and $x132 $x212)))
 (let (($x237 (and $x184 $x208)))
 (let (($x200 (and $x237 $x188)))
 (let (($x189 (and $x200 $x147)))
 (let (($x315 (and $x189 $x302)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x53 (and $x134 $x315)))
 (let (($x97 (bvugt ?x228 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd ?x228 (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x161 (=> (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x97)))))))
 (let (($x64 (=> (and $x75 (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x97)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x48 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x21 (_ bv1 32))) (or false (or false (and true (or $x101 $x28)))))))
 (let (($x56 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x21 (_ bv1 32)))) (or false (or false (and true (or $x101 $x28)))))))
 (let (($x149 (and $x56 $x64)))
 (let (($x282 (and $x149 $x53)))
 (let (($x317 (=> $x282 $x316)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x230 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem ?x230) (concat ?x294 (concat ?x308 ?x69)))))
 (let ((?x280 ((_ extract 1 0) ?x303)))
 (let ((?x84 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x280)))
 (let (($x93 (= (_ bv0 2) ?x84)))
 (let (($x316 (= $x93 true)))
 (let ((?x21 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x306))))
 (let ((?x258 (bvadd ?x13 (_ bv4 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x300))))
 (let (($x277 (= (_ bv0 32) ?x291)))
 (let ((?x314 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x314 (_ bv1 32))))
 (let (($x90 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x40 (= $x90 $x257)))
 (let (($x89 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x41 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (and $x41 $x89)))
 (let (($x259 (=> $x198 $x40)))
 (let (($x301 (= ?x314 (_ bv0 32))))
 (let (($x185 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x275 (= $x185 $x301)))
 (let (($x284 (=> $x198 $x275)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x289))))
 (let (($x274 (= input.spec-%var-l-1.2.1.2.0 ?x273)))
 (let (($x313 (=> $x198 $x274)))
 (let (($x226 (= (_ bv0 32) ?x13)))
 (let ((?x247 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge ?x247 (_ bv1 32))))
 (let (($x216 (= $x89 $x218)))
 (let (($x219 (=> $x41 $x216)))
 (let (($x250 (= ?x247 (_ bv0 32))))
 (let (($x54 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x54 $x250)))
 (let (($x223 (=> $x41 $x251)))
 (let (($x224 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x217 (=> $x41 $x224)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x204 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (bvuge ?x204 (_ bv1 32))))
 (let (($x292 (= $x41 $x283)))
 (let (($x304 (= ?x204 (_ bv0 32))))
 (let (($x20 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x305 (= $x20 $x304)))
 (let (($x57 (= false false)))
 (let (($x107 (and $x41 $x54)))
 (let (($x9 (=> $x107 $x57)))
 (let (($x30 (=> $x20 $x57)))
 (let (($x285 (and (and (and (and (and (and $x30 $x9) $x305) $x292) $x217) $x223) $x219)))
 (let (($x279 (and (and (and $x285 $x313) $x284) $x259)))
 (let (($x302 (= $x279 true)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x22 (concat ?x61 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x38 (concat ?x81 ?x22))))
 (let ((?x209 (bvadd ?x35 (_ bv4 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x195))))
 (let (($x15 (= (_ bv0 32) ?x214)))
 (let ((?x262 (ite $x15 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x262 (_ bv1 32))))
 (let (($x265 (= $x90 $x207)))
 (let (($x193 (=> $x198 $x265)))
 (let (($x176 (= ?x262 (_ bv0 32))))
 (let (($x266 (= $x185 $x176)))
 (let (($x187 (=> $x198 $x266)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x16))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.0 ?x141)))
 (let (($x5 (=> $x198 $x192)))
 (let (($x68 (= (_ bv0 32) ?x35)))
 (let ((?x110 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x42 (bvuge ?x110 (_ bv1 32))))
 (let (($x270 (= $x89 $x42)))
 (let (($x80 (=> $x41 $x270)))
 (let (($x82 (= ?x110 (_ bv0 32))))
 (let (($x203 (= $x54 $x82)))
 (let (($x50 (=> $x41 $x203)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x49)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x7)))
 (let (($x99 (=> $x41 $x87)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x168 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x168 (_ bv1 32))))
 (let (($x130 (= $x41 $x131)))
 (let (($x172 (= ?x168 (_ bv0 32))))
 (let (($x135 (= $x20 $x172)))
 (let (($x268 (and (and (and (and (and (and $x135 $x130) $x30) $x99) $x50) $x9) $x80)))
 (let (($x202 (and (and (and $x268 $x5) $x187) $x193)))
 (let (($x147 (= $x202 true)))
 (let ((?x138 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x190 (= (_ bv0 3) ?x138)))
 (let (($x92 (= $x190 true)))
 (let (($x188 (= $x92 true)))
 (let (($x235 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x26 (= $x235 true)))
 (let (($x208 (= $x26 true)))
 (let (($x215 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x215 true)))
 (let (($x116 (= $x242 true)))
 (let (($x212 (= $x116 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x114 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114))))
 (let (($x63 (and true $x137)))
 (let (($x178 (and $x137 $x63)))
 (let ((?x228 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x77))))
 (let (($x139 (= (bvand ?x17 (_ bv4294967288 32)) ?x17)))
 (let (($x72 (= (bvand ?x228 (_ bv4294967292 32)) ?x228)))
 (let (($x123 (and $x72 $x139)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x228 (bvsub ?x228 (_ bv4 32))) (bvult ?x228 (bvsub ?x228 (_ bv4 32))))))
 (let (($x51 (and (and (and (and (and $x63 $x170) $x72) $x123) $x178) $x14)))
 (let (($x136 (= true $x51)))
 (let (($x75 (not $x158)))
 (let (($x23 (=> $x75 $x136)))
 (let (($x163 (= $x23 true)))
 (let (($x211 (= $x163 true)))
 (let (($x76 (= $x211 true)))
 (let (($x119 (= $x75 true)))
 (let (($x121 (= $x119 true)))
 (let (($x118 (= $x121 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x162)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x144 $x111)))
 (let (($x165 (and $x66 $x31)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x100 $x165)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x105)))))))
 (let (($x152 (and $x83 $x117)))
 (let (($x174 (= $x152 true)))
 (let (($x234 (= $x174 true)))
 (let (($x169 (= $x234 true)))
 (let (($x155 (and $x169 $x118)))
 (let (($x132 (and $x155 $x76)))
 (let (($x184 (and $x132 $x212)))
 (let (($x237 (and $x184 $x208)))
 (let (($x200 (and $x237 $x188)))
 (let (($x189 (and $x200 $x147)))
 (let (($x315 (and $x189 $x302)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x53 (and $x134 $x315)))
 (let (($x97 (bvugt ?x228 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd ?x228 (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x161 (=> (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x97)))))))
 (let (($x64 (=> (and $x75 (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x97)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x48 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x21 (_ bv1 32))) (or false (or false (and true (or $x101 $x28)))))))
 (let (($x56 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x21 (_ bv1 32)))) (or false (or false (and true (or $x101 $x28)))))))
 (let (($x149 (and $x56 $x64)))
 (let (($x282 (and $x149 $x53)))
 (let (($x317 (=> $x282 $x316)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 #b00)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000010)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv142606344 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv142606344 32) (_ bv1 8)) (_ bv8388611 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2) (_ bv0 2))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8388611 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483667 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffe0)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xa147e5dd)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xe5e5e5ed)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xa147e5d8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x40)
                                #xa147e5d9
                                #xd2)
                         #xa147e5e2
                         #xed)
                  #xa147ed96
                  #xe5)))
(let ((a!2 (store (store (store (store a!1 #xa147e5e0 #xe5) #xe5d2e5d5 #xe5)
                         #xa147e5de
                         #xd2)
                  #xa147e5dc
                  #xd0)))
(let ((a!3 (store (store (store (store a!2 #xa147e5df #xe5) #xe5d2e5d3 #xe5)
                         #xa147e5dd
                         #xe5)
                  #xa147ed97
                  #xe5)))
(let ((a!4 (store (store (store (store a!3 #xa147e5e1 #x93) #xa147e5db #xe5)
                         #xa147ed98
                         #xe5)
                  #xa147e5e4
                  #xa1)))
(let ((a!5 (store (store (store (store a!4 #xa147ed99 #x47) #xa147e5dd #xe5)
                         #xa147e5e3
                         #x47)
                  #xa147ed95
                  #xe5)))
(let ((a!6 (store (store (store (store a!5 #xa147ed94 #xe5) #xa147ed9a #xa1)
                         #xe5d2e5d6
                         #xe5)
                  #xa147e5da
                  #xe5)))
(let ((a!7 (store (store (store (store a!6 #xe5d2e5d0 #xed) #xa147e5de #xd2)
                         #xa147e5d8
                         #xe5)
                  #xe5d2e5d2
                  #xe5)))
  (store (store (store (store a!7 #xe5d2e5d1 #xe5) #xa147ed93 #xed)
                #xe5d2e5d4
                #xe5)
         #xa147e5df
         #xe5)))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2)
    #b00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xe5e5d2e5)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffe0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffe3)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem ?x164) (concat ?x264 (concat ?x303 ?x307)))))
 (let ((?x79 ((_ extract 1 0) ?x245)))
 (let ((?x27 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x79)))
 (let (($x91 (= (_ bv0 2) ?x27)))
 (let (($x73 (= $x91 true)))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x309))))
 (let ((?x276 (bvadd ?x223 (_ bv4 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x253))))
 (let (($x301 (= (_ bv0 32) ?x314)))
 (let ((?x275 (ite $x301 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x275 (_ bv1 32))))
 (let (($x262 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x262 $x40)))
 (let (($x9 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x267 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x270 (and $x267 $x9)))
 (let (($x279 (=> $x270 $x259)))
 (let (($x284 (= ?x275 (_ bv0 32))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x287 (= $x192 $x284)))
 (let (($x257 (=> $x270 $x287)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x227))))
 (let (($x258 (= input.spec-%var-l-1.2.1.2.0 ?x286)))
 (let (($x310 (=> $x270 $x258)))
 (let (($x312 (= (_ bv0 32) ?x223)))
 (let ((?x218 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x218 (_ bv1 32))))
 (let (($x290 (= $x9 $x37)))
 (let (($x263 (=> $x267 $x290)))
 (let (($x216 (= ?x218 (_ bv0 32))))
 (let (($x54 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x219 (= $x54 $x216)))
 (let (($x285 (=> $x267 $x219)))
 (let (($x288 (= input.spec-%var-l-1.2.0 ?x245)))
 (let (($x222 (=> $x267 $x288)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x272 (_ bv1 32))))
 (let (($x69 (= $x267 $x308)))
 (let (($x294 (= ?x272 (_ bv0 32))))
 (let (($x168 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x293 (= $x168 $x294)))
 (let (($x207 (and $x270 $x262)))
 (let (($x265 (not $x207)))
 (let (($x191 (and $x270 $x192)))
 (let (($x90 (not $x191)))
 (let (($x297 (= false false)))
 (let (($x196 (and $x267 $x54)))
 (let (($x107 (=> $x196 $x297)))
 (let (($x6 (=> $x168 $x297)))
 (let (($x84 (and (and (and (and (and (and $x6 $x107) $x90) $x265) $x293) $x69) $x222)))
 (let (($x24 (and (and (and (and (and $x84 $x285) $x263) $x310) $x257) $x279)))
 (let (($x25 (= $x24 true)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x81 (concat ?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x140 (concat ?x61 ?x81))))
 (let ((?x5 (bvadd ?x35 (_ bv4 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x209))))
 (let (($x43 (= (_ bv0 32) ?x181)))
 (let ((?x195 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x195 (_ bv1 32))))
 (let (($x266 (= $x262 $x176)))
 (let (($x187 (=> $x270 $x266)))
 (let (($x199 (= ?x195 (_ bv0 32))))
 (let (($x214 (= $x192 $x199)))
 (let (($x15 (=> $x270 $x214)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x171))))
 (let (($x16 (= input.spec-%var-l-1.2.1.2.0 ?x133)))
 (let (($x238 (=> $x270 $x16)))
 (let (($x68 (= (_ bv0 32) ?x35)))
 (let ((?x110 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x110 (_ bv1 32))))
 (let (($x89 (= $x9 $x241)))
 (let (($x42 (=> $x267 $x89)))
 (let (($x82 (= ?x110 (_ bv0 32))))
 (let (($x203 (= $x54 $x82)))
 (let (($x50 (=> $x267 $x203)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x45)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x99 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x201 (=> $x267 $x99)))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x41 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x41 (_ bv1 32))))
 (let (($x30 (= $x267 $x57)))
 (let (($x131 (= ?x41 (_ bv0 32))))
 (let (($x130 (= $x168 $x131)))
 (let (($x204 (and (and (and (and (and (and $x130 $x30) $x6) $x201) $x50) $x107) $x42)))
 (let (($x292 (and (and (and (and (and $x204 $x238) $x15) $x187) $x90) $x265)))
 (let (($x260 (= $x292 true)))
 (let ((?x188 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x188)))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let (($x237 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x210 (= $x237 true)))
 (let (($x138 (= $x210 true)))
 (let (($x212 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x212 true)))
 (let (($x52 (= $x184 true)))
 (let (($x180 (= $x52 true)))
 (let (($x143 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x183) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x183))))
 (let (($x126 (and true $x175)))
 (let (($x178 (and $x175 $x126)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x39))))
 (let (($x123 (= (bvand ?x261 (_ bv4294967288 32)) ?x261)))
 (let (($x128 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x125 (and $x128 $x123)))
 (let (($x179 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x163 (and (and (and (and (and $x126 $x179) $x128) $x125) $x178) $x143)))
 (let (($x211 (= true $x163)))
 (let (($x75 (not $x158)))
 (let (($x76 (=> $x75 $x211)))
 (let (($x132 (= $x76 true)))
 (let (($x229 (= $x132 true)))
 (let (($x215 (= $x229 true)))
 (let (($x155 (= $x75 true)))
 (let (($x120 (= $x155 true)))
 (let (($x114 (= $x120 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x117)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x66 $x31)))
 (let (($x174 (and $x165 $x152)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x102 $x174)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x106)))))))
 (let (($x169 (and $x111 $x234)))
 (let (($x119 (= $x169 true)))
 (let (($x121 (= $x119 true)))
 (let (($x118 (= $x121 true)))
 (let (($x167 (and $x118 $x114)))
 (let (($x242 (and $x167 $x215)))
 (let (($x235 (and $x242 $x180)))
 (let (($x190 (and $x235 $x138)))
 (let (($x86 (and $x190 $x20)))
 (let (($x213 (and $x86 $x260)))
 (let (($x182 (and $x213 $x25)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x319 (and $x233 $x182)))
 (let (($x65 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x94 (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x134 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x65)))))))
 (let (($x12 (=> (and $x75 (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x104 $x65)))))))
 (let (($x8 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x46 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x148 (_ bv1 32))) (or false (or false (and true (or $x96 $x8)))))))
 (let (($x32 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x148 (_ bv1 32)))) (or false (or false (and true (or $x96 $x8)))))))
 (let (($x74 (and $x32 $x12)))
 (let (($x320 (and $x74 $x319)))
 (let (($x321 (=> $x320 $x73)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem ?x164) (concat ?x264 (concat ?x303 ?x307)))))
 (let ((?x79 ((_ extract 1 0) ?x245)))
 (let ((?x27 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x79)))
 (let (($x91 (= (_ bv0 2) ?x27)))
 (let (($x73 (= $x91 true)))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x309))))
 (let ((?x276 (bvadd ?x223 (_ bv4 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x253))))
 (let (($x301 (= (_ bv0 32) ?x314)))
 (let ((?x275 (ite $x301 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x275 (_ bv1 32))))
 (let (($x262 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x259 (= $x262 $x40)))
 (let (($x9 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x267 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x270 (and $x267 $x9)))
 (let (($x279 (=> $x270 $x259)))
 (let (($x284 (= ?x275 (_ bv0 32))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x287 (= $x192 $x284)))
 (let (($x257 (=> $x270 $x287)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x227))))
 (let (($x258 (= input.spec-%var-l-1.2.1.2.0 ?x286)))
 (let (($x310 (=> $x270 $x258)))
 (let (($x312 (= (_ bv0 32) ?x223)))
 (let ((?x218 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x218 (_ bv1 32))))
 (let (($x290 (= $x9 $x37)))
 (let (($x263 (=> $x267 $x290)))
 (let (($x216 (= ?x218 (_ bv0 32))))
 (let (($x54 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x219 (= $x54 $x216)))
 (let (($x285 (=> $x267 $x219)))
 (let (($x288 (= input.spec-%var-l-1.2.0 ?x245)))
 (let (($x222 (=> $x267 $x288)))
 (let (($x158 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x272 (_ bv1 32))))
 (let (($x69 (= $x267 $x308)))
 (let (($x294 (= ?x272 (_ bv0 32))))
 (let (($x168 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x293 (= $x168 $x294)))
 (let (($x207 (and $x270 $x262)))
 (let (($x265 (not $x207)))
 (let (($x191 (and $x270 $x192)))
 (let (($x90 (not $x191)))
 (let (($x297 (= false false)))
 (let (($x196 (and $x267 $x54)))
 (let (($x107 (=> $x196 $x297)))
 (let (($x6 (=> $x168 $x297)))
 (let (($x84 (and (and (and (and (and (and $x6 $x107) $x90) $x265) $x293) $x69) $x222)))
 (let (($x24 (and (and (and (and (and $x84 $x285) $x263) $x310) $x257) $x279)))
 (let (($x25 (= $x24 true)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x81 (concat ?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x140 (concat ?x61 ?x81))))
 (let ((?x5 (bvadd ?x35 (_ bv4 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x209))))
 (let (($x43 (= (_ bv0 32) ?x181)))
 (let ((?x195 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x195 (_ bv1 32))))
 (let (($x266 (= $x262 $x176)))
 (let (($x187 (=> $x270 $x266)))
 (let (($x199 (= ?x195 (_ bv0 32))))
 (let (($x214 (= $x192 $x199)))
 (let (($x15 (=> $x270 $x214)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x171))))
 (let (($x16 (= input.spec-%var-l-1.2.1.2.0 ?x133)))
 (let (($x238 (=> $x270 $x16)))
 (let (($x68 (= (_ bv0 32) ?x35)))
 (let ((?x110 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x110 (_ bv1 32))))
 (let (($x89 (= $x9 $x241)))
 (let (($x42 (=> $x267 $x89)))
 (let (($x82 (= ?x110 (_ bv0 32))))
 (let (($x203 (= $x54 $x82)))
 (let (($x50 (=> $x267 $x203)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x45)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x99 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x201 (=> $x267 $x99)))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x41 (ite $x135 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x41 (_ bv1 32))))
 (let (($x30 (= $x267 $x57)))
 (let (($x131 (= ?x41 (_ bv0 32))))
 (let (($x130 (= $x168 $x131)))
 (let (($x204 (and (and (and (and (and (and $x130 $x30) $x6) $x201) $x50) $x107) $x42)))
 (let (($x292 (and (and (and (and (and $x204 $x238) $x15) $x187) $x90) $x265)))
 (let (($x260 (= $x292 true)))
 (let ((?x188 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x188)))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let (($x237 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x210 (= $x237 true)))
 (let (($x138 (= $x210 true)))
 (let (($x212 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x212 true)))
 (let (($x52 (= $x184 true)))
 (let (($x180 (= $x52 true)))
 (let (($x143 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x183) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x183))))
 (let (($x126 (and true $x175)))
 (let (($x178 (and $x175 $x126)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x39))))
 (let (($x123 (= (bvand ?x261 (_ bv4294967288 32)) ?x261)))
 (let (($x128 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x125 (and $x128 $x123)))
 (let (($x179 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x163 (and (and (and (and (and $x126 $x179) $x128) $x125) $x178) $x143)))
 (let (($x211 (= true $x163)))
 (let (($x75 (not $x158)))
 (let (($x76 (=> $x75 $x211)))
 (let (($x132 (= $x76 true)))
 (let (($x229 (= $x132 true)))
 (let (($x215 (= $x229 true)))
 (let (($x155 (= $x75 true)))
 (let (($x120 (= $x155 true)))
 (let (($x114 (= $x120 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x117)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x66 $x31)))
 (let (($x174 (and $x165 $x152)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x102 $x174)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x106)))))))
 (let (($x169 (and $x111 $x234)))
 (let (($x119 (= $x169 true)))
 (let (($x121 (= $x119 true)))
 (let (($x118 (= $x121 true)))
 (let (($x167 (and $x118 $x114)))
 (let (($x242 (and $x167 $x215)))
 (let (($x235 (and $x242 $x180)))
 (let (($x190 (and $x235 $x138)))
 (let (($x86 (and $x190 $x20)))
 (let (($x213 (and $x86 $x260)))
 (let (($x182 (and $x213 $x25)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x319 (and $x233 $x182)))
 (let (($x65 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x94 (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x134 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x65)))))))
 (let (($x12 (=> (and $x75 (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x104 $x65)))))))
 (let (($x8 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x46 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x148 (_ bv1 32))) (or false (or false (and true (or $x96 $x8)))))))
 (let (($x32 (=> (and $x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x148 (_ bv1 32)))) (or false (or false (and true (or $x96 $x8)))))))
 (let (($x74 (and $x32 $x12)))
 (let (($x320 (and $x74 $x319)))
 (let (($x321 (=> $x320 $x73)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 #b00)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000010)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1073848328 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073848328 32) (_ bv1 8)) (_ bv1073815555 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2) (_ bv0 2))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073815555 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483664 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483667 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x244be632)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00e1e100)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x244be628)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x244be635
                                #xe1)
                         #x244be632
                         #xe1)
                  #x244be62b
                  #xe1)))
(let ((a!2 (store (store (store (store a!1 #x00000002 #xe1) #x00000001 #xe1)
                         #x244be628
                         #xe1)
                  #x00000002
                  #xe1)))
  (store a!2 #x00000001 #xe1))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2)
    #b00)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xe10000e1)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x77))))
 (let (($x11 (bvule ?x261 (_ bv4294967294 32))))
 (let (($x197 (= $x11 true)))
 (let (($x156 (= $x197 true)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x30 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x202 (= $x135 $x6)))
 (let (($x193 (= ?x30 (_ bv0 32))))
 (let (($x129 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x297 (= $x129 $x193)))
 (let (($x159 (and $x297 $x202)))
 (let (($x49 (= $x159 true)))
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x206 (ite $x86 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x206 (_ bv1 32))))
 (let (($x131 (= $x135 $x41)))
 (let (($x168 (= ?x206 (_ bv0 32))))
 (let (($x172 (= $x129 $x168)))
 (let (($x130 (and $x172 $x131)))
 (let (($x267 (= $x130 true)))
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x138 (= (_ bv0 3) ?x210)))
 (let (($x190 (= $x138 true)))
 (let (($x92 (= $x190 true)))
 (let (($x52 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x52 true)))
 (let (($x235 (= $x180 true)))
 (let (($x26 (= $x235 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x63 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x63) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x63))))
 (let (($x108 (and true $x170)))
 (let (($x136 (and $x170 $x108)))
 (let (($x123 (= (bvand ?x261 (_ bv4294967288 32)) ?x261)))
 (let (($x51 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x125 (and $x51 $x123)))
 (let (($x72 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv4 32))) (bvult ?x230 (bvsub ?x230 (_ bv4 32))))))
 (let (($x76 (and (and (and (and (and $x108 $x72) $x51) $x125) $x136) $x23)))
 (let (($x132 (= true $x76)))
 (let (($x158 (not $x151)))
 (let (($x229 (=> $x158 $x132)))
 (let (($x215 (= $x229 true)))
 (let (($x242 (= $x215 true)))
 (let (($x116 (= $x242 true)))
 (let (($x114 (= $x158 true)))
 (let (($x167 (= $x114 true)))
 (let (($x137 (= $x167 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x174)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x31 $x117)))
 (let (($x169 (and $x152 $x234)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x109 $x169)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x100)))))))
 (let (($x121 (and $x162 $x119)))
 (let (($x118 (= $x121 true)))
 (let (($x155 (= $x118 true)))
 (let (($x120 (= $x155 true)))
 (let (($x183 (and $x120 $x137)))
 (let (($x212 (and $x183 $x116)))
 (let (($x208 (and $x212 $x26)))
 (let (($x188 (and $x208 $x92)))
 (let (($x57 (and $x188 $x267)))
 (let (($x7 (and $x57 $x49)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x95 (and $x105 $x7)))
 (let (($x161 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd ?x230 (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x85 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x161)))))))
 (let (($x97 (=> (and $x158 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x36 $x161)))))))
 (let (($x48 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x94 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x55 (=> $x94 (or false (or false (and true (or $x88 $x48)))))))
 (let (($x78 (=> (and $x158 $x94) (or false (or false (and true (or $x88 $x48)))))))
 (let (($x60 (and $x78 $x97)))
 (let (($x271 (and $x60 $x95)))
 (let (($x45 (=> $x271 $x156)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x77))))
 (let (($x11 (bvule ?x261 (_ bv4294967294 32))))
 (let (($x197 (= $x11 true)))
 (let (($x156 (= $x197 true)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x30 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x202 (= $x135 $x6)))
 (let (($x193 (= ?x30 (_ bv0 32))))
 (let (($x129 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x297 (= $x129 $x193)))
 (let (($x159 (and $x297 $x202)))
 (let (($x49 (= $x159 true)))
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x206 (ite $x86 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x206 (_ bv1 32))))
 (let (($x131 (= $x135 $x41)))
 (let (($x168 (= ?x206 (_ bv0 32))))
 (let (($x172 (= $x129 $x168)))
 (let (($x130 (and $x172 $x131)))
 (let (($x267 (= $x130 true)))
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x138 (= (_ bv0 3) ?x210)))
 (let (($x190 (= $x138 true)))
 (let (($x92 (= $x190 true)))
 (let (($x52 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x52 true)))
 (let (($x235 (= $x180 true)))
 (let (($x26 (= $x235 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x63 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x63) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x63))))
 (let (($x108 (and true $x170)))
 (let (($x136 (and $x170 $x108)))
 (let (($x123 (= (bvand ?x261 (_ bv4294967288 32)) ?x261)))
 (let (($x51 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x125 (and $x51 $x123)))
 (let (($x72 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv4 32))) (bvult ?x230 (bvsub ?x230 (_ bv4 32))))))
 (let (($x76 (and (and (and (and (and $x108 $x72) $x51) $x125) $x136) $x23)))
 (let (($x132 (= true $x76)))
 (let (($x158 (not $x151)))
 (let (($x229 (=> $x158 $x132)))
 (let (($x215 (= $x229 true)))
 (let (($x242 (= $x215 true)))
 (let (($x116 (= $x242 true)))
 (let (($x114 (= $x158 true)))
 (let (($x167 (= $x114 true)))
 (let (($x137 (= $x167 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x174)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x31 $x117)))
 (let (($x169 (and $x152 $x234)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x109 $x169)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x100)))))))
 (let (($x121 (and $x162 $x119)))
 (let (($x118 (= $x121 true)))
 (let (($x155 (= $x118 true)))
 (let (($x120 (= $x155 true)))
 (let (($x183 (and $x120 $x137)))
 (let (($x212 (and $x183 $x116)))
 (let (($x208 (and $x212 $x26)))
 (let (($x188 (and $x208 $x92)))
 (let (($x57 (and $x188 $x267)))
 (let (($x7 (and $x57 $x49)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x95 (and $x105 $x7)))
 (let (($x161 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd ?x230 (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x85 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x161)))))))
 (let (($x97 (=> (and $x158 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x36 $x161)))))))
 (let (($x48 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x94 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x55 (=> $x94 (or false (or false (and true (or $x88 $x48)))))))
 (let (($x78 (=> (and $x158 $x94) (or false (or false (and true (or $x88 $x48)))))))
 (let (($x60 (and $x78 $x97)))
 (let (($x271 (and $x60 $x95)))
 (let (($x45 (=> $x271 $x156)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x34 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x305 (concat ?x15 (concat ?x195 ?x181))))
 (let (($x262 (= ?x305 ?x305)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x6 (_ bv1 32))))
 (let (($x176 (=> $x49 $x262)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x304)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x5)))
 (let (($x194 (= ?x177 ?x177)))
 (let (($x240 (=> $x49 $x194)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x153))))
 (let (($x87 (= (_ bv0 32) ?x127)))
 (let ((?x99 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x99 (_ bv1 32))))
 (let (($x171 (= $x49 $x103)))
 (let (($x75 (= false false)))
 (let (($x202 (= ?x6 (_ bv0 32))))
 (let (($x268 (=> $x202 $x75)))
 (let (($x201 (= ?x99 (_ bv0 32))))
 (let (($x205 (= $x202 $x201)))
 (let (($x198 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127)))
 (let (($x90 (and (and (and (and (and $x198 $x205) $x268) $x171) $x240) $x176)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x189 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x42 (concat ?x89 (concat ?x254 ?x196))))
 (let (($x204 (= ?x42 ?x42)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x135 (_ bv1 32))))
 (let (($x270 (=> $x267 $x204)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x61)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x142)))
 (let (($x68 (= ?x35 ?x35)))
 (let (($x110 (=> $x267 $x68)))
 (let (($x54 (= $x267 $x103)))
 (let (($x41 (= ?x135 (_ bv0 32))))
 (let (($x147 (= $x41 $x201)))
 (let (($x295 (and (and (and (=> $x41 $x75) (= input.dst.llvm-%l ?x127)) $x147) $x54)))
 (let (($x186 (and (and $x295 $x110) $x270)))
 (let (($x18 (not true)))
 (let (($x207 (or (or $x18 $x186) $x90)))
 (let (($x45 (= true true)))
 (let (($x265 (and $x45 $x207)))
 (let (($x292 (= $x265 true)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x130 $x49)))
 (let (($x206 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x159 (= $x206 $x202)))
 (let (($x95 (and $x159 $x7)))
 (let (($x271 (= $x95 true)))
 (let (($x57 (= $x130 $x267)))
 (let (($x131 (= $x206 $x41)))
 (let (($x30 (and $x131 $x57)))
 (let (($x193 (= $x30 true)))
 (let ((?x92 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 3) ?x92)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x26 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x26 true)))
 (let (($x237 (= $x208 true)))
 (let (($x210 (= $x237 true)))
 (let (($x178 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126))))
 (let (($x179 (and true $x71)))
 (let (($x136 (and $x71 $x179)))
 (let (($x125 (= (bvand ?x127 (_ bv4294967288 32)) ?x127)))
 (let (($x122 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x163 (and $x122 $x125)))
 (let (($x128 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x215 (and (and (and (and (and $x179 $x128) $x122) $x163) $x136) $x178)))
 (let (($x242 (= true $x215)))
 (let (($x158 (not $x151)))
 (let (($x116 (=> $x158 $x242)))
 (let (($x212 (= $x116 true)))
 (let (($x184 (= $x212 true)))
 (let (($x52 (= $x184 true)))
 (let (($x183 (= $x158 true)))
 (let (($x157 (= $x183 true)))
 (let (($x63 (= $x157 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x119)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x152 $x234)))
 (let (($x118 (and $x169 $x121)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x113 $x118)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x166 $x102)))))))
 (let (($x120 (and $x117 $x155)))
 (let (($x114 (= $x120 true)))
 (let (($x167 (= $x114 true)))
 (let (($x137 (= $x167 true)))
 (let (($x175 (and $x137 $x63)))
 (let (($x180 (and $x175 $x52)))
 (let (($x138 (and $x180 $x210)))
 (let (($x20 (and $x138 $x129)))
 (let (($x297 (and $x20 $x193)))
 (let (($x11 (and $x297 $x271)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x106 $x11)))
 (let (($x134 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x94 (_ bv3 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x105 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x134)))))))
 (let (($x74 (=> (and $x158 (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x149 $x134)))))))
 (let (($x46 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x98 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x104 (=> $x98 (or false (or false (and true (or $x228 $x46)))))))
 (let (($x28 (=> (and $x158 $x98) (or false (or false (and true (or $x228 $x46)))))))
 (let (($x65 (and $x28 $x74)))
 (let (($x156 (and $x65 $x197)))
 (let (($x260 (=> $x156 $x292)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x34 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x305 (concat ?x15 (concat ?x195 ?x181))))
 (let (($x262 (= ?x305 ?x305)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x6 (_ bv1 32))))
 (let (($x176 (=> $x49 $x262)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x304)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x5)))
 (let (($x194 (= ?x177 ?x177)))
 (let (($x240 (=> $x49 $x194)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x153))))
 (let (($x87 (= (_ bv0 32) ?x127)))
 (let ((?x99 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x99 (_ bv1 32))))
 (let (($x171 (= $x49 $x103)))
 (let (($x75 (= false false)))
 (let (($x202 (= ?x6 (_ bv0 32))))
 (let (($x268 (=> $x202 $x75)))
 (let (($x201 (= ?x99 (_ bv0 32))))
 (let (($x205 (= $x202 $x201)))
 (let (($x198 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127)))
 (let (($x90 (and (and (and (and (and $x198 $x205) $x268) $x171) $x240) $x176)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x189 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x42 (concat ?x89 (concat ?x254 ?x196))))
 (let (($x204 (= ?x42 ?x42)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x135 (_ bv1 32))))
 (let (($x270 (=> $x267 $x204)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x61)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x142)))
 (let (($x68 (= ?x35 ?x35)))
 (let (($x110 (=> $x267 $x68)))
 (let (($x54 (= $x267 $x103)))
 (let (($x41 (= ?x135 (_ bv0 32))))
 (let (($x147 (= $x41 $x201)))
 (let (($x295 (and (and (and (=> $x41 $x75) (= input.dst.llvm-%l ?x127)) $x147) $x54)))
 (let (($x186 (and (and $x295 $x110) $x270)))
 (let (($x18 (not true)))
 (let (($x207 (or (or $x18 $x186) $x90)))
 (let (($x45 (= true true)))
 (let (($x265 (and $x45 $x207)))
 (let (($x292 (= $x265 true)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x130 $x49)))
 (let (($x206 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x159 (= $x206 $x202)))
 (let (($x95 (and $x159 $x7)))
 (let (($x271 (= $x95 true)))
 (let (($x57 (= $x130 $x267)))
 (let (($x131 (= $x206 $x41)))
 (let (($x30 (and $x131 $x57)))
 (let (($x193 (= $x30 true)))
 (let ((?x92 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 3) ?x92)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x26 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x26 true)))
 (let (($x237 (= $x208 true)))
 (let (($x210 (= $x237 true)))
 (let (($x178 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126))))
 (let (($x179 (and true $x71)))
 (let (($x136 (and $x71 $x179)))
 (let (($x125 (= (bvand ?x127 (_ bv4294967288 32)) ?x127)))
 (let (($x122 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x163 (and $x122 $x125)))
 (let (($x128 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x215 (and (and (and (and (and $x179 $x128) $x122) $x163) $x136) $x178)))
 (let (($x242 (= true $x215)))
 (let (($x158 (not $x151)))
 (let (($x116 (=> $x158 $x242)))
 (let (($x212 (= $x116 true)))
 (let (($x184 (= $x212 true)))
 (let (($x52 (= $x184 true)))
 (let (($x183 (= $x158 true)))
 (let (($x157 (= $x183 true)))
 (let (($x63 (= $x157 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x119)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x152 $x234)))
 (let (($x118 (and $x169 $x121)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x113 $x118)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x166 $x102)))))))
 (let (($x120 (and $x117 $x155)))
 (let (($x114 (= $x120 true)))
 (let (($x167 (= $x114 true)))
 (let (($x137 (= $x167 true)))
 (let (($x175 (and $x137 $x63)))
 (let (($x180 (and $x175 $x52)))
 (let (($x138 (and $x180 $x210)))
 (let (($x20 (and $x138 $x129)))
 (let (($x297 (and $x20 $x193)))
 (let (($x11 (and $x297 $x271)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x106 $x11)))
 (let (($x134 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x94 (_ bv3 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x105 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x134)))))))
 (let (($x74 (=> (and $x158 (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x149 $x134)))))))
 (let (($x46 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x98 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x104 (=> $x98 (or false (or false (and true (or $x228 $x46)))))))
 (let (($x28 (=> (and $x158 $x98) (or false (or false (and true (or $x228 $x46)))))))
 (let (($x65 (and $x28 $x74)))
 (let (($x156 (and $x65 $x197)))
 (let (($x260 (=> $x156 $x292)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000920)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xcfa48d20)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x8d)
                     #xcfa48d24
                     #x20)
              #xcfa48d27
              #x4f)
       #xcfa48d26
       #xa4))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3ffff003)
  (define-fun input.ind-%var941X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var936X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var941X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var936X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x209 (concat ?x195 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x262 (concat ?x305 (concat ?x220 ?x209))))
 (let (($x176 (= ?x262 ?x262)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x271 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x271 (_ bv1 32))))
 (let (($x90 (=> $x156 $x176)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x238)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x5)))
 (let (($x191 (= ?x240 ?x240)))
 (let (($x185 (=> $x156 $x191)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x124))))
 (let (($x103 (= (_ bv0 32) ?x139)))
 (let ((?x54 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x54 (_ bv1 32))))
 (let (($x269 (= $x156 $x81)))
 (let (($x6 (= false false)))
 (let (($x11 (= ?x271 (_ bv0 32))))
 (let (($x173 (=> $x11 $x6)))
 (let (($x295 (= ?x54 (_ bv0 32))))
 (let (($x278 (= $x11 $x295)))
 (let (($x171 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139)))
 (let (($x213 (and (and (and (and (and $x171 $x278) $x173) $x269) $x185) $x90)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x50 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x204 (concat ?x196 ?x189))))
 (let (($x186 (= ?x270 ?x270)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x130 (_ bv1 32))))
 (let (($x283 (=> $x193 $x186)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x22)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x35)))
 (let (($x82 (= ?x296 ?x296)))
 (let (($x241 (=> $x193 $x82)))
 (let (($x44 (= $x193 $x81)))
 (let (($x267 (= ?x130 (_ bv0 32))))
 (let (($x29 (= $x267 $x295)))
 (let (($x266 (and (and (and (=> $x267 $x6) (= input.dst.llvm-%l ?x139)) $x29) $x44)))
 (let (($x187 (and (and $x266 $x241) $x283)))
 (let (($x201 (not true)))
 (let (($x21 (or (or $x201 $x187) $x213)))
 (let (($x99 (= true true)))
 (let (($x66 (and $x99 $x21)))
 (let (($x302 (= $x66 true)))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (= $x30 $x156)))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x197 (= $x135 $x11)))
 (let (($x202 (=> $x135 $x6)))
 (let (($x75 (and (and $x202 $x197) $x45)))
 (let (($x70 (= $x75 true)))
 (let (($x49 (and (and (= $x135 $x267) (= $x30 $x193)) $x202)))
 (let (($x7 (= $x49 true)))
 (let ((?x129 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x20 (= (_ bv0 3) ?x129)))
 (let (($x86 (= $x20 true)))
 (let (($x206 (= $x86 true)))
 (let (($x210 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x210 true)))
 (let (($x190 (= $x138 true)))
 (let (($x92 (= $x190 true)))
 (let (($x211 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112))))
 (let (($x150 (and true $x14)))
 (let (($x136 (and $x14 $x150)))
 (let (($x163 (= (bvand ?x139 (_ bv4294967288 32)) ?x139)))
 (let (($x232 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x132 (and $x232 $x163)))
 (let (($x143 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv4 32))) (bvult ?x98 (bvsub ?x98 (_ bv4 32))))))
 (let (($x212 (and (and (and (and (and $x150 $x143) $x232) $x132) $x136) $x211)))
 (let (($x184 (= true $x212)))
 (let (($x158 (not $x151)))
 (let (($x52 (=> $x158 $x184)))
 (let (($x180 (= $x52 true)))
 (let (($x235 (= $x180 true)))
 (let (($x26 (= $x235 true)))
 (let (($x175 (= $x158 true)))
 (let (($x170 (= $x175 true)))
 (let (($x126 (= $x170 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x155)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x169 $x121)))
 (let (($x114 (and $x118 $x120)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x166 $x114)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x31)))))))
 (let (($x137 (and $x234 $x167)))
 (let (($x183 (= $x137 true)))
 (let (($x157 (= $x183 true)))
 (let (($x63 (= $x157 true)))
 (let (($x108 (and $x63 $x126)))
 (let (($x208 (and $x108 $x26)))
 (let (($x188 (and $x208 $x92)))
 (let (($x168 (and $x188 $x206)))
 (let (($x95 (and $x168 $x7)))
 (let (($x148 (and $x95 $x70)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x80 (and $x144 $x148)))
 (let (($x97 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd ?x98 (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x106 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x97)))))))
 (let (($x233 (=> (and $x158 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x85 $x97)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x36 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x161 (=> $x36 (or false (or false (and true (or $x55 $x78)))))))
 (let (($x8 (=> (and $x158 $x36) (or false (or false (and true (or $x55 $x78)))))))
 (let (($x64 (and $x8 $x233)))
 (let (($x87 (and $x64 $x80)))
 (let (($x315 (=> $x87 $x302)))
 (not $x315)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x209 (concat ?x195 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x262 (concat ?x305 (concat ?x220 ?x209))))
 (let (($x176 (= ?x262 ?x262)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x271 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x271 (_ bv1 32))))
 (let (($x90 (=> $x156 $x176)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x238)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x5)))
 (let (($x191 (= ?x240 ?x240)))
 (let (($x185 (=> $x156 $x191)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x124))))
 (let (($x103 (= (_ bv0 32) ?x139)))
 (let ((?x54 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x54 (_ bv1 32))))
 (let (($x269 (= $x156 $x81)))
 (let (($x6 (= false false)))
 (let (($x11 (= ?x271 (_ bv0 32))))
 (let (($x173 (=> $x11 $x6)))
 (let (($x295 (= ?x54 (_ bv0 32))))
 (let (($x278 (= $x11 $x295)))
 (let (($x171 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139)))
 (let (($x213 (and (and (and (and (and $x171 $x278) $x173) $x269) $x185) $x90)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x50 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x204 (concat ?x196 ?x189))))
 (let (($x186 (= ?x270 ?x270)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x130 (_ bv1 32))))
 (let (($x283 (=> $x193 $x186)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x22)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x35)))
 (let (($x82 (= ?x296 ?x296)))
 (let (($x241 (=> $x193 $x82)))
 (let (($x44 (= $x193 $x81)))
 (let (($x267 (= ?x130 (_ bv0 32))))
 (let (($x29 (= $x267 $x295)))
 (let (($x266 (and (and (and (=> $x267 $x6) (= input.dst.llvm-%l ?x139)) $x29) $x44)))
 (let (($x187 (and (and $x266 $x241) $x283)))
 (let (($x201 (not true)))
 (let (($x21 (or (or $x201 $x187) $x213)))
 (let (($x99 (= true true)))
 (let (($x66 (and $x99 $x21)))
 (let (($x302 (= $x66 true)))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (= $x30 $x156)))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x197 (= $x135 $x11)))
 (let (($x202 (=> $x135 $x6)))
 (let (($x75 (and (and $x202 $x197) $x45)))
 (let (($x70 (= $x75 true)))
 (let (($x49 (and (and (= $x135 $x267) (= $x30 $x193)) $x202)))
 (let (($x7 (= $x49 true)))
 (let ((?x129 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x20 (= (_ bv0 3) ?x129)))
 (let (($x86 (= $x20 true)))
 (let (($x206 (= $x86 true)))
 (let (($x210 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x210 true)))
 (let (($x190 (= $x138 true)))
 (let (($x92 (= $x190 true)))
 (let (($x211 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112))))
 (let (($x150 (and true $x14)))
 (let (($x136 (and $x14 $x150)))
 (let (($x163 (= (bvand ?x139 (_ bv4294967288 32)) ?x139)))
 (let (($x232 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x132 (and $x232 $x163)))
 (let (($x143 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv4 32))) (bvult ?x98 (bvsub ?x98 (_ bv4 32))))))
 (let (($x212 (and (and (and (and (and $x150 $x143) $x232) $x132) $x136) $x211)))
 (let (($x184 (= true $x212)))
 (let (($x158 (not $x151)))
 (let (($x52 (=> $x158 $x184)))
 (let (($x180 (= $x52 true)))
 (let (($x235 (= $x180 true)))
 (let (($x26 (= $x235 true)))
 (let (($x175 (= $x158 true)))
 (let (($x170 (= $x175 true)))
 (let (($x126 (= $x170 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x155)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x169 $x121)))
 (let (($x114 (and $x118 $x120)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x166 $x114)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x31)))))))
 (let (($x137 (and $x234 $x167)))
 (let (($x183 (= $x137 true)))
 (let (($x157 (= $x183 true)))
 (let (($x63 (= $x157 true)))
 (let (($x108 (and $x63 $x126)))
 (let (($x208 (and $x108 $x26)))
 (let (($x188 (and $x208 $x92)))
 (let (($x168 (and $x188 $x206)))
 (let (($x95 (and $x168 $x7)))
 (let (($x148 (and $x95 $x70)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x80 (and $x144 $x148)))
 (let (($x97 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd ?x98 (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x106 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x97)))))))
 (let (($x233 (=> (and $x158 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x85 $x97)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x36 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x161 (=> $x36 (or false (or false (and true (or $x55 $x78)))))))
 (let (($x8 (=> (and $x158 $x36) (or false (or false (and true (or $x55 $x78)))))))
 (let (($x64 (and $x8 $x233)))
 (let (($x87 (and $x64 $x80)))
 (let (($x315 (=> $x87 $x302)))
 (not $x315)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var941X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var936X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000920)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xcfa48d20)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x8d)
                     #xcfa48d24
                     #x20)
              #xcfa48d27
              #x4f)
       #xcfa48d26
       #xa4))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3ffff003)
  (define-fun input.ind-%var941X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var936X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x364 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x371 (concat ?x370 (concat ?x367 ?x365))))
 (let (($x372 (= ?x371 ?x371)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x181 (_ bv1 32))))
 (let (($x373 (=> $x90 $x372)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x352)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x355)))
 (let (($x359 (= ?x358 ?x358)))
 (let (($x360 (=> $x90 $x359)))
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x17))))
 (let (($x40 (= (_ bv0 32) ?x123)))
 (let ((?x259 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x259 (_ bv1 32))))
 (let (($x347 (= $x90 $x25)))
 (let (($x49 (= false false)))
 (let (($x262 (= ?x181 (_ bv0 32))))
 (let (($x346 (=> $x262 $x49)))
 (let (($x279 (= ?x259 (_ bv0 32))))
 (let (($x345 (= $x262 $x279)))
 (let (($x344 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x123)))
 (let (($x378 (and (and (and (and (and $x344 $x345) $x346) $x347) $x360) $x373)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x330 (concat ?x329 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x336 (concat ?x335 (concat ?x332 ?x330))))
 (let (($x337 (= ?x336 ?x336)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x30 (_ bv1 32))))
 (let (($x338 (=> $x6 $x337)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x91)))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x322)))
 (let (($x324 (= ?x323 ?x323)))
 (let (($x325 (=> $x6 $x324)))
 (let (($x182 (= $x6 $x25)))
 (let (($x193 (= ?x30 (_ bv0 32))))
 (let (($x24 (= $x193 $x279)))
 (let (($x341 (and (and (and (=> $x193 $x49) (= input.dst.llvm-%l ?x123)) $x24) $x182)))
 (let (($x343 (and (and $x341 $x325) $x338)))
 (let (($x287 (not true)))
 (let (($x380 (or (or $x287 $x343) $x378)))
 (let (($x284 (= true true)))
 (let (($x381 (and $x284 $x380)))
 (let (($x382 (= $x381 true)))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x280))))
 (let ((?x285 (bvadd ?x307 (_ bv4 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x263))))
 (let (($x225 (= (_ bv0 32) ?x221)))
 (let ((?x249 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x249 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x310 (= $x238 $x258)))
 (let (($x22 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x241 (and $x159 $x22)))
 (let (($x317 (=> $x241 $x310)))
 (let (($x227 (= ?x249 (_ bv0 32))))
 (let (($x187 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x273 (= $x187 $x227)))
 (let (($x286 (=> $x241 $x273)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x306))))
 (let (($x216 (= input.spec-%var-l-1.2.1.2.0 ?x218)))
 (let (($x219 (=> $x241 $x216)))
 (let (($x224 (= (_ bv0 32) ?x307)))
 (let ((?x252 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x252 (_ bv1 32))))
 (let (($x250 (= $x22 $x84)))
 (let (($x251 (=> $x159 $x250)))
 (let (($x245 (= ?x252 (_ bv0 32))))
 (let (($x147 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x288 (= $x147 $x245)))
 (let (($x222 (=> $x159 $x288)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x230 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x230) (concat ?x10 (concat ?x302 ?x21)))))
 (let (($x294 (= input.spec-%var-l-1.2.0 ?x272)))
 (let (($x293 (=> $x159 $x294)))
 (let (($x213 (= $x159 $x90)))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x176 (= $x130 $x262)))
 (let (($x277 (and (and (and (=> $x130 $x49) (=> (and $x159 $x147) $x49)) $x176) $x213)))
 (let (($x253 (and (and (and (and (and (and $x277 $x293) $x222) $x251) $x219) $x286) $x317)))
 (let (($x255 (= $x253 true)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x295 (concat ?x54 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x38 (concat ?x266 (concat ?x205 ?x295))))
 (let ((?x101 (bvadd ?x38 (_ bv4 32))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x173))))
 (let (($x133 (= (_ bv0 32) ?x194)))
 (let ((?x304 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x304 (_ bv1 32))))
 (let (($x240 (= $x238 $x5)))
 (let (($x191 (=> $x241 $x240)))
 (let (($x192 (= ?x304 (_ bv0 32))))
 (let (($x16 (= $x187 $x192)))
 (let (($x141 (=> $x241 $x16)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x203))))
 (let (($x270 (= input.spec-%var-l-1.2.1.2.0 ?x9)))
 (let (($x186 (=> $x241 $x270)))
 (let (($x68 (= (_ bv0 32) ?x38)))
 (let ((?x110 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x35 (bvuge ?x110 (_ bv1 32))))
 (let (($x296 (= $x22 $x35)))
 (let (($x82 (=> $x159 $x296)))
 (let (($x47 (and $x159 $x147)))
 (let (($x33 (=> $x47 $x49)))
 (let (($x61 (= ?x110 (_ bv0 32))))
 (let (($x142 (= $x147 $x61)))
 (let (($x140 (=> $x159 $x142)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x75)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x80)))
 (let (($x99 (=> $x159 $x87)))
 (let (($x199 (and (and (and (and (= $x130 $x193) (= $x159 $x6)) (=> $x130 $x49)) $x99) $x140)))
 (let (($x195 (and (and (and (and (and $x199 $x33) $x82) $x186) $x141) $x191)))
 (let (($x15 (= $x195 true)))
 (let ((?x206 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x168 (= (_ bv0 3) ?x206)))
 (let (($x172 (= $x168 true)))
 (let (($x135 (= $x172 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x92 true)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x229 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x236 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72))))
 (let (($x23 (and true $x236)))
 (let (($x136 (and $x236 $x23)))
 (let (($x132 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x261 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x242 (and $x261 $x132)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv4 32))) (bvult ?x36 (bvsub ?x36 (_ bv4 32))))))
 (let (($x180 (and (and (and (and (and $x23 $x76) $x261) $x242) $x136) $x229)))
 (let (($x235 (= true $x180)))
 (let (($x158 (not $x151)))
 (let (($x26 (=> $x158 $x235)))
 (let (($x208 (= $x26 true)))
 (let (($x237 (= $x208 true)))
 (let (($x210 (= $x237 true)))
 (let (($x108 (= $x158 true)))
 (let (($x71 (= $x108 true)))
 (let (($x112 (= $x71 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x167)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x118 $x120)))
 (let (($x183 (and $x114 $x137)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x109 $x183)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x152)))))))
 (let (($x63 (and $x121 $x157)))
 (let (($x175 (= $x63 true)))
 (let (($x170 (= $x175 true)))
 (let (($x126 (= $x170 true)))
 (let (($x179 (and $x126 $x112)))
 (let (($x138 (and $x179 $x210)))
 (let (($x20 (and $x138 $x129)))
 (let (($x41 (and $x20 $x135)))
 (let (($x209 (and $x41 $x15)))
 (let (($x314 (and $x209 $x255)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x301 (and $x162 $x314)))
 (let (($x74 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd ?x36 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x144 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x74)))))))
 (let (($x59 (=> (and $x158 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x105 $x74)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x134 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32))) (or false (or false (and true (or $x104 $x28)))))))
 (let (($x56 (=> (and $x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32)))) (or false (or false (and true (or $x104 $x28)))))))
 (let (($x12 (and $x56 $x59)))
 (let (($x275 (and $x12 $x301)))
 (let (($x383 (=> $x275 $x382)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x364 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x371 (concat ?x370 (concat ?x367 ?x365))))
 (let (($x372 (= ?x371 ?x371)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x181 (_ bv1 32))))
 (let (($x373 (=> $x90 $x372)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x352)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x355)))
 (let (($x359 (= ?x358 ?x358)))
 (let (($x360 (=> $x90 $x359)))
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x17))))
 (let (($x40 (= (_ bv0 32) ?x123)))
 (let ((?x259 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x259 (_ bv1 32))))
 (let (($x347 (= $x90 $x25)))
 (let (($x49 (= false false)))
 (let (($x262 (= ?x181 (_ bv0 32))))
 (let (($x346 (=> $x262 $x49)))
 (let (($x279 (= ?x259 (_ bv0 32))))
 (let (($x345 (= $x262 $x279)))
 (let (($x344 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x123)))
 (let (($x378 (and (and (and (and (and $x344 $x345) $x346) $x347) $x360) $x373)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x330 (concat ?x329 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x336 (concat ?x335 (concat ?x332 ?x330))))
 (let (($x337 (= ?x336 ?x336)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x30 (_ bv1 32))))
 (let (($x338 (=> $x6 $x337)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x91)))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x322)))
 (let (($x324 (= ?x323 ?x323)))
 (let (($x325 (=> $x6 $x324)))
 (let (($x182 (= $x6 $x25)))
 (let (($x193 (= ?x30 (_ bv0 32))))
 (let (($x24 (= $x193 $x279)))
 (let (($x341 (and (and (and (=> $x193 $x49) (= input.dst.llvm-%l ?x123)) $x24) $x182)))
 (let (($x343 (and (and $x341 $x325) $x338)))
 (let (($x287 (not true)))
 (let (($x380 (or (or $x287 $x343) $x378)))
 (let (($x284 (= true true)))
 (let (($x381 (and $x284 $x380)))
 (let (($x382 (= $x381 true)))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x280))))
 (let ((?x285 (bvadd ?x307 (_ bv4 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x263))))
 (let (($x225 (= (_ bv0 32) ?x221)))
 (let ((?x249 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x249 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x310 (= $x238 $x258)))
 (let (($x22 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x241 (and $x159 $x22)))
 (let (($x317 (=> $x241 $x310)))
 (let (($x227 (= ?x249 (_ bv0 32))))
 (let (($x187 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x273 (= $x187 $x227)))
 (let (($x286 (=> $x241 $x273)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x306))))
 (let (($x216 (= input.spec-%var-l-1.2.1.2.0 ?x218)))
 (let (($x219 (=> $x241 $x216)))
 (let (($x224 (= (_ bv0 32) ?x307)))
 (let ((?x252 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x252 (_ bv1 32))))
 (let (($x250 (= $x22 $x84)))
 (let (($x251 (=> $x159 $x250)))
 (let (($x245 (= ?x252 (_ bv0 32))))
 (let (($x147 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x288 (= $x147 $x245)))
 (let (($x222 (=> $x159 $x288)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x230 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x230) (concat ?x10 (concat ?x302 ?x21)))))
 (let (($x294 (= input.spec-%var-l-1.2.0 ?x272)))
 (let (($x293 (=> $x159 $x294)))
 (let (($x213 (= $x159 $x90)))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x176 (= $x130 $x262)))
 (let (($x277 (and (and (and (=> $x130 $x49) (=> (and $x159 $x147) $x49)) $x176) $x213)))
 (let (($x253 (and (and (and (and (and (and $x277 $x293) $x222) $x251) $x219) $x286) $x317)))
 (let (($x255 (= $x253 true)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x295 (concat ?x54 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x38 (concat ?x266 (concat ?x205 ?x295))))
 (let ((?x101 (bvadd ?x38 (_ bv4 32))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x173))))
 (let (($x133 (= (_ bv0 32) ?x194)))
 (let ((?x304 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x304 (_ bv1 32))))
 (let (($x240 (= $x238 $x5)))
 (let (($x191 (=> $x241 $x240)))
 (let (($x192 (= ?x304 (_ bv0 32))))
 (let (($x16 (= $x187 $x192)))
 (let (($x141 (=> $x241 $x16)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x203))))
 (let (($x270 (= input.spec-%var-l-1.2.1.2.0 ?x9)))
 (let (($x186 (=> $x241 $x270)))
 (let (($x68 (= (_ bv0 32) ?x38)))
 (let ((?x110 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x35 (bvuge ?x110 (_ bv1 32))))
 (let (($x296 (= $x22 $x35)))
 (let (($x82 (=> $x159 $x296)))
 (let (($x47 (and $x159 $x147)))
 (let (($x33 (=> $x47 $x49)))
 (let (($x61 (= ?x110 (_ bv0 32))))
 (let (($x142 (= $x147 $x61)))
 (let (($x140 (=> $x159 $x142)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x75)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x80)))
 (let (($x99 (=> $x159 $x87)))
 (let (($x199 (and (and (and (and (= $x130 $x193) (= $x159 $x6)) (=> $x130 $x49)) $x99) $x140)))
 (let (($x195 (and (and (and (and (and $x199 $x33) $x82) $x186) $x141) $x191)))
 (let (($x15 (= $x195 true)))
 (let ((?x206 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x168 (= (_ bv0 3) ?x206)))
 (let (($x172 (= $x168 true)))
 (let (($x135 (= $x172 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x92 true)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x229 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x236 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72))))
 (let (($x23 (and true $x236)))
 (let (($x136 (and $x236 $x23)))
 (let (($x132 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x261 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x242 (and $x261 $x132)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv4 32))) (bvult ?x36 (bvsub ?x36 (_ bv4 32))))))
 (let (($x180 (and (and (and (and (and $x23 $x76) $x261) $x242) $x136) $x229)))
 (let (($x235 (= true $x180)))
 (let (($x158 (not $x151)))
 (let (($x26 (=> $x158 $x235)))
 (let (($x208 (= $x26 true)))
 (let (($x237 (= $x208 true)))
 (let (($x210 (= $x237 true)))
 (let (($x108 (= $x158 true)))
 (let (($x71 (= $x108 true)))
 (let (($x112 (= $x71 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x167)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x118 $x120)))
 (let (($x183 (and $x114 $x137)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x109 $x183)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x152)))))))
 (let (($x63 (and $x121 $x157)))
 (let (($x175 (= $x63 true)))
 (let (($x170 (= $x175 true)))
 (let (($x126 (= $x170 true)))
 (let (($x179 (and $x126 $x112)))
 (let (($x138 (and $x179 $x210)))
 (let (($x20 (and $x138 $x129)))
 (let (($x41 (and $x20 $x135)))
 (let (($x209 (and $x41 $x15)))
 (let (($x314 (and $x209 $x255)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x301 (and $x162 $x314)))
 (let (($x74 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd ?x36 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x144 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x74)))))))
 (let (($x59 (=> (and $x158 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x105 $x74)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x134 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32))) (or false (or false (and true (or $x104 $x28)))))))
 (let (($x56 (=> (and $x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32)))) (or false (or false (and true (or $x104 $x28)))))))
 (let (($x12 (and $x56 $x59)))
 (let (($x275 (and $x12 $x301)))
 (let (($x383 (=> $x275 $x382)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var941X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var936X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff00)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x5170f0fd)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf0f0f0f0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5170f0f8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x70)
                                #x5170f0f9
                                #x3b)
                         #x5170f102
                         #xf0)
                  #x5170f0f3
                  #xf0)))
(let ((a!2 (store (store (store (store a!1 #x5170f100 #xf0) #xf03bf0f5 #xf0)
                         #x5170f0fe
                         #x3b)
                  #x5170f0fc
                  #xf0)))
(let ((a!3 (store (store (store (store a!2 #x5170f0ff #xf0) #xf03bf0f3 #xf0)
                         #x5170f0fd
                         #xf0)
                  #x5170f0f4
                  #xf0)))
(let ((a!4 (store (store (store (store a!3 #x5170f101 #xf0) #x5170f0fb #xf0)
                         #x5170f0f5
                         #xf0)
                  #x5170f104
                  #x51)))
(let ((a!5 (store (store (store (store a!4 #x5170f0f6 #x3a) #x5170f0fd #xf0)
                         #x5170f0f2
                         #xf0)
                  #x5170f0f1
                  #xf0)))
(let ((a!6 (store (store (store (store a!5 #xf03bf0f6 #xf2) #x5170f0fa #xf0)
                         #xf03bf0f0
                         #xf0)
                  #x5170f0fe
                  #x3b)))
(let ((a!7 (store (store (store (store a!6 #x5170f0f8 #xf0) #xf03bf0f2 #xf0)
                         #xf03bf0f1
                         #xf0)
                  #x5170f0f0
                  #xf0)))
  (store (store a!7 #xf03bf0f4 #xf0) #x5170f0ff #xf0)))))))))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf0f03bf0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff03)
  (define-fun input.ind-%var941X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var936X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x522 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x528 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x529 (concat ?x528 (concat ?x525 ?x523))))
 (let (($x530 (= ?x529 ?x529)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x182 (_ bv1 32))))
 (let (($x531 (=> $x67 $x530)))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x510)))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x513)))
 (let (($x517 (= ?x516 ?x516)))
 (let (($x518 (=> $x67 $x517)))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x124))))
 (let (($x465 (= (_ bv0 32) ?x123)))
 (let ((?x466 (ite $x465 (_ bv0 32) (_ bv1 32))))
 (let (($x469 (bvuge ?x466 (_ bv1 32))))
 (let (($x505 (= $x67 $x469)))
 (let (($x7 (= false false)))
 (let (($x341 (= ?x182 (_ bv0 32))))
 (let (($x504 (=> $x341 $x7)))
 (let (($x467 (= ?x466 (_ bv0 32))))
 (let (($x503 (= $x341 $x467)))
 (let (($x502 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x123)))
 (let (($x536 (and (and (and (and (and $x502 $x503) $x504) $x505) $x518) $x531)))
 (let ((?x487 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x487 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x490 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x494 (concat ?x493 (concat ?x490 ?x488))))
 (let (($x495 (= ?x494 ?x494)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x297 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x297 (_ bv1 32))))
 (let (($x496 (=> $x185 $x495)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x475)))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x478)))
 (let (($x482 (= ?x481 ?x481)))
 (let (($x483 (=> $x185 $x482)))
 (let (($x470 (= $x185 $x469)))
 (let (($x159 (= ?x297 (_ bv0 32))))
 (let (($x468 (= $x159 $x467)))
 (let (($x499 (and (and (and (=> $x159 $x7) (= input.dst.llvm-%l ?x123)) $x468) $x470)))
 (let (($x501 (and (and $x499 $x483) $x496)))
 (let (($x462 (not true)))
 (let (($x538 (or (or $x462 $x501) $x536)))
 (let (($x461 (= true true)))
 (let (($x539 (and $x461 $x538)))
 (let (($x540 (= $x539 true)))
 (let ((?x149 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x331))))
 (let ((?x352 (bvadd ?x333 (_ bv4 32))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x360))))
 (let ((?x389 (bvadd ?x367 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x393))))
 (let ((?x420 (bvadd ?x399 (_ bv4 32))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x424))))
 (let (($x431 (= (_ bv0 32) ?x430)))
 (let ((?x432 (ite $x431 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (bvuge ?x432 (_ bv1 32))))
 (let (($x249 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x437 (= $x249 $x436)))
 (let (($x280 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x133 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x47 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x35 (and $x202 $x47)))
 (let (($x238 (and $x35 $x133)))
 (let (($x252 (and $x238 $x280)))
 (let (($x438 (=> $x252 $x437)))
 (let (($x433 (= ?x432 (_ bv0 32))))
 (let (($x13 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x434 (= $x13 $x433)))
 (let (($x435 (=> $x252 $x434)))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x411))))
 (let (($x418 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x417)))
 (let (($x419 (=> $x252 $x418)))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x401 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x401 (_ bv1 32))))
 (let (($x406 (= $x280 $x405)))
 (let (($x407 (=> $x238 $x406)))
 (let (($x402 (= ?x401 (_ bv0 32))))
 (let (($x165 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x403 (= $x165 $x402)))
 (let (($x404 (=> $x238 $x403)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x382))))
 (let (($x387 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x386)))
 (let (($x388 (=> $x238 $x387)))
 (let (($x363 (= (_ bv0 32) ?x367)))
 (let ((?x364 (ite $x363 (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x364 (_ bv1 32))))
 (let (($x372 (= $x133 $x371)))
 (let (($x373 (=> $x35 $x372)))
 (let (($x362 (= ?x364 (_ bv0 32))))
 (let (($x9 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x365 (= $x9 $x362)))
 (let (($x368 (=> $x35 $x365)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x376))))
 (let (($x351 (= input.spec-%var-l-1.2.1.2.0 ?x350)))
 (let (($x349 (=> $x35 $x351)))
 (let (($x336 (= (_ bv0 32) ?x333)))
 (let ((?x337 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x337 (_ bv1 32))))
 (let (($x345 (= $x47 $x344)))
 (let (($x374 (=> $x202 $x345)))
 (let (($x338 (= ?x337 (_ bv0 32))))
 (let (($x201 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x201 $x338)))
 (let (($x379 (=> $x202 $x343)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x28) (concat ?x91 (concat ?x79 ?x73)))))
 (let (($x325 (= input.spec-%var-l-1.2.0 ?x324)))
 (let (($x342 (=> $x202 $x325)))
 (let (($x154 (= $x202 $x67)))
 (let (($x57 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x319 (= $x57 $x341)))
 (let (($x221 (and $x252 $x13)))
 (let (($x225 (=> $x221 $x7)))
 (let (($x69 (and $x238 $x165)))
 (let (($x282 (=> $x69 $x7)))
 (let (($x141 (and $x35 $x9)))
 (let (($x43 (=> $x141 $x7)))
 (let (($x441 (and (and (and (=> $x57 $x7) (=> (and $x202 $x201) $x7)) $x43) $x282)))
 (let (($x447 (and (and (and (and (and (and $x441 $x225) $x319) $x154) $x342) $x379) $x374)))
 (let (($x453 (and (and (and (and (and (and $x447 $x349) $x368) $x373) $x388) $x404) $x407)))
 (let (($x456 (and (and (and $x453 $x419) $x435) $x438)))
 (let (($x457 (= $x456 true)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x29 (concat ?x266 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x295 (concat ?x103 ?x29))))
 (let ((?x270 (bvadd ?x81 (_ bv4 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x187))))
 (let ((?x53 (bvadd ?x278 (_ bv4 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem ?x53))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv2 32))) ?x21))))
 (let ((?x306 (bvadd ?x311 (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x219))))
 (let (($x37 (= (_ bv0 32) ?x274)))
 (let ((?x290 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x290 (_ bv1 32))))
 (let (($x273 (= $x249 $x227)))
 (let (($x286 (=> $x252 $x273)))
 (let (($x93 (= ?x290 (_ bv0 32))))
 (let (($x263 (= $x13 $x93)))
 (let (($x313 (=> $x252 $x263)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x84))))
 (let (($x309 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x243)))
 (let (($x226 (=> $x252 $x309)))
 (let (($x244 (= (_ bv0 32) ?x311)))
 (let ((?x303 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x303 (_ bv1 32))))
 (let (($x307 (= $x280 $x264)))
 (let (($x224 (=> $x238 $x307)))
 (let (($x58 (= ?x303 (_ bv0 32))))
 (let (($x217 (= $x165 $x58)))
 (let (($x308 (=> $x238 $x217)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x15))))
 (let (($x90 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x291)))
 (let (($x213 (=> $x238 $x90)))
 (let (($x207 (= (_ bv0 32) ?x278)))
 (let ((?x171 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x171 (_ bv1 32))))
 (let (($x192 (= $x133 $x304)))
 (let (($x16 (=> $x35 $x192)))
 (let (($x173 (= ?x171 (_ bv0 32))))
 (let (($x292 (= $x9 $x173)))
 (let (($x194 (=> $x35 $x292)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x268))))
 (let (($x89 (= input.spec-%var-l-1.2.1.2.0 ?x204)))
 (let (($x203 (=> $x35 $x89)))
 (let (($x38 (= (_ bv0 32) ?x81)))
 (let ((?x68 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x68 (_ bv1 32))))
 (let (($x305 (= $x47 $x33)))
 (let (($x22 (=> $x202 $x305)))
 (let (($x140 (and $x202 $x201)))
 (let (($x199 (=> $x140 $x7)))
 (let (($x110 (= ?x68 (_ bv0 32))))
 (let (($x61 (= $x201 $x110)))
 (let (($x142 (=> $x202 $x61)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x45)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x271)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x80)))
 (let (($x99 (=> $x202 $x87)))
 (let (($x317 (and (and (and (and (= $x57 $x159) (= $x202 $x185)) (=> $x57 $x7)) $x99) $x142)))
 (let (($x284 (and (and (and (and (and (and $x317 $x199) $x22) $x203) $x194) $x16) $x43)))
 (let (($x259 (and (and (and (and (and (and $x284 $x213) $x308) $x282) $x224) $x226) $x313)))
 (let (($x24 (and (and $x259 $x225) $x286)))
 (let (($x340 (= $x24 true)))
 (let ((?x172 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x135 (= (_ bv0 3) ?x172)))
 (let (($x41 (= $x135 true)))
 (let (($x131 (= $x41 true)))
 (let (($x200 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let (($x86 (= $x20 true)))
 (let (($x52 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x150 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x150) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x150))))
 (let (($x51 (and true $x143)))
 (let (($x184 (and $x143 $x51)))
 (let (($x132 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x212 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x242 (and $x212 $x132)))
 (let (($x232 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x26 (and (and (and (and (and $x51 $x232) $x212) $x242) $x184) $x52)))
 (let (($x208 (= true $x26)))
 (let (($x62 (not $x32)))
 (let (($x237 (=> $x62 $x208)))
 (let (($x210 (= $x237 true)))
 (let (($x138 (= $x210 true)))
 (let (($x190 (= $x138 true)))
 (let (($x112 (= $x62 true)))
 (let (($x179 (= $x112 true)))
 (let (($x14 (= $x179 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x183)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x120 $x167)))
 (let (($x63 (and $x137 $x157)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x162 $x63)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x113)))))))
 (let (($x170 (and $x155 $x175)))
 (let (($x126 (= $x170 true)))
 (let (($x108 (= $x126 true)))
 (let (($x71 (= $x108 true)))
 (let (($x72 (and $x71 $x14)))
 (let (($x92 (and $x72 $x190)))
 (let (($x206 (and $x92 $x86)))
 (let (($x130 (and $x206 $x131)))
 (let (($x25 (and $x130 $x340)))
 (let (($x458 (and $x25 $x457)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x459 (and $x59 $x458)))
 (let (($x65 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd ?x48 (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x64 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x65)))))))
 (let (($x97 (=> (and $x62 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x74 $x65)))))))
 (let (($x161 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x85 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x149 (_ bv1 32))) (or false (or false (and true (or $x94 $x161)))))))
 (let (($x88 (=> (and $x62 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x149 (_ bv1 32)))) (or false (or false (and true (or $x94 $x161)))))))
 (let (($x100 (and $x88 $x97)))
 (let (($x460 (and $x100 $x459)))
 (let (($x541 (=> $x460 $x540)))
 (not $x541))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var941X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var936X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x522 (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv4 32))))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x528 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var941X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x529 (concat ?x528 (concat ?x525 ?x523))))
 (let (($x530 (= ?x529 ?x529)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x182 (_ bv1 32))))
 (let (($x531 (=> $x67 $x530)))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var941X))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv2 32))) ?x510)))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd input.ind-%var941X (_ bv3 32))) ?x513)))
 (let (($x517 (= ?x516 ?x516)))
 (let (($x518 (=> $x67 $x517)))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x124))))
 (let (($x465 (= (_ bv0 32) ?x123)))
 (let ((?x466 (ite $x465 (_ bv0 32) (_ bv1 32))))
 (let (($x469 (bvuge ?x466 (_ bv1 32))))
 (let (($x505 (= $x67 $x469)))
 (let (($x7 (= false false)))
 (let (($x341 (= ?x182 (_ bv0 32))))
 (let (($x504 (=> $x341 $x7)))
 (let (($x467 (= ?x466 (_ bv0 32))))
 (let (($x503 (= $x341 $x467)))
 (let (($x502 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x123)))
 (let (($x536 (and (and (and (and (and $x502 $x503) $x504) $x505) $x518) $x531)))
 (let ((?x487 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x487 (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv4 32))))))
 (let ((?x490 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var936X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x494 (concat ?x493 (concat ?x490 ?x488))))
 (let (($x495 (= ?x494 ?x494)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x297 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x297 (_ bv1 32))))
 (let (($x496 (=> $x185 $x495)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var936X))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv2 32))) ?x475)))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var936X (_ bv3 32))) ?x478)))
 (let (($x482 (= ?x481 ?x481)))
 (let (($x483 (=> $x185 $x482)))
 (let (($x470 (= $x185 $x469)))
 (let (($x159 (= ?x297 (_ bv0 32))))
 (let (($x468 (= $x159 $x467)))
 (let (($x499 (and (and (and (=> $x159 $x7) (= input.dst.llvm-%l ?x123)) $x468) $x470)))
 (let (($x501 (and (and $x499 $x483) $x496)))
 (let (($x462 (not true)))
 (let (($x538 (or (or $x462 $x501) $x536)))
 (let (($x461 (= true true)))
 (let (($x539 (and $x461 $x538)))
 (let (($x540 (= $x539 true)))
 (let ((?x149 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x331))))
 (let ((?x352 (bvadd ?x333 (_ bv4 32))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x360))))
 (let ((?x389 (bvadd ?x367 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x393))))
 (let ((?x420 (bvadd ?x399 (_ bv4 32))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x424))))
 (let (($x431 (= (_ bv0 32) ?x430)))
 (let ((?x432 (ite $x431 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (bvuge ?x432 (_ bv1 32))))
 (let (($x249 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x437 (= $x249 $x436)))
 (let (($x280 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x133 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x47 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x35 (and $x202 $x47)))
 (let (($x238 (and $x35 $x133)))
 (let (($x252 (and $x238 $x280)))
 (let (($x438 (=> $x252 $x437)))
 (let (($x433 (= ?x432 (_ bv0 32))))
 (let (($x13 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x434 (= $x13 $x433)))
 (let (($x435 (=> $x252 $x434)))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x411))))
 (let (($x418 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x417)))
 (let (($x419 (=> $x252 $x418)))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x401 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x401 (_ bv1 32))))
 (let (($x406 (= $x280 $x405)))
 (let (($x407 (=> $x238 $x406)))
 (let (($x402 (= ?x401 (_ bv0 32))))
 (let (($x165 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x403 (= $x165 $x402)))
 (let (($x404 (=> $x238 $x403)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x382))))
 (let (($x387 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x386)))
 (let (($x388 (=> $x238 $x387)))
 (let (($x363 (= (_ bv0 32) ?x367)))
 (let ((?x364 (ite $x363 (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x364 (_ bv1 32))))
 (let (($x372 (= $x133 $x371)))
 (let (($x373 (=> $x35 $x372)))
 (let (($x362 (= ?x364 (_ bv0 32))))
 (let (($x9 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x365 (= $x9 $x362)))
 (let (($x368 (=> $x35 $x365)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x376))))
 (let (($x351 (= input.spec-%var-l-1.2.1.2.0 ?x350)))
 (let (($x349 (=> $x35 $x351)))
 (let (($x336 (= (_ bv0 32) ?x333)))
 (let ((?x337 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x337 (_ bv1 32))))
 (let (($x345 (= $x47 $x344)))
 (let (($x374 (=> $x202 $x345)))
 (let (($x338 (= ?x337 (_ bv0 32))))
 (let (($x201 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x201 $x338)))
 (let (($x379 (=> $x202 $x343)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x28) (concat ?x91 (concat ?x79 ?x73)))))
 (let (($x325 (= input.spec-%var-l-1.2.0 ?x324)))
 (let (($x342 (=> $x202 $x325)))
 (let (($x154 (= $x202 $x67)))
 (let (($x57 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x319 (= $x57 $x341)))
 (let (($x221 (and $x252 $x13)))
 (let (($x225 (=> $x221 $x7)))
 (let (($x69 (and $x238 $x165)))
 (let (($x282 (=> $x69 $x7)))
 (let (($x141 (and $x35 $x9)))
 (let (($x43 (=> $x141 $x7)))
 (let (($x441 (and (and (and (=> $x57 $x7) (=> (and $x202 $x201) $x7)) $x43) $x282)))
 (let (($x447 (and (and (and (and (and (and $x441 $x225) $x319) $x154) $x342) $x379) $x374)))
 (let (($x453 (and (and (and (and (and (and $x447 $x349) $x368) $x373) $x388) $x404) $x407)))
 (let (($x456 (and (and (and $x453 $x419) $x435) $x438)))
 (let (($x457 (= $x456 true)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x29 (concat ?x266 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x81 (concat ?x295 (concat ?x103 ?x29))))
 (let ((?x270 (bvadd ?x81 (_ bv4 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x187))))
 (let ((?x53 (bvadd ?x278 (_ bv4 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem ?x53))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv2 32))) ?x21))))
 (let ((?x306 (bvadd ?x311 (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x219))))
 (let (($x37 (= (_ bv0 32) ?x274)))
 (let ((?x290 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x290 (_ bv1 32))))
 (let (($x273 (= $x249 $x227)))
 (let (($x286 (=> $x252 $x273)))
 (let (($x93 (= ?x290 (_ bv0 32))))
 (let (($x263 (= $x13 $x93)))
 (let (($x313 (=> $x252 $x263)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x84))))
 (let (($x309 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x243)))
 (let (($x226 (=> $x252 $x309)))
 (let (($x244 (= (_ bv0 32) ?x311)))
 (let ((?x303 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x303 (_ bv1 32))))
 (let (($x307 (= $x280 $x264)))
 (let (($x224 (=> $x238 $x307)))
 (let (($x58 (= ?x303 (_ bv0 32))))
 (let (($x217 (= $x165 $x58)))
 (let (($x308 (=> $x238 $x217)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x15))))
 (let (($x90 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x291)))
 (let (($x213 (=> $x238 $x90)))
 (let (($x207 (= (_ bv0 32) ?x278)))
 (let ((?x171 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x171 (_ bv1 32))))
 (let (($x192 (= $x133 $x304)))
 (let (($x16 (=> $x35 $x192)))
 (let (($x173 (= ?x171 (_ bv0 32))))
 (let (($x292 (= $x9 $x173)))
 (let (($x194 (=> $x35 $x292)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x268))))
 (let (($x89 (= input.spec-%var-l-1.2.1.2.0 ?x204)))
 (let (($x203 (=> $x35 $x89)))
 (let (($x38 (= (_ bv0 32) ?x81)))
 (let ((?x68 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x68 (_ bv1 32))))
 (let (($x305 (= $x47 $x33)))
 (let (($x22 (=> $x202 $x305)))
 (let (($x140 (and $x202 $x201)))
 (let (($x199 (=> $x140 $x7)))
 (let (($x110 (= ?x68 (_ bv0 32))))
 (let (($x61 (= $x201 $x110)))
 (let (($x142 (=> $x202 $x61)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x45)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x271)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x80)))
 (let (($x99 (=> $x202 $x87)))
 (let (($x317 (and (and (and (and (= $x57 $x159) (= $x202 $x185)) (=> $x57 $x7)) $x99) $x142)))
 (let (($x284 (and (and (and (and (and (and $x317 $x199) $x22) $x203) $x194) $x16) $x43)))
 (let (($x259 (and (and (and (and (and (and $x284 $x213) $x308) $x282) $x224) $x226) $x313)))
 (let (($x24 (and (and $x259 $x225) $x286)))
 (let (($x340 (= $x24 true)))
 (let ((?x172 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x135 (= (_ bv0 3) ?x172)))
 (let (($x41 (= $x135 true)))
 (let (($x131 (= $x41 true)))
 (let (($x200 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let (($x86 (= $x20 true)))
 (let (($x52 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x150 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x150) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x150))))
 (let (($x51 (and true $x143)))
 (let (($x184 (and $x143 $x51)))
 (let (($x132 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x212 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x242 (and $x212 $x132)))
 (let (($x232 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x26 (and (and (and (and (and $x51 $x232) $x212) $x242) $x184) $x52)))
 (let (($x208 (= true $x26)))
 (let (($x62 (not $x32)))
 (let (($x237 (=> $x62 $x208)))
 (let (($x210 (= $x237 true)))
 (let (($x138 (= $x210 true)))
 (let (($x190 (= $x138 true)))
 (let (($x112 (= $x62 true)))
 (let (($x179 (= $x112 true)))
 (let (($x14 (= $x179 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x183)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x120 $x167)))
 (let (($x63 (and $x137 $x157)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x162 $x63)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x113)))))))
 (let (($x170 (and $x155 $x175)))
 (let (($x126 (= $x170 true)))
 (let (($x108 (= $x126 true)))
 (let (($x71 (= $x108 true)))
 (let (($x72 (and $x71 $x14)))
 (let (($x92 (and $x72 $x190)))
 (let (($x206 (and $x92 $x86)))
 (let (($x130 (and $x206 $x131)))
 (let (($x25 (and $x130 $x340)))
 (let (($x458 (and $x25 $x457)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x459 (and $x59 $x458)))
 (let (($x65 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd ?x48 (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x64 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x65)))))))
 (let (($x97 (=> (and $x62 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x74 $x65)))))))
 (let (($x161 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x85 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x149 (_ bv1 32))) (or false (or false (and true (or $x94 $x161)))))))
 (let (($x88 (=> (and $x62 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x149 (_ bv1 32)))) (or false (or false (and true (or $x94 $x161)))))))
 (let (($x100 (and $x88 $x97)))
 (let (($x460 (and $x100 $x459)))
 (let (($x541 (=> $x460 $x540)))
 (not $x541))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var941X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var936X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfff8ffff) #x00
    (ite (= x!0 #xfff90006) #xff
    (ite (= x!0 #x00000006) #xf8
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xfff90001) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #xfff90005) #xff
    (ite (= x!0 #xfff90003) #xf8
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfff90004) #xff
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #xff
    (ite (= x!0 #xfff90002) #x00
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xfff90000) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var941X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var936X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x77))))
 (let ((?x197 ((_ extract 2 0) ?x125)))
 (let (($x148 (= (_ bv0 3) ?x197)))
 (let (($x156 (= $x148 true)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x202 (ite $x6 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x202 (_ bv1 32))))
 (let (($x299 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x260 (= $x299 $x7)))
 (let (($x185 (= ?x202 (_ bv0 32))))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x49 (= $x297 $x185)))
 (let (($x258 (and $x49 $x260)))
 (let (($x95 (= $x258 true)))
 (let ((?x131 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x130 (= (_ bv0 3) ?x131)))
 (let (($x267 (= $x130 true)))
 (let (($x57 (= $x267 true)))
 (let (($x86 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x86 true)))
 (let (($x168 (= $x206 true)))
 (let (($x172 (= $x168 true)))
 (let (($x136 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23))))
 (let (($x76 (and true $x178)))
 (let (($x184 (and $x178 $x76)))
 (let (($x242 (= (bvand ?x125 (_ bv4294967288 32)) ?x125)))
 (let (($x127 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x180 (and $x127 $x242)))
 (let (($x261 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv4 32))) (bvult ?x36 (bvsub ?x36 (_ bv4 32))))))
 (let (($x210 (and (and (and (and (and $x76 $x261) $x127) $x180) $x184) $x136)))
 (let (($x138 (= true $x210)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (not $x32)))
 (let (($x190 (=> $x62 $x138)))
 (let (($x92 (= $x190 true)))
 (let (($x188 (= $x92 true)))
 (let (($x200 (= $x188 true)))
 (let (($x72 (= $x62 true)))
 (let (($x128 (= $x72 true)))
 (let (($x150 (= $x128 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x175)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x137 $x157)))
 (let (($x126 (and $x63 $x170)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x83 $x126)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x109)))))))
 (let (($x71 (and $x167 $x108)))
 (let (($x112 (= $x71 true)))
 (let (($x179 (= $x112 true)))
 (let (($x14 (= $x179 true)))
 (let (($x236 (and $x14 $x150)))
 (let (($x129 (and $x236 $x200)))
 (let (($x135 (and $x129 $x172)))
 (let (($x30 (and $x135 $x57)))
 (let (($x18 (and $x30 $x95)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x117 $x18)))
 (let (($x230 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x36 (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x59 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x230)))))))
 (let (($x233 (=> (and $x62 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x230)))))))
 (let (($x134 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x169 (or false (or false (and true (or $x98 $x134)))))))
 (let (($x78 (=> (and $x62 $x169) (or false (or false (and true (or $x98 $x134)))))))
 (let (($x105 (and $x78 $x233)))
 (let (($x11 (and $x105 $x75)))
 (let (($x70 (=> $x11 $x156)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x77))))
 (let ((?x197 ((_ extract 2 0) ?x125)))
 (let (($x148 (= (_ bv0 3) ?x197)))
 (let (($x156 (= $x148 true)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x202 (ite $x6 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x202 (_ bv1 32))))
 (let (($x299 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x260 (= $x299 $x7)))
 (let (($x185 (= ?x202 (_ bv0 32))))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x49 (= $x297 $x185)))
 (let (($x258 (and $x49 $x260)))
 (let (($x95 (= $x258 true)))
 (let ((?x131 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x130 (= (_ bv0 3) ?x131)))
 (let (($x267 (= $x130 true)))
 (let (($x57 (= $x267 true)))
 (let (($x86 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x86 true)))
 (let (($x168 (= $x206 true)))
 (let (($x172 (= $x168 true)))
 (let (($x136 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23))))
 (let (($x76 (and true $x178)))
 (let (($x184 (and $x178 $x76)))
 (let (($x242 (= (bvand ?x125 (_ bv4294967288 32)) ?x125)))
 (let (($x127 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x180 (and $x127 $x242)))
 (let (($x261 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv4 32))) (bvult ?x36 (bvsub ?x36 (_ bv4 32))))))
 (let (($x210 (and (and (and (and (and $x76 $x261) $x127) $x180) $x184) $x136)))
 (let (($x138 (= true $x210)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (not $x32)))
 (let (($x190 (=> $x62 $x138)))
 (let (($x92 (= $x190 true)))
 (let (($x188 (= $x92 true)))
 (let (($x200 (= $x188 true)))
 (let (($x72 (= $x62 true)))
 (let (($x128 (= $x72 true)))
 (let (($x150 (= $x128 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x175)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x137 $x157)))
 (let (($x126 (and $x63 $x170)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x83 $x126)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x109)))))))
 (let (($x71 (and $x167 $x108)))
 (let (($x112 (= $x71 true)))
 (let (($x179 (= $x112 true)))
 (let (($x14 (= $x179 true)))
 (let (($x236 (and $x14 $x150)))
 (let (($x129 (and $x236 $x200)))
 (let (($x135 (and $x129 $x172)))
 (let (($x30 (and $x135 $x57)))
 (let (($x18 (and $x30 $x95)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x117 $x18)))
 (let (($x230 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x36 (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x59 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x230)))))))
 (let (($x233 (=> (and $x62 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x55 $x230)))))))
 (let (($x134 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x169 (or false (or false (and true (or $x98 $x134)))))))
 (let (($x78 (=> (and $x62 $x169) (or false (or false (and true (or $x98 $x134)))))))
 (let (($x105 (and $x78 $x233)))
 (let (($x11 (and $x105 $x75)))
 (let (($x70 (=> $x11 $x156)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x153))))
 (let (($x70 (bvule ?x163 (_ bv4294967294 32))))
 (let (($x45 (= $x70 true)))
 (let (($x239 (= $x45 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x299 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x95 (bvuge ?x299 (_ bv1 32))))
 (let (($x258 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x258 $x95)))
 (let (($x7 (= ?x299 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (= $x202 $x7)))
 (let (($x75 (and $x260 $x18)))
 (let (($x11 (= $x75 true)))
 (let ((?x57 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x30 (= (_ bv0 3) ?x57)))
 (let (($x193 (= $x30 true)))
 (let (($x297 (= $x193 true)))
 (let (($x172 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x135 (= $x172 true)))
 (let (($x41 (= $x135 true)))
 (let (($x131 (= $x41 true)))
 (let (($x235 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x116 (and true $x211)))
 (let (($x184 (and $x211 $x116)))
 (let (($x180 (= (bvand ?x163 (_ bv4294967288 32)) ?x163)))
 (let (($x39 (= (bvand ?x169 (_ bv4294967292 32)) ?x169)))
 (let (($x208 (and $x39 $x180)))
 (let (($x229 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x169 (bvsub ?x169 (_ bv4 32))) (bvult ?x169 (bvsub ?x169 (_ bv4 32))))))
 (let (($x92 (and (and (and (and (and $x116 $x229) $x39) $x208) $x184) $x235)))
 (let (($x188 (= true $x92)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (not $x32)))
 (let (($x200 (=> $x62 $x188)))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let (($x86 (= $x20 true)))
 (let (($x236 (= $x62 true)))
 (let (($x143 (= $x236 true)))
 (let (($x23 (= $x143 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x108)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x63 $x170)))
 (let (($x112 (and $x126 $x71)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x115 $x112)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x120)))))))
 (let (($x14 (and $x157 $x179)))
 (let (($x72 (= $x14 true)))
 (let (($x128 (= $x72 true)))
 (let (($x150 (= $x128 true)))
 (let (($x51 (and $x150 $x23)))
 (let (($x206 (and $x51 $x86)))
 (let (($x130 (and $x206 $x131)))
 (let (($x159 (and $x130 $x297)))
 (let (($x197 (and $x159 $x11)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x148 (and $x152 $x197)))
 (let (($x97 (bvugt ?x169 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd ?x169 (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x117 (=> (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x97)))))))
 (let (($x144 (=> (and $x62 (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x97)))))))
 (let (($x88 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x74 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x65 (=> $x74 (or false (or false (and true (or $x85 $x88)))))))
 (let (($x28 (=> (and $x62 $x74) (or false (or false (and true (or $x85 $x88)))))))
 (let (($x106 (and $x28 $x144)))
 (let (($x156 (and $x106 $x148)))
 (let (($x118 (=> $x156 $x239)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x153))))
 (let (($x70 (bvule ?x163 (_ bv4294967294 32))))
 (let (($x45 (= $x70 true)))
 (let (($x239 (= $x45 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x299 (ite $x49 (_ bv0 32) (_ bv1 32))))
 (let (($x95 (bvuge ?x299 (_ bv1 32))))
 (let (($x258 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x258 $x95)))
 (let (($x7 (= ?x299 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (= $x202 $x7)))
 (let (($x75 (and $x260 $x18)))
 (let (($x11 (= $x75 true)))
 (let ((?x57 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x30 (= (_ bv0 3) ?x57)))
 (let (($x193 (= $x30 true)))
 (let (($x297 (= $x193 true)))
 (let (($x172 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x135 (= $x172 true)))
 (let (($x41 (= $x135 true)))
 (let (($x131 (= $x41 true)))
 (let (($x235 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x116 (and true $x211)))
 (let (($x184 (and $x211 $x116)))
 (let (($x180 (= (bvand ?x163 (_ bv4294967288 32)) ?x163)))
 (let (($x39 (= (bvand ?x169 (_ bv4294967292 32)) ?x169)))
 (let (($x208 (and $x39 $x180)))
 (let (($x229 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x169 (bvsub ?x169 (_ bv4 32))) (bvult ?x169 (bvsub ?x169 (_ bv4 32))))))
 (let (($x92 (and (and (and (and (and $x116 $x229) $x39) $x208) $x184) $x235)))
 (let (($x188 (= true $x92)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (not $x32)))
 (let (($x200 (=> $x62 $x188)))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let (($x86 (= $x20 true)))
 (let (($x236 (= $x62 true)))
 (let (($x143 (= $x236 true)))
 (let (($x23 (= $x143 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x108)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x63 $x170)))
 (let (($x112 (and $x126 $x71)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x115 $x112)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x120)))))))
 (let (($x14 (and $x157 $x179)))
 (let (($x72 (= $x14 true)))
 (let (($x128 (= $x72 true)))
 (let (($x150 (= $x128 true)))
 (let (($x51 (and $x150 $x23)))
 (let (($x206 (and $x51 $x86)))
 (let (($x130 (and $x206 $x131)))
 (let (($x159 (and $x130 $x297)))
 (let (($x197 (and $x159 $x11)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x148 (and $x152 $x197)))
 (let (($x97 (bvugt ?x169 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd ?x169 (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x117 (=> (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x97)))))))
 (let (($x144 (=> (and $x62 (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x97)))))))
 (let (($x88 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x74 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x65 (=> $x74 (or false (or false (and true (or $x85 $x88)))))))
 (let (($x28 (=> (and $x62 $x74) (or false (or false (and true (or $x85 $x88)))))))
 (let (($x106 (and $x28 $x144)))
 (let (($x156 (and $x106 $x148)))
 (let (($x118 (=> $x156 $x239)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (not $x32)))
 (let (($x156 (=> $x62 true)))
 (let (($x208 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x51) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x51))))
 (let (($x211 (and true $x232)))
 (let (($x242 (and $x232 $x211)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x125))))
 (let (($x163 (= (bvand ?x231 (_ bv4294967288 32)) ?x231)))
 (let (($x127 (= (bvand ?x74 (_ bv4294967292 32)) ?x74)))
 (let (($x132 (and $x127 $x163)))
 (let (($x212 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x74 (bvsub ?x74 (_ bv4 32))) (bvult ?x74 (bvsub ?x74 (_ bv4 32))))))
 (let (($x235 (and (and (and (and (and $x211 $x212) $x127) $x132) $x242) $x208)))
 (let (($x92 (= true $x235)))
 (let (($x188 (=> $x62 $x92)))
 (let (($x70 (=> (and $x188 $x62) true)))
 (let (($x45 (= $x70 true)))
 (let (($x239 (= $x45 true)))
 (let (($x185 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x49 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x49 (_ bv1 32))))
 (let (($x260 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x95 (= $x260 $x258)))
 (let (($x299 (= ?x49 (_ bv0 32))))
 (let (($x6 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (= $x6 $x299)))
 (let (($x18 (and $x7 $x95)))
 (let (($x75 (= $x18 true)))
 (let ((?x267 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x57 (= (_ bv0 3) ?x267)))
 (let (($x30 (= $x57 true)))
 (let (($x193 (= $x30 true)))
 (let (($x168 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x172 (= $x168 true)))
 (let (($x135 (= $x172 true)))
 (let (($x41 (= $x135 true)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x179)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x126 $x71)))
 (let (($x72 (and $x112 $x14)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x162 $x72)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x137)))))))
 (let (($x150 (and $x170 $x128)))
 (let (($x236 (= $x150 true)))
 (let (($x143 (= $x236 true)))
 (let (($x23 (= $x143 true)))
 (let (($x86 (and $x23 $x20)))
 (let (($x131 (and $x86 $x41)))
 (let (($x297 (and $x131 $x193)))
 (let (($x11 (and $x297 $x75)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x155 $x11)))
 (let (($x233 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd ?x74 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x152 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x233)))))))
 (let (($x31 (=> (and $x62 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x233)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x55 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x230 (=> $x55 (or false (or false (and true (or $x60 $x78)))))))
 (let (($x8 (=> (and $x62 $x55) (or false (or false (and true (or $x60 $x78)))))))
 (let (($x104 (and $x8 $x31)))
 (let (($x148 (and $x104 $x197)))
 (let (($x118 (=> $x148 $x239)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (not $x32)))
 (let (($x156 (=> $x62 true)))
 (let (($x208 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x51) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x51))))
 (let (($x211 (and true $x232)))
 (let (($x242 (and $x232 $x211)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x125))))
 (let (($x163 (= (bvand ?x231 (_ bv4294967288 32)) ?x231)))
 (let (($x127 (= (bvand ?x74 (_ bv4294967292 32)) ?x74)))
 (let (($x132 (and $x127 $x163)))
 (let (($x212 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x74 (bvsub ?x74 (_ bv4 32))) (bvult ?x74 (bvsub ?x74 (_ bv4 32))))))
 (let (($x235 (and (and (and (and (and $x211 $x212) $x127) $x132) $x242) $x208)))
 (let (($x92 (= true $x235)))
 (let (($x188 (=> $x62 $x92)))
 (let (($x70 (=> (and $x188 $x62) true)))
 (let (($x45 (= $x70 true)))
 (let (($x239 (= $x45 true)))
 (let (($x185 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x49 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x49 (_ bv1 32))))
 (let (($x260 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x95 (= $x260 $x258)))
 (let (($x299 (= ?x49 (_ bv0 32))))
 (let (($x6 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (= $x6 $x299)))
 (let (($x18 (and $x7 $x95)))
 (let (($x75 (= $x18 true)))
 (let ((?x267 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x57 (= (_ bv0 3) ?x267)))
 (let (($x30 (= $x57 true)))
 (let (($x193 (= $x30 true)))
 (let (($x168 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x172 (= $x168 true)))
 (let (($x135 (= $x172 true)))
 (let (($x41 (= $x135 true)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x20 (= $x129 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x179)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x126 $x71)))
 (let (($x72 (and $x112 $x14)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x162 $x72)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x137)))))))
 (let (($x150 (and $x170 $x128)))
 (let (($x236 (= $x150 true)))
 (let (($x143 (= $x236 true)))
 (let (($x23 (= $x143 true)))
 (let (($x86 (and $x23 $x20)))
 (let (($x131 (and $x86 $x41)))
 (let (($x297 (and $x131 $x193)))
 (let (($x11 (and $x297 $x75)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x155 $x11)))
 (let (($x233 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd ?x74 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x152 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x233)))))))
 (let (($x31 (=> (and $x62 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x233)))))))
 (let (($x78 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x55 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x230 (=> $x55 (or false (or false (and true (or $x60 $x78)))))))
 (let (($x8 (=> (and $x62 $x55) (or false (or false (and true (or $x60 $x78)))))))
 (let (($x104 (and $x8 $x31)))
 (let (($x148 (and $x104 $x197)))
 (let (($x118 (=> $x148 $x239)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (not $x115)))
 (let (($x11 (= $x63 false)))
 (let (($x197 (= $x11 true)))
 (let ((?x193 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x193 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x260 (= $x131 $x6)))
 (let (($x297 (= ?x193 (_ bv0 32))))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (= $x135 $x297)))
 (let (($x258 (and $x7 $x260)))
 (let (($x95 (= $x258 true)))
 (let (($x200 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x202 (= $x200 $x6)))
 (let (($x237 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x159 (= $x237 $x297)))
 (let (($x185 (and $x159 $x202)))
 (let (($x49 (= $x185 true)))
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x235 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x235 (_ bv1 32))))
 (let (($x130 (= $x131 $x129)))
 (let (($x92 (= ?x235 (_ bv0 32))))
 (let (($x41 (= $x135 $x92)))
 (let (($x267 (and $x41 $x130)))
 (let (($x57 (= $x267 true)))
 (let (($x20 (= $x200 $x129)))
 (let (($x188 (= $x237 $x92)))
 (let (($x86 (and $x188 $x20)))
 (let (($x206 (= $x86 true)))
 (let ((?x153 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= (_ bv0 3) ?x153)))
 (let (($x163 (= $x17 true)))
 (let (($x132 (= $x163 true)))
 (let (($x210 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x123 (= $x210 true)))
 (let (($x39 (= $x123 true)))
 (let (($x125 (= $x39 true)))
 (let (($x212 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x184 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x26 (=> $x184 (or false (or false (and true (or $x52 $x212)))))))
 (let (($x232 (=> (and $x63 $x184) (or false (or false (and true (or $x52 $x212)))))))
 (let (($x211 (= $x232 true)))
 (let (($x124 (= $x211 true)))
 (let (($x146 (= $x124 true)))
 (let ((?x102 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x102 (_ bv3 32)))))
 (let (($x178 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x72)))))))
 (let (($x126 (=> (and $x63 (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x14 $x72)))))))
 (let (($x108 (= $x126 true)))
 (let (($x51 (= $x108 true)))
 (let (($x122 (= $x51 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x109)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x144 $x31)))
 (let (($x120 (and $x104 $x155)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x65 $x120)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x97)))))))
 (let (($x175 (and $x117 $x167)))
 (let (($x119 (= $x175 true)))
 (let (($x83 (= $x119 true)))
 (let (($x137 (= $x83 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x60 true)))
 (let (($x228 (= $x85 true)))
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x56 (= $x94 true)))
 (let (($x98 (= $x56 true)))
 (let (($x46 (and $x98 $x228)))
 (let (($x157 (and $x46 $x137)))
 (let (($x76 (and $x157 $x122)))
 (let (($x160 (and $x76 $x146)))
 (let (($x139 (and $x160 $x125)))
 (let (($x190 (and $x139 $x132)))
 (let (($x168 (and $x190 $x206)))
 (let (($x30 (and $x168 $x57)))
 (let (($x299 (and $x30 $x49)))
 (let (($x18 (and $x299 $x95)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x62 $x18)))
 (let (($x148 (=> $x75 $x197)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (not $x115)))
 (let (($x11 (= $x63 false)))
 (let (($x197 (= $x11 true)))
 (let ((?x193 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x193 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x260 (= $x131 $x6)))
 (let (($x297 (= ?x193 (_ bv0 32))))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (= $x135 $x297)))
 (let (($x258 (and $x7 $x260)))
 (let (($x95 (= $x258 true)))
 (let (($x200 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x202 (= $x200 $x6)))
 (let (($x237 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x159 (= $x237 $x297)))
 (let (($x185 (and $x159 $x202)))
 (let (($x49 (= $x185 true)))
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x235 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x235 (_ bv1 32))))
 (let (($x130 (= $x131 $x129)))
 (let (($x92 (= ?x235 (_ bv0 32))))
 (let (($x41 (= $x135 $x92)))
 (let (($x267 (and $x41 $x130)))
 (let (($x57 (= $x267 true)))
 (let (($x20 (= $x200 $x129)))
 (let (($x188 (= $x237 $x92)))
 (let (($x86 (and $x188 $x20)))
 (let (($x206 (= $x86 true)))
 (let ((?x153 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= (_ bv0 3) ?x153)))
 (let (($x163 (= $x17 true)))
 (let (($x132 (= $x163 true)))
 (let (($x210 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x123 (= $x210 true)))
 (let (($x39 (= $x123 true)))
 (let (($x125 (= $x39 true)))
 (let (($x212 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x184 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x26 (=> $x184 (or false (or false (and true (or $x52 $x212)))))))
 (let (($x232 (=> (and $x63 $x184) (or false (or false (and true (or $x52 $x212)))))))
 (let (($x211 (= $x232 true)))
 (let (($x124 (= $x211 true)))
 (let (($x146 (= $x124 true)))
 (let ((?x102 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x102 (_ bv3 32)))))
 (let (($x178 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x72)))))))
 (let (($x126 (=> (and $x63 (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x14 $x72)))))))
 (let (($x108 (= $x126 true)))
 (let (($x51 (= $x108 true)))
 (let (($x122 (= $x51 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x109)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x144 $x31)))
 (let (($x120 (and $x104 $x155)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x65 $x120)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x97)))))))
 (let (($x175 (and $x117 $x167)))
 (let (($x119 (= $x175 true)))
 (let (($x83 (= $x119 true)))
 (let (($x137 (= $x83 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x60 true)))
 (let (($x228 (= $x85 true)))
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x56 (= $x94 true)))
 (let (($x98 (= $x56 true)))
 (let (($x46 (and $x98 $x228)))
 (let (($x157 (and $x46 $x137)))
 (let (($x76 (and $x157 $x122)))
 (let (($x160 (and $x76 $x146)))
 (let (($x139 (and $x160 $x125)))
 (let (($x190 (and $x139 $x132)))
 (let (($x168 (and $x190 $x206)))
 (let (($x30 (and $x168 $x57)))
 (let (($x299 (and $x30 $x49)))
 (let (($x18 (and $x299 $x95)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x62 $x18)))
 (let (($x148 (=> $x75 $x197)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11010000000000011111100000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000001111111010000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000001111111010000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000001111111010000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x356af0e8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x356af0eb)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4ae3f0e8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x356af0e8)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (not $x170)))
 (let (($x149 (= $x102 false)))
 (let (($x114 (= $x149 true)))
 (let ((?x95 (ite $x170 (_ bv0 32) (_ bv1 32))))
 (let (($x11 (bvuge ?x95 (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (= $x159 $x11)))
 (let (($x18 (= ?x95 (_ bv0 32))))
 (let (($x193 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (= $x193 $x18)))
 (let (($x234 (and (and (and (not $x193) (not $x159)) $x70) $x45)))
 (let (($x111 (= $x234 true)))
 (let (($x86 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x135 (not $x86)))
 (let (($x235 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x172 (not $x235)))
 (let (($x32 (and (and (and (= $x235 $x18) (= $x86 $x11)) $x172) $x135)))
 (let (($x78 (= $x32 true)))
 (let (($x185 (not $x159)))
 (let (($x202 (not $x193)))
 (let (($x188 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x200 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x200 (_ bv1 32))))
 (let (($x6 (= $x159 $x206)))
 (let (($x129 (= ?x200 (_ bv0 32))))
 (let (($x297 (= $x193 $x129)))
 (let (($x7 (and (and (and $x297 $x6) $x202) $x185)))
 (let (($x260 (= $x7 true)))
 (let (($x130 (and (and (and (= $x235 $x129) (= $x86 $x206)) $x172) $x135)))
 (let (($x267 (= $x130 true)))
 (let ((?x132 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x190 (= (_ bv0 3) ?x132)))
 (let (($x242 (= $x190 true)))
 (let (($x237 (= $x242 true)))
 (let (($x125 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x125 true)))
 (let (($x231 (= $x139 true)))
 (let (($x153 (= $x231 true)))
 (let (($x127 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x146 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x160 (=> $x146 (or false (or false (and true (or $x136 $x127)))))))
 (let (($x215 (=> (and $x102 $x146) (or false (or false (and true (or $x136 $x127)))))))
 (let (($x52 (= $x215 true)))
 (let (($x77 (= $x52 true)))
 (let (($x210 (= $x77 true)))
 (let ((?x112 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x112 (_ bv3 32)))))
 (let (($x76 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x236 $x143)))))))
 (let (($x179 (=> (and $x102 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x236 $x143)))))))
 (let (($x14 (= $x179 true)))
 (let (($x261 (= $x14 true)))
 (let (($x116 (= $x261 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x120)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x152 $x109)))
 (let (($x175 (and $x155 $x167)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x88 $x175)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x59)))))))
 (let (($x83 (and $x106 $x119)))
 (let (($x137 (= $x83 true)))
 (let (($x157 (= $x137 true)))
 (let (($x121 (= $x157 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x60 true)))
 (let (($x228 (= $x85 true)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x166 (= $x46 true)))
 (let (($x98 (= $x166 true)))
 (let (($x28 (and $x98 $x228)))
 (let (($x115 (and $x28 $x121)))
 (let (($x184 (and $x115 $x116)))
 (let (($x123 (and $x184 $x210)))
 (let (($x17 (and $x123 $x153)))
 (let (($x180 (and $x17 $x237)))
 (let (($x57 (and $x180 $x267)))
 (let (($x258 (and $x57 $x260)))
 (let (($x162 (and $x258 $x78)))
 (let (($x183 (and $x162 $x111)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x134 $x183)))
 (let (($x96 (=> $x161 $x114)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (not $x170)))
 (let (($x149 (= $x102 false)))
 (let (($x114 (= $x149 true)))
 (let ((?x95 (ite $x170 (_ bv0 32) (_ bv1 32))))
 (let (($x11 (bvuge ?x95 (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (= $x159 $x11)))
 (let (($x18 (= ?x95 (_ bv0 32))))
 (let (($x193 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (= $x193 $x18)))
 (let (($x234 (and (and (and (not $x193) (not $x159)) $x70) $x45)))
 (let (($x111 (= $x234 true)))
 (let (($x86 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x135 (not $x86)))
 (let (($x235 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x172 (not $x235)))
 (let (($x32 (and (and (and (= $x235 $x18) (= $x86 $x11)) $x172) $x135)))
 (let (($x78 (= $x32 true)))
 (let (($x185 (not $x159)))
 (let (($x202 (not $x193)))
 (let (($x188 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x200 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x200 (_ bv1 32))))
 (let (($x6 (= $x159 $x206)))
 (let (($x129 (= ?x200 (_ bv0 32))))
 (let (($x297 (= $x193 $x129)))
 (let (($x7 (and (and (and $x297 $x6) $x202) $x185)))
 (let (($x260 (= $x7 true)))
 (let (($x130 (and (and (and (= $x235 $x129) (= $x86 $x206)) $x172) $x135)))
 (let (($x267 (= $x130 true)))
 (let ((?x132 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x190 (= (_ bv0 3) ?x132)))
 (let (($x242 (= $x190 true)))
 (let (($x237 (= $x242 true)))
 (let (($x125 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x125 true)))
 (let (($x231 (= $x139 true)))
 (let (($x153 (= $x231 true)))
 (let (($x127 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x146 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x160 (=> $x146 (or false (or false (and true (or $x136 $x127)))))))
 (let (($x215 (=> (and $x102 $x146) (or false (or false (and true (or $x136 $x127)))))))
 (let (($x52 (= $x215 true)))
 (let (($x77 (= $x52 true)))
 (let (($x210 (= $x77 true)))
 (let ((?x112 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x112 (_ bv3 32)))))
 (let (($x76 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x236 $x143)))))))
 (let (($x179 (=> (and $x102 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x236 $x143)))))))
 (let (($x14 (= $x179 true)))
 (let (($x261 (= $x14 true)))
 (let (($x116 (= $x261 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x120)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x152 $x109)))
 (let (($x175 (and $x155 $x167)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x88 $x175)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x59)))))))
 (let (($x83 (and $x106 $x119)))
 (let (($x137 (= $x83 true)))
 (let (($x157 (= $x137 true)))
 (let (($x121 (= $x157 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x60 true)))
 (let (($x228 (= $x85 true)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x166 (= $x46 true)))
 (let (($x98 (= $x166 true)))
 (let (($x28 (and $x98 $x228)))
 (let (($x115 (and $x28 $x121)))
 (let (($x184 (and $x115 $x116)))
 (let (($x123 (and $x184 $x210)))
 (let (($x17 (and $x123 $x153)))
 (let (($x180 (and $x17 $x237)))
 (let (($x57 (and $x180 $x267)))
 (let (($x258 (and $x57 $x260)))
 (let (($x162 (and $x258 $x78)))
 (let (($x183 (and $x162 $x111)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x134 $x183)))
 (let (($x96 (=> $x161 $x114)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x71 (not $x102)))
 (let (($x111 (= $x71 false)))
 (let (($x183 (= $x111 true)))
 (let ((?x258 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x258 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x162 (= $x6 $x75)))
 (let (($x95 (= ?x258 (_ bv0 32))))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (= $x297 $x95)))
 (let (($x131 (= false false)))
 (let (($x202 (=> $x297 $x131)))
 (let (($x70 (and (and $x202 $x78) $x162)))
 (let (($x118 (= $x70 true)))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x188 $x131)))
 (let (($x168 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x11 (= $x168 $x75)))
 (let (($x18 (= $x188 $x95)))
 (let (($x148 (and (and $x18 $x11) $x135)))
 (let (($x156 (= $x148 true)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x20 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x20 (_ bv1 32))))
 (let (($x49 (= $x6 $x41)))
 (let (($x86 (= ?x20 (_ bv0 32))))
 (let (($x159 (= $x297 $x86)))
 (let (($x185 (and (and $x159 $x49) $x202)))
 (let (($x7 (= $x185 true)))
 (let (($x267 (and (and (= $x188 $x86) (= $x168 $x41)) $x135)))
 (let (($x57 (= $x267 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (= (_ bv0 3) ?x242)))
 (let (($x180 (= $x237 true)))
 (let (($x208 (= $x180 true)))
 (let (($x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x231 true)))
 (let (($x17 (= $x153 true)))
 (let (($x163 (= $x17 true)))
 (let (($x211 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x77 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x210 (=> $x77 (or false (or false (and true (or $x232 $x211)))))))
 (let (($x146 (=> (and $x71 $x77) (or false (or false (and true (or $x232 $x211)))))))
 (let (($x229 (= $x146 true)))
 (let (($x123 (= $x229 true)))
 (let (($x39 (= $x123 true)))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x72 (_ bv3 32)))))
 (let (($x116 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x108)))))))
 (let (($x122 (=> (and $x71 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x108)))))))
 (let (($x150 (= $x122 true)))
 (let (($x184 (= $x150 true)))
 (let (($x212 (= $x184 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x167)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x31 $x155)))
 (let (($x119 (and $x120 $x175)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x144 $x119)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x233 $x117)))))))
 (let (($x137 (and $x152 $x83)))
 (let (($x157 (= $x137 true)))
 (let (($x121 (= $x157 true)))
 (let (($x115 (= $x121 true)))
 (let (($x48 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x60 (= $x48 true)))
 (let (($x228 (= $x60 true)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x85 (= $x46 true)))
 (let (($x166 (= $x85 true)))
 (let (($x28 (and $x166 $x228)))
 (let (($x63 (and $x28 $x115)))
 (let (($x138 (and $x63 $x212)))
 (let (($x125 (and $x138 $x39)))
 (let (($x132 (and $x125 $x163)))
 (let (($x235 (and $x132 $x208)))
 (let (($x30 (and $x235 $x57)))
 (let (($x260 (and $x30 $x7)))
 (let (($x32 (and $x260 $x156)))
 (let (($x45 (and $x32 $x118)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x234 (and $x94 $x45)))
 (let (($x161 (=> $x234 $x183)))
 (not $x161)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x71 (not $x102)))
 (let (($x111 (= $x71 false)))
 (let (($x183 (= $x111 true)))
 (let ((?x258 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x258 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x162 (= $x6 $x75)))
 (let (($x95 (= ?x258 (_ bv0 32))))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (= $x297 $x95)))
 (let (($x131 (= false false)))
 (let (($x202 (=> $x297 $x131)))
 (let (($x70 (and (and $x202 $x78) $x162)))
 (let (($x118 (= $x70 true)))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x188 $x131)))
 (let (($x168 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x11 (= $x168 $x75)))
 (let (($x18 (= $x188 $x95)))
 (let (($x148 (and (and $x18 $x11) $x135)))
 (let (($x156 (= $x148 true)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x20 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge ?x20 (_ bv1 32))))
 (let (($x49 (= $x6 $x41)))
 (let (($x86 (= ?x20 (_ bv0 32))))
 (let (($x159 (= $x297 $x86)))
 (let (($x185 (and (and $x159 $x49) $x202)))
 (let (($x7 (= $x185 true)))
 (let (($x267 (and (and (= $x188 $x86) (= $x168 $x41)) $x135)))
 (let (($x57 (= $x267 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (= (_ bv0 3) ?x242)))
 (let (($x180 (= $x237 true)))
 (let (($x208 (= $x180 true)))
 (let (($x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x231 true)))
 (let (($x17 (= $x153 true)))
 (let (($x163 (= $x17 true)))
 (let (($x211 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x77 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x210 (=> $x77 (or false (or false (and true (or $x232 $x211)))))))
 (let (($x146 (=> (and $x71 $x77) (or false (or false (and true (or $x232 $x211)))))))
 (let (($x229 (= $x146 true)))
 (let (($x123 (= $x229 true)))
 (let (($x39 (= $x123 true)))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x72 (_ bv3 32)))))
 (let (($x116 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x108)))))))
 (let (($x122 (=> (and $x71 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x108)))))))
 (let (($x150 (= $x122 true)))
 (let (($x184 (= $x150 true)))
 (let (($x212 (= $x184 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x167)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x31 $x155)))
 (let (($x119 (and $x120 $x175)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x144 $x119)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x233 $x117)))))))
 (let (($x137 (and $x152 $x83)))
 (let (($x157 (= $x137 true)))
 (let (($x121 (= $x157 true)))
 (let (($x115 (= $x121 true)))
 (let (($x48 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x60 (= $x48 true)))
 (let (($x228 (= $x60 true)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x85 (= $x46 true)))
 (let (($x166 (= $x85 true)))
 (let (($x28 (and $x166 $x228)))
 (let (($x63 (and $x28 $x115)))
 (let (($x138 (and $x63 $x212)))
 (let (($x125 (and $x138 $x39)))
 (let (($x132 (and $x125 $x163)))
 (let (($x235 (and $x132 $x208)))
 (let (($x30 (and $x235 $x57)))
 (let (($x260 (and $x30 $x7)))
 (let (($x32 (and $x260 $x156)))
 (let (($x45 (and $x32 $x118)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x234 (and $x94 $x45)))
 (let (($x161 (=> $x234 $x183)))
 (not $x161)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11010000000000011111100000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000001111111010000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000001111111010000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000001111111010000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x356af0e8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x356af0eb)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4ae3f0e8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x356af0e8)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa81a707f)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xb81a7a80)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa81a707c)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa81a707c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (not $x112)))
 (let (($x271 (= $x72 false)))
 (let (($x230 (= $x271 true)))
 (let ((?x156 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x239 (bvuge ?x156 (_ bv1 32))))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x7 $x239)))
 (let (($x32 (= ?x156 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x183 (= $x202 $x32)))
 (let (($x56 (and (and (and (not $x7) (=> $x202 (= false false))) $x183) $x161)))
 (let (($x128 (= $x56 true)))
 (let (($x57 (= false false)))
 (let (($x20 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x30 (=> $x20 $x57)))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x267 (not $x130)))
 (let (($x45 (and (and (and (= $x20 $x32) (= $x130 $x239)) $x267) $x30)))
 (let (($x234 (= $x45 true)))
 (let (($x95 (=> $x202 $x57)))
 (let (($x258 (not $x7)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x168 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x168 (_ bv1 32))))
 (let (($x260 (= $x7 $x131)))
 (let (($x41 (= ?x168 (_ bv0 32))))
 (let (($x185 (= $x202 $x41)))
 (let (($x11 (and (and (and $x185 $x260) $x258) $x95)))
 (let (($x197 (= $x11 true)))
 (let (($x159 (and (and (and (= $x20 $x41) (= $x130 $x131)) $x267) $x30)))
 (let (($x6 (= $x159 true)))
 (let ((?x208 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= (_ bv0 3) ?x208)))
 (let (($x92 (= $x235 true)))
 (let (($x188 (= $x92 true)))
 (let (($x163 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x163 true)))
 (let (($x190 (= $x132 true)))
 (let (($x242 (= $x190 true)))
 (let (($x52 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x39 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x125 (=> $x39 (or false (or false (and true (or $x215 $x52)))))))
 (let (($x26 (=> (and $x72 $x39) (or false (or false (and true (or $x215 $x52)))))))
 (let (($x232 (= $x26 true)))
 (let (($x139 (= $x232 true)))
 (let (($x231 (= $x139 true)))
 (let ((?x143 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x143 (_ bv3 32)))))
 (let (($x138 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x14)))))))
 (let (($x178 (=> (and $x72 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x179 $x14)))))))
 (let (($x126 (= $x178 true)))
 (let (($x136 (= $x126 true)))
 (let (($x127 (= $x136 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x119)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x109 $x167)))
 (let (($x137 (and $x175 $x83)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x94 $x137)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x106)))))))
 (let (($x121 (and $x104 $x157)))
 (let (($x115 (= $x121 true)))
 (let (($x63 (= $x115 true)))
 (let (($x170 (= $x63 true)))
 (let (($x48 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x60 (= $x48 true)))
 (let (($x228 (= $x60 true)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= $x28 true)))
 (let (($x166 (= $x74 true)))
 (let (($x8 (and $x166 $x228)))
 (let (($x102 (and $x8 $x170)))
 (let (($x77 (and $x102 $x127)))
 (let (($x153 (and $x77 $x231)))
 (let (($x237 (and $x153 $x242)))
 (let (($x200 (and $x237 $x188)))
 (let (($x49 (and $x200 $x6)))
 (let (($x148 (and $x49 $x197)))
 (let (($x111 (and $x148 $x234)))
 (let (($x114 (and $x111 $x128)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x96 (and $x85 $x114)))
 (let (($x23 (=> $x96 $x230)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (not $x112)))
 (let (($x271 (= $x72 false)))
 (let (($x230 (= $x271 true)))
 (let ((?x156 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x239 (bvuge ?x156 (_ bv1 32))))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x7 $x239)))
 (let (($x32 (= ?x156 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x183 (= $x202 $x32)))
 (let (($x56 (and (and (and (not $x7) (=> $x202 (= false false))) $x183) $x161)))
 (let (($x128 (= $x56 true)))
 (let (($x57 (= false false)))
 (let (($x20 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x30 (=> $x20 $x57)))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x267 (not $x130)))
 (let (($x45 (and (and (and (= $x20 $x32) (= $x130 $x239)) $x267) $x30)))
 (let (($x234 (= $x45 true)))
 (let (($x95 (=> $x202 $x57)))
 (let (($x258 (not $x7)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x168 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x168 (_ bv1 32))))
 (let (($x260 (= $x7 $x131)))
 (let (($x41 (= ?x168 (_ bv0 32))))
 (let (($x185 (= $x202 $x41)))
 (let (($x11 (and (and (and $x185 $x260) $x258) $x95)))
 (let (($x197 (= $x11 true)))
 (let (($x159 (and (and (and (= $x20 $x41) (= $x130 $x131)) $x267) $x30)))
 (let (($x6 (= $x159 true)))
 (let ((?x208 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= (_ bv0 3) ?x208)))
 (let (($x92 (= $x235 true)))
 (let (($x188 (= $x92 true)))
 (let (($x163 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x163 true)))
 (let (($x190 (= $x132 true)))
 (let (($x242 (= $x190 true)))
 (let (($x52 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x39 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x125 (=> $x39 (or false (or false (and true (or $x215 $x52)))))))
 (let (($x26 (=> (and $x72 $x39) (or false (or false (and true (or $x215 $x52)))))))
 (let (($x232 (= $x26 true)))
 (let (($x139 (= $x232 true)))
 (let (($x231 (= $x139 true)))
 (let ((?x143 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x143 (_ bv3 32)))))
 (let (($x138 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x14)))))))
 (let (($x178 (=> (and $x72 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x179 $x14)))))))
 (let (($x126 (= $x178 true)))
 (let (($x136 (= $x126 true)))
 (let (($x127 (= $x136 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x119)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x109 $x167)))
 (let (($x137 (and $x175 $x83)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x94 $x137)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x106)))))))
 (let (($x121 (and $x104 $x157)))
 (let (($x115 (= $x121 true)))
 (let (($x63 (= $x115 true)))
 (let (($x170 (= $x63 true)))
 (let (($x48 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x60 (= $x48 true)))
 (let (($x228 (= $x60 true)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= $x28 true)))
 (let (($x166 (= $x74 true)))
 (let (($x8 (and $x166 $x228)))
 (let (($x102 (and $x8 $x170)))
 (let (($x77 (and $x102 $x127)))
 (let (($x153 (and $x77 $x231)))
 (let (($x237 (and $x153 $x242)))
 (let (($x200 (and $x237 $x188)))
 (let (($x49 (and $x200 $x6)))
 (let (($x148 (and $x49 $x197)))
 (let (($x111 (and $x148 $x234)))
 (let (($x114 (and $x111 $x128)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x96 (and $x85 $x114)))
 (let (($x23 (=> $x96 $x230)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x236 (not $x72)))
 (let (($x331 (= $x236 false)))
 (let (($x329 (= $x331 true)))
 (let ((?x215 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x257))))
 (let ((?x248 (bvadd ?x307 (_ bv4 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x218))))
 (let (($x290 (= (_ bv0 32) ?x37)))
 (let ((?x93 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x93 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x73 (= $x238 $x221)))
 (let (($x292 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x133 (and $x269 $x292)))
 (let (($x27 (=> $x133 $x73)))
 (let (($x263 (= ?x93 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x141 $x263)))
 (let (($x79 (=> $x133 $x321)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x84))))
 (let (($x320 (= input.spec-%var-l-1.2.1.2.0 ?x298)))
 (let (($x91 (=> $x133 $x320)))
 (let (($x224 (= (_ bv0 32) ?x307)))
 (let ((?x339 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (bvuge ?x339 (_ bv1 32))))
 (let (($x444 (= $x292 $x312)))
 (let (($x323 (=> $x269 $x444)))
 (let (($x252 (= ?x339 (_ bv0 32))))
 (let (($x177 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x67 (= $x177 $x252)))
 (let (($x154 (=> $x269 $x67)))
 (let ((?x293 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x210 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x311 (concat (select input.dst.llvm-mem ?x210) (concat ?x10 (concat ?x145 ?x293)))))
 (let (($x319 (= input.spec-%var-l-1.2.0 ?x311)))
 (let (($x443 (=> $x269 $x319)))
 (let ((?x287 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x287 (_ bv1 32))))
 (let (($x341 (= $x269 $x53)))
 (let (($x277 (= ?x287 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x182 (= $x270 $x277)))
 (let (($x297 (= false false)))
 (let (($x171 (and $x269 $x177)))
 (let (($x173 (=> $x171 $x297)))
 (let (($x19 (=> $x270 $x297)))
 (let (($x327 (and (and (and (and (and (and $x19 $x173) $x182) $x341) $x443) $x154) $x323)))
 (let (($x328 (and (and (and $x327 $x91) $x79) $x27)))
 (let (($x334 (= $x328 true)))
 (let (($x296 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x296 $x221)))
 (let (($x230 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x261 (and $x135 $x230)))
 (let (($x279 (=> $x261 $x225)))
 (let (($x54 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x313 (= $x54 $x263)))
 (let (($x259 (=> $x261 $x313)))
 (let (($x13 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x298)))
 (let (($x306 (=> $x261 $x13)))
 (let (($x250 (= $x230 $x312)))
 (let (($x251 (=> $x135 $x250)))
 (let (($x156 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x245 (= $x156 $x252)))
 (let (($x223 (=> $x135 $x245)))
 (let (($x244 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x311)))
 (let (($x303 (=> $x135 $x244)))
 (let (($x96 (and $x135 $x156)))
 (let (($x271 (=> $x96 $x297)))
 (let (($x206 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x57 (=> $x206 $x297)))
 (let (($x24 (and (and (and (and (and (= $x206 $x277) (= $x135 $x53)) $x57) $x271) $x303) $x223)))
 (let (($x440 (and (and (and (and $x24 $x251) $x306) $x259) $x279)))
 (let (($x441 (= $x440 true)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x70 (concat ?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x183 (concat ?x149 (concat ?x45 ?x70))))
 (let ((?x81 (bvadd ?x183 (_ bv4 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x61))))
 (let (($x33 (= (_ bv0 32) ?x47)))
 (let ((?x305 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (bvuge ?x305 (_ bv1 32))))
 (let (($x5 (= $x238 $x254)))
 (let (($x262 (=> $x133 $x5)))
 (let (($x22 (= ?x305 (_ bv0 32))))
 (let (($x43 (= $x141 $x22)))
 (let (($x284 (=> $x133 $x43)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x201))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.0 ?x44)))
 (let (($x16 (=> $x133 $x192)))
 (let (($x105 (= (_ bv0 32) ?x183)))
 (let ((?x161 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x161 (_ bv1 32))))
 (let (($x194 (= $x292 $x23)))
 (let (($x301 (=> $x269 $x194)))
 (let (($x56 (= ?x161 (_ bv0 32))))
 (let (($x278 (= $x177 $x56)))
 (let (($x207 (=> $x269 $x278)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x202)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x283 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x186 (=> $x269 $x283)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x172 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x172 (_ bv1 32))))
 (let (($x101 (= $x269 $x193)))
 (let (($x130 (= ?x172 (_ bv0 32))))
 (let (($x265 (= $x270 $x130)))
 (let (($x240 (and (and (and (and (and (and $x265 $x101) $x19) $x186) $x207) $x173) $x301)))
 (let (($x291 (and (and (and $x240 $x16) $x284) $x262)))
 (let (($x90 (= $x291 true)))
 (let (($x42 (= $x296 $x254)))
 (let (($x107 (=> $x261 $x42)))
 (let (($x255 (= $x54 $x22)))
 (let (($x35 (=> $x261 $x255)))
 (let (($x266 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x44)))
 (let (($x281 (=> $x261 $x266)))
 (let (($x80 (= $x230 $x23)))
 (let (($x100 (=> $x135 $x80)))
 (let (($x128 (= $x156 $x56)))
 (let (($x114 (=> $x135 $x128)))
 (let (($x11 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x95)))
 (let (($x197 (=> $x135 $x11)))
 (let (($x268 (and (and (and (and (and (= $x206 $x130) (= $x135 $x193)) $x57) $x197) $x114) $x271)))
 (let (($x203 (and (and (and (and $x268 $x100) $x281) $x35) $x107)))
 (let (($x314 (= $x203 true)))
 (let ((?x92 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 3) ?x92)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x190 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x190 true)))
 (let (($x237 (= $x242 true)))
 (let (($x180 (= $x237 true)))
 (let (($x229 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x210)))
 (let (($x231 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32))) (or false (or false (and true (or $x146 $x229)))))))
 (let (($x39 (=> (and $x236 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32)))) (or false (or false (and true (or $x146 $x229)))))))
 (let (($x160 (= $x39 true)))
 (let (($x153 (= $x160 true)))
 (let (($x17 (= $x153 true)))
 (let ((?x108 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x150 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x108 (_ bv3 32)))))
 (let (($x127 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x150)))))))
 (let (($x212 (=> (and $x236 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x122 $x150)))))))
 (let (($x76 (= $x212 true)))
 (let (($x77 (= $x76 true)))
 (let (($x211 (= $x77 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x83)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x155 $x175)))
 (let (($x157 (and $x119 $x137)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x233 $x157)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x74)))))))
 (let (($x115 (and $x106 $x121)))
 (let (($x63 (= $x115 true)))
 (let (($x170 (= $x63 true)))
 (let (($x102 (= $x170 true)))
 (let (($x28 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x98 (= $x28 true)))
 (let (($x48 (= $x98 true)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (= $x152 true)))
 (let (($x59 (= $x62 true)))
 (let (($x60 (and $x59 $x48)))
 (let (($x71 (and $x60 $x102)))
 (let (($x124 (and $x71 $x211)))
 (let (($x163 (and $x124 $x17)))
 (let (($x208 (and $x163 $x180)))
 (let (($x20 (and $x208 $x129)))
 (let (($x50 (and $x20 $x314)))
 (let (($x213 (and $x50 $x90)))
 (let (($x442 (and $x213 $x441)))
 (let (($x335 (and $x442 $x334)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x326 (and $x64 $x335)))
 (let (($x333 (=> $x326 $x329)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x236 (not $x72)))
 (let (($x331 (= $x236 false)))
 (let (($x329 (= $x331 true)))
 (let ((?x215 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x257))))
 (let ((?x248 (bvadd ?x307 (_ bv4 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x218))))
 (let (($x290 (= (_ bv0 32) ?x37)))
 (let ((?x93 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x93 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x73 (= $x238 $x221)))
 (let (($x292 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x133 (and $x269 $x292)))
 (let (($x27 (=> $x133 $x73)))
 (let (($x263 (= ?x93 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x141 $x263)))
 (let (($x79 (=> $x133 $x321)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x84))))
 (let (($x320 (= input.spec-%var-l-1.2.1.2.0 ?x298)))
 (let (($x91 (=> $x133 $x320)))
 (let (($x224 (= (_ bv0 32) ?x307)))
 (let ((?x339 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (bvuge ?x339 (_ bv1 32))))
 (let (($x444 (= $x292 $x312)))
 (let (($x323 (=> $x269 $x444)))
 (let (($x252 (= ?x339 (_ bv0 32))))
 (let (($x177 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x67 (= $x177 $x252)))
 (let (($x154 (=> $x269 $x67)))
 (let ((?x293 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x210 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x311 (concat (select input.dst.llvm-mem ?x210) (concat ?x10 (concat ?x145 ?x293)))))
 (let (($x319 (= input.spec-%var-l-1.2.0 ?x311)))
 (let (($x443 (=> $x269 $x319)))
 (let ((?x287 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x287 (_ bv1 32))))
 (let (($x341 (= $x269 $x53)))
 (let (($x277 (= ?x287 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x182 (= $x270 $x277)))
 (let (($x297 (= false false)))
 (let (($x171 (and $x269 $x177)))
 (let (($x173 (=> $x171 $x297)))
 (let (($x19 (=> $x270 $x297)))
 (let (($x327 (and (and (and (and (and (and $x19 $x173) $x182) $x341) $x443) $x154) $x323)))
 (let (($x328 (and (and (and $x327 $x91) $x79) $x27)))
 (let (($x334 (= $x328 true)))
 (let (($x296 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x225 (= $x296 $x221)))
 (let (($x230 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x261 (and $x135 $x230)))
 (let (($x279 (=> $x261 $x225)))
 (let (($x54 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x313 (= $x54 $x263)))
 (let (($x259 (=> $x261 $x313)))
 (let (($x13 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x298)))
 (let (($x306 (=> $x261 $x13)))
 (let (($x250 (= $x230 $x312)))
 (let (($x251 (=> $x135 $x250)))
 (let (($x156 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x245 (= $x156 $x252)))
 (let (($x223 (=> $x135 $x245)))
 (let (($x244 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x311)))
 (let (($x303 (=> $x135 $x244)))
 (let (($x96 (and $x135 $x156)))
 (let (($x271 (=> $x96 $x297)))
 (let (($x206 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x57 (=> $x206 $x297)))
 (let (($x24 (and (and (and (and (and (= $x206 $x277) (= $x135 $x53)) $x57) $x271) $x303) $x223)))
 (let (($x440 (and (and (and (and $x24 $x251) $x306) $x259) $x279)))
 (let (($x441 (= $x440 true)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x70 (concat ?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x183 (concat ?x149 (concat ?x45 ?x70))))
 (let ((?x81 (bvadd ?x183 (_ bv4 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x61))))
 (let (($x33 (= (_ bv0 32) ?x47)))
 (let ((?x305 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (bvuge ?x305 (_ bv1 32))))
 (let (($x5 (= $x238 $x254)))
 (let (($x262 (=> $x133 $x5)))
 (let (($x22 (= ?x305 (_ bv0 32))))
 (let (($x43 (= $x141 $x22)))
 (let (($x284 (=> $x133 $x43)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x201))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.0 ?x44)))
 (let (($x16 (=> $x133 $x192)))
 (let (($x105 (= (_ bv0 32) ?x183)))
 (let ((?x161 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x161 (_ bv1 32))))
 (let (($x194 (= $x292 $x23)))
 (let (($x301 (=> $x269 $x194)))
 (let (($x56 (= ?x161 (_ bv0 32))))
 (let (($x278 (= $x177 $x56)))
 (let (($x207 (=> $x269 $x278)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x202)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x283 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x186 (=> $x269 $x283)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x172 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x172 (_ bv1 32))))
 (let (($x101 (= $x269 $x193)))
 (let (($x130 (= ?x172 (_ bv0 32))))
 (let (($x265 (= $x270 $x130)))
 (let (($x240 (and (and (and (and (and (and $x265 $x101) $x19) $x186) $x207) $x173) $x301)))
 (let (($x291 (and (and (and $x240 $x16) $x284) $x262)))
 (let (($x90 (= $x291 true)))
 (let (($x42 (= $x296 $x254)))
 (let (($x107 (=> $x261 $x42)))
 (let (($x255 (= $x54 $x22)))
 (let (($x35 (=> $x261 $x255)))
 (let (($x266 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x44)))
 (let (($x281 (=> $x261 $x266)))
 (let (($x80 (= $x230 $x23)))
 (let (($x100 (=> $x135 $x80)))
 (let (($x128 (= $x156 $x56)))
 (let (($x114 (=> $x135 $x128)))
 (let (($x11 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x95)))
 (let (($x197 (=> $x135 $x11)))
 (let (($x268 (and (and (and (and (and (= $x206 $x130) (= $x135 $x193)) $x57) $x197) $x114) $x271)))
 (let (($x203 (and (and (and (and $x268 $x100) $x281) $x35) $x107)))
 (let (($x314 (= $x203 true)))
 (let ((?x92 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 3) ?x92)))
 (let (($x200 (= $x188 true)))
 (let (($x129 (= $x200 true)))
 (let (($x190 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x190 true)))
 (let (($x237 (= $x242 true)))
 (let (($x180 (= $x237 true)))
 (let (($x229 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x210)))
 (let (($x231 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32))) (or false (or false (and true (or $x146 $x229)))))))
 (let (($x39 (=> (and $x236 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32)))) (or false (or false (and true (or $x146 $x229)))))))
 (let (($x160 (= $x39 true)))
 (let (($x153 (= $x160 true)))
 (let (($x17 (= $x153 true)))
 (let ((?x108 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x150 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x108 (_ bv3 32)))))
 (let (($x127 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x150)))))))
 (let (($x212 (=> (and $x236 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x122 $x150)))))))
 (let (($x76 (= $x212 true)))
 (let (($x77 (= $x76 true)))
 (let (($x211 (= $x77 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x83)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x155 $x175)))
 (let (($x157 (and $x119 $x137)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x233 $x157)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x74)))))))
 (let (($x115 (and $x106 $x121)))
 (let (($x63 (= $x115 true)))
 (let (($x170 (= $x63 true)))
 (let (($x102 (= $x170 true)))
 (let (($x28 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x98 (= $x28 true)))
 (let (($x48 (= $x98 true)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (= $x152 true)))
 (let (($x59 (= $x62 true)))
 (let (($x60 (and $x59 $x48)))
 (let (($x71 (and $x60 $x102)))
 (let (($x124 (and $x71 $x211)))
 (let (($x163 (and $x124 $x17)))
 (let (($x208 (and $x163 $x180)))
 (let (($x20 (and $x208 $x129)))
 (let (($x50 (and $x20 $x314)))
 (let (($x213 (and $x50 $x90)))
 (let (($x442 (and $x213 $x441)))
 (let (($x335 (and $x442 $x334)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x326 (and $x64 $x335)))
 (let (($x333 (=> $x326 $x329)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (not $x119)))
 (let (($x356 (= $x143 false)))
 (let (($x375 (= $x356 true)))
 (let ((?x146 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x245))))
 (let ((?x316 (bvadd ?x340 (_ bv4 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem ?x316))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv2 32))) ?x290))))
 (let (($x225 (= (_ bv0 32) ?x221)))
 (let ((?x279 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x322 (bvuge ?x279 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x333 (= $x238 $x322)))
 (let (($x240 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x276 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x192 (and $x276 $x240)))
 (let (($x336 (=> $x192 $x333)))
 (let (($x440 (= ?x279 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x331 (= $x43 $x440)))
 (let (($x329 (=> $x192 $x331)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x306))))
 (let (($x335 (= input.spec-%var-l-1.2.1.2.0 ?x247)))
 (let (($x326 (=> $x192 $x335)))
 (let (($x226 (= (_ bv0 32) ?x340)))
 (let ((?x40 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x40 (_ bv1 32))))
 (let (($x328 (= $x240 $x288)))
 (let (($x334 (=> $x276 $x328)))
 (let (($x256 (= ?x40 (_ bv0 32))))
 (let (($x173 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x73 (= $x173 $x256)))
 (let (($x27 (=> $x276 $x73)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x123 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x257 (concat (select input.dst.llvm-mem ?x123) (concat ?x217 (concat ?x264 ?x286)))))
 (let (($x79 (= input.spec-%var-l-1.2.0 ?x257)))
 (let (($x332 (=> $x276 $x79)))
 (let ((?x66 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (bvuge ?x66 (_ bv1 32))))
 (let (($x321 (= $x276 $x244)))
 (let (($x21 (= ?x66 (_ bv0 32))))
 (let (($x283 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x330 (= $x283 $x21)))
 (let (($x213 (and $x192 $x238)))
 (let (($x287 (not $x213)))
 (let (($x291 (and $x192 $x43)))
 (let (($x90 (not $x291)))
 (let (($x57 (= false false)))
 (let (($x194 (and $x276 $x173)))
 (let (($x301 (=> $x194 $x57)))
 (let (($x177 (=> $x283 $x57)))
 (let (($x379 (and (and (and (and (and (and $x177 $x301) $x90) $x287) $x330) $x321) $x332)))
 (let (($x447 (and (and (and (and (and $x379 $x27) $x334) $x326) $x329) $x336)))
 (let (($x353 (= $x447 true)))
 (let (($x33 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x96 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x267 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x23 (and $x267 $x96)))
 (let (($x296 (and $x23 $x33)))
 (let (($x254 (not $x296)))
 (let (($x44 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x35 (and $x23 $x44)))
 (let (($x89 (not $x35)))
 (let (($x182 (= $x33 $x322)))
 (let (($x324 (=> $x23 $x182)))
 (let (($x441 (= $x44 $x440)))
 (let (($x442 (=> $x23 $x441)))
 (let (($x246 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x247)))
 (let (($x285 (=> $x23 $x246)))
 (let (($x222 (= $x96 $x288)))
 (let (($x84 (=> $x267 $x222)))
 (let (($x148 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x243 (= $x148 $x256)))
 (let (($x300 (=> $x267 $x243)))
 (let (($x318 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x257)))
 (let (($x307 (=> $x267 $x318)))
 (let (($x114 (and $x267 $x148)))
 (let (($x82 (=> $x114 $x57)))
 (let (($x41 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x34 (=> $x41 $x57)))
 (let (($x342 (and (and (and (and (and (= $x41 $x21) (= $x267 $x244)) $x34) $x82) $x307) $x300)))
 (let (($x327 (and (and (and (and (and (and $x342 $x84) $x285) $x442) $x324) $x89) $x254)))
 (let (($x320 (= $x327 true)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x118 (concat ?x149 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x234 (concat ?x70 (concat ?x239 ?x118))))
 (let ((?x266 (bvadd ?x234 (_ bv4 32))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x54))))
 (let (($x110 (= (_ bv0 32) ?x68)))
 (let ((?x38 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x38 (_ bv1 32))))
 (let (($x5 (= $x238 $x305)))
 (let (($x262 (=> $x192 $x5)))
 (let (($x61 (= ?x38 (_ bv0 32))))
 (let (($x284 (= $x43 $x61)))
 (let (($x181 (=> $x192 $x284)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x87))))
 (let (($x15 (= input.spec-%var-l-1.2.1.2.0 ?x214)))
 (let (($x275 (=> $x192 $x15)))
 (let (($x183 (= (_ bv0 32) ?x234)))
 (let ((?x105 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x105 (_ bv1 32))))
 (let (($x133 (= $x240 $x271)))
 (let (($x304 (=> $x276 $x133)))
 (let (($x161 (= ?x105 (_ bv0 32))))
 (let (($x195 (= $x173 $x161)))
 (let (($x292 (=> $x276 $x195)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x7)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x6)))
 (let (($x207 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x191 (=> $x276 $x207)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x131 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x131 (_ bv1 32))))
 (let (($x187 (= $x276 $x189)))
 (let (($x135 (= ?x131 (_ bv0 32))))
 (let (($x186 (= $x283 $x135)))
 (let (($x227 (and (and (and (and (and (and $x186 $x187) $x177) $x191) $x292) $x301) $x304)))
 (let (($x315 (and (and (and (and (and $x227 $x275) $x181) $x262) $x90) $x287)))
 (let (($x145 (= $x315 true)))
 (let (($x22 (= $x33 $x305)))
 (let (($x255 (=> $x23 $x22)))
 (let (($x140 (= $x44 $x61)))
 (let (($x47 (=> $x23 $x140)))
 (let (($x99 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x214)))
 (let (($x201 (=> $x23 $x99)))
 (let (($x268 (= $x96 $x271)))
 (let (($x230 (=> $x267 $x268)))
 (let (($x56 (= $x148 $x161)))
 (let (($x128 (=> $x267 $x56)))
 (let (($x11 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x95)))
 (let (($x197 (=> $x267 $x11)))
 (let (($x50 (and (and (and (and (and (= $x41 $x135) (= $x267 $x189)) $x34) $x197) $x128) $x82)))
 (let (($x176 (and (and (and (and (and (and $x50 $x230) $x201) $x47) $x255) $x89) $x254)))
 (let (($x19 (= $x176 true)))
 (let ((?x200 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x129 (= (_ bv0 3) ?x200)))
 (let (($x20 (= $x129 true)))
 (let (($x86 (= $x20 true)))
 (let (($x237 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x237 true)))
 (let (($x208 (= $x180 true)))
 (let (($x235 (= $x208 true)))
 (let (($x26 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x17 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32))) (or false (or false (and true (or $x125 $x26)))))))
 (let (($x139 (=> (and $x143 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32)))) (or false (or false (and true (or $x125 $x26)))))))
 (let (($x210 (= $x139 true)))
 (let (($x163 (= $x210 true)))
 (let (($x132 (= $x163 true)))
 (let ((?x179 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (bvugt ?x179 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x179 (_ bv3 32)))))
 (let (($x211 (=> (bvule ?x179 (bvsub (bvadd ?x179 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x178)))))))
 (let (($x136 (=> (and $x143 (bvule ?x179 (bvsub (bvadd ?x179 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x138 $x178)))))))
 (let (($x116 (= $x136 true)))
 (let (($x124 (= $x116 true)))
 (let (($x215 (= $x124 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x155)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x28 $x46)))
 (let (($x167 (and $x233 $x120)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x117 $x167)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x36)))))))
 (let (($x102 (and $x59 $x170)))
 (let (($x134 (= $x102 true)))
 (let (($x175 (= $x134 true)))
 (let (($x112 (= $x175 true)))
 (let (($x166 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x169 (= $x166 true)))
 (let (($x104 (= $x169 true)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= $x109 true)))
 (let (($x62 (= $x113 true)))
 (let (($x48 (and $x62 $x104)))
 (let (($x72 (and $x48 $x112)))
 (let (($x52 (and $x72 $x215)))
 (let (($x190 (and $x52 $x132)))
 (let (($x92 (and $x190 $x235)))
 (let (($x206 (and $x92 $x86)))
 (let (($x209 (and $x206 $x19)))
 (let (($x293 (and $x209 $x145)))
 (let (($x91 (and $x293 $x320)))
 (let (($x354 (and $x91 $x353)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x348 (and $x83 $x354)))
 (let (($x347 (=> $x348 $x375)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (not $x119)))
 (let (($x356 (= $x143 false)))
 (let (($x375 (= $x356 true)))
 (let ((?x146 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x245))))
 (let ((?x316 (bvadd ?x340 (_ bv4 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem ?x316))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv2 32))) ?x290))))
 (let (($x225 (= (_ bv0 32) ?x221)))
 (let ((?x279 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x322 (bvuge ?x279 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x333 (= $x238 $x322)))
 (let (($x240 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x276 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x192 (and $x276 $x240)))
 (let (($x336 (=> $x192 $x333)))
 (let (($x440 (= ?x279 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x331 (= $x43 $x440)))
 (let (($x329 (=> $x192 $x331)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x306))))
 (let (($x335 (= input.spec-%var-l-1.2.1.2.0 ?x247)))
 (let (($x326 (=> $x192 $x335)))
 (let (($x226 (= (_ bv0 32) ?x340)))
 (let ((?x40 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x40 (_ bv1 32))))
 (let (($x328 (= $x240 $x288)))
 (let (($x334 (=> $x276 $x328)))
 (let (($x256 (= ?x40 (_ bv0 32))))
 (let (($x173 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x73 (= $x173 $x256)))
 (let (($x27 (=> $x276 $x73)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x123 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x257 (concat (select input.dst.llvm-mem ?x123) (concat ?x217 (concat ?x264 ?x286)))))
 (let (($x79 (= input.spec-%var-l-1.2.0 ?x257)))
 (let (($x332 (=> $x276 $x79)))
 (let ((?x66 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (bvuge ?x66 (_ bv1 32))))
 (let (($x321 (= $x276 $x244)))
 (let (($x21 (= ?x66 (_ bv0 32))))
 (let (($x283 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x330 (= $x283 $x21)))
 (let (($x213 (and $x192 $x238)))
 (let (($x287 (not $x213)))
 (let (($x291 (and $x192 $x43)))
 (let (($x90 (not $x291)))
 (let (($x57 (= false false)))
 (let (($x194 (and $x276 $x173)))
 (let (($x301 (=> $x194 $x57)))
 (let (($x177 (=> $x283 $x57)))
 (let (($x379 (and (and (and (and (and (and $x177 $x301) $x90) $x287) $x330) $x321) $x332)))
 (let (($x447 (and (and (and (and (and $x379 $x27) $x334) $x326) $x329) $x336)))
 (let (($x353 (= $x447 true)))
 (let (($x33 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x96 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x267 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x23 (and $x267 $x96)))
 (let (($x296 (and $x23 $x33)))
 (let (($x254 (not $x296)))
 (let (($x44 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x35 (and $x23 $x44)))
 (let (($x89 (not $x35)))
 (let (($x182 (= $x33 $x322)))
 (let (($x324 (=> $x23 $x182)))
 (let (($x441 (= $x44 $x440)))
 (let (($x442 (=> $x23 $x441)))
 (let (($x246 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x247)))
 (let (($x285 (=> $x23 $x246)))
 (let (($x222 (= $x96 $x288)))
 (let (($x84 (=> $x267 $x222)))
 (let (($x148 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x243 (= $x148 $x256)))
 (let (($x300 (=> $x267 $x243)))
 (let (($x318 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x257)))
 (let (($x307 (=> $x267 $x318)))
 (let (($x114 (and $x267 $x148)))
 (let (($x82 (=> $x114 $x57)))
 (let (($x41 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x34 (=> $x41 $x57)))
 (let (($x342 (and (and (and (and (and (= $x41 $x21) (= $x267 $x244)) $x34) $x82) $x307) $x300)))
 (let (($x327 (and (and (and (and (and (and $x342 $x84) $x285) $x442) $x324) $x89) $x254)))
 (let (($x320 (= $x327 true)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x118 (concat ?x149 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x234 (concat ?x70 (concat ?x239 ?x118))))
 (let ((?x266 (bvadd ?x234 (_ bv4 32))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x54))))
 (let (($x110 (= (_ bv0 32) ?x68)))
 (let ((?x38 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x38 (_ bv1 32))))
 (let (($x5 (= $x238 $x305)))
 (let (($x262 (=> $x192 $x5)))
 (let (($x61 (= ?x38 (_ bv0 32))))
 (let (($x284 (= $x43 $x61)))
 (let (($x181 (=> $x192 $x284)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x87))))
 (let (($x15 (= input.spec-%var-l-1.2.1.2.0 ?x214)))
 (let (($x275 (=> $x192 $x15)))
 (let (($x183 (= (_ bv0 32) ?x234)))
 (let ((?x105 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x105 (_ bv1 32))))
 (let (($x133 (= $x240 $x271)))
 (let (($x304 (=> $x276 $x133)))
 (let (($x161 (= ?x105 (_ bv0 32))))
 (let (($x195 (= $x173 $x161)))
 (let (($x292 (=> $x276 $x195)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x7)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x6)))
 (let (($x207 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x191 (=> $x276 $x207)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x131 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x131 (_ bv1 32))))
 (let (($x187 (= $x276 $x189)))
 (let (($x135 (= ?x131 (_ bv0 32))))
 (let (($x186 (= $x283 $x135)))
 (let (($x227 (and (and (and (and (and (and $x186 $x187) $x177) $x191) $x292) $x301) $x304)))
 (let (($x315 (and (and (and (and (and $x227 $x275) $x181) $x262) $x90) $x287)))
 (let (($x145 (= $x315 true)))
 (let (($x22 (= $x33 $x305)))
 (let (($x255 (=> $x23 $x22)))
 (let (($x140 (= $x44 $x61)))
 (let (($x47 (=> $x23 $x140)))
 (let (($x99 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x214)))
 (let (($x201 (=> $x23 $x99)))
 (let (($x268 (= $x96 $x271)))
 (let (($x230 (=> $x267 $x268)))
 (let (($x56 (= $x148 $x161)))
 (let (($x128 (=> $x267 $x56)))
 (let (($x11 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x95)))
 (let (($x197 (=> $x267 $x11)))
 (let (($x50 (and (and (and (and (and (= $x41 $x135) (= $x267 $x189)) $x34) $x197) $x128) $x82)))
 (let (($x176 (and (and (and (and (and (and $x50 $x230) $x201) $x47) $x255) $x89) $x254)))
 (let (($x19 (= $x176 true)))
 (let ((?x200 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x129 (= (_ bv0 3) ?x200)))
 (let (($x20 (= $x129 true)))
 (let (($x86 (= $x20 true)))
 (let (($x237 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x237 true)))
 (let (($x208 (= $x180 true)))
 (let (($x235 (= $x208 true)))
 (let (($x26 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x17 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32))) (or false (or false (and true (or $x125 $x26)))))))
 (let (($x139 (=> (and $x143 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32)))) (or false (or false (and true (or $x125 $x26)))))))
 (let (($x210 (= $x139 true)))
 (let (($x163 (= $x210 true)))
 (let (($x132 (= $x163 true)))
 (let ((?x179 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (bvugt ?x179 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x179 (_ bv3 32)))))
 (let (($x211 (=> (bvule ?x179 (bvsub (bvadd ?x179 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x178)))))))
 (let (($x136 (=> (and $x143 (bvule ?x179 (bvsub (bvadd ?x179 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x138 $x178)))))))
 (let (($x116 (= $x136 true)))
 (let (($x124 (= $x116 true)))
 (let (($x215 (= $x124 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x155)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (and $x28 $x46)))
 (let (($x167 (and $x233 $x120)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x117 $x167)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x36)))))))
 (let (($x102 (and $x59 $x170)))
 (let (($x134 (= $x102 true)))
 (let (($x175 (= $x134 true)))
 (let (($x112 (= $x175 true)))
 (let (($x166 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x169 (= $x166 true)))
 (let (($x104 (= $x169 true)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= $x109 true)))
 (let (($x62 (= $x113 true)))
 (let (($x48 (and $x62 $x104)))
 (let (($x72 (and $x48 $x112)))
 (let (($x52 (and $x72 $x215)))
 (let (($x190 (and $x52 $x132)))
 (let (($x92 (and $x190 $x235)))
 (let (($x206 (and $x92 $x86)))
 (let (($x209 (and $x206 $x19)))
 (let (($x293 (and $x209 $x145)))
 (let (($x91 (and $x293 $x320)))
 (let (($x354 (and $x91 $x353)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x348 (and $x83 $x354)))
 (let (($x347 (=> $x348 $x375)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x1e000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x1e000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x00000003
              #x1e)
       #x00000003
       #x1e))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x83 (not $x64)))
 (let (($x266 (=> $x83 $x161)))
 (let (($x30 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139))))
 (let (($x242 (and true $x190)))
 (let (($x34 (and $x190 $x242)))
 (let ((?x85 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x41))))
 (let (($x42 (= (bvand ?x267 (_ bv4294967288 32)) ?x267)))
 (let (($x129 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x57 (and $x129 $x42)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv4 32))) (bvult ?x85 (bvsub ?x85 (_ bv4 32))))))
 (let (($x49 (and (and (and (and (and $x242 $x92) $x129) $x57) $x34) $x30)))
 (let (($x299 (= true $x49)))
 (let (($x75 (=> $x83 $x299)))
 (let (($x142 (=> (and $x75 $x83) $x161)))
 (let (($x317 (= $x142 true)))
 (let (($x81 (= $x317 true)))
 (let ((?x198 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x198 (_ bv1 32))))
 (let (($x268 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x214 (= $x268 $x103)))
 (let (($x310 (= ?x198 (_ bv0 32))))
 (let (($x96 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (= $x96 $x310)))
 (let (($x99 (and $x147 $x214)))
 (let (($x201 (= $x99 true)))
 (let (($x196 (= $x161 $x103)))
 (let (($x32 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x205 (= $x32 $x310)))
 (let (($x261 (and $x205 $x196)))
 (let (($x100 (= $x261 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x234 (_ bv1 32))))
 (let (($x230 (= $x268 $x56)))
 (let (($x183 (= ?x234 (_ bv0 32))))
 (let (($x271 (= $x96 $x183)))
 (let (($x9 (and $x271 $x230)))
 (let (($x23 (= $x9 true)))
 (let (($x128 (= $x161 $x56)))
 (let (($x105 (= $x32 $x183)))
 (let (($x314 (and $x105 $x128)))
 (let (($x114 (= $x314 true)))
 (let ((?x78 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x70 (= (_ bv0 3) ?x78)))
 (let (($x45 (= $x70 true)))
 (let (($x239 (= $x45 true)))
 (let (($x11 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x11 true)))
 (let (($x203 (= $x197 true)))
 (let (($x241 (= $x203 true)))
 (let (($x185 (= $x75 true)))
 (let (($x258 (= $x185 true)))
 (let (($x7 (= $x258 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x153)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x215 $x146)))
 (let (($x125 (and $x229 $x123)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x77 $x125)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x127)))))))
 (let (($x232 (and $x124 $x26)))
 (let (($x231 (= $x232 true)))
 (let (($x39 (= $x231 true)))
 (let (($x160 (= $x39 true)))
 (let (($x119 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x143 (= $x119 true)))
 (let (($x108 (= $x143 true)))
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= $x175 true)))
 (let (($x72 (= $x112 true)))
 (let (($x179 (and $x72 $x108)))
 (let (($x17 (and $x179 $x160)))
 (let (($x6 (and $x17 $x7)))
 (let (($x148 (and $x6 $x241)))
 (let (($x111 (and $x148 $x239)))
 (let (($x82 (and $x111 $x114)))
 (let (($x80 (and $x82 $x23)))
 (let (($x87 (and $x80 $x100)))
 (let (($x270 (and $x87 $x201)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x295 (and $x102 $x270)))
 (let (($x98 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd ?x85 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x167 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x98)))))))
 (let (($x121 (=> (and $x83 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x98)))))))
 (let (($x74 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x65 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x157 (=> $x65 (or false (or false (and true (or $x63 $x74)))))))
 (let (($x62 (=> (and $x83 $x65) (or false (or false (and true (or $x63 $x74)))))))
 (let (($x115 (and $x62 $x121)))
 (let (($x44 (and $x115 $x295)))
 (let (($x199 (=> $x44 $x81)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x83 (not $x64)))
 (let (($x266 (=> $x83 $x161)))
 (let (($x30 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139))))
 (let (($x242 (and true $x190)))
 (let (($x34 (and $x190 $x242)))
 (let ((?x85 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x41))))
 (let (($x42 (= (bvand ?x267 (_ bv4294967288 32)) ?x267)))
 (let (($x129 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x57 (and $x129 $x42)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv4 32))) (bvult ?x85 (bvsub ?x85 (_ bv4 32))))))
 (let (($x49 (and (and (and (and (and $x242 $x92) $x129) $x57) $x34) $x30)))
 (let (($x299 (= true $x49)))
 (let (($x75 (=> $x83 $x299)))
 (let (($x142 (=> (and $x75 $x83) $x161)))
 (let (($x317 (= $x142 true)))
 (let (($x81 (= $x317 true)))
 (let ((?x198 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x198 (_ bv1 32))))
 (let (($x268 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x214 (= $x268 $x103)))
 (let (($x310 (= ?x198 (_ bv0 32))))
 (let (($x96 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (= $x96 $x310)))
 (let (($x99 (and $x147 $x214)))
 (let (($x201 (= $x99 true)))
 (let (($x196 (= $x161 $x103)))
 (let (($x32 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x205 (= $x32 $x310)))
 (let (($x261 (and $x205 $x196)))
 (let (($x100 (= $x261 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x234 (_ bv1 32))))
 (let (($x230 (= $x268 $x56)))
 (let (($x183 (= ?x234 (_ bv0 32))))
 (let (($x271 (= $x96 $x183)))
 (let (($x9 (and $x271 $x230)))
 (let (($x23 (= $x9 true)))
 (let (($x128 (= $x161 $x56)))
 (let (($x105 (= $x32 $x183)))
 (let (($x314 (and $x105 $x128)))
 (let (($x114 (= $x314 true)))
 (let ((?x78 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x70 (= (_ bv0 3) ?x78)))
 (let (($x45 (= $x70 true)))
 (let (($x239 (= $x45 true)))
 (let (($x11 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x11 true)))
 (let (($x203 (= $x197 true)))
 (let (($x241 (= $x203 true)))
 (let (($x185 (= $x75 true)))
 (let (($x258 (= $x185 true)))
 (let (($x7 (= $x258 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x153)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x215 $x146)))
 (let (($x125 (and $x229 $x123)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x77 $x125)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x127)))))))
 (let (($x232 (and $x124 $x26)))
 (let (($x231 (= $x232 true)))
 (let (($x39 (= $x231 true)))
 (let (($x160 (= $x39 true)))
 (let (($x119 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x143 (= $x119 true)))
 (let (($x108 (= $x143 true)))
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= $x175 true)))
 (let (($x72 (= $x112 true)))
 (let (($x179 (and $x72 $x108)))
 (let (($x17 (and $x179 $x160)))
 (let (($x6 (and $x17 $x7)))
 (let (($x148 (and $x6 $x241)))
 (let (($x111 (and $x148 $x239)))
 (let (($x82 (and $x111 $x114)))
 (let (($x80 (and $x82 $x23)))
 (let (($x87 (and $x80 $x100)))
 (let (($x270 (and $x87 $x201)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x295 (and $x102 $x270)))
 (let (($x98 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd ?x85 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x167 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x98)))))))
 (let (($x121 (=> (and $x83 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x98)))))))
 (let (($x74 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x65 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x157 (=> $x65 (or false (or false (and true (or $x63 $x74)))))))
 (let (($x62 (=> (and $x83 $x65) (or false (or false (and true (or $x63 $x74)))))))
 (let (($x115 (and $x62 $x121)))
 (let (($x44 (and $x115 $x295)))
 (let (($x199 (=> $x44 $x81)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x189))))
 (let ((?x113 ((_ extract 2 0) ?x260)))
 (let (($x29 (= (_ bv0 3) ?x113)))
 (let (($x281 (= $x29 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x87 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x87 (_ bv1 32))))
 (let (($x205 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x142 (= $x205 $x99)))
 (let (($x147 (= ?x87 (_ bv0 32))))
 (let (($x198 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x266 (= $x198 $x147)))
 (let (($x317 (and $x266 $x142)))
 (let (($x81 (= $x317 true)))
 (let (($x72 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x201 (= $x72 $x99)))
 (let (($x128 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x214 (= $x128 $x147)))
 (let (($x270 (and $x214 $x201)))
 (let (($x295 (= $x270 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x82 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x82 (_ bv1 32))))
 (let (($x103 (= $x205 $x271)))
 (let (($x50 (= ?x82 (_ bv0 32))))
 (let (($x310 (= $x198 $x50)))
 (let (($x196 (and $x310 $x103)))
 (let (($x261 (= $x196 true)))
 (let (($x268 (= $x72 $x271)))
 (let (($x96 (= $x128 $x50)))
 (let (($x230 (and $x96 $x268)))
 (let (($x9 (= $x230 true)))
 (let ((?x234 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x234)))
 (let (($x105 (= $x183 true)))
 (let (($x161 (= $x105 true)))
 (let (($x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x239 true)))
 (let (($x149 (= $x111 true)))
 (let (($x32 (= $x149 true)))
 (let (($x258 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235))))
 (let (($x129 (and true $x200)))
 (let (($x75 (and $x200 $x129)))
 (let (($x49 (= (bvand ?x260 (_ bv4294967288 32)) ?x260)))
 (let (($x168 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x299 (and $x168 $x49)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x129 $x130) $x168) $x299) $x75) $x258)))
 (let (($x203 (= true $x197)))
 (let (($x83 (not $x64)))
 (let (($x241 (=> $x83 $x203)))
 (let (($x148 (= $x241 true)))
 (let (($x156 (= $x148 true)))
 (let (($x78 (= $x156 true)))
 (let (($x242 (= $x83 true)))
 (let (($x180 (= $x242 true)))
 (let (($x237 (= $x180 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x231)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x123 $x26)))
 (let (($x160 (and $x232 $x39)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x212 $x160)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x150)))))))
 (let (($x210 (and $x153 $x17)))
 (let (($x139 (= $x210 true)))
 (let (($x163 (= $x139 true)))
 (let (($x132 (= $x163 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x138 (= $x184 true)))
 (let (($x116 (= $x138 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (= $x119 true)))
 (let (($x108 (= $x143 true)))
 (let (($x178 (and $x108 $x116)))
 (let (($x190 (and $x178 $x132)))
 (let (($x208 (and $x190 $x237)))
 (let (($x70 (and $x208 $x78)))
 (let (($x118 (and $x70 $x32)))
 (let (($x56 (and $x118 $x161)))
 (let (($x23 (and $x56 $x9)))
 (let (($x100 (and $x23 $x261)))
 (let (($x44 (and $x100 $x295)))
 (let (($x199 (and $x44 $x81)))
 (let (($x204 (and $x72 $x199)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x152 (and $x175 $x204)))
 (let (($x233 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x65 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x102 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x233)))))))
 (let (($x120 (=> (and $x83 (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x233)))))))
 (let (($x137 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x94 (=> $x59 (or false (or false (and true (or $x97 $x137)))))))
 (let (($x104 (=> (and $x83 $x59) (or false (or false (and true (or $x97 $x137)))))))
 (let (($x117 (and $x104 $x120)))
 (let (($x122 (and $x117 $x152)))
 (let (($x54 (=> $x122 $x281)))
 (not $x54)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x189))))
 (let ((?x113 ((_ extract 2 0) ?x260)))
 (let (($x29 (= (_ bv0 3) ?x113)))
 (let (($x281 (= $x29 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x87 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x87 (_ bv1 32))))
 (let (($x205 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x142 (= $x205 $x99)))
 (let (($x147 (= ?x87 (_ bv0 32))))
 (let (($x198 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x266 (= $x198 $x147)))
 (let (($x317 (and $x266 $x142)))
 (let (($x81 (= $x317 true)))
 (let (($x72 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x201 (= $x72 $x99)))
 (let (($x128 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x214 (= $x128 $x147)))
 (let (($x270 (and $x214 $x201)))
 (let (($x295 (= $x270 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x82 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x82 (_ bv1 32))))
 (let (($x103 (= $x205 $x271)))
 (let (($x50 (= ?x82 (_ bv0 32))))
 (let (($x310 (= $x198 $x50)))
 (let (($x196 (and $x310 $x103)))
 (let (($x261 (= $x196 true)))
 (let (($x268 (= $x72 $x271)))
 (let (($x96 (= $x128 $x50)))
 (let (($x230 (and $x96 $x268)))
 (let (($x9 (= $x230 true)))
 (let ((?x234 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x234)))
 (let (($x105 (= $x183 true)))
 (let (($x161 (= $x105 true)))
 (let (($x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x239 true)))
 (let (($x149 (= $x111 true)))
 (let (($x32 (= $x149 true)))
 (let (($x258 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235))))
 (let (($x129 (and true $x200)))
 (let (($x75 (and $x200 $x129)))
 (let (($x49 (= (bvand ?x260 (_ bv4294967288 32)) ?x260)))
 (let (($x168 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x299 (and $x168 $x49)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x129 $x130) $x168) $x299) $x75) $x258)))
 (let (($x203 (= true $x197)))
 (let (($x83 (not $x64)))
 (let (($x241 (=> $x83 $x203)))
 (let (($x148 (= $x241 true)))
 (let (($x156 (= $x148 true)))
 (let (($x78 (= $x156 true)))
 (let (($x242 (= $x83 true)))
 (let (($x180 (= $x242 true)))
 (let (($x237 (= $x180 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x231)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x123 $x26)))
 (let (($x160 (and $x232 $x39)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x212 $x160)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x150)))))))
 (let (($x210 (and $x153 $x17)))
 (let (($x139 (= $x210 true)))
 (let (($x163 (= $x139 true)))
 (let (($x132 (= $x163 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x138 (= $x184 true)))
 (let (($x116 (= $x138 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (= $x119 true)))
 (let (($x108 (= $x143 true)))
 (let (($x178 (and $x108 $x116)))
 (let (($x190 (and $x178 $x132)))
 (let (($x208 (and $x190 $x237)))
 (let (($x70 (and $x208 $x78)))
 (let (($x118 (and $x70 $x32)))
 (let (($x56 (and $x118 $x161)))
 (let (($x23 (and $x56 $x9)))
 (let (($x100 (and $x23 $x261)))
 (let (($x44 (and $x100 $x295)))
 (let (($x199 (and $x44 $x81)))
 (let (($x204 (and $x72 $x199)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x152 (and $x175 $x204)))
 (let (($x233 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x65 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x102 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x233)))))))
 (let (($x120 (=> (and $x83 (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x233)))))))
 (let (($x137 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x94 (=> $x59 (or false (or false (and true (or $x97 $x137)))))))
 (let (($x104 (=> (and $x83 $x59) (or false (or false (and true (or $x97 $x137)))))))
 (let (($x117 (and $x104 $x120)))
 (let (($x122 (and $x117 $x152)))
 (let (($x54 (=> $x122 $x281)))
 (not $x54)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x36 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem ?x36) (concat ?x68 (concat ?x109 ?x54)))))
 (let ((?x140 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x61)))
 (let (($x47 (= (_ bv0 32) ?x140)))
 (let (($x265 (= $x47 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x99 (_ bv1 32))))
 (let (($x261 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x199 (= $x261 $x295)))
 (let (($x201 (= ?x99 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (= $x103 $x201)))
 (let (($x204 (and $x81 $x199)))
 (let (($x152 (= $x204 true)))
 (let (($x108 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x44 (= $x108 $x295)))
 (let (($x50 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x270 (= $x50 $x201)))
 (let (($x266 (and $x270 $x44)))
 (let (($x142 (= $x266 true)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x271 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x271 (_ bv1 32))))
 (let (($x100 (= $x261 $x9)))
 (let (($x268 (= ?x271 (_ bv0 32))))
 (let (($x196 (= $x103 $x268)))
 (let (($x87 (and $x196 $x100)))
 (let (($x147 (= $x87 true)))
 (let (($x23 (= $x108 $x9)))
 (let (($x230 (= $x50 $x268)))
 (let (($x80 (and $x230 $x23)))
 (let (($x198 (= $x80 true)))
 (let ((?x112 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= (_ bv0 3) ?x112)))
 (let (($x314 (= $x128 true)))
 (let (($x114 (= $x314 true)))
 (let (($x234 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= $x234 true)))
 (let (($x105 (= $x183 true)))
 (let (($x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x239 true)))
 (let (($x149 (= $x111 true)))
 (let (($x32 (= $x149 true)))
 (let (($x95 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x92 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x92) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x92))))
 (let (($x129 (and true $x200)))
 (let (($x49 (and $x200 $x129)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x297))))
 (let (($x107 (= (bvand ?x189 (_ bv4294967288 32)) ?x189)))
 (let (($x206 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x30 (and $x206 $x107)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x129 $x130) $x206) $x30) $x49) $x95)))
 (let (($x203 (= true $x197)))
 (let (($x83 (not $x64)))
 (let (($x241 (=> $x83 $x203)))
 (let (($x148 (= $x241 true)))
 (let (($x156 (= $x148 true)))
 (let (($x78 (= $x156 true)))
 (let (($x242 (= $x83 true)))
 (let (($x180 (= $x242 true)))
 (let (($x237 (= $x180 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x231)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x123 $x26)))
 (let (($x160 (and $x232 $x39)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x211 $x160)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x150 $x77)))))))
 (let (($x210 (and $x212 $x17)))
 (let (($x139 (= $x210 true)))
 (let (($x163 (= $x139 true)))
 (let (($x132 (= $x163 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x138 (= $x184 true)))
 (let (($x116 (= $x138 true)))
 (let (($x190 (and $x116 $x132)))
 (let (($x208 (and $x190 $x237)))
 (let (($x70 (and $x208 $x78)))
 (let (($x118 (and $x70 $x32)))
 (let (($x161 (and $x118 $x105)))
 (let (($x82 (and $x161 $x114)))
 (let (($x310 (and $x82 $x198)))
 (let (($x214 (and $x310 $x147)))
 (let (($x317 (and $x214 $x142)))
 (let (($x122 (and $x317 $x152)))
 (let (($x113 (and $x108 $x122)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x29 (and $x119 $x113)))
 (let (($x121 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x59 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x175 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x121)))))))
 (let (($x170 (=> (and $x83 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x167 $x121)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x98 (=> $x28 (or false (or false (and true (or $x157 $x62)))))))
 (let (($x31 (=> (and $x83 $x28) (or false (or false (and true (or $x157 $x62)))))))
 (let (($x106 (and $x31 $x170)))
 (let (($x281 (and $x106 $x29)))
 (let (($x33 (=> $x281 $x265)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x36 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem ?x36) (concat ?x68 (concat ?x109 ?x54)))))
 (let ((?x140 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x61)))
 (let (($x47 (= (_ bv0 32) ?x140)))
 (let (($x265 (= $x47 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x99 (_ bv1 32))))
 (let (($x261 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x199 (= $x261 $x295)))
 (let (($x201 (= ?x99 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (= $x103 $x201)))
 (let (($x204 (and $x81 $x199)))
 (let (($x152 (= $x204 true)))
 (let (($x108 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x44 (= $x108 $x295)))
 (let (($x50 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x270 (= $x50 $x201)))
 (let (($x266 (and $x270 $x44)))
 (let (($x142 (= $x266 true)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x271 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x271 (_ bv1 32))))
 (let (($x100 (= $x261 $x9)))
 (let (($x268 (= ?x271 (_ bv0 32))))
 (let (($x196 (= $x103 $x268)))
 (let (($x87 (and $x196 $x100)))
 (let (($x147 (= $x87 true)))
 (let (($x23 (= $x108 $x9)))
 (let (($x230 (= $x50 $x268)))
 (let (($x80 (and $x230 $x23)))
 (let (($x198 (= $x80 true)))
 (let ((?x112 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= (_ bv0 3) ?x112)))
 (let (($x314 (= $x128 true)))
 (let (($x114 (= $x314 true)))
 (let (($x234 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= $x234 true)))
 (let (($x105 (= $x183 true)))
 (let (($x239 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x239 true)))
 (let (($x149 (= $x111 true)))
 (let (($x32 (= $x149 true)))
 (let (($x95 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x92 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x92) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x92))))
 (let (($x129 (and true $x200)))
 (let (($x49 (and $x200 $x129)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x297))))
 (let (($x107 (= (bvand ?x189 (_ bv4294967288 32)) ?x189)))
 (let (($x206 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x30 (and $x206 $x107)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x129 $x130) $x206) $x30) $x49) $x95)))
 (let (($x203 (= true $x197)))
 (let (($x83 (not $x64)))
 (let (($x241 (=> $x83 $x203)))
 (let (($x148 (= $x241 true)))
 (let (($x156 (= $x148 true)))
 (let (($x78 (= $x156 true)))
 (let (($x242 (= $x83 true)))
 (let (($x180 (= $x242 true)))
 (let (($x237 (= $x180 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x231)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x123 $x26)))
 (let (($x160 (and $x232 $x39)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x211 $x160)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x150 $x77)))))))
 (let (($x210 (and $x212 $x17)))
 (let (($x139 (= $x210 true)))
 (let (($x163 (= $x139 true)))
 (let (($x132 (= $x163 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x138 (= $x184 true)))
 (let (($x116 (= $x138 true)))
 (let (($x190 (and $x116 $x132)))
 (let (($x208 (and $x190 $x237)))
 (let (($x70 (and $x208 $x78)))
 (let (($x118 (and $x70 $x32)))
 (let (($x161 (and $x118 $x105)))
 (let (($x82 (and $x161 $x114)))
 (let (($x310 (and $x82 $x198)))
 (let (($x214 (and $x310 $x147)))
 (let (($x317 (and $x214 $x142)))
 (let (($x122 (and $x317 $x152)))
 (let (($x113 (and $x108 $x122)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x29 (and $x119 $x113)))
 (let (($x121 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x59 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x175 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x121)))))))
 (let (($x170 (=> (and $x83 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x167 $x121)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x98 (=> $x28 (or false (or false (and true (or $x157 $x62)))))))
 (let (($x31 (=> (and $x83 $x28) (or false (or false (and true (or $x157 $x62)))))))
 (let (($x106 (and $x31 $x170)))
 (let (($x281 (and $x106 $x29)))
 (let (($x33 (=> $x281 $x265)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x85) (concat ?x35 (concat ?x22 ?x178)))))
 (let ((?x254 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x296)))
 (let (($x176 (= (_ bv0 32) ?x254)))
 (let (($x19 (= $x176 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x152 (_ bv1 32))))
 (let (($x270 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x126 (= $x270 $x29)))
 (let (($x122 (= ?x152 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x54 (= $x99 $x122)))
 (let (($x140 (and (and (and (not $x99) (not $x270)) $x54) $x126)))
 (let (($x47 (= $x140 true)))
 (let (($x116 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x103 (not $x116)))
 (let (($x268 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x205 (not $x268)))
 (let (($x68 (and (and (and (= $x268 $x122) (= $x116 $x29)) $x205) $x103)))
 (let (($x253 (= $x68 true)))
 (let (($x266 (not $x270)))
 (let (($x44 (not $x99)))
 (let (($x108 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x9 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x9 (_ bv1 32))))
 (let (($x295 (= $x270 $x198)))
 (let (($x23 (= ?x9 (_ bv0 32))))
 (let (($x201 (= $x99 $x23)))
 (let (($x81 (and (and (and $x201 $x295) $x44) $x266)))
 (let (($x199 (= $x81 true)))
 (let (($x100 (and (and (and (= $x268 $x23) (= $x116 $x198)) $x205) $x103)))
 (let (($x87 (= $x100 true)))
 (let ((?x143 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x50 (= (_ bv0 3) ?x143)))
 (let (($x96 (= $x50 true)))
 (let (($x72 (= $x96 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= $x112 true)))
 (let (($x314 (= $x128 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x162 true)))
 (let (($x183 (= $x234 true)))
 (let (($x105 (= $x183 true)))
 (let (($x197 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x129 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x172 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x129) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x129))))
 (let (($x130 (and true $x172)))
 (let (($x299 (and $x172 $x130)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x6))))
 (let (($x49 (= (bvand ?x107 (_ bv4294967288 32)) ?x107)))
 (let (($x42 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x258 (and $x42 $x49)))
 (let (($x11 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x78 (and (and (and (and (and $x130 $x11) $x42) $x258) $x299) $x197)))
 (let (($x70 (= true $x78)))
 (let (($x83 (not $x64)))
 (let (($x45 (=> $x83 $x70)))
 (let (($x239 (= $x45 true)))
 (let (($x111 (= $x239 true)))
 (let (($x149 (= $x111 true)))
 (let (($x92 (= $x83 true)))
 (let (($x159 (= $x92 true)))
 (let (($x188 (= $x159 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x139)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x39 $x17)))
 (let (($x132 (and $x210 $x163)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x215 $x132)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x231 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x212 $x76)))))))
 (let (($x242 (and $x231 $x190)))
 (let (($x180 (= $x242 true)))
 (let (($x237 (= $x180 true)))
 (let (($x208 (= $x237 true)))
 (let (($x136 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x127 (= $x136 true)))
 (let (($x124 (= $x127 true)))
 (let (($x235 (and $x124 $x208)))
 (let (($x200 (and $x235 $x188)))
 (let (($x32 (and $x200 $x149)))
 (let (($x161 (and $x32 $x105)))
 (let (($x114 (and $x161 $x314)))
 (let (($x271 (and $x114 $x72)))
 (let (($x147 (and $x271 $x87)))
 (let (($x204 (and $x147 $x199)))
 (let (($x109 (and $x204 $x253)))
 (let (($x265 (and $x109 $x47)))
 (let (($x33 (and $x116 $x265)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x305 (and $x184 $x33)))
 (let (($x120 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x28 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x119 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x120)))))))
 (let (($x134 (=> (and $x83 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x102 $x120)))))))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x46 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x233 (=> $x46 (or false (or false (and true (or $x94 $x104)))))))
 (let (($x71 (=> (and $x83 $x46) (or false (or false (and true (or $x94 $x104)))))))
 (let (($x155 (and $x71 $x134)))
 (let (($x166 (and $x155 $x305)))
 (let (($x209 (=> $x166 $x19)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x85) (concat ?x35 (concat ?x22 ?x178)))))
 (let ((?x254 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x296)))
 (let (($x176 (= (_ bv0 32) ?x254)))
 (let (($x19 (= $x176 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x152 (_ bv1 32))))
 (let (($x270 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x126 (= $x270 $x29)))
 (let (($x122 (= ?x152 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x54 (= $x99 $x122)))
 (let (($x140 (and (and (and (not $x99) (not $x270)) $x54) $x126)))
 (let (($x47 (= $x140 true)))
 (let (($x116 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x103 (not $x116)))
 (let (($x268 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x205 (not $x268)))
 (let (($x68 (and (and (and (= $x268 $x122) (= $x116 $x29)) $x205) $x103)))
 (let (($x253 (= $x68 true)))
 (let (($x266 (not $x270)))
 (let (($x44 (not $x99)))
 (let (($x108 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x9 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x9 (_ bv1 32))))
 (let (($x295 (= $x270 $x198)))
 (let (($x23 (= ?x9 (_ bv0 32))))
 (let (($x201 (= $x99 $x23)))
 (let (($x81 (and (and (and $x201 $x295) $x44) $x266)))
 (let (($x199 (= $x81 true)))
 (let (($x100 (and (and (and (= $x268 $x23) (= $x116 $x198)) $x205) $x103)))
 (let (($x87 (= $x100 true)))
 (let ((?x143 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x50 (= (_ bv0 3) ?x143)))
 (let (($x96 (= $x50 true)))
 (let (($x72 (= $x96 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= $x112 true)))
 (let (($x314 (= $x128 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x162 true)))
 (let (($x183 (= $x234 true)))
 (let (($x105 (= $x183 true)))
 (let (($x197 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x129 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x172 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x129) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x129))))
 (let (($x130 (and true $x172)))
 (let (($x299 (and $x172 $x130)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x6))))
 (let (($x49 (= (bvand ?x107 (_ bv4294967288 32)) ?x107)))
 (let (($x42 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x258 (and $x42 $x49)))
 (let (($x11 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x78 (and (and (and (and (and $x130 $x11) $x42) $x258) $x299) $x197)))
 (let (($x70 (= true $x78)))
 (let (($x83 (not $x64)))
 (let (($x45 (=> $x83 $x70)))
 (let (($x239 (= $x45 true)))
 (let (($x111 (= $x239 true)))
 (let (($x149 (= $x111 true)))
 (let (($x92 (= $x83 true)))
 (let (($x159 (= $x92 true)))
 (let (($x188 (= $x159 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x139)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x39 $x17)))
 (let (($x132 (and $x210 $x163)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x215 $x132)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x231 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x212 $x76)))))))
 (let (($x242 (and $x231 $x190)))
 (let (($x180 (= $x242 true)))
 (let (($x237 (= $x180 true)))
 (let (($x208 (= $x237 true)))
 (let (($x136 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x127 (= $x136 true)))
 (let (($x124 (= $x127 true)))
 (let (($x235 (and $x124 $x208)))
 (let (($x200 (and $x235 $x188)))
 (let (($x32 (and $x200 $x149)))
 (let (($x161 (and $x32 $x105)))
 (let (($x114 (and $x161 $x314)))
 (let (($x271 (and $x114 $x72)))
 (let (($x147 (and $x271 $x87)))
 (let (($x204 (and $x147 $x199)))
 (let (($x109 (and $x204 $x253)))
 (let (($x265 (and $x109 $x47)))
 (let (($x33 (and $x116 $x265)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x305 (and $x184 $x33)))
 (let (($x120 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x28 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x119 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x120)))))))
 (let (($x134 (=> (and $x83 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x102 $x120)))))))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x46 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x233 (=> $x46 (or false (or false (and true (or $x94 $x104)))))))
 (let (($x71 (=> (and $x83 $x46) (or false (or false (and true (or $x94 $x104)))))))
 (let (($x155 (and $x71 $x134)))
 (let (($x166 (and $x155 $x305)))
 (let (($x209 (=> $x166 $x19)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x65) (concat ?x55 (concat ?x101 ?x305)))))
 (let ((?x89 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x255)))
 (let (($x296 (= (_ bv0 32) ?x89)))
 (let (($x254 (= $x296 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x152 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (= $x142 $x29)))
 (let (($x122 (= ?x152 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x109 (= $x270 $x122)))
 (let (($x103 (= false false)))
 (let (($x317 (=> $x270 $x103)))
 (let (($x61 (and (and $x317 $x109) $x110)))
 (let (($x126 (= $x61 true)))
 (let (($x23 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x100 (=> $x23 $x103)))
 (let (($x124 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x281 (= $x124 $x29)))
 (let (($x113 (= $x23 $x122)))
 (let (($x169 (and (and $x113 $x281) $x100)))
 (let (($x68 (= $x169 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x198 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x198 (_ bv1 32))))
 (let (($x44 (= $x142 $x205)))
 (let (($x310 (= ?x198 (_ bv0 32))))
 (let (($x295 (= $x270 $x310)))
 (let (($x81 (and (and $x295 $x44) $x317)))
 (let (($x199 (= $x81 true)))
 (let (($x147 (and (and (= $x23 $x310) (= $x124 $x205)) $x100)))
 (let (($x214 (= $x147 true)))
 (let ((?x138 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x268 (= (_ bv0 3) ?x138)))
 (let (($x230 (= $x268 true)))
 (let (($x108 (= $x230 true)))
 (let (($x143 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x50 (= $x143 true)))
 (let (($x96 (= $x50 true)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x56 true)))
 (let (($x128 (= $x112 true)))
 (let (($x314 (= $x128 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x206 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130))))
 (let (($x11 (and true $x206)))
 (let (($x95 (and $x206 $x11)))
 (let ((?x46 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x135))))
 (let (($x299 (= (bvand ?x49 (_ bv4294967288 32)) ?x49)))
 (let (($x297 (= (bvand ?x46 (_ bv4294967292 32)) ?x46)))
 (let (($x156 (and $x297 $x299)))
 (let (($x241 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x46 (bvsub ?x46 (_ bv4 32))) (bvult ?x46 (bvsub ?x46 (_ bv4 32))))))
 (let (($x149 (and (and (and (and (and $x11 $x241) $x297) $x156) $x95) $x78)))
 (let (($x32 (= true $x149)))
 (let (($x83 (not $x64)))
 (let (($x118 (=> $x83 $x32)))
 (let (($x162 (= $x118 true)))
 (let (($x234 (= $x162 true)))
 (let (($x183 (= $x234 true)))
 (let (($x129 (= $x83 true)))
 (let (($x20 (= $x129 true)))
 (let (($x193 (= $x20 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x180)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x163 $x190)))
 (let (($x208 (and $x242 $x237)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x211 $x208)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x231 $x77)))))))
 (let (($x92 (and $x139 $x235)))
 (let (($x159 (= $x92 true)))
 (let (($x188 (= $x159 true)))
 (let (($x200 (= $x188 true)))
 (let (($x146 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x232 (= $x146 true)))
 (let (($x153 (= $x232 true)))
 (let (($x202 (and $x153 $x200)))
 (let (($x172 (and $x202 $x193)))
 (let (($x105 (and $x172 $x183)))
 (let (($x114 (and $x105 $x314)))
 (let (($x72 (and $x114 $x96)))
 (let (($x9 (and $x72 $x108)))
 (let (($x99 (and $x9 $x214)))
 (let (($x204 (and $x99 $x199)))
 (let (($x253 (and $x204 $x68)))
 (let (($x140 (and $x253 $x126)))
 (let (($x47 (and $x124 $x140)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x265 (and $x136 $x47)))
 (let (($x170 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd ?x46 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x184 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x170)))))))
 (let (($x236 (=> (and $x83 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x175 $x170)))))))
 (let (($x31 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x167 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x121 (=> $x167 (or false (or false (and true (or $x98 $x31)))))))
 (let (($x36 (=> (and $x83 $x167) (or false (or false (and true (or $x98 $x31)))))))
 (let (($x115 (and $x36 $x236)))
 (let (($x33 (and $x115 $x265)))
 (let (($x176 (=> $x33 $x254)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x65) (concat ?x55 (concat ?x101 ?x305)))))
 (let ((?x89 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x255)))
 (let (($x296 (= (_ bv0 32) ?x89)))
 (let (($x254 (= $x296 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x152 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (= $x142 $x29)))
 (let (($x122 (= ?x152 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x109 (= $x270 $x122)))
 (let (($x103 (= false false)))
 (let (($x317 (=> $x270 $x103)))
 (let (($x61 (and (and $x317 $x109) $x110)))
 (let (($x126 (= $x61 true)))
 (let (($x23 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x100 (=> $x23 $x103)))
 (let (($x124 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x281 (= $x124 $x29)))
 (let (($x113 (= $x23 $x122)))
 (let (($x169 (and (and $x113 $x281) $x100)))
 (let (($x68 (= $x169 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x198 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x198 (_ bv1 32))))
 (let (($x44 (= $x142 $x205)))
 (let (($x310 (= ?x198 (_ bv0 32))))
 (let (($x295 (= $x270 $x310)))
 (let (($x81 (and (and $x295 $x44) $x317)))
 (let (($x199 (= $x81 true)))
 (let (($x147 (and (and (= $x23 $x310) (= $x124 $x205)) $x100)))
 (let (($x214 (= $x147 true)))
 (let ((?x138 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x268 (= (_ bv0 3) ?x138)))
 (let (($x230 (= $x268 true)))
 (let (($x108 (= $x230 true)))
 (let (($x143 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x50 (= $x143 true)))
 (let (($x96 (= $x50 true)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x56 true)))
 (let (($x128 (= $x112 true)))
 (let (($x314 (= $x128 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x206 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130))))
 (let (($x11 (and true $x206)))
 (let (($x95 (and $x206 $x11)))
 (let ((?x46 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x135))))
 (let (($x299 (= (bvand ?x49 (_ bv4294967288 32)) ?x49)))
 (let (($x297 (= (bvand ?x46 (_ bv4294967292 32)) ?x46)))
 (let (($x156 (and $x297 $x299)))
 (let (($x241 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x46 (bvsub ?x46 (_ bv4 32))) (bvult ?x46 (bvsub ?x46 (_ bv4 32))))))
 (let (($x149 (and (and (and (and (and $x11 $x241) $x297) $x156) $x95) $x78)))
 (let (($x32 (= true $x149)))
 (let (($x83 (not $x64)))
 (let (($x118 (=> $x83 $x32)))
 (let (($x162 (= $x118 true)))
 (let (($x234 (= $x162 true)))
 (let (($x183 (= $x234 true)))
 (let (($x129 (= $x83 true)))
 (let (($x20 (= $x129 true)))
 (let (($x193 (= $x20 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x180)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x163 $x190)))
 (let (($x208 (and $x242 $x237)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x211 $x208)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x231 $x77)))))))
 (let (($x92 (and $x139 $x235)))
 (let (($x159 (= $x92 true)))
 (let (($x188 (= $x159 true)))
 (let (($x200 (= $x188 true)))
 (let (($x146 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x232 (= $x146 true)))
 (let (($x153 (= $x232 true)))
 (let (($x202 (and $x153 $x200)))
 (let (($x172 (and $x202 $x193)))
 (let (($x105 (and $x172 $x183)))
 (let (($x114 (and $x105 $x314)))
 (let (($x72 (and $x114 $x96)))
 (let (($x9 (and $x72 $x108)))
 (let (($x99 (and $x9 $x214)))
 (let (($x204 (and $x99 $x199)))
 (let (($x253 (and $x204 $x68)))
 (let (($x140 (and $x253 $x126)))
 (let (($x47 (and $x124 $x140)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x265 (and $x136 $x47)))
 (let (($x170 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd ?x46 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x184 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x170)))))))
 (let (($x236 (=> (and $x83 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x175 $x170)))))))
 (let (($x31 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x167 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x121 (=> $x167 (or false (or false (and true (or $x98 $x31)))))))
 (let (($x36 (=> (and $x83 $x167) (or false (or false (and true (or $x98 $x31)))))))
 (let (($x115 (and $x36 $x236)))
 (let (($x33 (and $x115 $x265)))
 (let (($x176 (=> $x33 $x254)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem ?x59) (concat ?x63 (concat ?x254 ?x89)))))
 (let ((?x220 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x209)))
 (let (($x48 (= (_ bv0 32) ?x220)))
 (let (($x150 (= $x48 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x68 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x68 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (= $x199 $x54)))
 (let (($x253 (= ?x68 (_ bv0 32))))
 (let (($x317 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x33 (= $x317 $x253)))
 (let (($x166 (and (and (and (not $x199) (=> $x317 (= false false))) $x33) $x178)))
 (let (($x101 (= $x166 true)))
 (let (($x214 (= false false)))
 (let (($x310 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x99 (=> $x310 $x214)))
 (let (($x153 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x147 (not $x153)))
 (let (($x140 (and (and (and (= $x310 $x253) (= $x153 $x54)) $x147) $x99)))
 (let (($x47 (= $x140 true)))
 (let (($x122 (=> $x317 $x214)))
 (let (($x152 (not $x199)))
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x205 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x205 (_ bv1 32))))
 (let (($x204 (= $x199 $x103)))
 (let (($x261 (= ?x205 (_ bv0 32))))
 (let (($x81 (= $x317 $x261)))
 (let (($x281 (and (and (and $x81 $x204) $x152) $x122)))
 (let (($x38 (= $x281 true)))
 (let (($x295 (and (and (and (= $x310 $x261) (= $x153 $x103)) $x147) $x99)))
 (let (($x142 (= $x295 true)))
 (let ((?x127 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= (_ bv0 3) ?x127)))
 (let (($x80 (= $x23 true)))
 (let (($x116 (= $x80 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x268 (= $x138 true)))
 (let (($x230 (= $x268 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x143 (= $x82 true)))
 (let (($x50 (= $x143 true)))
 (let (($x96 (= $x50 true)))
 (let (($x149 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x11 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x11) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x11))))
 (let (($x241 (and true $x42)))
 (let (($x197 (and $x42 $x241)))
 (let ((?x167 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x189))))
 (let (($x95 (= (bvand ?x299 (_ bv4294967288 32)) ?x299)))
 (let (($x6 (= (bvand ?x167 (_ bv4294967292 32)) ?x167)))
 (let (($x111 (and $x6 $x95)))
 (let (($x45 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x167 (bvsub ?x167 (_ bv4 32))) (bvult ?x167 (bvsub ?x167 (_ bv4 32))))))
 (let (($x183 (and (and (and (and (and $x241 $x45) $x6) $x111) $x197) $x149)))
 (let (($x105 (= true $x183)))
 (let (($x83 (not $x64)))
 (let (($x161 (=> $x83 $x105)))
 (let (($x56 (= $x161 true)))
 (let (($x112 (= $x56 true)))
 (let (($x128 (= $x112 true)))
 (let (($x130 (= $x83 true)))
 (let (($x75 (= $x130 true)))
 (let (($x131 (= $x75 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x159)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x237 $x235)))
 (let (($x200 (and $x92 $x188)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x215 $x200)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x76)))))))
 (let (($x129 (and $x180 $x202)))
 (let (($x20 (= $x129 true)))
 (let (($x193 (= $x20 true)))
 (let (($x172 (= $x193 true)))
 (let (($x125 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x210 (= $x125 true)))
 (let (($x26 (= $x210 true)))
 (let (($x7 (and $x26 $x172)))
 (let (($x206 (and $x7 $x131)))
 (let (($x314 (and $x206 $x128)))
 (let (($x72 (and $x314 $x96)))
 (let (($x108 (and $x72 $x230)))
 (let (($x198 (and $x108 $x116)))
 (let (($x44 (and $x198 $x142)))
 (let (($x169 (and $x44 $x38)))
 (let (($x265 (and $x169 $x47)))
 (let (($x305 (and $x265 $x101)))
 (let (($x269 (and $x153 $x305)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x22 (and $x146 $x269)))
 (let (($x134 (bvugt ?x167 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x167 (_ bv3 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x136 (=> (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x134)))))))
 (let (($x179 (=> (and $x83 (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x119 $x134)))))))
 (let (($x71 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x102 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x120 (=> $x102 (or false (or false (and true (or $x233 $x71)))))))
 (let (($x85 (=> (and $x83 $x102) (or false (or false (and true (or $x233 $x71)))))))
 (let (($x117 (and $x85 $x179)))
 (let (($x255 (and $x117 $x22)))
 (let (($x74 (=> $x255 $x150)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem ?x59) (concat ?x63 (concat ?x254 ?x89)))))
 (let ((?x220 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x209)))
 (let (($x48 (= (_ bv0 32) ?x220)))
 (let (($x150 (= $x48 true)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x68 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x68 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (= $x199 $x54)))
 (let (($x253 (= ?x68 (_ bv0 32))))
 (let (($x317 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x33 (= $x317 $x253)))
 (let (($x166 (and (and (and (not $x199) (=> $x317 (= false false))) $x33) $x178)))
 (let (($x101 (= $x166 true)))
 (let (($x214 (= false false)))
 (let (($x310 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x99 (=> $x310 $x214)))
 (let (($x153 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x147 (not $x153)))
 (let (($x140 (and (and (and (= $x310 $x253) (= $x153 $x54)) $x147) $x99)))
 (let (($x47 (= $x140 true)))
 (let (($x122 (=> $x317 $x214)))
 (let (($x152 (not $x199)))
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x205 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x205 (_ bv1 32))))
 (let (($x204 (= $x199 $x103)))
 (let (($x261 (= ?x205 (_ bv0 32))))
 (let (($x81 (= $x317 $x261)))
 (let (($x281 (and (and (and $x81 $x204) $x152) $x122)))
 (let (($x38 (= $x281 true)))
 (let (($x295 (and (and (and (= $x310 $x261) (= $x153 $x103)) $x147) $x99)))
 (let (($x142 (= $x295 true)))
 (let ((?x127 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= (_ bv0 3) ?x127)))
 (let (($x80 (= $x23 true)))
 (let (($x116 (= $x80 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x268 (= $x138 true)))
 (let (($x230 (= $x268 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x143 (= $x82 true)))
 (let (($x50 (= $x143 true)))
 (let (($x96 (= $x50 true)))
 (let (($x149 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x11 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x11) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x11))))
 (let (($x241 (and true $x42)))
 (let (($x197 (and $x42 $x241)))
 (let ((?x167 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x189))))
 (let (($x95 (= (bvand ?x299 (_ bv4294967288 32)) ?x299)))
 (let (($x6 (= (bvand ?x167 (_ bv4294967292 32)) ?x167)))
 (let (($x111 (and $x6 $x95)))
 (let (($x45 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x167 (bvsub ?x167 (_ bv4 32))) (bvult ?x167 (bvsub ?x167 (_ bv4 32))))))
 (let (($x183 (and (and (and (and (and $x241 $x45) $x6) $x111) $x197) $x149)))
 (let (($x105 (= true $x183)))
 (let (($x83 (not $x64)))
 (let (($x161 (=> $x83 $x105)))
 (let (($x56 (= $x161 true)))
 (let (($x112 (= $x56 true)))
 (let (($x128 (= $x112 true)))
 (let (($x130 (= $x83 true)))
 (let (($x75 (= $x130 true)))
 (let (($x131 (= $x75 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x159)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x237 $x235)))
 (let (($x200 (and $x92 $x188)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x215 $x200)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x76)))))))
 (let (($x129 (and $x180 $x202)))
 (let (($x20 (= $x129 true)))
 (let (($x193 (= $x20 true)))
 (let (($x172 (= $x193 true)))
 (let (($x125 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x210 (= $x125 true)))
 (let (($x26 (= $x210 true)))
 (let (($x7 (and $x26 $x172)))
 (let (($x206 (and $x7 $x131)))
 (let (($x314 (and $x206 $x128)))
 (let (($x72 (and $x314 $x96)))
 (let (($x108 (and $x72 $x230)))
 (let (($x198 (and $x108 $x116)))
 (let (($x44 (and $x198 $x142)))
 (let (($x169 (and $x44 $x38)))
 (let (($x265 (and $x169 $x47)))
 (let (($x305 (and $x265 $x101)))
 (let (($x269 (and $x153 $x305)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x22 (and $x146 $x269)))
 (let (($x134 (bvugt ?x167 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x167 (_ bv3 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x136 (=> (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x134)))))))
 (let (($x179 (=> (and $x83 (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x119 $x134)))))))
 (let (($x71 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x102 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x120 (=> $x102 (or false (or false (and true (or $x233 $x71)))))))
 (let (($x85 (=> (and $x83 $x102) (or false (or false (and true (or $x233 $x71)))))))
 (let (($x117 (and $x85 $x179)))
 (let (($x255 (and $x117 $x22)))
 (let (($x74 (=> $x255 $x150)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x28) (concat ?x84 (concat ?x342 ?x243)))))
 (let ((?x365 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x216)))
 (let (($x368 (= (_ bv0 32) ?x365)))
 (let (($x449 (= $x368 true)))
 (let ((?x98 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x306))))
 (let ((?x323 (bvadd ?x316 (_ bv4 32))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x228))))
 (let (($x79 (= (_ bv0 32) ?x343)))
 (let ((?x332 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x446 (bvuge ?x332 (_ bv1 32))))
 (let (($x69 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x349 (= $x69 $x446)))
 (let (($x244 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x302 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x325 (and $x302 $x244)))
 (let (($x448 (=> $x325 $x349)))
 (let (($x379 (= ?x332 (_ bv0 32))))
 (let (($x280 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x350 (= $x280 $x379)))
 (let (($x351 (=> $x325 $x350)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem ?x316))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv2 32))) ?x279))))
 (let (($x376 (= input.spec-%var-l-1.2.1.2.0 ?x182)))
 (let (($x357 (=> $x325 $x376)))
 (let (($x259 (= (_ bv0 32) ?x316)))
 (let ((?x439 (ite $x259 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x439 (_ bv1 32))))
 (let (($x60 (= $x244 $x37)))
 (let (($x144 (=> $x302 $x60)))
 (let (($x93 (= ?x439 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x347 (= $x145 $x93)))
 (let (($x346 (=> $x302 $x347)))
 (let (($x356 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x375 (=> $x302 $x356)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x312 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x312 (_ bv1 32))))
 (let (($x348 (= $x302 $x40)))
 (let (($x340 (= ?x312 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x354 (= $x5 $x340)))
 (let (($x214 (= false false)))
 (let (($x21 (and $x302 $x145)))
 (let (($x311 (=> $x21 $x214)))
 (let (($x90 (=> $x5 $x214)))
 (let (($x358 (and (and (and (and (and (and $x90 $x311) $x354) $x348) $x375) $x346) $x144)))
 (let (($x360 (and (and (and $x358 $x357) $x351) $x448)))
 (let (($x369 (= $x360 true)))
 (let (($x249 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x328 (= $x249 $x446)))
 (let (($x22 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x63 (and $x26 $x22)))
 (let (($x334 (=> $x63 $x328)))
 (let (($x186 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x73 (= $x186 $x379)))
 (let (($x27 (=> $x63 $x73)))
 (let (($x324 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x182)))
 (let (($x444 (=> $x63 $x324)))
 (let (($x218 (= $x22 $x37)))
 (let (($x290 (=> $x26 $x218)))
 (let (($x169 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x263 (= $x169 $x93)))
 (let (($x219 (=> $x26 $x263)))
 (let (($x25 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x216)))
 (let (($x248 (=> $x26 $x25)))
 (let (($x305 (and $x26 $x169)))
 (let (($x269 (=> $x305 $x214)))
 (let (($x261 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x99 (=> $x261 $x214)))
 (let (($x331 (and (and (and (and (and (= $x261 $x340) (= $x26 $x40)) $x99) $x269) $x248) $x219)))
 (let (($x336 (and (and (and (and $x331 $x290) $x444) $x27) $x334)))
 (let (($x447 (= $x336 true)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x110 (concat ?x54 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x265 (concat ?x126 ?x110))))
 (let ((?x276 (bvadd ?x35 (_ bv4 32))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x165))))
 (let (($x195 (= (_ bv0 32) ?x173)))
 (let ((?x292 (ite $x195 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x292 (_ bv1 32))))
 (let (($x308 (= $x69 $x240)))
 (let (($x257 (=> $x325 $x308)))
 (let (($x294 (= ?x292 (_ bv0 32))))
 (let (($x264 (= $x280 $x294)))
 (let (($x286 (=> $x325 $x264)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x212))))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.0 ?x283)))
 (let (($x282 (=> $x325 $x58)))
 (let (($x33 (= (_ bv0 32) ?x35)))
 (let ((?x55 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x55 (_ bv1 32))))
 (let (($x303 (= $x244 $x255)))
 (let (($x341 (=> $x302 $x303)))
 (let (($x178 (= ?x55 (_ bv0 32))))
 (let (($x293 (= $x145 $x178)))
 (let (($x66 (=> $x302 $x293)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x317)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x204)))
 (let (($x213 (= input.spec-%var-l-1.2.0 ?x29)))
 (let (($x287 (=> $x302 $x213)))
 (let (($x153 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x153 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x103 (_ bv1 32))))
 (let (($x291 (= $x302 $x147)))
 (let (($x100 (= ?x103 (_ bv0 32))))
 (let (($x262 (= $x5 $x100)))
 (let (($x223 (and (and (and (and (and (and $x262 $x291) $x90) $x287) $x66) $x311) $x341)))
 (let (($x252 (and (and (and $x223 $x282) $x286) $x257)))
 (let (($x224 (= $x252 true)))
 (let (($x133 (= $x249 $x240)))
 (let (($x304 (=> $x63 $x133)))
 (let (($x194 (= $x186 $x294)))
 (let (($x301 (=> $x63 $x194)))
 (let (($x97 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x283)))
 (let (($x231 (=> $x63 $x97)))
 (let (($x137 (= $x22 $x255)))
 (let (($x19 (=> $x26 $x137)))
 (let (($x166 (= $x169 $x178)))
 (let (($x101 (=> $x26 $x166)))
 (let (($x122 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x29)))
 (let (($x281 (=> $x26 $x122)))
 (let (($x275 (and (and (and (and (and (= $x261 $x100) (= $x26 $x147)) $x99) $x281) $x101) $x269)))
 (let (($x284 (and (and (and (and $x275 $x19) $x231) $x301) $x304)))
 (let (($x181 (= $x284 true)))
 (let ((?x232 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x310 (= (_ bv0 3) ?x232)))
 (let (($x196 (= $x310 true)))
 (let (($x124 (= $x196 true)))
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= $x127 true)))
 (let (($x80 (= $x23 true)))
 (let (($x271 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x271 true)))
 (let (($x268 (= $x138 true)))
 (let (($x230 (= $x268 true)))
 (let (($x183 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x297 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241))))
 (let (($x45 (and true $x297)))
 (let (($x78 (and $x297 $x45)))
 (let ((?x102 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x107))))
 (let (($x197 (= (bvand ?x95 (_ bv4294967288 32)) ?x95)))
 (let (($x135 (= (bvand ?x102 (_ bv4294967292 32)) ?x102)))
 (let (($x234 (and $x135 $x197)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x102 (bvsub ?x102 (_ bv4 32))) (bvult ?x102 (bvsub ?x102 (_ bv4 32))))))
 (let (($x128 (and (and (and (and (and $x45 $x118) $x135) $x234) $x78) $x183)))
 (let (($x314 (= true $x128)))
 (let (($x83 (not $x64)))
 (let (($x114 (=> $x83 $x314)))
 (let (($x82 (= $x114 true)))
 (let (($x143 (= $x82 true)))
 (let (($x50 (= $x143 true)))
 (let (($x11 (= $x83 true)))
 (let (($x203 (= $x11 true)))
 (let (($x41 (= $x203 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x20)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x188 $x202)))
 (let (($x172 (and $x129 $x193)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x211 $x172)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x77)))))))
 (let (($x130 (and $x159 $x7)))
 (let (($x75 (= $x130 true)))
 (let (($x131 (= $x75 true)))
 (let (($x206 (= $x131 true)))
 (let (($x160 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x242 (= $x160 true)))
 (let (($x17 (= $x242 true)))
 (let (($x168 (and $x17 $x206)))
 (let (($x42 (and $x168 $x41)))
 (let (($x96 (and $x42 $x50)))
 (let (($x108 (and $x96 $x230)))
 (let (($x116 (and $x108 $x80)))
 (let (($x205 (and $x116 $x124)))
 (let (($x272 (and $x205 $x181)))
 (let (($x245 (and $x272 $x224)))
 (let (($x353 (and $x245 $x447)))
 (let (($x367 (and $x353 $x369)))
 (let (($x363 (and $x26 $x367)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x125 $x363)))
 (let (($x236 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x102 (_ bv3 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x146 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x236)))))))
 (let (($x229 (=> (and $x83 (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x184 $x236)))))))
 (let (($x36 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x170 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32))) (or false (or false (and true (or $x121 $x36)))))))
 (let (($x65 (=> (and $x83 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32)))) (or false (or false (and true (or $x121 $x36)))))))
 (let (($x106 (and $x65 $x229)))
 (let (($x362 (and $x106 $x364)))
 (let (($x371 (=> $x362 $x449)))
 (not $x371)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x28) (concat ?x84 (concat ?x342 ?x243)))))
 (let ((?x365 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x216)))
 (let (($x368 (= (_ bv0 32) ?x365)))
 (let (($x449 (= $x368 true)))
 (let ((?x98 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x306))))
 (let ((?x323 (bvadd ?x316 (_ bv4 32))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x228))))
 (let (($x79 (= (_ bv0 32) ?x343)))
 (let ((?x332 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x446 (bvuge ?x332 (_ bv1 32))))
 (let (($x69 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x349 (= $x69 $x446)))
 (let (($x244 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x302 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x325 (and $x302 $x244)))
 (let (($x448 (=> $x325 $x349)))
 (let (($x379 (= ?x332 (_ bv0 32))))
 (let (($x280 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x350 (= $x280 $x379)))
 (let (($x351 (=> $x325 $x350)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem ?x316))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv2 32))) ?x279))))
 (let (($x376 (= input.spec-%var-l-1.2.1.2.0 ?x182)))
 (let (($x357 (=> $x325 $x376)))
 (let (($x259 (= (_ bv0 32) ?x316)))
 (let ((?x439 (ite $x259 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x439 (_ bv1 32))))
 (let (($x60 (= $x244 $x37)))
 (let (($x144 (=> $x302 $x60)))
 (let (($x93 (= ?x439 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x347 (= $x145 $x93)))
 (let (($x346 (=> $x302 $x347)))
 (let (($x356 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x375 (=> $x302 $x356)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x312 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x312 (_ bv1 32))))
 (let (($x348 (= $x302 $x40)))
 (let (($x340 (= ?x312 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x354 (= $x5 $x340)))
 (let (($x214 (= false false)))
 (let (($x21 (and $x302 $x145)))
 (let (($x311 (=> $x21 $x214)))
 (let (($x90 (=> $x5 $x214)))
 (let (($x358 (and (and (and (and (and (and $x90 $x311) $x354) $x348) $x375) $x346) $x144)))
 (let (($x360 (and (and (and $x358 $x357) $x351) $x448)))
 (let (($x369 (= $x360 true)))
 (let (($x249 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x328 (= $x249 $x446)))
 (let (($x22 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x63 (and $x26 $x22)))
 (let (($x334 (=> $x63 $x328)))
 (let (($x186 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x73 (= $x186 $x379)))
 (let (($x27 (=> $x63 $x73)))
 (let (($x324 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x182)))
 (let (($x444 (=> $x63 $x324)))
 (let (($x218 (= $x22 $x37)))
 (let (($x290 (=> $x26 $x218)))
 (let (($x169 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x263 (= $x169 $x93)))
 (let (($x219 (=> $x26 $x263)))
 (let (($x25 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x216)))
 (let (($x248 (=> $x26 $x25)))
 (let (($x305 (and $x26 $x169)))
 (let (($x269 (=> $x305 $x214)))
 (let (($x261 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x99 (=> $x261 $x214)))
 (let (($x331 (and (and (and (and (and (= $x261 $x340) (= $x26 $x40)) $x99) $x269) $x248) $x219)))
 (let (($x336 (and (and (and (and $x331 $x290) $x444) $x27) $x334)))
 (let (($x447 (= $x336 true)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x110 (concat ?x54 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x265 (concat ?x126 ?x110))))
 (let ((?x276 (bvadd ?x35 (_ bv4 32))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x165))))
 (let (($x195 (= (_ bv0 32) ?x173)))
 (let ((?x292 (ite $x195 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x292 (_ bv1 32))))
 (let (($x308 (= $x69 $x240)))
 (let (($x257 (=> $x325 $x308)))
 (let (($x294 (= ?x292 (_ bv0 32))))
 (let (($x264 (= $x280 $x294)))
 (let (($x286 (=> $x325 $x264)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x212))))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.0 ?x283)))
 (let (($x282 (=> $x325 $x58)))
 (let (($x33 (= (_ bv0 32) ?x35)))
 (let ((?x55 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x55 (_ bv1 32))))
 (let (($x303 (= $x244 $x255)))
 (let (($x341 (=> $x302 $x303)))
 (let (($x178 (= ?x55 (_ bv0 32))))
 (let (($x293 (= $x145 $x178)))
 (let (($x66 (=> $x302 $x293)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x317)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x204)))
 (let (($x213 (= input.spec-%var-l-1.2.0 ?x29)))
 (let (($x287 (=> $x302 $x213)))
 (let (($x153 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x153 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x103 (_ bv1 32))))
 (let (($x291 (= $x302 $x147)))
 (let (($x100 (= ?x103 (_ bv0 32))))
 (let (($x262 (= $x5 $x100)))
 (let (($x223 (and (and (and (and (and (and $x262 $x291) $x90) $x287) $x66) $x311) $x341)))
 (let (($x252 (and (and (and $x223 $x282) $x286) $x257)))
 (let (($x224 (= $x252 true)))
 (let (($x133 (= $x249 $x240)))
 (let (($x304 (=> $x63 $x133)))
 (let (($x194 (= $x186 $x294)))
 (let (($x301 (=> $x63 $x194)))
 (let (($x97 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x283)))
 (let (($x231 (=> $x63 $x97)))
 (let (($x137 (= $x22 $x255)))
 (let (($x19 (=> $x26 $x137)))
 (let (($x166 (= $x169 $x178)))
 (let (($x101 (=> $x26 $x166)))
 (let (($x122 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x29)))
 (let (($x281 (=> $x26 $x122)))
 (let (($x275 (and (and (and (and (and (= $x261 $x100) (= $x26 $x147)) $x99) $x281) $x101) $x269)))
 (let (($x284 (and (and (and (and $x275 $x19) $x231) $x301) $x304)))
 (let (($x181 (= $x284 true)))
 (let ((?x232 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x310 (= (_ bv0 3) ?x232)))
 (let (($x196 (= $x310 true)))
 (let (($x124 (= $x196 true)))
 (let (($x127 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= $x127 true)))
 (let (($x80 (= $x23 true)))
 (let (($x271 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x271 true)))
 (let (($x268 (= $x138 true)))
 (let (($x230 (= $x268 true)))
 (let (($x183 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x297 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241))))
 (let (($x45 (and true $x297)))
 (let (($x78 (and $x297 $x45)))
 (let ((?x102 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x107))))
 (let (($x197 (= (bvand ?x95 (_ bv4294967288 32)) ?x95)))
 (let (($x135 (= (bvand ?x102 (_ bv4294967292 32)) ?x102)))
 (let (($x234 (and $x135 $x197)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x102 (bvsub ?x102 (_ bv4 32))) (bvult ?x102 (bvsub ?x102 (_ bv4 32))))))
 (let (($x128 (and (and (and (and (and $x45 $x118) $x135) $x234) $x78) $x183)))
 (let (($x314 (= true $x128)))
 (let (($x83 (not $x64)))
 (let (($x114 (=> $x83 $x314)))
 (let (($x82 (= $x114 true)))
 (let (($x143 (= $x82 true)))
 (let (($x50 (= $x143 true)))
 (let (($x11 (= $x83 true)))
 (let (($x203 (= $x11 true)))
 (let (($x41 (= $x203 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x20)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x188 $x202)))
 (let (($x172 (and $x129 $x193)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x211 $x172)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x77)))))))
 (let (($x130 (and $x159 $x7)))
 (let (($x75 (= $x130 true)))
 (let (($x131 (= $x75 true)))
 (let (($x206 (= $x131 true)))
 (let (($x160 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x242 (= $x160 true)))
 (let (($x17 (= $x242 true)))
 (let (($x168 (and $x17 $x206)))
 (let (($x42 (and $x168 $x41)))
 (let (($x96 (and $x42 $x50)))
 (let (($x108 (and $x96 $x230)))
 (let (($x116 (and $x108 $x80)))
 (let (($x205 (and $x116 $x124)))
 (let (($x272 (and $x205 $x181)))
 (let (($x245 (and $x272 $x224)))
 (let (($x353 (and $x245 $x447)))
 (let (($x367 (and $x353 $x369)))
 (let (($x363 (and $x26 $x367)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x125 $x363)))
 (let (($x236 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x102 (_ bv3 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x146 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x236)))))))
 (let (($x229 (=> (and $x83 (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x184 $x236)))))))
 (let (($x36 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x170 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32))) (or false (or false (and true (or $x121 $x36)))))))
 (let (($x65 (=> (and $x83 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32)))) (or false (or false (and true (or $x121 $x36)))))))
 (let (($x106 (and $x65 $x229)))
 (let (($x362 (and $x106 $x364)))
 (let (($x371 (=> $x362 $x449)))
 (not $x371)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv1024 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xf0f0f0f0)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x5870f100)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5870f0f8)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf0f0f0f0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x70)
                                #x5870f0f7
                                #xf0)
                         #x5870f105
                         #xf0)
                  #x5870f0f6
                  #xf0)))
(let ((a!2 (store (store (store (store a!1 #x5870f103 #xf0) #x5870f0f5 #xf0)
                         #x5870f0fc
                         #xf0)
                  #x5870f0ff
                  #x58)))
(let ((a!3 (store (store (store (store a!2 #x5870f0f3 #xf0) #x5870f100 #xf0)
                         #x5870f0fb
                         #xf0)
                  #x5870f0f7
                  #xf0)))
(let ((a!4 (store (store (store (store a!3 #x5870f104 #xf3) #x5870f0f8 #xf0)
                         #x5870f107
                         #x58)
                  #x5870f0fd
                  #xf0)))
(let ((a!5 (store (store (store (store a!4 #x5870f0f5 #xf0) #x5870f0fa #xf0)
                         #x5870f0f4
                         #xf0)
                  #x5870f0fa
                  #xf0)))
(let ((a!6 (store (store (store (store a!5 #x5870f0f0 #xf0) #x5870f0f6 #xf0)
                         #x5870f0f8
                         #xf0)
                  #x5870f0f2
                  #xf0)))
  (store (store (store (store a!6 #x5870f0f1 #xf0) #x5870f0f3 #xf0)
                #x5870f0f4
                #xf0)
         #x5870f102
         #xf0))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf0f070f0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xf0f070f0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x46 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem ?x46) (concat ?x309 (concat ?x289 ?x285)))))
 (let ((?x386 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x246)))
 (let (($x387 (= (_ bv0 32) ?x386)))
 (let (($x388 (= $x387 true)))
 (let ((?x233 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x219))))
 (let ((?x228 (bvadd ?x445 (_ bv4 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x332))))
 (let (($x334 (= (_ bv0 32) ?x328)))
 (let ((?x336 (ite $x334 (_ bv0 32) (_ bv1 32))))
 (let (($x354 (bvuge ?x336 (_ bv1 32))))
 (let (($x308 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x368 (= $x308 $x354)))
 (let (($x325 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x315 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x282 (and $x315 $x325)))
 (let (($x449 (=> $x282 $x368)))
 (let (($x447 (= ?x336 (_ bv0 32))))
 (let (($x286 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x286 $x447)))
 (let (($x365 (=> $x282 $x362)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv1 32))) (select input.dst.llvm-mem ?x445))))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv2 32))) ?x374))))
 (let (($x363 (= input.spec-%var-l-1.2.1.2.0 ?x320)))
 (let (($x364 (=> $x282 $x363)))
 (let (($x322 (= (_ bv0 32) ?x445)))
 (let ((?x440 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x313 (bvuge ?x440 (_ bv1 32))))
 (let (($x369 (= $x325 $x313)))
 (let (($x367 (=> $x315 $x369)))
 (let (($x441 (= ?x440 (_ bv0 32))))
 (let (($x251 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x448 (= $x251 $x441)))
 (let (($x360 (=> $x315 $x448)))
 (let (($x355 (= input.spec-%var-l-1.2.0 ?x246)))
 (let (($x349 (=> $x315 $x355)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x248 (bvuge ?x67 (_ bv1 32))))
 (let (($x351 (= $x315 $x248)))
 (let (($x216 (= ?x67 (_ bv0 32))))
 (let (($x287 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x350 (= $x287 $x216)))
 (let (($x312 (and $x282 $x308)))
 (let (($x340 (not $x312)))
 (let (($x224 (and $x282 $x286)))
 (let (($x245 (not $x224)))
 (let (($x192 (= false false)))
 (let (($x341 (and $x315 $x251)))
 (let (($x223 (=> $x341 $x192)))
 (let (($x293 (=> $x287 $x192)))
 (let (($x373 (and (and (and (and (and (and $x293 $x223) $x245) $x340) $x350) $x351) $x349)))
 (let (($x384 (and (and (and (and (and $x373 $x360) $x367) $x364) $x365) $x449)))
 (let (($x380 (= $x384 true)))
 (let (($x292 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x17 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x137 (and $x17 $x269)))
 (let (($x240 (and $x137 $x292)))
 (let (($x133 (not $x240)))
 (let (($x97 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x43 (and $x137 $x97)))
 (let (($x249 (not $x43)))
 (let (($x370 (= $x292 $x354)))
 (let (($x348 (=> $x137 $x370)))
 (let (($x353 (= $x97 $x447)))
 (let (($x352 (=> $x137 $x353)))
 (let (($x91 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x320)))
 (let (($x327 (=> $x137 $x91)))
 (let (($x279 (= $x269 $x313)))
 (let (($x442 (=> $x17 $x279)))
 (let (($x169 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x221 (= $x169 $x441)))
 (let (($x225 (=> $x17 $x221)))
 (let (($x316 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x246)))
 (let (($x259 (=> $x17 $x316)))
 (let (($x15 (and $x17 $x169)))
 (let (($x305 (=> $x15 $x192)))
 (let (($x100 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x295 (=> $x100 $x192)))
 (let (($x347 (and (and (and (and (and (= $x100 $x216) (= $x17 $x248)) $x295) $x305) $x259) $x225)))
 (let (($x376 (and (and (and (and (and (and $x347 $x442) $x327) $x352) $x348) $x249) $x133)))
 (let (($x357 (= $x376 true)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x126 (concat ?x61 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x140 (concat ?x54 ?x126))))
 (let ((?x231 (bvadd ?x35 (_ bv4 32))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x276))))
 (let (($x187 (= (_ bv0 32) ?x177)))
 (let ((?x165 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x294 (bvuge ?x165 (_ bv1 32))))
 (let (($x257 (= $x308 $x294)))
 (let (($x252 (=> $x282 $x257)))
 (let (($x191 (= ?x165 (_ bv0 32))))
 (let (($x339 (= $x286 $x191)))
 (let (($x69 (=> $x282 $x339)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x150))))
 (let (($x217 (= input.spec-%var-l-1.2.1.2.0 ?x254)))
 (let (($x280 (=> $x282 $x217)))
 (let (($x33 (= (_ bv0 32) ?x35)))
 (let ((?x55 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x275 (bvuge ?x55 (_ bv1 32))))
 (let (($x319 (= $x325 $x275)))
 (let (($x58 (=> $x315 $x319)))
 (let (($x178 (= ?x55 (_ bv0 32))))
 (let (($x244 (= $x251 $x178)))
 (let (($x303 (=> $x315 $x244)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x44)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x317)))
 (let (($x250 (= input.spec-%var-l-1.2.0 ?x122)))
 (let (($x21 (=> $x315 $x250)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x147 (_ bv1 32))))
 (let (($x145 (= $x315 $x214)))
 (let (($x270 (= ?x147 (_ bv0 32))))
 (let (($x443 (= $x287 $x270)))
 (let (($x326 (and (and (and (and (and (and $x443 $x145) $x293) $x21) $x303) $x223) $x58)))
 (let (($x342 (and (and (and (and (and $x326 $x280) $x69) $x252) $x245) $x340)))
 (let (($x243 (= $x342 true)))
 (let (($x194 (= $x292 $x294)))
 (let (($x301 (=> $x137 $x194)))
 (let (($x173 (= $x97 $x191)))
 (let (($x195 (=> $x137 $x173)))
 (let (($x212 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x254)))
 (let (($x48 (=> $x137 $x212)))
 (let (($x22 (= $x269 $x275)))
 (let (($x255 (=> $x17 $x22)))
 (let (($x166 (= $x169 $x178)))
 (let (($x101 (=> $x17 $x166)))
 (let (($x281 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x122)))
 (let (($x16 (=> $x17 $x281)))
 (let (($x238 (and (and (and (and (and (= $x100 $x270) (= $x17 $x214)) $x295) $x16) $x101) $x305)))
 (let (($x90 (and (and (and (and (and (and $x238 $x255) $x48) $x195) $x301) $x249) $x133)))
 (let (($x307 (= $x90 true)))
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x210)))
 (let (($x87 (= $x261 true)))
 (let (($x153 (= $x87 true)))
 (let (($x232 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x310 (= $x232 true)))
 (let (($x196 (= $x310 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x9 true)))
 (let (($x23 (= $x127 true)))
 (let (($x80 (= $x23 true)))
 (let (($x128 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x45 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x45) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x45))))
 (let (($x118 (and true $x6)))
 (let (($x149 (and $x6 $x118)))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x49))))
 (let (($x78 (= (bvand ?x197 (_ bv4294967288 32)) ?x197)))
 (let (($x189 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x112 (and $x189 $x78)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x118 $x161) $x189) $x112) $x149) $x128)))
 (let (($x96 (= true $x50)))
 (let (($x83 (not $x64)))
 (let (($x72 (=> $x83 $x96)))
 (let (($x271 (= $x72 true)))
 (let (($x138 (= $x271 true)))
 (let (($x268 (= $x138 true)))
 (let (($x241 (= $x83 true)))
 (let (($x70 (= $x241 true)))
 (let (($x260 (= $x70 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x75)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x193 $x7)))
 (let (($x206 (and $x130 $x131)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x215 $x206)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x76)))))))
 (let (($x11 (and $x20 $x168)))
 (let (($x203 (= $x11 true)))
 (let (($x41 (= $x203 true)))
 (let (($x42 (= $x41 true)))
 (let (($x132 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x92 (= $x132 true)))
 (let (($x190 (= $x92 true)))
 (let (($x57 (and $x190 $x42)))
 (let (($x297 (and $x57 $x260)))
 (let (($x230 (and $x297 $x268)))
 (let (($x116 (and $x230 $x80)))
 (let (($x124 (and $x116 $x196)))
 (let (($x103 (and $x124 $x153)))
 (let (($x10 (and $x103 $x307)))
 (let (($x288 (and $x10 $x243)))
 (let (($x359 (and $x288 $x357)))
 (let (($x381 (and $x359 $x380)))
 (let (($x378 (and $x17 $x381)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x382 (and $x160 $x378)))
 (let (($x179 (bvugt ?x175 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x175 (_ bv3 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x125 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x179)))))))
 (let (($x52 (=> (and $x83 (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x136 $x179)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x134 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32))) (or false (or false (and true (or $x120 $x85)))))))
 (let (($x59 (=> (and $x83 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32)))) (or false (or false (and true (or $x120 $x85)))))))
 (let (($x155 (and $x59 $x52)))
 (let (($x164 (and $x155 $x382)))
 (let (($x451 (=> $x164 $x388)))
 (not $x451)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x46 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem ?x46) (concat ?x309 (concat ?x289 ?x285)))))
 (let ((?x386 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x246)))
 (let (($x387 (= (_ bv0 32) ?x386)))
 (let (($x388 (= $x387 true)))
 (let ((?x233 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x219))))
 (let ((?x228 (bvadd ?x445 (_ bv4 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x332))))
 (let (($x334 (= (_ bv0 32) ?x328)))
 (let ((?x336 (ite $x334 (_ bv0 32) (_ bv1 32))))
 (let (($x354 (bvuge ?x336 (_ bv1 32))))
 (let (($x308 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x368 (= $x308 $x354)))
 (let (($x325 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x315 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x282 (and $x315 $x325)))
 (let (($x449 (=> $x282 $x368)))
 (let (($x447 (= ?x336 (_ bv0 32))))
 (let (($x286 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x286 $x447)))
 (let (($x365 (=> $x282 $x362)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv1 32))) (select input.dst.llvm-mem ?x445))))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv2 32))) ?x374))))
 (let (($x363 (= input.spec-%var-l-1.2.1.2.0 ?x320)))
 (let (($x364 (=> $x282 $x363)))
 (let (($x322 (= (_ bv0 32) ?x445)))
 (let ((?x440 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x313 (bvuge ?x440 (_ bv1 32))))
 (let (($x369 (= $x325 $x313)))
 (let (($x367 (=> $x315 $x369)))
 (let (($x441 (= ?x440 (_ bv0 32))))
 (let (($x251 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x448 (= $x251 $x441)))
 (let (($x360 (=> $x315 $x448)))
 (let (($x355 (= input.spec-%var-l-1.2.0 ?x246)))
 (let (($x349 (=> $x315 $x355)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x248 (bvuge ?x67 (_ bv1 32))))
 (let (($x351 (= $x315 $x248)))
 (let (($x216 (= ?x67 (_ bv0 32))))
 (let (($x287 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x350 (= $x287 $x216)))
 (let (($x312 (and $x282 $x308)))
 (let (($x340 (not $x312)))
 (let (($x224 (and $x282 $x286)))
 (let (($x245 (not $x224)))
 (let (($x192 (= false false)))
 (let (($x341 (and $x315 $x251)))
 (let (($x223 (=> $x341 $x192)))
 (let (($x293 (=> $x287 $x192)))
 (let (($x373 (and (and (and (and (and (and $x293 $x223) $x245) $x340) $x350) $x351) $x349)))
 (let (($x384 (and (and (and (and (and $x373 $x360) $x367) $x364) $x365) $x449)))
 (let (($x380 (= $x384 true)))
 (let (($x292 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x17 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x137 (and $x17 $x269)))
 (let (($x240 (and $x137 $x292)))
 (let (($x133 (not $x240)))
 (let (($x97 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x43 (and $x137 $x97)))
 (let (($x249 (not $x43)))
 (let (($x370 (= $x292 $x354)))
 (let (($x348 (=> $x137 $x370)))
 (let (($x353 (= $x97 $x447)))
 (let (($x352 (=> $x137 $x353)))
 (let (($x91 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x320)))
 (let (($x327 (=> $x137 $x91)))
 (let (($x279 (= $x269 $x313)))
 (let (($x442 (=> $x17 $x279)))
 (let (($x169 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x221 (= $x169 $x441)))
 (let (($x225 (=> $x17 $x221)))
 (let (($x316 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x246)))
 (let (($x259 (=> $x17 $x316)))
 (let (($x15 (and $x17 $x169)))
 (let (($x305 (=> $x15 $x192)))
 (let (($x100 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x295 (=> $x100 $x192)))
 (let (($x347 (and (and (and (and (and (= $x100 $x216) (= $x17 $x248)) $x295) $x305) $x259) $x225)))
 (let (($x376 (and (and (and (and (and (and $x347 $x442) $x327) $x352) $x348) $x249) $x133)))
 (let (($x357 (= $x376 true)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x126 (concat ?x61 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x35 (concat ?x140 (concat ?x54 ?x126))))
 (let ((?x231 (bvadd ?x35 (_ bv4 32))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x276))))
 (let (($x187 (= (_ bv0 32) ?x177)))
 (let ((?x165 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x294 (bvuge ?x165 (_ bv1 32))))
 (let (($x257 (= $x308 $x294)))
 (let (($x252 (=> $x282 $x257)))
 (let (($x191 (= ?x165 (_ bv0 32))))
 (let (($x339 (= $x286 $x191)))
 (let (($x69 (=> $x282 $x339)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x150))))
 (let (($x217 (= input.spec-%var-l-1.2.1.2.0 ?x254)))
 (let (($x280 (=> $x282 $x217)))
 (let (($x33 (= (_ bv0 32) ?x35)))
 (let ((?x55 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x275 (bvuge ?x55 (_ bv1 32))))
 (let (($x319 (= $x325 $x275)))
 (let (($x58 (=> $x315 $x319)))
 (let (($x178 (= ?x55 (_ bv0 32))))
 (let (($x244 (= $x251 $x178)))
 (let (($x303 (=> $x315 $x244)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x44)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x317)))
 (let (($x250 (= input.spec-%var-l-1.2.0 ?x122)))
 (let (($x21 (=> $x315 $x250)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x147 (_ bv1 32))))
 (let (($x145 (= $x315 $x214)))
 (let (($x270 (= ?x147 (_ bv0 32))))
 (let (($x443 (= $x287 $x270)))
 (let (($x326 (and (and (and (and (and (and $x443 $x145) $x293) $x21) $x303) $x223) $x58)))
 (let (($x342 (and (and (and (and (and $x326 $x280) $x69) $x252) $x245) $x340)))
 (let (($x243 (= $x342 true)))
 (let (($x194 (= $x292 $x294)))
 (let (($x301 (=> $x137 $x194)))
 (let (($x173 (= $x97 $x191)))
 (let (($x195 (=> $x137 $x173)))
 (let (($x212 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x254)))
 (let (($x48 (=> $x137 $x212)))
 (let (($x22 (= $x269 $x275)))
 (let (($x255 (=> $x17 $x22)))
 (let (($x166 (= $x169 $x178)))
 (let (($x101 (=> $x17 $x166)))
 (let (($x281 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x122)))
 (let (($x16 (=> $x17 $x281)))
 (let (($x238 (and (and (and (and (and (= $x100 $x270) (= $x17 $x214)) $x295) $x16) $x101) $x305)))
 (let (($x90 (and (and (and (and (and (and $x238 $x255) $x48) $x195) $x301) $x249) $x133)))
 (let (($x307 (= $x90 true)))
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x210)))
 (let (($x87 (= $x261 true)))
 (let (($x153 (= $x87 true)))
 (let (($x232 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x310 (= $x232 true)))
 (let (($x196 (= $x310 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x9 true)))
 (let (($x23 (= $x127 true)))
 (let (($x80 (= $x23 true)))
 (let (($x128 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x45 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x45) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x45))))
 (let (($x118 (and true $x6)))
 (let (($x149 (and $x6 $x118)))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x49))))
 (let (($x78 (= (bvand ?x197 (_ bv4294967288 32)) ?x197)))
 (let (($x189 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x112 (and $x189 $x78)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x118 $x161) $x189) $x112) $x149) $x128)))
 (let (($x96 (= true $x50)))
 (let (($x83 (not $x64)))
 (let (($x72 (=> $x83 $x96)))
 (let (($x271 (= $x72 true)))
 (let (($x138 (= $x271 true)))
 (let (($x268 (= $x138 true)))
 (let (($x241 (= $x83 true)))
 (let (($x70 (= $x241 true)))
 (let (($x260 (= $x70 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x75)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x193 $x7)))
 (let (($x206 (and $x130 $x131)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x215 $x206)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x76)))))))
 (let (($x11 (and $x20 $x168)))
 (let (($x203 (= $x11 true)))
 (let (($x41 (= $x203 true)))
 (let (($x42 (= $x41 true)))
 (let (($x132 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x92 (= $x132 true)))
 (let (($x190 (= $x92 true)))
 (let (($x57 (and $x190 $x42)))
 (let (($x297 (and $x57 $x260)))
 (let (($x230 (and $x297 $x268)))
 (let (($x116 (and $x230 $x80)))
 (let (($x124 (and $x116 $x196)))
 (let (($x103 (and $x124 $x153)))
 (let (($x10 (and $x103 $x307)))
 (let (($x288 (and $x10 $x243)))
 (let (($x359 (and $x288 $x357)))
 (let (($x381 (and $x359 $x380)))
 (let (($x378 (and $x17 $x381)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x382 (and $x160 $x378)))
 (let (($x179 (bvugt ?x175 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x175 (_ bv3 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x125 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x179)))))))
 (let (($x52 (=> (and $x83 (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x136 $x179)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x134 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32))) (or false (or false (and true (or $x120 $x85)))))))
 (let (($x59 (=> (and $x83 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32)))) (or false (or false (and true (or $x120 $x85)))))))
 (let (($x155 (and $x59 $x52)))
 (let (($x164 (and $x155 $x382)))
 (let (($x451 (=> $x164 $x388)))
 (not $x451)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4 32) (_ bv1 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000d)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x00000010
              #xb8)
       #x0000000b
       #xb8))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xb8000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xb8000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem ?x85) (concat ?x305 (concat ?x101 ?x178)))))
 (let ((?x22 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x275)))
 (let ((?x35 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x33 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x55 (bvneg ?x33)))
 (let (($x255 (= ?x55 ?x22)))
 (let (($x5 (= $x255 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x317 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x140 (= $x142 $x16)))
 (let (($x122 (= ?x317 (_ bv0 32))))
 (let (($x29 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (= $x29 $x122)))
 (let (($x109 (and $x110 $x140)))
 (let (($x54 (= $x109 true)))
 (let (($x190 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x181 (= $x190 $x16)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x281 (= $x147 $x122)))
 (let (($x38 (and $x281 $x181)))
 (let (($x169 (= $x38 true)))
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x17 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x17 (_ bv1 32))))
 (let (($x81 (= $x142 $x304)))
 (let (($x214 (= ?x17 (_ bv0 32))))
 (let (($x266 (= $x29 $x214)))
 (let (($x199 (and $x266 $x81)))
 (let (($x152 (= $x199 true)))
 (let (($x192 (= $x190 $x304)))
 (let (($x99 (= $x147 $x214)))
 (let (($x295 (and $x99 $x192)))
 (let (($x284 (= $x295 true)))
 (let ((?x87 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x87)))
 (let (($x242 (= ?x153 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x100 (= $x242 true)))
 (let (($x201 (= $x100 true)))
 (let ((?x232 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x310 (= (_ bv0 3) ?x232)))
 (let (($x196 (= $x310 true)))
 (let (($x124 (= $x196 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x9 true)))
 (let (($x23 (= $x127 true)))
 (let (($x80 (= $x23 true)))
 (let (($x82 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x267 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267))))
 (let (($x118 (and true $x6)))
 (let (($x78 (and $x6 $x118)))
 (let ((?x163 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x107))))
 (let (($x234 (= (bvand ?x49 (_ bv4294967288 32)) ?x49)))
 (let (($x239 (= (bvand ?x163 (_ bv4294967292 32)) ?x163)))
 (let (($x56 (and $x239 $x234)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x163 (bvsub ?x163 (_ bv4 32))) (bvult ?x163 (bvsub ?x163 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x118 $x161) $x239) $x56) $x78) $x82)))
 (let (($x96 (= true $x50)))
 (let (($x121 (not $x14)))
 (let (($x72 (=> $x121 $x96)))
 (let (($x271 (= $x72 true)))
 (let (($x138 (= $x271 true)))
 (let (($x268 (= $x138 true)))
 (let (($x241 (= $x121 true)))
 (let (($x70 (= $x241 true)))
 (let (($x260 (= $x70 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x131)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x172 $x130)))
 (let (($x168 (and $x75 $x206)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x129 $x168)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x188)))))))
 (let (($x203 (and $x193 $x11)))
 (let (($x41 (= $x203 true)))
 (let (($x42 (= $x41 true)))
 (let (($x57 (= $x42 true)))
 (let (($x297 (and $x57 $x260)))
 (let (($x230 (and $x297 $x268)))
 (let (($x116 (and $x230 $x80)))
 (let (($x205 (and $x116 $x124)))
 (let (($x26 (and $x205 $x201)))
 (let (($x113 (and $x26 $x284)))
 (let (($x44 (and $x113 $x152)))
 (let (($x68 (and $x44 $x169)))
 (let (($x265 (and $x68 $x54)))
 (let (($x61 (and $x190 $x265)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x47 (and $x132 $x61)))
 (let (($x146 (bvugt ?x163 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x163 (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x39 (=> (bvule ?x163 (bvsub (bvadd ?x163 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x146)))))))
 (let (($x236 (=> (and $x121 (bvule ?x163 (bvsub (bvadd ?x163 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x117 $x146)))))))
 (let (($x170 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x184 (=> $x175 (or false (or false (and true (or $x167 $x170)))))))
 (let (($x71 (=> (and $x121 $x175) (or false (or false (and true (or $x167 $x170)))))))
 (let (($x123 (and $x71 $x236)))
 (let (($x126 (and $x123 $x47)))
 (let (($x137 (=> $x126 $x5)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem ?x85) (concat ?x305 (concat ?x101 ?x178)))))
 (let ((?x22 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x275)))
 (let ((?x35 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x33 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x55 (bvneg ?x33)))
 (let (($x255 (= ?x55 ?x22)))
 (let (($x5 (= $x255 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x317 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x140 (= $x142 $x16)))
 (let (($x122 (= ?x317 (_ bv0 32))))
 (let (($x29 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (= $x29 $x122)))
 (let (($x109 (and $x110 $x140)))
 (let (($x54 (= $x109 true)))
 (let (($x190 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x181 (= $x190 $x16)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x281 (= $x147 $x122)))
 (let (($x38 (and $x281 $x181)))
 (let (($x169 (= $x38 true)))
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x17 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x17 (_ bv1 32))))
 (let (($x81 (= $x142 $x304)))
 (let (($x214 (= ?x17 (_ bv0 32))))
 (let (($x266 (= $x29 $x214)))
 (let (($x199 (and $x266 $x81)))
 (let (($x152 (= $x199 true)))
 (let (($x192 (= $x190 $x304)))
 (let (($x99 (= $x147 $x214)))
 (let (($x295 (and $x99 $x192)))
 (let (($x284 (= $x295 true)))
 (let ((?x87 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x87)))
 (let (($x242 (= ?x153 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x100 (= $x242 true)))
 (let (($x201 (= $x100 true)))
 (let ((?x232 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x310 (= (_ bv0 3) ?x232)))
 (let (($x196 (= $x310 true)))
 (let (($x124 (= $x196 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x9 true)))
 (let (($x23 (= $x127 true)))
 (let (($x80 (= $x23 true)))
 (let (($x82 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x267 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267))))
 (let (($x118 (and true $x6)))
 (let (($x78 (and $x6 $x118)))
 (let ((?x163 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x107))))
 (let (($x234 (= (bvand ?x49 (_ bv4294967288 32)) ?x49)))
 (let (($x239 (= (bvand ?x163 (_ bv4294967292 32)) ?x163)))
 (let (($x56 (and $x239 $x234)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x163 (bvsub ?x163 (_ bv4 32))) (bvult ?x163 (bvsub ?x163 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x118 $x161) $x239) $x56) $x78) $x82)))
 (let (($x96 (= true $x50)))
 (let (($x121 (not $x14)))
 (let (($x72 (=> $x121 $x96)))
 (let (($x271 (= $x72 true)))
 (let (($x138 (= $x271 true)))
 (let (($x268 (= $x138 true)))
 (let (($x241 (= $x121 true)))
 (let (($x70 (= $x241 true)))
 (let (($x260 (= $x70 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x131)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x172 $x130)))
 (let (($x168 (and $x75 $x206)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x129 $x168)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x188)))))))
 (let (($x203 (and $x193 $x11)))
 (let (($x41 (= $x203 true)))
 (let (($x42 (= $x41 true)))
 (let (($x57 (= $x42 true)))
 (let (($x297 (and $x57 $x260)))
 (let (($x230 (and $x297 $x268)))
 (let (($x116 (and $x230 $x80)))
 (let (($x205 (and $x116 $x124)))
 (let (($x26 (and $x205 $x201)))
 (let (($x113 (and $x26 $x284)))
 (let (($x44 (and $x113 $x152)))
 (let (($x68 (and $x44 $x169)))
 (let (($x265 (and $x68 $x54)))
 (let (($x61 (and $x190 $x265)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x47 (and $x132 $x61)))
 (let (($x146 (bvugt ?x163 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x163 (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x39 (=> (bvule ?x163 (bvsub (bvadd ?x163 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x146)))))))
 (let (($x236 (=> (and $x121 (bvule ?x163 (bvsub (bvadd ?x163 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x117 $x146)))))))
 (let (($x170 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x184 (=> $x175 (or false (or false (and true (or $x167 $x170)))))))
 (let (($x71 (=> (and $x121 $x175) (or false (or false (and true (or $x167 $x170)))))))
 (let (($x123 (and $x71 $x236)))
 (let (($x126 (and $x123 $x47)))
 (let (($x137 (=> $x126 $x5)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1fefef00)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x0c2800f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1fefef00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1fefef03)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x237 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x65) (concat ?x209 (concat ?x89 ?x237)))))
 (let ((?x150 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x273)))
 (let ((?x137 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x19 (bvmul (_ bv4294967295 32) ?x137)))
 (let ((?x64 (bvneg ?x19)))
 (let (($x220 (= ?x64 ?x150)))
 (let (($x254 (= $x220 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x54 (_ bv1 32))))
 (let (($x281 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x305 (= $x281 $x47)))
 (let (($x265 (= ?x54 (_ bv0 32))))
 (let (($x317 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x15 (= $x317 $x265)))
 (let (($x178 (and (and (and (not $x317) (not $x281)) $x15) $x305)))
 (let (($x272 (= $x178 true)))
 (let (($x76 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x29 (not $x76)))
 (let (($x214 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x204 (not $x214)))
 (let (($x33 (and (and (and (= $x214 $x265) (= $x76 $x47)) $x204) $x29)))
 (let (($x55 (= $x33 true)))
 (let (($x38 (not $x281)))
 (let (($x181 (not $x317)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x304 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x284 (bvuge ?x304 (_ bv1 32))))
 (let (($x16 (= $x281 $x284)))
 (let (($x192 (= ?x304 (_ bv0 32))))
 (let (($x122 (= $x317 $x192)))
 (let (($x110 (and (and (and $x122 $x16) $x181) $x38)))
 (let (($x140 (= $x110 true)))
 (let (($x81 (and (and (and (= $x214 $x192) (= $x76 $x284)) $x204) $x29)))
 (let (($x199 (= $x81 true)))
 (let ((?x201 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x201)))
 (let (($x147 (= ?x26 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x270 (= $x147 true)))
 (let (($x227 (= $x270 true)))
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x210)))
 (let (($x87 (= $x261 true)))
 (let (($x153 (= $x87 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x198 true)))
 (let (($x310 (= $x232 true)))
 (let (($x196 (= $x310 true)))
 (let (($x50 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118))))
 (let (($x161 (and true $x135)))
 (let (($x112 (and $x135 $x161)))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x114))))
 (let (($x78 (= (bvand ?x234 (_ bv4294967288 32)) ?x234)))
 (let (($x156 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x128 (and $x156 $x78)))
 (let (($x143 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x268 (and (and (and (and (and $x161 $x143) $x156) $x128) $x112) $x50)))
 (let (($x230 (= true $x268)))
 (let (($x121 (not $x14)))
 (let (($x108 (=> $x121 $x230)))
 (let (($x9 (= $x108 true)))
 (let (($x127 (= $x9 true)))
 (let (($x23 (= $x127 true)))
 (let (($x267 (= $x121 true)))
 (let (($x32 (= $x267 true)))
 (let (($x185 (= $x32 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x41)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x206 $x11)))
 (let (($x57 (and $x203 $x42)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x200 $x57)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x208)))))))
 (let (($x70 (and $x131 $x241)))
 (let (($x260 (= $x70 true)))
 (let (($x297 (= $x260 true)))
 (let (($x45 (= $x297 true)))
 (let (($x6 (and $x45 $x185)))
 (let (($x80 (and $x6 $x23)))
 (let (($x124 (and $x80 $x196)))
 (let (($x103 (and $x124 $x153)))
 (let (($x17 (and $x103 $x227)))
 (let (($x152 (and $x17 $x199)))
 (let (($x109 (and $x152 $x140)))
 (let (($x269 (and $x109 $x55)))
 (let (($x238 (and $x269 $x272)))
 (let (($x275 (and $x76 $x238)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x22 (and $x159 $x275)))
 (let (($x125 (bvugt ?x175 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x175 (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x132 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x125)))))))
 (let (($x155 (=> (and $x121 (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x106 $x125)))))))
 (let (($x134 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x136 (=> $x115 (or false (or false (and true (or $x102 $x134)))))))
 (let (($x46 (=> (and $x121 $x115) (or false (or false (and true (or $x102 $x134)))))))
 (let (($x179 (and $x46 $x155)))
 (let (($x255 (and $x179 $x22)))
 (let (($x212 (=> $x255 $x254)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x237 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x65) (concat ?x209 (concat ?x89 ?x237)))))
 (let ((?x150 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x273)))
 (let ((?x137 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x19 (bvmul (_ bv4294967295 32) ?x137)))
 (let ((?x64 (bvneg ?x19)))
 (let (($x220 (= ?x64 ?x150)))
 (let (($x254 (= $x220 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x54 (_ bv1 32))))
 (let (($x281 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x305 (= $x281 $x47)))
 (let (($x265 (= ?x54 (_ bv0 32))))
 (let (($x317 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x15 (= $x317 $x265)))
 (let (($x178 (and (and (and (not $x317) (not $x281)) $x15) $x305)))
 (let (($x272 (= $x178 true)))
 (let (($x76 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x29 (not $x76)))
 (let (($x214 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x204 (not $x214)))
 (let (($x33 (and (and (and (= $x214 $x265) (= $x76 $x47)) $x204) $x29)))
 (let (($x55 (= $x33 true)))
 (let (($x38 (not $x281)))
 (let (($x181 (not $x317)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x304 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x284 (bvuge ?x304 (_ bv1 32))))
 (let (($x16 (= $x281 $x284)))
 (let (($x192 (= ?x304 (_ bv0 32))))
 (let (($x122 (= $x317 $x192)))
 (let (($x110 (and (and (and $x122 $x16) $x181) $x38)))
 (let (($x140 (= $x110 true)))
 (let (($x81 (and (and (and (= $x214 $x192) (= $x76 $x284)) $x204) $x29)))
 (let (($x199 (= $x81 true)))
 (let ((?x201 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x201)))
 (let (($x147 (= ?x26 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x270 (= $x147 true)))
 (let (($x227 (= $x270 true)))
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x210)))
 (let (($x87 (= $x261 true)))
 (let (($x153 (= $x87 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x198 true)))
 (let (($x310 (= $x232 true)))
 (let (($x196 (= $x310 true)))
 (let (($x50 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118))))
 (let (($x161 (and true $x135)))
 (let (($x112 (and $x135 $x161)))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x114))))
 (let (($x78 (= (bvand ?x234 (_ bv4294967288 32)) ?x234)))
 (let (($x156 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x128 (and $x156 $x78)))
 (let (($x143 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x268 (and (and (and (and (and $x161 $x143) $x156) $x128) $x112) $x50)))
 (let (($x230 (= true $x268)))
 (let (($x121 (not $x14)))
 (let (($x108 (=> $x121 $x230)))
 (let (($x9 (= $x108 true)))
 (let (($x127 (= $x9 true)))
 (let (($x23 (= $x127 true)))
 (let (($x267 (= $x121 true)))
 (let (($x32 (= $x267 true)))
 (let (($x185 (= $x32 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x41)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x206 $x11)))
 (let (($x57 (and $x203 $x42)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x200 $x57)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x208)))))))
 (let (($x70 (and $x131 $x241)))
 (let (($x260 (= $x70 true)))
 (let (($x297 (= $x260 true)))
 (let (($x45 (= $x297 true)))
 (let (($x6 (and $x45 $x185)))
 (let (($x80 (and $x6 $x23)))
 (let (($x124 (and $x80 $x196)))
 (let (($x103 (and $x124 $x153)))
 (let (($x17 (and $x103 $x227)))
 (let (($x152 (and $x17 $x199)))
 (let (($x109 (and $x152 $x140)))
 (let (($x269 (and $x109 $x55)))
 (let (($x238 (and $x269 $x272)))
 (let (($x275 (and $x76 $x238)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x22 (and $x159 $x275)))
 (let (($x125 (bvugt ?x175 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x175 (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x132 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x125)))))))
 (let (($x155 (=> (and $x121 (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x106 $x125)))))))
 (let (($x134 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x136 (=> $x115 (or false (or false (and true (or $x102 $x134)))))))
 (let (($x46 (=> (and $x121 $x115) (or false (or false (and true (or $x102 $x134)))))))
 (let (($x179 (and $x46 $x155)))
 (let (($x255 (and $x179 $x22)))
 (let (($x212 (=> $x255 $x254)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem ?x59) (concat ?x83 (concat ?x296 ?x19)))))
 (let ((?x63 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x176)))
 (let ((?x255 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x5 (bvmul (_ bv4294967295 32) ?x255)))
 (let ((?x137 (bvneg ?x5)))
 (let (($x273 (= ?x137 ?x63)))
 (let (($x150 (= $x273 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x54 (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x166 (= $x169 $x47)))
 (let (($x265 (= ?x54 (_ bv0 32))))
 (let (($x281 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x269 (= $x281 $x265)))
 (let (($x29 (= false false)))
 (let (($x68 (=> $x281 $x29)))
 (let (($x101 (and (and $x68 $x269) $x166)))
 (let (($x305 (= $x101 true)))
 (let (($x192 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x81 (=> $x192 $x29)))
 (let (($x77 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x126 (= $x77 $x47)))
 (let (($x61 (= $x192 $x265)))
 (let (($x35 (and (and $x61 $x126) $x81)))
 (let (($x33 (= $x35 true)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x284 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x204 (bvuge ?x284 (_ bv1 32))))
 (let (($x181 (= $x169 $x204)))
 (let (($x113 (= ?x284 (_ bv0 32))))
 (let (($x16 (= $x281 $x113)))
 (let (($x110 (and (and $x16 $x181) $x68)))
 (let (($x140 (= $x110 true)))
 (let (($x152 (and (and (= $x192 $x113) (= $x77 $x204)) $x81)))
 (let (($x44 (= $x152 true)))
 (let ((?x227 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x227)))
 (let (($x214 (= ?x17 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= $x214 true)))
 (let (($x190 (= $x99 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x100 (= (_ bv0 3) ?x242)))
 (let (($x201 (= $x100 true)))
 (let (($x26 (= $x201 true)))
 (let (($x205 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x210 (= $x205 true)))
 (let (($x261 (= $x210 true)))
 (let (($x87 (= $x261 true)))
 (let (($x268 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x161 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x161) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x161))))
 (let (($x143 (and true $x239)))
 (let (($x82 (and $x239 $x143)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x86))))
 (let (($x112 (= (bvand ?x78 (_ bv4294967288 32)) ?x78)))
 (let (($x107 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x138 (and $x107 $x112)))
 (let (($x72 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x23 (and (and (and (and (and $x143 $x72) $x107) $x138) $x82) $x268)))
 (let (($x80 (= true $x23)))
 (let (($x121 (not $x14)))
 (let (($x116 (=> $x121 $x80)))
 (let (($x198 (= $x116 true)))
 (let (($x232 (= $x198 true)))
 (let (($x310 (= $x232 true)))
 (let (($x118 (= $x121 true)))
 (let (($x18 (= $x118 true)))
 (let (($x148 (= $x18 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x260)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x241 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x42 $x241)))
 (let (($x45 (and $x70 $x297)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x129 $x45)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x188)))))))
 (let (($x32 (and $x41 $x267)))
 (let (($x185 (= $x32 true)))
 (let (($x6 (= $x185 true)))
 (let (($x105 (= $x6 true)))
 (let (($x135 (and $x105 $x148)))
 (let (($x196 (and $x135 $x310)))
 (let (($x153 (and $x196 $x87)))
 (let (($x92 (and $x153 $x26)))
 (let (($x304 (and $x92 $x190)))
 (let (($x317 (and $x304 $x44)))
 (let (($x109 (and $x317 $x140)))
 (let (($x55 (and $x109 $x33)))
 (let (($x178 (and $x55 $x305)))
 (let (($x272 (and $x77 $x178)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x238 (and $x20 $x272)))
 (let (($x236 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd ?x115 (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x159 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x236)))))))
 (let (($x160 (=> (and $x121 (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x39 $x236)))))))
 (let (($x71 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x146 (=> $x117 (or false (or false (and true (or $x184 $x71)))))))
 (let (($x85 (=> (and $x121 $x117) (or false (or false (and true (or $x184 $x71)))))))
 (let (($x229 (and $x85 $x160)))
 (let (($x275 (and $x229 $x238)))
 (let (($x220 (=> $x275 $x150)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem ?x59) (concat ?x83 (concat ?x296 ?x19)))))
 (let ((?x63 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x176)))
 (let ((?x255 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x5 (bvmul (_ bv4294967295 32) ?x255)))
 (let ((?x137 (bvneg ?x5)))
 (let (($x273 (= ?x137 ?x63)))
 (let (($x150 (= $x273 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x54 (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x166 (= $x169 $x47)))
 (let (($x265 (= ?x54 (_ bv0 32))))
 (let (($x281 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x269 (= $x281 $x265)))
 (let (($x29 (= false false)))
 (let (($x68 (=> $x281 $x29)))
 (let (($x101 (and (and $x68 $x269) $x166)))
 (let (($x305 (= $x101 true)))
 (let (($x192 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x81 (=> $x192 $x29)))
 (let (($x77 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x126 (= $x77 $x47)))
 (let (($x61 (= $x192 $x265)))
 (let (($x35 (and (and $x61 $x126) $x81)))
 (let (($x33 (= $x35 true)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x284 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x204 (bvuge ?x284 (_ bv1 32))))
 (let (($x181 (= $x169 $x204)))
 (let (($x113 (= ?x284 (_ bv0 32))))
 (let (($x16 (= $x281 $x113)))
 (let (($x110 (and (and $x16 $x181) $x68)))
 (let (($x140 (= $x110 true)))
 (let (($x152 (and (and (= $x192 $x113) (= $x77 $x204)) $x81)))
 (let (($x44 (= $x152 true)))
 (let ((?x227 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x227)))
 (let (($x214 (= ?x17 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= $x214 true)))
 (let (($x190 (= $x99 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x100 (= (_ bv0 3) ?x242)))
 (let (($x201 (= $x100 true)))
 (let (($x26 (= $x201 true)))
 (let (($x205 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x210 (= $x205 true)))
 (let (($x261 (= $x210 true)))
 (let (($x87 (= $x261 true)))
 (let (($x268 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x161 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x161) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x161))))
 (let (($x143 (and true $x239)))
 (let (($x82 (and $x239 $x143)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x86))))
 (let (($x112 (= (bvand ?x78 (_ bv4294967288 32)) ?x78)))
 (let (($x107 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x138 (and $x107 $x112)))
 (let (($x72 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x23 (and (and (and (and (and $x143 $x72) $x107) $x138) $x82) $x268)))
 (let (($x80 (= true $x23)))
 (let (($x121 (not $x14)))
 (let (($x116 (=> $x121 $x80)))
 (let (($x198 (= $x116 true)))
 (let (($x232 (= $x198 true)))
 (let (($x310 (= $x232 true)))
 (let (($x118 (= $x121 true)))
 (let (($x18 (= $x118 true)))
 (let (($x148 (= $x18 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x260)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x241 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x42 $x241)))
 (let (($x45 (and $x70 $x297)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x129 $x45)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x188)))))))
 (let (($x32 (and $x41 $x267)))
 (let (($x185 (= $x32 true)))
 (let (($x6 (= $x185 true)))
 (let (($x105 (= $x6 true)))
 (let (($x135 (and $x105 $x148)))
 (let (($x196 (and $x135 $x310)))
 (let (($x153 (and $x196 $x87)))
 (let (($x92 (and $x153 $x26)))
 (let (($x304 (and $x92 $x190)))
 (let (($x317 (and $x304 $x44)))
 (let (($x109 (and $x317 $x140)))
 (let (($x55 (and $x109 $x33)))
 (let (($x178 (and $x55 $x305)))
 (let (($x272 (and $x77 $x178)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x238 (and $x20 $x272)))
 (let (($x236 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd ?x115 (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x159 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x236)))))))
 (let (($x160 (=> (and $x121 (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x39 $x236)))))))
 (let (($x71 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x146 (=> $x117 (or false (or false (and true (or $x184 $x71)))))))
 (let (($x85 (=> (and $x121 $x117) (or false (or false (and true (or $x184 $x71)))))))
 (let (($x229 (and $x85 $x160)))
 (let (($x275 (and $x229 $x238)))
 (let (($x220 (=> $x275 $x150)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1fefef00)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x0c2800f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1fefef00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1fefef03)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x163 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem ?x163) (concat ?x233 (concat ?x150 ?x63)))))
 (let ((?x48 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x212)))
 (let ((?x74 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x89 (bvmul (_ bv4294967295 32) ?x74)))
 (let ((?x176 (bvneg ?x89)))
 (let (($x51 (= ?x176 ?x48)))
 (let (($x211 (= $x51 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x33 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x33 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x22 (= $x140 $x15)))
 (let (($x55 (= ?x33 (_ bv0 32))))
 (let (($x68 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x275 (= $x68 $x55)))
 (let (($x137 (and (and (and (not $x140) (=> $x68 (= false false))) $x275) $x22)))
 (let (($x237 (= $x137 true)))
 (let (($x44 (= false false)))
 (let (($x113 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x317 (=> $x113 $x44)))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x152 (not $x130)))
 (let (($x178 (and (and (and (= $x113 $x55) (= $x130 $x15)) $x152) $x317)))
 (let (($x272 (= $x178 true)))
 (let (($x265 (=> $x68 $x44)))
 (let (($x54 (not $x140)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x204 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x204 (_ bv1 32))))
 (let (($x109 (= $x140 $x29)))
 (let (($x142 (= ?x204 (_ bv0 32))))
 (let (($x110 (= $x68 $x142)))
 (let (($x126 (and (and (and $x110 $x109) $x54) $x265)))
 (let (($x253 (= $x126 true)))
 (let (($x16 (and (and (and (= $x113 $x142) (= $x130 $x29)) $x152) $x317)))
 (let (($x169 (= $x16 true)))
 (let ((?x190 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x304 (bvneg ?x190)))
 (let (($x192 (= ?x304 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x295 (= $x192 true)))
 (let (($x76 (= $x295 true)))
 (let ((?x147 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x270 (= (_ bv0 3) ?x147)))
 (let (($x227 (= $x270 true)))
 (let (($x17 (= $x227 true)))
 (let (($x103 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x103 true)))
 (let (($x100 (= $x242 true)))
 (let (($x201 (= $x100 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x143 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x143) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x143))))
 (let (($x72 (and true $x156)))
 (let (($x50 (and $x156 $x72)))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x49))))
 (let (($x82 (= (bvand ?x112 (_ bv4294967288 32)) ?x112)))
 (let (($x114 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x127 (and $x114 $x82)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x310 (and (and (and (and (and $x72 $x108) $x114) $x127) $x50) $x23)))
 (let (($x196 (= true $x310)))
 (let (($x121 (not $x14)))
 (let (($x124 (=> $x121 $x196)))
 (let (($x205 (= $x124 true)))
 (let (($x210 (= $x205 true)))
 (let (($x261 (= $x210 true)))
 (let (($x161 (= $x121 true)))
 (let (($x149 (= $x161 true)))
 (let (($x30 (= $x149 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x185)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x297 $x267)))
 (let (($x105 (and $x32 $x6)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x200 $x105)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x208)))))))
 (let (($x18 (and $x260 $x118)))
 (let (($x148 (= $x18 true)))
 (let (($x135 (= $x148 true)))
 (let (($x314 (= $x135 true)))
 (let (($x239 (and $x314 $x30)))
 (let (($x87 (and $x239 $x261)))
 (let (($x26 (and $x87 $x201)))
 (let (($x215 (and $x26 $x17)))
 (let (($x284 (and $x215 $x76)))
 (let (($x181 (and $x284 $x169)))
 (let (($x35 (and $x181 $x253)))
 (let (($x238 (and $x35 $x272)))
 (let (($x209 (and $x238 $x237)))
 (let (($x83 (and $x130 $x209)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x64 (and $x7 $x83)))
 (let (($x155 (bvugt ?x117 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x117 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x20 (=> (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x155)))))))
 (let (($x235 (=> (and $x121 (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x132 $x155)))))))
 (let (($x46 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x106 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x125 (=> $x106 (or false (or false (and true (or $x136 $x46)))))))
 (let (($x65 (=> (and $x121 $x106) (or false (or false (and true (or $x136 $x46)))))))
 (let (($x52 (and $x65 $x235)))
 (let (($x296 (and $x52 $x64)))
 (let (($x36 (=> $x296 $x211)))
 (not $x36))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x163 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem ?x163) (concat ?x233 (concat ?x150 ?x63)))))
 (let ((?x48 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x212)))
 (let ((?x74 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x89 (bvmul (_ bv4294967295 32) ?x74)))
 (let ((?x176 (bvneg ?x89)))
 (let (($x51 (= ?x176 ?x48)))
 (let (($x211 (= $x51 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x33 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x33 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x22 (= $x140 $x15)))
 (let (($x55 (= ?x33 (_ bv0 32))))
 (let (($x68 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x275 (= $x68 $x55)))
 (let (($x137 (and (and (and (not $x140) (=> $x68 (= false false))) $x275) $x22)))
 (let (($x237 (= $x137 true)))
 (let (($x44 (= false false)))
 (let (($x113 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x317 (=> $x113 $x44)))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x152 (not $x130)))
 (let (($x178 (and (and (and (= $x113 $x55) (= $x130 $x15)) $x152) $x317)))
 (let (($x272 (= $x178 true)))
 (let (($x265 (=> $x68 $x44)))
 (let (($x54 (not $x140)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x204 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x204 (_ bv1 32))))
 (let (($x109 (= $x140 $x29)))
 (let (($x142 (= ?x204 (_ bv0 32))))
 (let (($x110 (= $x68 $x142)))
 (let (($x126 (and (and (and $x110 $x109) $x54) $x265)))
 (let (($x253 (= $x126 true)))
 (let (($x16 (and (and (and (= $x113 $x142) (= $x130 $x29)) $x152) $x317)))
 (let (($x169 (= $x16 true)))
 (let ((?x190 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x304 (bvneg ?x190)))
 (let (($x192 (= ?x304 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x295 (= $x192 true)))
 (let (($x76 (= $x295 true)))
 (let ((?x147 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x270 (= (_ bv0 3) ?x147)))
 (let (($x227 (= $x270 true)))
 (let (($x17 (= $x227 true)))
 (let (($x103 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x103 true)))
 (let (($x100 (= $x242 true)))
 (let (($x201 (= $x100 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x143 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x143) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x143))))
 (let (($x72 (and true $x156)))
 (let (($x50 (and $x156 $x72)))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x49))))
 (let (($x82 (= (bvand ?x112 (_ bv4294967288 32)) ?x112)))
 (let (($x114 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x127 (and $x114 $x82)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x310 (and (and (and (and (and $x72 $x108) $x114) $x127) $x50) $x23)))
 (let (($x196 (= true $x310)))
 (let (($x121 (not $x14)))
 (let (($x124 (=> $x121 $x196)))
 (let (($x205 (= $x124 true)))
 (let (($x210 (= $x205 true)))
 (let (($x261 (= $x210 true)))
 (let (($x161 (= $x121 true)))
 (let (($x149 (= $x161 true)))
 (let (($x30 (= $x149 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x185)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x297 $x267)))
 (let (($x105 (and $x32 $x6)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x200 $x105)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x208)))))))
 (let (($x18 (and $x260 $x118)))
 (let (($x148 (= $x18 true)))
 (let (($x135 (= $x148 true)))
 (let (($x314 (= $x135 true)))
 (let (($x239 (and $x314 $x30)))
 (let (($x87 (and $x239 $x261)))
 (let (($x26 (and $x87 $x201)))
 (let (($x215 (and $x26 $x17)))
 (let (($x284 (and $x215 $x76)))
 (let (($x181 (and $x284 $x169)))
 (let (($x35 (and $x181 $x253)))
 (let (($x238 (and $x35 $x272)))
 (let (($x209 (and $x238 $x237)))
 (let (($x83 (and $x130 $x209)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x64 (and $x7 $x83)))
 (let (($x155 (bvugt ?x117 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x117 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x20 (=> (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x155)))))))
 (let (($x235 (=> (and $x121 (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x132 $x155)))))))
 (let (($x46 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x106 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x125 (=> $x106 (or false (or false (and true (or $x136 $x46)))))))
 (let (($x65 (=> (and $x121 $x106) (or false (or false (and true (or $x136 $x46)))))))
 (let (($x52 (and $x65 $x235)))
 (let (($x296 (and $x52 $x64)))
 (let (($x36 (=> $x296 $x211)))
 (not $x36))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x312 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x175 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem ?x175) (concat ?x67 (concat ?x342 ?x312)))))
 (let ((?x362 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x248)))
 (let ((?x363 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x364 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x385 (bvneg ?x364)))
 (let (($x365 (= ?x385 ?x362)))
 (let (($x383 (= $x365 true)))
 (let ((?x184 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x13))))
 (let ((?x313 (bvadd ?x298 (_ bv4 32))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x88))))
 (let (($x374 (= (_ bv0 32) ?x182)))
 (let ((?x321 (ite $x374 (_ bv0 32) (_ bv1 32))))
 (let (($x361 (bvuge ?x321 (_ bv1 32))))
 (let (($x58 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x371 (= $x58 $x361)))
 (let (($x256 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x10 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (and $x10 $x256)))
 (let (($x372 (=> $x244 $x371)))
 (let (($x320 (= ?x321 (_ bv0 32))))
 (let (($x335 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x357 (= $x335 $x320)))
 (let (($x359 (=> $x244 $x357)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x219))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x221)))
 (let (($x376 (=> $x244 $x358)))
 (let (($x246 (= (_ bv0 32) ?x298)))
 (let ((?x316 (ite $x246 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x316 (_ bv1 32))))
 (let (($x348 (= $x256 $x329)))
 (let (($x144 (=> $x10 $x348)))
 (let (($x259 (= ?x316 (_ bv0 32))))
 (let (($x293 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x354 (= $x293 $x259)))
 (let (($x370 (=> $x10 $x354)))
 (let (($x352 (= input.spec-%var-l-1.2.0 ?x248)))
 (let (($x60 (=> $x10 $x352)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x252 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x252 (_ bv1 32))))
 (let (($x353 (= $x10 $x245)))
 (let (($x84 (= ?x252 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x447 (= $x90 $x84)))
 (let (($x44 (= false false)))
 (let (($x250 (and $x10 $x293)))
 (let (($x21 (=> $x250 $x44)))
 (let (($x287 (=> $x90 $x44)))
 (let (($x355 (and (and (and (and (and (and $x287 $x21) $x447) $x353) $x60) $x370) $x144)))
 (let (($x448 (and (and (and $x355 $x376) $x359) $x372)))
 (let (($x360 (= $x448 true)))
 (let (($x187 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x228 (= $x187 $x361)))
 (let (($x64 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x11 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x89 (and $x11 $x64)))
 (let (($x333 (=> $x89 $x228)))
 (let (($x262 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x91 (= $x262 $x320)))
 (let (($x327 (=> $x89 $x91)))
 (let (($x225 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x221)))
 (let (($x347 (=> $x89 $x225)))
 (let (($x331 (= $x64 $x329)))
 (let (($x37 (=> $x11 $x331)))
 (let (($x35 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x377 (= $x35 $x259)))
 (let (($x290 (=> $x11 $x377)))
 (let (($x345 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x248)))
 (let (($x366 (=> $x11 $x345)))
 (let (($x209 (and $x11 $x35)))
 (let (($x83 (=> $x209 $x44)))
 (let (($x142 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x317 (=> $x142 $x44)))
 (let (($x79 (and (and (and (and (and (= $x142 $x84) (= $x11 $x245)) $x317) $x83) $x366) $x290)))
 (let (($x328 (and (and (and (and $x79 $x37) $x347) $x327) $x333)))
 (let (($x334 (= $x328 true)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x166 (concat ?x15 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x255 (concat ?x238 (concat ?x305 ?x166))))
 (let ((?x119 (bvadd ?x255 (_ bv4 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x97))))
 (let (($x186 (= (_ bv0 32) ?x62)))
 (let ((?x141 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x141 (_ bv1 32))))
 (let (($x326 (= $x58 $x165)))
 (let (($x282 (=> $x244 $x326)))
 (let (($x276 (= ?x141 (_ bv0 32))))
 (let (($x325 (= $x335 $x276)))
 (let (($x319 (=> $x244 $x325)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x273))))
 (let (($x344 (= input.spec-%var-l-1.2.1.2.0 ?x48)))
 (let (($x341 (=> $x244 $x344)))
 (let (($x275 (= (_ bv0 32) ?x255)))
 (let ((?x5 (ite $x275 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x5 (_ bv1 32))))
 (let (($x311 (= $x256 $x296)))
 (let (($x251 (=> $x10 $x311)))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (let (($x40 (= $x293 $x22)))
 (let (($x66 (=> $x10 $x40)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x68)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x109)))
 (let (($x315 (= input.spec-%var-l-1.2.0 ?x47)))
 (let (($x145 (=> $x10 $x315)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x29 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x29 (_ bv1 32))))
 (let (($x213 (= $x10 $x152)))
 (let (($x81 (= ?x29 (_ bv0 32))))
 (let (($x307 (= $x90 $x81)))
 (let (($x286 (and (and (and (and (and (and $x307 $x213) $x287) $x145) $x66) $x21) $x251)))
 (let (($x222 (and (and (and $x286 $x341) $x319) $x282)))
 (let (($x308 (= $x222 true)))
 (let (($x191 (= $x187 $x165)))
 (let (($x173 (=> $x89 $x191)))
 (let (($x278 (= $x262 $x276)))
 (let (($x177 (=> $x89 $x278)))
 (let (($x51 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x48)))
 (let (($x211 (=> $x89 $x51)))
 (let (($x19 (= $x64 $x296)))
 (let (($x74 (=> $x11 $x19)))
 (let (($x137 (= $x35 $x22)))
 (let (($x237 (=> $x11 $x137)))
 (let (($x265 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x47)))
 (let (($x126 (=> $x11 $x265)))
 (let (($x194 (and (and (and (and (and (= $x142 $x81) (= $x11 $x152)) $x317) $x126) $x237) $x83)))
 (let (($x249 (and (and (and (and $x194 $x74) $x211) $x177) $x173)))
 (let (($x318 (= $x249 true)))
 (let ((?x76 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x284 (bvneg ?x76)))
 (let (($x113 (= ?x284 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x113 true)))
 (let (($x77 (= $x266 true)))
 (let ((?x214 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= (_ bv0 3) ?x214)))
 (let (($x190 (= $x99 true)))
 (let (($x304 (= $x190 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x92 true)))
 (let (($x270 (= $x147 true)))
 (let (($x227 (= $x270 true)))
 (let (($x310 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72))))
 (let (($x108 (and true $x107)))
 (let (($x268 (and $x107 $x108)))
 (let ((?x106 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x234))))
 (let (($x50 (= (bvand ?x82 (_ bv4294967288 32)) ?x82)))
 (let (($x86 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x232 (and $x86 $x50)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv4 32))) (bvult ?x106 (bvsub ?x106 (_ bv4 32))))))
 (let (($x261 (and (and (and (and (and $x108 $x116) $x86) $x232) $x268) $x310)))
 (let (($x87 (= true $x261)))
 (let (($x121 (not $x14)))
 (let (($x153 (=> $x121 $x87)))
 (let (($x103 (= $x153 true)))
 (let (($x242 (= $x103 true)))
 (let (($x100 (= $x242 true)))
 (let (($x143 (= $x121 true)))
 (let (($x96 (= $x143 true)))
 (let (($x299 (= $x96 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x148)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x6 $x118)))
 (let (($x314 (and $x18 $x135)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x129 $x314)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x188)))))))
 (let (($x149 (and $x185 $x161)))
 (let (($x30 (= $x149 true)))
 (let (($x239 (= $x30 true)))
 (let (($x189 (= $x239 true)))
 (let (($x156 (and $x189 $x299)))
 (let (($x201 (and $x156 $x100)))
 (let (($x17 (and $x201 $x227)))
 (let (($x75 (and $x17 $x304)))
 (let (($x204 (and $x75 $x77)))
 (let (($x240 (and $x204 $x318)))
 (let (($x257 (and $x240 $x308)))
 (let (($x336 (and $x257 $x334)))
 (let (($x450 (and $x336 $x360)))
 (let (($x369 (and $x11 $x450)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x367 (and $x168 $x369)))
 (let (($x160 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x106 (_ bv3 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x7 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x160)))))))
 (let (($x202 (=> (and $x121 (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x159 $x160)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x236 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x184 (_ bv1 32))) (or false (or false (and true (or $x146 $x85)))))))
 (let (($x59 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x184 (_ bv1 32)))) (or false (or false (and true (or $x146 $x85)))))))
 (let (($x123 (and $x59 $x202)))
 (let (($x174 (and $x123 $x367)))
 (let (($x368 (=> $x174 $x383)))
 (not $x368))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x312 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x175 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem ?x175) (concat ?x67 (concat ?x342 ?x312)))))
 (let ((?x362 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x248)))
 (let ((?x363 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x364 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x385 (bvneg ?x364)))
 (let (($x365 (= ?x385 ?x362)))
 (let (($x383 (= $x365 true)))
 (let ((?x184 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x13))))
 (let ((?x313 (bvadd ?x298 (_ bv4 32))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x88))))
 (let (($x374 (= (_ bv0 32) ?x182)))
 (let ((?x321 (ite $x374 (_ bv0 32) (_ bv1 32))))
 (let (($x361 (bvuge ?x321 (_ bv1 32))))
 (let (($x58 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x371 (= $x58 $x361)))
 (let (($x256 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x10 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (and $x10 $x256)))
 (let (($x372 (=> $x244 $x371)))
 (let (($x320 (= ?x321 (_ bv0 32))))
 (let (($x335 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x357 (= $x335 $x320)))
 (let (($x359 (=> $x244 $x357)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x219))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x221)))
 (let (($x376 (=> $x244 $x358)))
 (let (($x246 (= (_ bv0 32) ?x298)))
 (let ((?x316 (ite $x246 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x316 (_ bv1 32))))
 (let (($x348 (= $x256 $x329)))
 (let (($x144 (=> $x10 $x348)))
 (let (($x259 (= ?x316 (_ bv0 32))))
 (let (($x293 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x354 (= $x293 $x259)))
 (let (($x370 (=> $x10 $x354)))
 (let (($x352 (= input.spec-%var-l-1.2.0 ?x248)))
 (let (($x60 (=> $x10 $x352)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x252 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x252 (_ bv1 32))))
 (let (($x353 (= $x10 $x245)))
 (let (($x84 (= ?x252 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x447 (= $x90 $x84)))
 (let (($x44 (= false false)))
 (let (($x250 (and $x10 $x293)))
 (let (($x21 (=> $x250 $x44)))
 (let (($x287 (=> $x90 $x44)))
 (let (($x355 (and (and (and (and (and (and $x287 $x21) $x447) $x353) $x60) $x370) $x144)))
 (let (($x448 (and (and (and $x355 $x376) $x359) $x372)))
 (let (($x360 (= $x448 true)))
 (let (($x187 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x228 (= $x187 $x361)))
 (let (($x64 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x11 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x89 (and $x11 $x64)))
 (let (($x333 (=> $x89 $x228)))
 (let (($x262 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x91 (= $x262 $x320)))
 (let (($x327 (=> $x89 $x91)))
 (let (($x225 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x221)))
 (let (($x347 (=> $x89 $x225)))
 (let (($x331 (= $x64 $x329)))
 (let (($x37 (=> $x11 $x331)))
 (let (($x35 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x377 (= $x35 $x259)))
 (let (($x290 (=> $x11 $x377)))
 (let (($x345 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x248)))
 (let (($x366 (=> $x11 $x345)))
 (let (($x209 (and $x11 $x35)))
 (let (($x83 (=> $x209 $x44)))
 (let (($x142 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x317 (=> $x142 $x44)))
 (let (($x79 (and (and (and (and (and (= $x142 $x84) (= $x11 $x245)) $x317) $x83) $x366) $x290)))
 (let (($x328 (and (and (and (and $x79 $x37) $x347) $x327) $x333)))
 (let (($x334 (= $x328 true)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x166 (concat ?x15 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x255 (concat ?x238 (concat ?x305 ?x166))))
 (let ((?x119 (bvadd ?x255 (_ bv4 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x97))))
 (let (($x186 (= (_ bv0 32) ?x62)))
 (let ((?x141 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x141 (_ bv1 32))))
 (let (($x326 (= $x58 $x165)))
 (let (($x282 (=> $x244 $x326)))
 (let (($x276 (= ?x141 (_ bv0 32))))
 (let (($x325 (= $x335 $x276)))
 (let (($x319 (=> $x244 $x325)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x273))))
 (let (($x344 (= input.spec-%var-l-1.2.1.2.0 ?x48)))
 (let (($x341 (=> $x244 $x344)))
 (let (($x275 (= (_ bv0 32) ?x255)))
 (let ((?x5 (ite $x275 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x5 (_ bv1 32))))
 (let (($x311 (= $x256 $x296)))
 (let (($x251 (=> $x10 $x311)))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (let (($x40 (= $x293 $x22)))
 (let (($x66 (=> $x10 $x40)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x68)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x109)))
 (let (($x315 (= input.spec-%var-l-1.2.0 ?x47)))
 (let (($x145 (=> $x10 $x315)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x29 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x29 (_ bv1 32))))
 (let (($x213 (= $x10 $x152)))
 (let (($x81 (= ?x29 (_ bv0 32))))
 (let (($x307 (= $x90 $x81)))
 (let (($x286 (and (and (and (and (and (and $x307 $x213) $x287) $x145) $x66) $x21) $x251)))
 (let (($x222 (and (and (and $x286 $x341) $x319) $x282)))
 (let (($x308 (= $x222 true)))
 (let (($x191 (= $x187 $x165)))
 (let (($x173 (=> $x89 $x191)))
 (let (($x278 (= $x262 $x276)))
 (let (($x177 (=> $x89 $x278)))
 (let (($x51 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x48)))
 (let (($x211 (=> $x89 $x51)))
 (let (($x19 (= $x64 $x296)))
 (let (($x74 (=> $x11 $x19)))
 (let (($x137 (= $x35 $x22)))
 (let (($x237 (=> $x11 $x137)))
 (let (($x265 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x47)))
 (let (($x126 (=> $x11 $x265)))
 (let (($x194 (and (and (and (and (and (= $x142 $x81) (= $x11 $x152)) $x317) $x126) $x237) $x83)))
 (let (($x249 (and (and (and (and $x194 $x74) $x211) $x177) $x173)))
 (let (($x318 (= $x249 true)))
 (let ((?x76 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x284 (bvneg ?x76)))
 (let (($x113 (= ?x284 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x113 true)))
 (let (($x77 (= $x266 true)))
 (let ((?x214 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= (_ bv0 3) ?x214)))
 (let (($x190 (= $x99 true)))
 (let (($x304 (= $x190 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x92 true)))
 (let (($x270 (= $x147 true)))
 (let (($x227 (= $x270 true)))
 (let (($x310 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x72))))
 (let (($x108 (and true $x107)))
 (let (($x268 (and $x107 $x108)))
 (let ((?x106 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x234))))
 (let (($x50 (= (bvand ?x82 (_ bv4294967288 32)) ?x82)))
 (let (($x86 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x232 (and $x86 $x50)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv4 32))) (bvult ?x106 (bvsub ?x106 (_ bv4 32))))))
 (let (($x261 (and (and (and (and (and $x108 $x116) $x86) $x232) $x268) $x310)))
 (let (($x87 (= true $x261)))
 (let (($x121 (not $x14)))
 (let (($x153 (=> $x121 $x87)))
 (let (($x103 (= $x153 true)))
 (let (($x242 (= $x103 true)))
 (let (($x100 (= $x242 true)))
 (let (($x143 (= $x121 true)))
 (let (($x96 (= $x143 true)))
 (let (($x299 (= $x96 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x148)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x6 $x118)))
 (let (($x314 (and $x18 $x135)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x129 $x314)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x188)))))))
 (let (($x149 (and $x185 $x161)))
 (let (($x30 (= $x149 true)))
 (let (($x239 (= $x30 true)))
 (let (($x189 (= $x239 true)))
 (let (($x156 (and $x189 $x299)))
 (let (($x201 (and $x156 $x100)))
 (let (($x17 (and $x201 $x227)))
 (let (($x75 (and $x17 $x304)))
 (let (($x204 (and $x75 $x77)))
 (let (($x240 (and $x204 $x318)))
 (let (($x257 (and $x240 $x308)))
 (let (($x336 (and $x257 $x334)))
 (let (($x450 (and $x336 $x360)))
 (let (($x369 (and $x11 $x450)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x367 (and $x168 $x369)))
 (let (($x160 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x106 (_ bv3 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x7 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x160)))))))
 (let (($x202 (=> (and $x121 (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x159 $x160)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x236 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x184 (_ bv1 32))) (or false (or false (and true (or $x146 $x85)))))))
 (let (($x59 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x184 (_ bv1 32)))) (or false (or false (and true (or $x146 $x85)))))))
 (let (($x123 (and $x59 $x202)))
 (let (($x174 (and $x123 $x367)))
 (let (($x368 (=> $x174 $x383)))
 (not $x368))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x268))))
 (let (($x255 (bvule ?x153 (_ bv4294967294 32))))
 (let (($x275 (= $x255 true)))
 (let (($x5 (= $x275 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x47 (_ bv1 32))))
 (let (($x181 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x101 (= $x181 $x292)))
 (let (($x265 (= ?x47 (_ bv0 32))))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (= $x110 $x265)))
 (let (($x305 (and $x238 $x101)))
 (let (($x269 (= $x305 true)))
 (let (($x241 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x253 (= $x241 $x292)))
 (let (($x81 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x126 (= $x81 $x265)))
 (let (($x35 (and $x126 $x253)))
 (let (($x33 (= $x35 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x152 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x44 (bvuge ?x152 (_ bv1 32))))
 (let (($x38 (= $x181 $x44)))
 (let (($x281 (= ?x152 (_ bv0 32))))
 (let (($x140 (= $x110 $x281)))
 (let (($x169 (and $x140 $x38)))
 (let (($x68 (= $x169 true)))
 (let (($x317 (= $x241 $x44)))
 (let (($x195 (= $x81 $x281)))
 (let (($x302 (and $x195 $x317)))
 (let (($x16 (= $x302 true)))
 (let ((?x70 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x142 (= (_ bv0 3) ?x70)))
 (let (($x199 (= $x142 true)))
 (let (($x130 (= $x199 true)))
 (let (($x284 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x284 true)))
 (let (($x113 (= $x203 true)))
 (let (($x266 (= $x113 true)))
 (let (($x147 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86))))
 (let (($x128 (and true $x49)))
 (let (($x26 (and $x49 $x128)))
 (let (($x100 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x127 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x201 (and $x127 $x100)))
 (let (($x234 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x214 (and (and (and (and (and $x128 $x234) $x127) $x201) $x26) $x147)))
 (let (($x99 (= true $x214)))
 (let (($x121 (not $x14)))
 (let (($x190 (=> $x121 $x99)))
 (let (($x304 (= $x190 true)))
 (let (($x75 (= $x304 true)))
 (let (($x192 (= $x75 true)))
 (let (($x116 (= $x121 true)))
 (let (($x196 (= $x116 true)))
 (let (($x111 (= $x196 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x72)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x96 $x156)))
 (let (($x197 (and $x95 $x230)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x105 $x197)))
 (let (($x314 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x314)))))))
 (let (($x108 (and $x143 $x107)))
 (let (($x34 (= $x108 true)))
 (let (($x80 (= $x34 true)))
 (let (($x183 (= $x80 true)))
 (let ((?x200 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x200)))
 (let (($x267 (= ?x297 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x185 (= $x267 true)))
 (let (($x208 (= $x185 true)))
 (let (($x114 (and $x208 $x183)))
 (let (($x271 (and $x114 $x111)))
 (let (($x295 (and $x271 $x192)))
 (let (($x77 (and $x295 $x266)))
 (let (($x29 (and $x77 $x130)))
 (let (($x61 (and $x29 $x16)))
 (let (($x109 (and $x61 $x68)))
 (let (($x272 (and $x109 $x33)))
 (let (($x15 (and $x272 $x269)))
 (let (($x55 (and $x241 $x15)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x166 (and $x57 $x55)))
 (let (($x235 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x39 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x168 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x235)))))))
 (let (($x172 (=> (and $x121 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x235)))))))
 (let (($x65 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x132 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x155 (=> $x132 (or false (or false (and true (or $x125 $x65)))))))
 (let (($x163 (=> (and $x121 $x132) (or false (or false (and true (or $x125 $x65)))))))
 (let (($x179 (and $x163 $x172)))
 (let (($x178 (and $x179 $x166)))
 (let (($x22 (=> $x178 $x5)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x268))))
 (let (($x255 (bvule ?x153 (_ bv4294967294 32))))
 (let (($x275 (= $x255 true)))
 (let (($x5 (= $x275 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x47 (_ bv1 32))))
 (let (($x181 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x101 (= $x181 $x292)))
 (let (($x265 (= ?x47 (_ bv0 32))))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (= $x110 $x265)))
 (let (($x305 (and $x238 $x101)))
 (let (($x269 (= $x305 true)))
 (let (($x241 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x253 (= $x241 $x292)))
 (let (($x81 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x126 (= $x81 $x265)))
 (let (($x35 (and $x126 $x253)))
 (let (($x33 (= $x35 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x152 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x44 (bvuge ?x152 (_ bv1 32))))
 (let (($x38 (= $x181 $x44)))
 (let (($x281 (= ?x152 (_ bv0 32))))
 (let (($x140 (= $x110 $x281)))
 (let (($x169 (and $x140 $x38)))
 (let (($x68 (= $x169 true)))
 (let (($x317 (= $x241 $x44)))
 (let (($x195 (= $x81 $x281)))
 (let (($x302 (and $x195 $x317)))
 (let (($x16 (= $x302 true)))
 (let ((?x70 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x142 (= (_ bv0 3) ?x70)))
 (let (($x199 (= $x142 true)))
 (let (($x130 (= $x199 true)))
 (let (($x284 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x284 true)))
 (let (($x113 (= $x203 true)))
 (let (($x266 (= $x113 true)))
 (let (($x147 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86))))
 (let (($x128 (and true $x49)))
 (let (($x26 (and $x49 $x128)))
 (let (($x100 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x127 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x201 (and $x127 $x100)))
 (let (($x234 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x214 (and (and (and (and (and $x128 $x234) $x127) $x201) $x26) $x147)))
 (let (($x99 (= true $x214)))
 (let (($x121 (not $x14)))
 (let (($x190 (=> $x121 $x99)))
 (let (($x304 (= $x190 true)))
 (let (($x75 (= $x304 true)))
 (let (($x192 (= $x75 true)))
 (let (($x116 (= $x121 true)))
 (let (($x196 (= $x116 true)))
 (let (($x111 (= $x196 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x72)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x96 $x156)))
 (let (($x197 (and $x95 $x230)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x105 $x197)))
 (let (($x314 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x314)))))))
 (let (($x108 (and $x143 $x107)))
 (let (($x34 (= $x108 true)))
 (let (($x80 (= $x34 true)))
 (let (($x183 (= $x80 true)))
 (let ((?x200 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x200)))
 (let (($x267 (= ?x297 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x185 (= $x267 true)))
 (let (($x208 (= $x185 true)))
 (let (($x114 (and $x208 $x183)))
 (let (($x271 (and $x114 $x111)))
 (let (($x295 (and $x271 $x192)))
 (let (($x77 (and $x295 $x266)))
 (let (($x29 (and $x77 $x130)))
 (let (($x61 (and $x29 $x16)))
 (let (($x109 (and $x61 $x68)))
 (let (($x272 (and $x109 $x33)))
 (let (($x15 (and $x272 $x269)))
 (let (($x55 (and $x241 $x15)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x166 (and $x57 $x55)))
 (let (($x235 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x39 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x168 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x235)))))))
 (let (($x172 (=> (and $x121 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x235)))))))
 (let (($x65 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x132 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x155 (=> $x132 (or false (or false (and true (or $x125 $x65)))))))
 (let (($x163 (=> (and $x121 $x132) (or false (or false (and true (or $x125 $x65)))))))
 (let (($x179 (and $x163 $x172)))
 (let (($x178 (and $x179 $x166)))
 (let (($x22 (=> $x178 $x5)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2123X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2113X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2123X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x282 (concat ?x326 (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv4 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2123X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2123X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x224 (concat ?x84 (concat ?x308 ?x282))))
 (let (($x245 (= ?x224 ?x224)))
 (let ((?x146 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x213))))
 (let (($x226 (= (_ bv0 32) ?x145)))
 (let ((?x293 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x293 (_ bv1 32))))
 (let (($x300 (=> $x250 $x245)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2123X))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv2 32))) ?x286)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv3 32))) ?x344)))
 (let (($x335 (= ?x223 ?x223)))
 (let (($x325 (=> $x250 $x335)))
 (let ((?x132 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x50))))
 (let (($x193 (= (_ bv0 32) ?x100)))
 (let ((?x212 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x212 (_ bv1 32))))
 (let (($x21 (= $x250 $x273)))
 (let (($x254 (= false false)))
 (let (($x40 (= ?x293 (_ bv0 32))))
 (let (($x274 (=> $x40 $x254)))
 (let (($x25 (and (and (and (and (= ?x145 ?x100) (= $x40 (= ?x212 (_ bv0 32)))) $x274) $x21) $x325)))
 (let (($x288 (and $x25 $x300)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2113X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x186 (concat ?x62 (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv4 32))))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2113X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2113X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x43 (concat ?x276 ?x186))))
 (let (($x165 (= ?x187 ?x187)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x294 (concat ?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x19 (concat ?x296 (concat ?x83 ?x294))))
 (let (($x301 (= (_ bv0 32) ?x19)))
 (let ((?x89 (ite $x301 (_ bv0 32) (_ bv1 32))))
 (let (($x8 (bvuge ?x89 (_ bv1 32))))
 (let (($x191 (=> $x8 $x165)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2113X))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv2 32))) ?x36)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv3 32))) ?x53)))
 (let (($x170 (= ?x207 ?x207)))
 (let (($x283 (=> $x8 $x170)))
 (let (($x220 (= $x8 $x273)))
 (let (($x176 (= ?x89 (_ bv0 32))))
 (let (($x233 (=> $x176 $x254)))
 (let (($x240 (and (and (and (and (= ?x19 ?x100) (= $x176 (= ?x212 (_ bv0 32)))) $x233) $x220) $x283)))
 (let (($x133 (and $x240 $x191)))
 (let (($x137 (not true)))
 (let (($x340 (or (or $x137 $x133) $x288)))
 (let (($x22 (= true true)))
 (let (($x342 (and $x22 $x340)))
 (let (($x312 (= $x342 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (bvuge ?x195 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x15 (= $x33 $x317)))
 (let (($x241 (= ?x195 (_ bv0 32))))
 (let (($x253 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x269 (= $x253 $x241)))
 (let (($x55 (and $x269 $x15)))
 (let (($x166 (= $x55 true)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x181 (ite $x140 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x181 (_ bv1 32))))
 (let (($x272 (= $x33 $x68)))
 (let (($x38 (= ?x181 (_ bv0 32))))
 (let (($x35 (= $x253 $x38)))
 (let (($x238 (and $x35 $x272)))
 (let (($x101 (= $x238 true)))
 (let (($x297 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x297 $x68)))
 (let (($x281 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x169 (= $x281 $x38)))
 (let (($x47 (and $x169 $x109)))
 (let (($x265 (= $x47 true)))
 (let (($x302 (= $x297 $x317)))
 (let (($x44 (= $x281 $x241)))
 (let (($x16 (and $x44 $x302)))
 (let (($x61 (= $x16 true)))
 (let ((?x32 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= (_ bv0 3) ?x32)))
 (let (($x122 (= $x81 true)))
 (let (($x11 (= $x122 true)))
 (let (($x204 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x70 (= $x204 true)))
 (let (($x142 (= $x70 true)))
 (let (($x199 (= $x142 true)))
 (let (($x214 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x128 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x128) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x128))))
 (let (($x234 (and true $x78)))
 (let (($x92 (and $x78 $x234)))
 (let (($x26 (= (bvand ?x100 (_ bv4294967288 32)) ?x100)))
 (let (($x210 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x215 (and $x210 $x26)))
 (let (($x227 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv4 32))) (bvult ?x132 (bvsub ?x132 (_ bv4 32))))))
 (let (($x192 (and (and (and (and (and $x234 $x227) $x210) $x215) $x92) $x214)))
 (let (($x295 (= true $x192)))
 (let (($x121 (not $x14)))
 (let (($x76 (=> $x121 $x295)))
 (let (($x284 (= $x76 true)))
 (let (($x203 (= $x284 true)))
 (let (($x113 (= $x203 true)))
 (let (($x86 (= $x121 true)))
 (let (($x56 (= $x86 true)))
 (let (($x9 (= $x56 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x34)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x230 $x107)))
 (let (($x183 (and $x108 $x80)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x161 $x183)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x6)))))))
 (let (($x116 (and $x72 $x114)))
 (let (($x196 (= $x116 true)))
 (let (($x111 (= $x196 true)))
 (let (($x271 (= $x111 true)))
 (let ((?x185 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x18 (= ?x208 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x189 (= $x18 true)))
 (let (($x148 (= $x189 true)))
 (let (($x124 (and $x148 $x271)))
 (let (($x49 (and $x124 $x9)))
 (let (($x266 (and $x49 $x113)))
 (let (($x130 (and $x266 $x199)))
 (let (($x152 (and $x130 $x11)))
 (let (($x54 (and $x152 $x61)))
 (let (($x126 (and $x54 $x265)))
 (let (($x305 (and $x126 $x101)))
 (let (($x178 (and $x305 $x166)))
 (let (($x255 (and $x297 $x178)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x275 (and $x188 $x255)))
 (let (($x202 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd ?x132 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x57 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x202)))))))
 (let (($x206 (=> (and $x121 (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x7 $x202)))))))
 (let (($x59 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x160 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32))) (or false (or false (and true (or $x236 $x59)))))))
 (let (($x175 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32)))) (or false (or false (and true (or $x236 $x59)))))))
 (let (($x229 (and $x175 $x206)))
 (let (($x5 (and $x229 $x275)))
 (let (($x243 (=> $x5 $x312)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2123X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2113X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2123X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x282 (concat ?x326 (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv4 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2123X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2123X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x224 (concat ?x84 (concat ?x308 ?x282))))
 (let (($x245 (= ?x224 ?x224)))
 (let ((?x146 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x213))))
 (let (($x226 (= (_ bv0 32) ?x145)))
 (let ((?x293 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x293 (_ bv1 32))))
 (let (($x300 (=> $x250 $x245)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2123X))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv2 32))) ?x286)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2123X (_ bv3 32))) ?x344)))
 (let (($x335 (= ?x223 ?x223)))
 (let (($x325 (=> $x250 $x335)))
 (let ((?x132 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x50))))
 (let (($x193 (= (_ bv0 32) ?x100)))
 (let ((?x212 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x212 (_ bv1 32))))
 (let (($x21 (= $x250 $x273)))
 (let (($x254 (= false false)))
 (let (($x40 (= ?x293 (_ bv0 32))))
 (let (($x274 (=> $x40 $x254)))
 (let (($x25 (and (and (and (and (= ?x145 ?x100) (= $x40 (= ?x212 (_ bv0 32)))) $x274) $x21) $x325)))
 (let (($x288 (and $x25 $x300)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2113X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x186 (concat ?x62 (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv4 32))))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2113X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2113X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x43 (concat ?x276 ?x186))))
 (let (($x165 (= ?x187 ?x187)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x294 (concat ?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x19 (concat ?x296 (concat ?x83 ?x294))))
 (let (($x301 (= (_ bv0 32) ?x19)))
 (let ((?x89 (ite $x301 (_ bv0 32) (_ bv1 32))))
 (let (($x8 (bvuge ?x89 (_ bv1 32))))
 (let (($x191 (=> $x8 $x165)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2113X))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv2 32))) ?x36)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2113X (_ bv3 32))) ?x53)))
 (let (($x170 (= ?x207 ?x207)))
 (let (($x283 (=> $x8 $x170)))
 (let (($x220 (= $x8 $x273)))
 (let (($x176 (= ?x89 (_ bv0 32))))
 (let (($x233 (=> $x176 $x254)))
 (let (($x240 (and (and (and (and (= ?x19 ?x100) (= $x176 (= ?x212 (_ bv0 32)))) $x233) $x220) $x283)))
 (let (($x133 (and $x240 $x191)))
 (let (($x137 (not true)))
 (let (($x340 (or (or $x137 $x133) $x288)))
 (let (($x22 (= true true)))
 (let (($x342 (and $x22 $x340)))
 (let (($x312 (= $x342 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (bvuge ?x195 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x15 (= $x33 $x317)))
 (let (($x241 (= ?x195 (_ bv0 32))))
 (let (($x253 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x269 (= $x253 $x241)))
 (let (($x55 (and $x269 $x15)))
 (let (($x166 (= $x55 true)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x181 (ite $x140 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x181 (_ bv1 32))))
 (let (($x272 (= $x33 $x68)))
 (let (($x38 (= ?x181 (_ bv0 32))))
 (let (($x35 (= $x253 $x38)))
 (let (($x238 (and $x35 $x272)))
 (let (($x101 (= $x238 true)))
 (let (($x297 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x297 $x68)))
 (let (($x281 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x169 (= $x281 $x38)))
 (let (($x47 (and $x169 $x109)))
 (let (($x265 (= $x47 true)))
 (let (($x302 (= $x297 $x317)))
 (let (($x44 (= $x281 $x241)))
 (let (($x16 (and $x44 $x302)))
 (let (($x61 (= $x16 true)))
 (let ((?x32 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= (_ bv0 3) ?x32)))
 (let (($x122 (= $x81 true)))
 (let (($x11 (= $x122 true)))
 (let (($x204 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x70 (= $x204 true)))
 (let (($x142 (= $x70 true)))
 (let (($x199 (= $x142 true)))
 (let (($x214 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x128 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x128) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x128))))
 (let (($x234 (and true $x78)))
 (let (($x92 (and $x78 $x234)))
 (let (($x26 (= (bvand ?x100 (_ bv4294967288 32)) ?x100)))
 (let (($x210 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x215 (and $x210 $x26)))
 (let (($x227 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv4 32))) (bvult ?x132 (bvsub ?x132 (_ bv4 32))))))
 (let (($x192 (and (and (and (and (and $x234 $x227) $x210) $x215) $x92) $x214)))
 (let (($x295 (= true $x192)))
 (let (($x121 (not $x14)))
 (let (($x76 (=> $x121 $x295)))
 (let (($x284 (= $x76 true)))
 (let (($x203 (= $x284 true)))
 (let (($x113 (= $x203 true)))
 (let (($x86 (= $x121 true)))
 (let (($x56 (= $x86 true)))
 (let (($x9 (= $x56 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x34)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x230 $x107)))
 (let (($x183 (and $x108 $x80)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x161 $x183)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x6)))))))
 (let (($x116 (and $x72 $x114)))
 (let (($x196 (= $x116 true)))
 (let (($x111 (= $x196 true)))
 (let (($x271 (= $x111 true)))
 (let ((?x185 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x18 (= ?x208 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x189 (= $x18 true)))
 (let (($x148 (= $x189 true)))
 (let (($x124 (and $x148 $x271)))
 (let (($x49 (and $x124 $x9)))
 (let (($x266 (and $x49 $x113)))
 (let (($x130 (and $x266 $x199)))
 (let (($x152 (and $x130 $x11)))
 (let (($x54 (and $x152 $x61)))
 (let (($x126 (and $x54 $x265)))
 (let (($x305 (and $x126 $x101)))
 (let (($x178 (and $x305 $x166)))
 (let (($x255 (and $x297 $x178)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x275 (and $x188 $x255)))
 (let (($x202 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd ?x132 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x57 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x202)))))))
 (let (($x206 (=> (and $x121 (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x7 $x202)))))))
 (let (($x59 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x160 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32))) (or false (or false (and true (or $x236 $x59)))))))
 (let (($x175 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x146 (_ bv1 32)))) (or false (or false (and true (or $x236 $x59)))))))
 (let (($x229 (and $x175 $x206)))
 (let (($x5 (and $x229 $x275)))
 (let (($x243 (=> $x5 $x312)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x335 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x308 (concat ?x222 (concat ?x319 ?x325))))
 (let (($x58 (= ?x308 ?x308)))
 (let ((?x125 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x315))))
 (let (($x217 (= (_ bv0 32) ?x213)))
 (let ((?x145 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x145 (_ bv1 32))))
 (let (($x326 (=> $x66 $x58)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x73)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x339)))
 (let (($x251 (= ?x311 ?x311)))
 (let (($x256 (=> $x66 $x251)))
 (let (($x169 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x68 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x68 (_ bv1 32))))
 (let (($x446 (= $x66 $x265)))
 (let (($x109 (= ?x68 (_ bv0 32))))
 (let (($x280 (= ?x145 (_ bv0 32))))
 (let (($x40 (= $x280 $x109)))
 (let (($x282 (and (and (=> $x280 (= false false)) (= ?x213 input.dst.llvm-%l)) $x40)))
 (let (($x245 (and (and (and $x282 $x446) $x256) $x326)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x240 (concat ?x283 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x277 (concat ?x276 (concat ?x177 ?x240))))
 (let (($x62 (= ?x277 ?x277)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x129 (concat ?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x89 (concat ?x301 (concat ?x194 ?x129))))
 (let (($x176 (= (_ bv0 32) ?x89)))
 (let ((?x193 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x193 (_ bv1 32))))
 (let (($x97 (=> $x233 $x62)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x48)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x262)))
 (let (($x51 (= ?x291 ?x291)))
 (let (($x36 (=> $x233 $x51)))
 (let (($x249 (= $x233 $x265)))
 (let (($x212 (= ?x193 (_ bv0 32))))
 (let (($x254 (= $x212 $x109)))
 (let (($x278 (and (and (=> $x212 (= false false)) (= ?x89 input.dst.llvm-%l)) $x254)))
 (let (($x191 (and (and (and $x278 $x249) $x36) $x97)))
 (let (($x296 (not true)))
 (let (($x288 (or (or $x296 $x191) $x245)))
 (let (($x64 (= true true)))
 (let (($x340 (and $x64 $x288)))
 (let (($x342 (= $x340 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x61 (bvuge ?x317 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (= $x101 $x61)))
 (let (($x302 (= ?x317 (_ bv0 32))))
 (let (($x272 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x166 (= $x272 $x302)))
 (let (($x255 (and $x166 $x178)))
 (let (($x275 (= $x255 true)))
 (let (($x305 (= $x101 $x265)))
 (let (($x238 (= $x272 $x109)))
 (let (($x269 (and $x238 $x305)))
 (let (($x15 (= $x269 true)))
 (let (($x208 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x126 (= $x208 $x265)))
 (let (($x297 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x47 (= $x297 $x109)))
 (let (($x292 (and $x47 $x126)))
 (let (($x253 (= $x292 true)))
 (let (($x54 (= $x208 $x61)))
 (let (($x16 (= $x297 $x302)))
 (let (($x110 (and $x16 $x54)))
 (let (($x140 (= $x110 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x81)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x199 $x29)))
 (let (($x11 (and $x32 $x122)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x214 $x11)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x284 $x203)))))))
 (let (($x200 (and $x142 $x152)))
 (let (($x281 (= $x200 true)))
 (let (($x195 (= $x281 true)))
 (let (($x241 (= $x195 true)))
 (let (($x17 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x17 true)))
 (let (($x215 (= $x26 true)))
 (let (($x304 (= $x215 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x197) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x197))))
 (let (($x183 (and true $x80)))
 (let (($x87 (and $x80 $x183)))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x112))))
 (let (($x99 (= (bvand ?x82 (_ bv4294967288 32)) ?x82)))
 (let (($x56 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x198 (and $x56 $x99)))
 (let (($x271 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x153 (and (and (and (and (and $x183 $x271) $x56) $x198) $x87) $x190)))
 (let (($x232 (= true $x153)))
 (let (($x121 (not $x14)))
 (let (($x205 (=> $x121 $x232)))
 (let (($x310 (= $x205 true)))
 (let (($x50 (= $x310 true)))
 (let (($x103 (= $x50 true)))
 (let ((?x156 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= (_ bv0 3) ?x156)))
 (let (($x314 (= $x72 true)))
 (let (($x161 (= $x314 true)))
 (let ((?x30 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x30)))
 (let (($x143 (= ?x95 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x6 (= $x143 true)))
 (let (($x105 (= $x6 true)))
 (let (($x118 (= $x121 true)))
 (let (($x18 (= $x118 true)))
 (let (($x189 (= $x18 true)))
 (let (($x96 (and $x189 $x105)))
 (let (($x230 (and $x96 $x161)))
 (let (($x100 (and $x230 $x103)))
 (let (($x92 (and $x100 $x304)))
 (let (($x44 (and $x92 $x241)))
 (let (($x181 (and $x44 $x140)))
 (let (($x35 (and $x181 $x253)))
 (let (($x55 (and $x35 $x15)))
 (let (($x5 (and $x55 $x275)))
 (let (($x22 (and $x208 $x5)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x137 (and $x267 $x22)))
 (let (($x172 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x159 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x188 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x168 $x172)))))))
 (let (($x42 (=> (and $x121 (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x168 $x172)))))))
 (let (($x163 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x235 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x125 (_ bv1 32))) (or false (or false (and true (or $x155 $x163)))))))
 (let (($x115 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x125 (_ bv1 32)))) (or false (or false (and true (or $x155 $x163)))))))
 (let (($x52 (and $x115 $x42)))
 (let (($x102 (and $x52 $x137)))
 (let (($x312 (=> $x102 $x342)))
 (not $x312))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x335 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x308 (concat ?x222 (concat ?x319 ?x325))))
 (let (($x58 (= ?x308 ?x308)))
 (let ((?x125 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x315))))
 (let (($x217 (= (_ bv0 32) ?x213)))
 (let ((?x145 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x145 (_ bv1 32))))
 (let (($x326 (=> $x66 $x58)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x73)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x339)))
 (let (($x251 (= ?x311 ?x311)))
 (let (($x256 (=> $x66 $x251)))
 (let (($x169 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x68 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x68 (_ bv1 32))))
 (let (($x446 (= $x66 $x265)))
 (let (($x109 (= ?x68 (_ bv0 32))))
 (let (($x280 (= ?x145 (_ bv0 32))))
 (let (($x40 (= $x280 $x109)))
 (let (($x282 (and (and (=> $x280 (= false false)) (= ?x213 input.dst.llvm-%l)) $x40)))
 (let (($x245 (and (and (and $x282 $x446) $x256) $x326)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x240 (concat ?x283 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x277 (concat ?x276 (concat ?x177 ?x240))))
 (let (($x62 (= ?x277 ?x277)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x129 (concat ?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x89 (concat ?x301 (concat ?x194 ?x129))))
 (let (($x176 (= (_ bv0 32) ?x89)))
 (let ((?x193 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x193 (_ bv1 32))))
 (let (($x97 (=> $x233 $x62)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x48)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x262)))
 (let (($x51 (= ?x291 ?x291)))
 (let (($x36 (=> $x233 $x51)))
 (let (($x249 (= $x233 $x265)))
 (let (($x212 (= ?x193 (_ bv0 32))))
 (let (($x254 (= $x212 $x109)))
 (let (($x278 (and (and (=> $x212 (= false false)) (= ?x89 input.dst.llvm-%l)) $x254)))
 (let (($x191 (and (and (and $x278 $x249) $x36) $x97)))
 (let (($x296 (not true)))
 (let (($x288 (or (or $x296 $x191) $x245)))
 (let (($x64 (= true true)))
 (let (($x340 (and $x64 $x288)))
 (let (($x342 (= $x340 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x61 (bvuge ?x317 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (= $x101 $x61)))
 (let (($x302 (= ?x317 (_ bv0 32))))
 (let (($x272 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x166 (= $x272 $x302)))
 (let (($x255 (and $x166 $x178)))
 (let (($x275 (= $x255 true)))
 (let (($x305 (= $x101 $x265)))
 (let (($x238 (= $x272 $x109)))
 (let (($x269 (and $x238 $x305)))
 (let (($x15 (= $x269 true)))
 (let (($x208 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x126 (= $x208 $x265)))
 (let (($x297 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x47 (= $x297 $x109)))
 (let (($x292 (and $x47 $x126)))
 (let (($x253 (= $x292 true)))
 (let (($x54 (= $x208 $x61)))
 (let (($x16 (= $x297 $x302)))
 (let (($x110 (and $x16 $x54)))
 (let (($x140 (= $x110 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x81)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x199 $x29)))
 (let (($x11 (and $x32 $x122)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x214 $x11)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x284 $x203)))))))
 (let (($x200 (and $x142 $x152)))
 (let (($x281 (= $x200 true)))
 (let (($x195 (= $x281 true)))
 (let (($x241 (= $x195 true)))
 (let (($x17 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x17 true)))
 (let (($x215 (= $x26 true)))
 (let (($x304 (= $x215 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x197) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x197))))
 (let (($x183 (and true $x80)))
 (let (($x87 (and $x80 $x183)))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x112))))
 (let (($x99 (= (bvand ?x82 (_ bv4294967288 32)) ?x82)))
 (let (($x56 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x198 (and $x56 $x99)))
 (let (($x271 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x153 (and (and (and (and (and $x183 $x271) $x56) $x198) $x87) $x190)))
 (let (($x232 (= true $x153)))
 (let (($x121 (not $x14)))
 (let (($x205 (=> $x121 $x232)))
 (let (($x310 (= $x205 true)))
 (let (($x50 (= $x310 true)))
 (let (($x103 (= $x50 true)))
 (let ((?x156 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= (_ bv0 3) ?x156)))
 (let (($x314 (= $x72 true)))
 (let (($x161 (= $x314 true)))
 (let ((?x30 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x30)))
 (let (($x143 (= ?x95 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x6 (= $x143 true)))
 (let (($x105 (= $x6 true)))
 (let (($x118 (= $x121 true)))
 (let (($x18 (= $x118 true)))
 (let (($x189 (= $x18 true)))
 (let (($x96 (and $x189 $x105)))
 (let (($x230 (and $x96 $x161)))
 (let (($x100 (and $x230 $x103)))
 (let (($x92 (and $x100 $x304)))
 (let (($x44 (and $x92 $x241)))
 (let (($x181 (and $x44 $x140)))
 (let (($x35 (and $x181 $x253)))
 (let (($x55 (and $x35 $x15)))
 (let (($x5 (and $x55 $x275)))
 (let (($x22 (and $x208 $x5)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x137 (and $x267 $x22)))
 (let (($x172 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x159 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x188 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x168 $x172)))))))
 (let (($x42 (=> (and $x121 (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x168 $x172)))))))
 (let (($x163 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x235 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x125 (_ bv1 32))) (or false (or false (and true (or $x155 $x163)))))))
 (let (($x115 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x125 (_ bv1 32)))) (or false (or false (and true (or $x155 $x163)))))))
 (let (($x52 (and $x115 $x42)))
 (let (($x102 (and $x52 $x137)))
 (let (($x312 (=> $x102 $x342)))
 (not $x312))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.ind-%var2166X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2161X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2166X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv2818044 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2818040 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967294 32))
(define-fun input.ind-%var2161X () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x344 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x344 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x245 (concat ?x308 ?x325))))
 (let (($x340 (= ?x288 ?x288)))
 (let ((?x236 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x145))))
 (let (($x66 (= (_ bv0 32) ?x282)))
 (let ((?x446 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x446 (_ bv1 32))))
 (let (($x342 (=> $x264 $x340)))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x339)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x256)))
 (let (($x222 (= ?x84 ?x84)))
 (let (($x25 (=> $x264 $x222)))
 (let (($x292 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x253 (ite $x292 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (bvuge ?x253 (_ bv1 32))))
 (let (($x341 (= $x264 $x272)))
 (let (($x35 (= ?x253 (_ bv0 32))))
 (let (($x257 (= ?x446 (_ bv0 32))))
 (let (($x303 (= $x257 $x35)))
 (let (($x243 (and (and (=> $x257 (= false false)) (= ?x282 input.dst.llvm-%l)) $x303)))
 (let (($x75 (and (and (and $x243 $x341) $x25) $x342)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x43 (concat ?x240 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x10 (concat ?x300 (concat ?x62 ?x43))))
 (let (($x90 (= ?x10 ?x10)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x212 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x233 (concat ?x278 (concat ?x173 ?x150))))
 (let (($x249 (= (_ bv0 32) ?x233)))
 (let ((?x187 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x231 (bvuge ?x187 (_ bv1 32))))
 (let (($x24 (=> $x231 $x90)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x291)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x165)))
 (let (($x131 (= ?x276 ?x276)))
 (let (($x177 (=> $x231 $x131)))
 (let (($x220 (= $x231 $x272)))
 (let (($x8 (= ?x187 (_ bv0 32))))
 (let (($x171 (= $x8 $x35)))
 (let (($x67 (and (and (=> $x8 (= false false)) (= ?x233 input.dst.llvm-%l)) $x171)))
 (let (($x315 (and (and (and $x67 $x220) $x177) $x24)))
 (let (($x19 (not true)))
 (let (($x46 (or (or $x19 $x315) $x75)))
 (let (($x129 (= true true)))
 (let (($x184 (and $x129 $x46)))
 (let (($x135 (= $x184 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x61 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x61 (_ bv1 32))))
 (let (($x255 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x209 (= $x255 $x140)))
 (let (($x54 (= ?x61 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (= $x166 $x54)))
 (let (($x38 (= false false)))
 (let (($x5 (=> $x166 $x38)))
 (let (($x301 (and (and $x5 $x296) $x209)))
 (let (($x294 (= $x301 true)))
 (let (($x137 (and (and (= $x166 $x35) (= $x255 $x272)) $x5)))
 (let (($x102 (= $x137 true)))
 (let (($x208 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x169 (=> $x208 $x38)))
 (let (($x148 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x238 (= $x148 $x272)))
 (let (($x33 (= $x208 $x35)))
 (let (($x305 (and (and $x33 $x238) $x169)))
 (let (($x269 (= $x305 true)))
 (let (($x109 (and (and (= $x208 $x54) (= $x148 $x140)) $x169)))
 (let (($x47 (= $x109 true)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x281)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x122 $x152)))
 (let (($x241 (and $x200 $x195)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x113 $x241)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x147)))))))
 (let (($x185 (and $x81 $x44)))
 (let (($x297 (= $x185 true)))
 (let (($x317 (= $x297 true)))
 (let (($x302 (= $x317 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x192 (= $x92 true)))
 (let (($x295 (= $x192 true)))
 (let (($x70 (= $x295 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80))))
 (let (($x111 (and true $x196)))
 (let (($x261 (and $x196 $x111)))
 (let ((?x20 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x128))))
 (let (($x268 (= (bvand ?x227 (_ bv4294967288 32)) ?x227)))
 (let (($x270 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x87 (and $x270 $x268)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x20 (bvsub ?x20 (_ bv4 32))) (bvult ?x20 (bvsub ?x20 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x111 $x56) $x270) $x87) $x261) $x190)))
 (let (($x103 (= true $x50)))
 (let (($x121 (not $x14)))
 (let (($x100 (=> $x121 $x103)))
 (let (($x201 (= $x100 true)))
 (let (($x17 (= $x201 true)))
 (let (($x26 (= $x17 true)))
 (let ((?x230 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x107 (= (_ bv0 3) ?x230)))
 (let (($x197 (= $x107 true)))
 (let (($x108 (= $x197 true)))
 (let ((?x6 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x6)))
 (let (($x299 (= ?x105 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x156 (= $x299 true)))
 (let (($x72 (= $x156 true)))
 (let (($x149 (= $x121 true)))
 (let (($x30 (= $x149 true)))
 (let (($x95 (= $x30 true)))
 (let (($x314 (and $x95 $x72)))
 (let (($x34 (and $x314 $x108)))
 (let (($x215 (and $x34 $x26)))
 (let (($x76 (and $x215 $x70)))
 (let (($x16 (and $x76 $x302)))
 (let (($x265 (and $x16 $x47)))
 (let (($x15 (and $x265 $x269)))
 (let (($x64 (and $x15 $x102)))
 (let (($x194 (and $x64 $x294)))
 (let (($x71 (and $x148 $x194)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x237 (and $x18 $x71)))
 (let (($x206 (bvugt ?x20 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x20 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x267 (=> (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x206)))))))
 (let (($x260 (=> (and $x121 (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x206)))))))
 (let (($x175 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x202 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x236 (_ bv1 32))) (or false (or false (and true (or $x160 $x175)))))))
 (let (($x117 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x236 (_ bv1 32)))) (or false (or false (and true (or $x160 $x175)))))))
 (let (($x123 (and $x117 $x260)))
 (let (($x83 (and $x123 $x237)))
 (let (($x248 (=> $x83 $x135)))
 (not $x248)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x344 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x344 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x245 (concat ?x308 ?x325))))
 (let (($x340 (= ?x288 ?x288)))
 (let ((?x236 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x145))))
 (let (($x66 (= (_ bv0 32) ?x282)))
 (let ((?x446 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x446 (_ bv1 32))))
 (let (($x342 (=> $x264 $x340)))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x339)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x256)))
 (let (($x222 (= ?x84 ?x84)))
 (let (($x25 (=> $x264 $x222)))
 (let (($x292 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x253 (ite $x292 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (bvuge ?x253 (_ bv1 32))))
 (let (($x341 (= $x264 $x272)))
 (let (($x35 (= ?x253 (_ bv0 32))))
 (let (($x257 (= ?x446 (_ bv0 32))))
 (let (($x303 (= $x257 $x35)))
 (let (($x243 (and (and (=> $x257 (= false false)) (= ?x282 input.dst.llvm-%l)) $x303)))
 (let (($x75 (and (and (and $x243 $x341) $x25) $x342)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x43 (concat ?x240 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x10 (concat ?x300 (concat ?x62 ?x43))))
 (let (($x90 (= ?x10 ?x10)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x212 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x233 (concat ?x278 (concat ?x173 ?x150))))
 (let (($x249 (= (_ bv0 32) ?x233)))
 (let ((?x187 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x231 (bvuge ?x187 (_ bv1 32))))
 (let (($x24 (=> $x231 $x90)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x291)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x165)))
 (let (($x131 (= ?x276 ?x276)))
 (let (($x177 (=> $x231 $x131)))
 (let (($x220 (= $x231 $x272)))
 (let (($x8 (= ?x187 (_ bv0 32))))
 (let (($x171 (= $x8 $x35)))
 (let (($x67 (and (and (=> $x8 (= false false)) (= ?x233 input.dst.llvm-%l)) $x171)))
 (let (($x315 (and (and (and $x67 $x220) $x177) $x24)))
 (let (($x19 (not true)))
 (let (($x46 (or (or $x19 $x315) $x75)))
 (let (($x129 (= true true)))
 (let (($x184 (and $x129 $x46)))
 (let (($x135 (= $x184 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x61 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x61 (_ bv1 32))))
 (let (($x255 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x209 (= $x255 $x140)))
 (let (($x54 (= ?x61 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (= $x166 $x54)))
 (let (($x38 (= false false)))
 (let (($x5 (=> $x166 $x38)))
 (let (($x301 (and (and $x5 $x296) $x209)))
 (let (($x294 (= $x301 true)))
 (let (($x137 (and (and (= $x166 $x35) (= $x255 $x272)) $x5)))
 (let (($x102 (= $x137 true)))
 (let (($x208 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x169 (=> $x208 $x38)))
 (let (($x148 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x238 (= $x148 $x272)))
 (let (($x33 (= $x208 $x35)))
 (let (($x305 (and (and $x33 $x238) $x169)))
 (let (($x269 (= $x305 true)))
 (let (($x109 (and (and (= $x208 $x54) (= $x148 $x140)) $x169)))
 (let (($x47 (= $x109 true)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x281)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x122 $x152)))
 (let (($x241 (and $x200 $x195)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x113 $x241)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x147)))))))
 (let (($x185 (and $x81 $x44)))
 (let (($x297 (= $x185 true)))
 (let (($x317 (= $x297 true)))
 (let (($x302 (= $x317 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x192 (= $x92 true)))
 (let (($x295 (= $x192 true)))
 (let (($x70 (= $x295 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80))))
 (let (($x111 (and true $x196)))
 (let (($x261 (and $x196 $x111)))
 (let ((?x20 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x128))))
 (let (($x268 (= (bvand ?x227 (_ bv4294967288 32)) ?x227)))
 (let (($x270 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x87 (and $x270 $x268)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x20 (bvsub ?x20 (_ bv4 32))) (bvult ?x20 (bvsub ?x20 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x111 $x56) $x270) $x87) $x261) $x190)))
 (let (($x103 (= true $x50)))
 (let (($x121 (not $x14)))
 (let (($x100 (=> $x121 $x103)))
 (let (($x201 (= $x100 true)))
 (let (($x17 (= $x201 true)))
 (let (($x26 (= $x17 true)))
 (let ((?x230 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x107 (= (_ bv0 3) ?x230)))
 (let (($x197 (= $x107 true)))
 (let (($x108 (= $x197 true)))
 (let ((?x6 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x6)))
 (let (($x299 (= ?x105 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x156 (= $x299 true)))
 (let (($x72 (= $x156 true)))
 (let (($x149 (= $x121 true)))
 (let (($x30 (= $x149 true)))
 (let (($x95 (= $x30 true)))
 (let (($x314 (and $x95 $x72)))
 (let (($x34 (and $x314 $x108)))
 (let (($x215 (and $x34 $x26)))
 (let (($x76 (and $x215 $x70)))
 (let (($x16 (and $x76 $x302)))
 (let (($x265 (and $x16 $x47)))
 (let (($x15 (and $x265 $x269)))
 (let (($x64 (and $x15 $x102)))
 (let (($x194 (and $x64 $x294)))
 (let (($x71 (and $x148 $x194)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x237 (and $x18 $x71)))
 (let (($x206 (bvugt ?x20 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x20 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x267 (=> (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x206)))))))
 (let (($x260 (=> (and $x121 (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x206)))))))
 (let (($x175 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x202 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x236 (_ bv1 32))) (or false (or false (and true (or $x160 $x175)))))))
 (let (($x117 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x236 (_ bv1 32)))) (or false (or false (and true (or $x160 $x175)))))))
 (let (($x123 (and $x117 $x260)))
 (let (($x83 (and $x123 $x237)))
 (let (($x248 (=> $x83 $x135)))
 (not $x248)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.ind-%var2166X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2161X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2166X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv2818044 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2818040 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967294 32))
(define-fun input.ind-%var2161X () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x425 (concat ?x429 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x422 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x427 (concat ?x424 (concat ?x422 ?x425))))
 (let (($x430 (= ?x427 ?x427)))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x137))))
 (let (($x294 (= (_ bv0 32) ?x301)))
 (let ((?x194 (ite $x294 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x194 (_ bv1 32))))
 (let (($x431 (=> $x19 $x430)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x413)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x408)))
 (let (($x418 (= ?x417 ?x417)))
 (let (($x419 (=> $x19 $x418)))
 (let (($x216 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x69 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x69 (_ bv1 32))))
 (let (($x407 (= $x19 $x226)))
 (let (($x40 (= ?x69 (_ bv0 32))))
 (let (($x71 (= ?x194 (_ bv0 32))))
 (let (($x406 (= $x71 $x40)))
 (let (($x433 (and (and (=> $x71 (= false false)) (= ?x301 input.dst.llvm-%l)) $x406)))
 (let (($x455 (and (and (and $x433 $x407) $x419) $x431)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x398 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x390 (concat ?x395 ?x398))))
 (let (($x396 (= ?x393 ?x393)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x250 (concat ?x85 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x379 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x73 (concat ?x379 (concat ?x286 ?x250))))
 (let (($x21 (= (_ bv0 32) ?x73)))
 (let ((?x339 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x339 (_ bv1 32))))
 (let (($x399 (=> $x25 $x396)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x381)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x164)))
 (let (($x451 (= ?x388 ?x388)))
 (let (($x389 (=> $x25 $x451)))
 (let (($x134 (= $x25 $x226)))
 (let (($x256 (= ?x339 (_ bv0 32))))
 (let (($x449 (= $x256 $x40)))
 (let (($x401 (and (and (=> $x256 (= false false)) (= ?x73 input.dst.llvm-%l)) $x449)))
 (let (($x404 (and (and (and $x401 $x134) $x389) $x399)))
 (let (($x365 (not true)))
 (let (($x437 (or (or $x365 $x404) $x455)))
 (let (($x362 (= true true)))
 (let (($x438 (and $x362 $x437)))
 (let (($x456 (= $x438 true)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x301 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x301 (_ bv4 32))))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x301 (_ bv4 32)) (_ bv2 32))) ?x318)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x301 (_ bv4 32)) (_ bv3 32))) ?x51)))
 (let (($x273 (= (_ bv0 32) ?x262)))
 (let ((?x291 (ite $x273 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x291 (_ bv1 32))))
 (let (($x321 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x376 (= $x321 $x133)))
 (let (($x324 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x218 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x323 (and $x218 $x324)))
 (let (($x349 (=> $x323 $x376)))
 (let (($x165 (= ?x291 (_ bv0 32))))
 (let (($x338 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x355 (= $x338 $x165)))
 (let (($x358 (=> $x323 $x355)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x176))))
 (let (($x348 (= input.spec-%var-l-1.2.1.2.0 ?x8)))
 (let (($x144 (=> $x323 $x348)))
 (let (($x370 (= $x324 $x19)))
 (let (($x139 (=> $x218 $x370)))
 (let (($x221 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x351 (= $x221 $x71)))
 (let (($x354 (=> $x218 $x351)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x132) (concat ?x269 (concat ?x238 ?x33)))))
 (let (($x352 (= input.spec-%var-l-1.2.0 ?x166)))
 (let (($x60 (=> $x218 $x352)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x140 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x140 (_ bv1 32))))
 (let (($x157 (= $x218 $x38)))
 (let (($x181 (= ?x140 (_ bv0 32))))
 (let (($x440 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x353 (= $x440 $x181)))
 (let (($x109 (= false false)))
 (let (($x332 (and $x218 $x221)))
 (let (($x313 (=> $x332 $x109)))
 (let (($x263 (=> $x440 $x109)))
 (let (($x448 (and (and (and (and (and (and $x263 $x313) $x353) $x157) $x60) $x354) $x139)))
 (let (($x369 (and (and (and $x448 $x144) $x358) $x349)))
 (let (($x367 (= $x369 true)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x73 (_ bv4 32))))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x73 (_ bv4 32)) (_ bv2 32))) ?x248)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x73 (_ bv4 32)) (_ bv3 32))) ?x146)))
 (let (($x285 (= (_ bv0 32) ?x343)))
 (let ((?x247 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x306 (bvuge ?x247 (_ bv1 32))))
 (let (($x320 (= $x321 $x306)))
 (let (($x91 (=> $x323 $x320)))
 (let (($x309 (= ?x247 (_ bv0 32))))
 (let (($x182 (= $x338 $x309)))
 (let (($x374 (=> $x323 $x182)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x308))))
 (let (($x346 (= input.spec-%var-l-1.2.1.2.0 ?x288)))
 (let (($x279 (=> $x323 $x346)))
 (let (($x444 (= $x324 $x25)))
 (let (($x337 (=> $x218 $x444)))
 (let (($x225 (= $x221 $x256)))
 (let (($x347 (=> $x218 $x225)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x293)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x446)))
 (let (($x93 (= input.spec-%var-l-1.2.0 ?x244)))
 (let (($x219 (=> $x218 $x93)))
 (let (($x333 (and (and (and (and (and (= $x440 $x40) (= $x218 $x226)) $x263) $x219) $x347) $x313)))
 (let (($x104 (and (and (and (and $x333 $x337) $x279) $x374) $x91)))
 (let (($x447 (= $x104 true)))
 (let (($x177 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x356 (= $x177 $x306)))
 (let (($x129 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x278 (and $x239 $x129)))
 (let (($x13 (=> $x278 $x356)))
 (let (($x171 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x154 (= $x171 $x309)))
 (let (($x375 (=> $x278 $x154)))
 (let (($x340 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x288)))
 (let (($x342 (=> $x278 $x340)))
 (let (($x136 (= $x129 $x25)))
 (let (($x319 (=> $x239 $x136)))
 (let (($x126 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x292 (and $x239 $x126)))
 (let (($x253 (=> $x292 $x109)))
 (let (($x84 (= $x126 $x256)))
 (let (($x222 (=> $x239 $x84)))
 (let (($x312 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x244)))
 (let (($x303 (=> $x239 $x312)))
 (let (($x148 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x47 (=> $x148 $x109)))
 (let (($x259 (and (and (and (and (and (= $x148 $x40) (= $x239 $x226)) $x47) $x303) $x222) $x253)))
 (let (($x329 (and (and (and (and $x259 $x319) $x342) $x375) $x13)))
 (let (($x331 (= $x329 true)))
 (let (($x170 (= $x177 $x133)))
 (let (($x191 (=> $x278 $x170)))
 (let (($x276 (= $x171 $x165)))
 (let (($x131 (=> $x278 $x276)))
 (let (($x119 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x8)))
 (let (($x211 (=> $x278 $x119)))
 (let (($x89 (= $x129 $x19)))
 (let (($x254 (=> $x239 $x89)))
 (let (($x237 (= $x126 $x71)))
 (let (($x83 (=> $x239 $x237)))
 (let (($x178 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x166)))
 (let (($x255 (=> $x239 $x178)))
 (let (($x240 (and (and (and (and (and (= $x148 $x181) (= $x239 $x38)) $x47) $x253) $x255) $x83)))
 (let (($x10 (and (and (and (and $x240 $x254) $x211) $x131) $x191)))
 (let (($x90 (= $x10 true)))
 (let ((?x297 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x297)))
 (let ((?x241 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x241)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x195 $x44)))
 (let (($x302 (and $x185 $x317)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x214 $x302)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x281 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x203)))))))
 (let (($x189 (and $x281 $x16)))
 (let (($x208 (= $x189 true)))
 (let (($x61 (= $x208 true)))
 (let (($x54 (= $x61 true)))
 (let (($x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x266 (= $x76 true)))
 (let (($x77 (= $x266 true)))
 (let (($x32 (= $x77 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196))))
 (let (($x86 (and true $x124)))
 (let (($x310 (and $x124 $x86)))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x258))))
 (let (($x205 (= (bvand ?x198 (_ bv4294967288 32)) ?x198)))
 (let (($x127 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x261 (and $x127 $x205)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv4 32))) (bvult ?x7 (bvsub ?x7 (_ bv4 32))))))
 (let (($x17 (and (and (and (and (and $x86 $x270) $x127) $x261) $x310) $x190)))
 (let (($x26 (= true $x17)))
 (let (($x121 (not $x14)))
 (let (($x215 (=> $x121 $x26)))
 (let (($x304 (= $x215 true)))
 (let (($x92 (= $x304 true)))
 (let (($x192 (= $x92 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x34)))
 (let (($x80 (= $x183 true)))
 (let (($x116 (= $x80 true)))
 (let ((?x156 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x156)))
 (let (($x161 (= ?x72 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x230 (= $x161 true)))
 (let (($x107 (= $x230 true)))
 (let (($x143 (= $x121 true)))
 (let (($x6 (= $x143 true)))
 (let (($x105 (= $x6 true)))
 (let (($x197 (and $x105 $x107)))
 (let (($x114 (and $x197 $x116)))
 (let (($x295 (and $x114 $x192)))
 (let (($x204 (and $x295 $x32)))
 (let (($x110 (and $x204 $x54)))
 (let (($x24 (and $x110 $x90)))
 (let (($x37 (and $x24 $x331)))
 (let (($x350 (and $x37 $x447)))
 (let (($x174 (and $x350 $x367)))
 (let (($x363 (and $x239 $x174)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x30 $x363)))
 (let (($x42 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x7 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x18 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x42)))))))
 (let (($x45 (=> (and $x121 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x188 $x42)))))))
 (let (($x115 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x172 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32))) (or false (or false (and true (or $x235 $x115)))))))
 (let (($x106 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32)))) (or false (or false (and true (or $x235 $x115)))))))
 (let (($x179 (and $x106 $x45)))
 (let (($x385 (and $x179 $x364)))
 (let (($x457 (=> $x385 $x456)))
 (not $x457)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x425 (concat ?x429 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x422 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x427 (concat ?x424 (concat ?x422 ?x425))))
 (let (($x430 (= ?x427 ?x427)))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x137))))
 (let (($x294 (= (_ bv0 32) ?x301)))
 (let ((?x194 (ite $x294 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x194 (_ bv1 32))))
 (let (($x431 (=> $x19 $x430)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x413)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x408)))
 (let (($x418 (= ?x417 ?x417)))
 (let (($x419 (=> $x19 $x418)))
 (let (($x216 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x69 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x69 (_ bv1 32))))
 (let (($x407 (= $x19 $x226)))
 (let (($x40 (= ?x69 (_ bv0 32))))
 (let (($x71 (= ?x194 (_ bv0 32))))
 (let (($x406 (= $x71 $x40)))
 (let (($x433 (and (and (=> $x71 (= false false)) (= ?x301 input.dst.llvm-%l)) $x406)))
 (let (($x455 (and (and (and $x433 $x407) $x419) $x431)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x398 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x390 (concat ?x395 ?x398))))
 (let (($x396 (= ?x393 ?x393)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x250 (concat ?x85 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x379 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x73 (concat ?x379 (concat ?x286 ?x250))))
 (let (($x21 (= (_ bv0 32) ?x73)))
 (let ((?x339 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x339 (_ bv1 32))))
 (let (($x399 (=> $x25 $x396)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x381)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x164)))
 (let (($x451 (= ?x388 ?x388)))
 (let (($x389 (=> $x25 $x451)))
 (let (($x134 (= $x25 $x226)))
 (let (($x256 (= ?x339 (_ bv0 32))))
 (let (($x449 (= $x256 $x40)))
 (let (($x401 (and (and (=> $x256 (= false false)) (= ?x73 input.dst.llvm-%l)) $x449)))
 (let (($x404 (and (and (and $x401 $x134) $x389) $x399)))
 (let (($x365 (not true)))
 (let (($x437 (or (or $x365 $x404) $x455)))
 (let (($x362 (= true true)))
 (let (($x438 (and $x362 $x437)))
 (let (($x456 (= $x438 true)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x301 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x301 (_ bv4 32))))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x301 (_ bv4 32)) (_ bv2 32))) ?x318)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x301 (_ bv4 32)) (_ bv3 32))) ?x51)))
 (let (($x273 (= (_ bv0 32) ?x262)))
 (let ((?x291 (ite $x273 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x291 (_ bv1 32))))
 (let (($x321 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x376 (= $x321 $x133)))
 (let (($x324 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x218 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x323 (and $x218 $x324)))
 (let (($x349 (=> $x323 $x376)))
 (let (($x165 (= ?x291 (_ bv0 32))))
 (let (($x338 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x355 (= $x338 $x165)))
 (let (($x358 (=> $x323 $x355)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x176))))
 (let (($x348 (= input.spec-%var-l-1.2.1.2.0 ?x8)))
 (let (($x144 (=> $x323 $x348)))
 (let (($x370 (= $x324 $x19)))
 (let (($x139 (=> $x218 $x370)))
 (let (($x221 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x351 (= $x221 $x71)))
 (let (($x354 (=> $x218 $x351)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x132) (concat ?x269 (concat ?x238 ?x33)))))
 (let (($x352 (= input.spec-%var-l-1.2.0 ?x166)))
 (let (($x60 (=> $x218 $x352)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x140 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x140 (_ bv1 32))))
 (let (($x157 (= $x218 $x38)))
 (let (($x181 (= ?x140 (_ bv0 32))))
 (let (($x440 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x353 (= $x440 $x181)))
 (let (($x109 (= false false)))
 (let (($x332 (and $x218 $x221)))
 (let (($x313 (=> $x332 $x109)))
 (let (($x263 (=> $x440 $x109)))
 (let (($x448 (and (and (and (and (and (and $x263 $x313) $x353) $x157) $x60) $x354) $x139)))
 (let (($x369 (and (and (and $x448 $x144) $x358) $x349)))
 (let (($x367 (= $x369 true)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x73 (_ bv4 32))))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x73 (_ bv4 32)) (_ bv2 32))) ?x248)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x73 (_ bv4 32)) (_ bv3 32))) ?x146)))
 (let (($x285 (= (_ bv0 32) ?x343)))
 (let ((?x247 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x306 (bvuge ?x247 (_ bv1 32))))
 (let (($x320 (= $x321 $x306)))
 (let (($x91 (=> $x323 $x320)))
 (let (($x309 (= ?x247 (_ bv0 32))))
 (let (($x182 (= $x338 $x309)))
 (let (($x374 (=> $x323 $x182)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x308))))
 (let (($x346 (= input.spec-%var-l-1.2.1.2.0 ?x288)))
 (let (($x279 (=> $x323 $x346)))
 (let (($x444 (= $x324 $x25)))
 (let (($x337 (=> $x218 $x444)))
 (let (($x225 (= $x221 $x256)))
 (let (($x347 (=> $x218 $x225)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x293)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x446)))
 (let (($x93 (= input.spec-%var-l-1.2.0 ?x244)))
 (let (($x219 (=> $x218 $x93)))
 (let (($x333 (and (and (and (and (and (= $x440 $x40) (= $x218 $x226)) $x263) $x219) $x347) $x313)))
 (let (($x104 (and (and (and (and $x333 $x337) $x279) $x374) $x91)))
 (let (($x447 (= $x104 true)))
 (let (($x177 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x356 (= $x177 $x306)))
 (let (($x129 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x278 (and $x239 $x129)))
 (let (($x13 (=> $x278 $x356)))
 (let (($x171 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x154 (= $x171 $x309)))
 (let (($x375 (=> $x278 $x154)))
 (let (($x340 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x288)))
 (let (($x342 (=> $x278 $x340)))
 (let (($x136 (= $x129 $x25)))
 (let (($x319 (=> $x239 $x136)))
 (let (($x126 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x292 (and $x239 $x126)))
 (let (($x253 (=> $x292 $x109)))
 (let (($x84 (= $x126 $x256)))
 (let (($x222 (=> $x239 $x84)))
 (let (($x312 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x244)))
 (let (($x303 (=> $x239 $x312)))
 (let (($x148 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x47 (=> $x148 $x109)))
 (let (($x259 (and (and (and (and (and (= $x148 $x40) (= $x239 $x226)) $x47) $x303) $x222) $x253)))
 (let (($x329 (and (and (and (and $x259 $x319) $x342) $x375) $x13)))
 (let (($x331 (= $x329 true)))
 (let (($x170 (= $x177 $x133)))
 (let (($x191 (=> $x278 $x170)))
 (let (($x276 (= $x171 $x165)))
 (let (($x131 (=> $x278 $x276)))
 (let (($x119 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x8)))
 (let (($x211 (=> $x278 $x119)))
 (let (($x89 (= $x129 $x19)))
 (let (($x254 (=> $x239 $x89)))
 (let (($x237 (= $x126 $x71)))
 (let (($x83 (=> $x239 $x237)))
 (let (($x178 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x166)))
 (let (($x255 (=> $x239 $x178)))
 (let (($x240 (and (and (and (and (and (= $x148 $x181) (= $x239 $x38)) $x47) $x253) $x255) $x83)))
 (let (($x10 (and (and (and (and $x240 $x254) $x211) $x131) $x191)))
 (let (($x90 (= $x10 true)))
 (let ((?x297 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x297)))
 (let ((?x241 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x241)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x195 $x44)))
 (let (($x302 (and $x185 $x317)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x214 $x302)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x281 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x203)))))))
 (let (($x189 (and $x281 $x16)))
 (let (($x208 (= $x189 true)))
 (let (($x61 (= $x208 true)))
 (let (($x54 (= $x61 true)))
 (let (($x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x266 (= $x76 true)))
 (let (($x77 (= $x266 true)))
 (let (($x32 (= $x77 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196))))
 (let (($x86 (and true $x124)))
 (let (($x310 (and $x124 $x86)))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x258))))
 (let (($x205 (= (bvand ?x198 (_ bv4294967288 32)) ?x198)))
 (let (($x127 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x261 (and $x127 $x205)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv4 32))) (bvult ?x7 (bvsub ?x7 (_ bv4 32))))))
 (let (($x17 (and (and (and (and (and $x86 $x270) $x127) $x261) $x310) $x190)))
 (let (($x26 (= true $x17)))
 (let (($x121 (not $x14)))
 (let (($x215 (=> $x121 $x26)))
 (let (($x304 (= $x215 true)))
 (let (($x92 (= $x304 true)))
 (let (($x192 (= $x92 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x34)))
 (let (($x80 (= $x183 true)))
 (let (($x116 (= $x80 true)))
 (let ((?x156 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x156)))
 (let (($x161 (= ?x72 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x230 (= $x161 true)))
 (let (($x107 (= $x230 true)))
 (let (($x143 (= $x121 true)))
 (let (($x6 (= $x143 true)))
 (let (($x105 (= $x6 true)))
 (let (($x197 (and $x105 $x107)))
 (let (($x114 (and $x197 $x116)))
 (let (($x295 (and $x114 $x192)))
 (let (($x204 (and $x295 $x32)))
 (let (($x110 (and $x204 $x54)))
 (let (($x24 (and $x110 $x90)))
 (let (($x37 (and $x24 $x331)))
 (let (($x350 (and $x37 $x447)))
 (let (($x174 (and $x350 $x367)))
 (let (($x363 (and $x239 $x174)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x30 $x363)))
 (let (($x42 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x7 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x18 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x42)))))))
 (let (($x45 (=> (and $x121 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x188 $x42)))))))
 (let (($x115 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x172 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32))) (or false (or false (and true (or $x235 $x115)))))))
 (let (($x106 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32)))) (or false (or false (and true (or $x235 $x115)))))))
 (let (($x179 (and $x106 $x45)))
 (let (($x385 (and $x179 $x364)))
 (let (($x457 (=> $x385 $x456)))
 (not $x457)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2166X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.ind-%var2161X () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x2020202c)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x20202028)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20) #x20202030 #x23))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.ind-%var2166X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2161X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x652 (concat ?x651 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x654 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x658 (concat ?x657 (concat ?x654 ?x652))))
 (let (($x659 (= ?x658 ?x658)))
 (let ((?x132 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x209))))
 (let (($x296 (= (_ bv0 32) ?x137)))
 (let ((?x301 (ite $x296 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x301 (_ bv1 32))))
 (let (($x660 (=> $x83 $x659)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x639)))
 (let ((?x645 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x642)))
 (let (($x646 (= ?x645 ?x645)))
 (let (($x647 (=> $x83 $x646)))
 (let (($x219 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x361 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x361 (_ bv1 32))))
 (let (($x634 (= $x83 $x225)))
 (let (($x322 (= ?x361 (_ bv0 32))))
 (let (($x294 (= ?x301 (_ bv0 32))))
 (let (($x633 (= $x294 $x322)))
 (let (($x662 (and (and (=> $x294 (= false false)) (= ?x137 input.dst.llvm-%l)) $x633)))
 (let (($x665 (and (and (and $x662 $x634) $x647) $x660)))
 (let ((?x616 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x617 (concat ?x616 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x623 (concat ?x622 (concat ?x619 ?x617))))
 (let (($x624 (= ?x623 ?x623)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x374 (concat ?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x447 (concat ?x104 (concat ?x321 ?x374))))
 (let (($x350 (= (_ bv0 32) ?x447)))
 (let ((?x357 (ite $x350 (_ bv0 32) (_ bv1 32))))
 (let (($x373 (bvuge ?x357 (_ bv1 32))))
 (let (($x625 (=> $x373 $x624)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x604)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x607)))
 (let (($x611 (= ?x610 ?x610)))
 (let (($x612 (=> $x373 $x611)))
 (let (($x599 (= $x373 $x225)))
 (let (($x353 (= ?x357 (_ bv0 32))))
 (let (($x598 (= $x353 $x322)))
 (let (($x627 (and (and (=> $x353 (= false false)) (= ?x447 input.dst.llvm-%l)) $x598)))
 (let (($x630 (and (and (and $x627 $x599) $x612) $x625)))
 (let (($x595 (not true)))
 (let (($x667 (or (or $x595 $x630) $x665)))
 (let (($x594 (= true true)))
 (let (($x668 (and $x594 $x667)))
 (let (($x669 (= $x668 true)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x137 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x137 (_ bv4 32))))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x137 (_ bv4 32)) (_ bv2 32))) ?x171)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x137 (_ bv4 32)) (_ bv3 32))) ?x48)))
 (let ((?x257 (bvadd ?x220 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x307))))
 (let ((?x344 (bvadd ?x312 (_ bv4 32))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem ?x344))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv2 32))) ?x308))))
 (let (($x284 (= (_ bv0 32) ?x75)))
 (let ((?x366 (ite $x284 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x366 (_ bv1 32))))
 (let (($x527 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x569 (= $x527 $x146)))
 (let (($x515 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x491 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x483 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x471 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x492 (and $x471 $x483)))
 (let (($x537 (and $x492 $x491)))
 (let (($x508 (and $x537 $x515)))
 (let (($x570 (=> $x508 $x569)))
 (let (($x345 (= ?x366 (_ bv0 32))))
 (let (($x516 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x567 (= $x516 $x345)))
 (let (($x568 (=> $x508 $x567)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem ?x312))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv2 32))) ?x84))))
 (let (($x565 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x319)))
 (let (($x566 (=> $x508 $x565)))
 (let (($x303 (= (_ bv0 32) ?x312)))
 (let ((?x246 (ite $x303 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x246 (_ bv1 32))))
 (let (($x563 (= $x515 $x85)))
 (let (($x564 (=> $x537 $x563)))
 (let (($x243 (= ?x246 (_ bv0 32))))
 (let (($x533 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x561 (= $x533 $x243)))
 (let (($x562 (=> $x537 $x561)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x90))))
 (let (($x559 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x280)))
 (let (($x560 (=> $x537 $x559)))
 (let (($x443 (= (_ bv0 32) ?x220)))
 (let ((?x231 (ite $x443 (_ bv0 32) (_ bv1 32))))
 (let (($x291 (bvuge ?x231 (_ bv1 32))))
 (let (($x557 (= $x491 $x291)))
 (let (($x558 (=> $x492 $x557)))
 (let (($x318 (= ?x231 (_ bv0 32))))
 (let (($x487 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x555 (= $x487 $x318)))
 (let (($x556 (=> $x492 $x555)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x63))))
 (let (($x553 (= input.spec-%var-l-1.2.1.2.0 ?x212)))
 (let (($x554 (=> $x492 $x553)))
 (let (($x551 (= $x483 $x83)))
 (let (($x552 (=> $x471 $x551)))
 (let (($x472 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x549 (= $x472 $x294)))
 (let (($x550 (=> $x471 $x549)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x120) (concat ?x238 (concat ?x305 ?x35)))))
 (let (($x547 (= input.spec-%var-l-1.2.0 ?x15)))
 (let (($x548 (=> $x471 $x547)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x300 (bvuge ?x239 (_ bv1 32))))
 (let (($x546 (= $x471 $x300)))
 (let (($x38 (= ?x239 (_ bv0 32))))
 (let (($x470 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x545 (= $x470 $x38)))
 (let (($x47 (= false false)))
 (let (($x535 (and $x508 $x516)))
 (let (($x519 (=> $x535 $x47)))
 (let (($x506 (and $x537 $x533)))
 (let (($x514 (=> $x506 $x47)))
 (let (($x496 (and $x492 $x487)))
 (let (($x501 (=> $x496 $x47)))
 (let (($x573 (and (and (and (=> $x470 $x47) (=> (and $x471 $x472) $x47)) $x501) $x514)))
 (let (($x579 (and (and (and (and (and (and $x573 $x519) $x545) $x546) $x548) $x550) $x552)))
 (let (($x585 (and (and (and (and (and (and $x579 $x554) $x556) $x558) $x560) $x562) $x564)))
 (let (($x588 (and (and (and $x585 $x566) $x568) $x570)))
 (let (($x589 (= $x588 true)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x447 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x447 (_ bv4 32))))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x447 (_ bv4 32)) (_ bv2 32))) ?x367)))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x447 (_ bv4 32)) (_ bv3 32))) ?x364)))
 (let ((?x403 (bvadd ?x365 (_ bv4 32))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x403 (_ bv1 32))) (select input.dst.llvm-mem ?x403))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x403 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x403 (_ bv2 32))) ?x394))))
 (let ((?x413 (bvadd ?x391 (_ bv4 32))))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x419))))
 (let (($x428 (= (_ bv0 32) ?x422)))
 (let ((?x429 (ite $x428 (_ bv0 32) (_ bv1 32))))
 (let (($x427 (bvuge ?x429 (_ bv1 32))))
 (let (($x528 (= $x527 $x427)))
 (let (($x524 (=> $x508 $x528)))
 (let (($x420 (= ?x429 (_ bv0 32))))
 (let (($x517 (= $x516 $x420)))
 (let (($x518 (=> $x508 $x517)))
 (let ((?x434 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv1 32))) (select input.dst.llvm-mem ?x391))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv2 32))) ?x434))))
 (let (($x507 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x416)))
 (let (($x510 (=> $x508 $x507)))
 (let (($x393 (= (_ bv0 32) ?x391)))
 (let ((?x396 (ite $x393 (_ bv0 32) (_ bv1 32))))
 (let (($x452 (bvuge ?x396 (_ bv1 32))))
 (let (($x511 (= $x515 $x452)))
 (let (($x512 (=> $x537 $x511)))
 (let (($x399 (= ?x396 (_ bv0 32))))
 (let (($x505 (= $x533 $x399)))
 (let (($x534 (=> $x537 $x505)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x382))))
 (let (($x503 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x388)))
 (let (($x532 (=> $x537 $x503)))
 (let (($x383 (= (_ bv0 32) ?x365)))
 (let ((?x368 (ite $x383 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x368 (_ bv1 32))))
 (let (($x494 (= $x491 $x134)))
 (let (($x495 (=> $x492 $x494)))
 (let (($x400 (= ?x368 (_ bv0 32))))
 (let (($x485 (= $x487 $x400)))
 (let (($x488 (=> $x492 $x485)))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x372))))
 (let (($x489 (= input.spec-%var-l-1.2.1.2.0 ?x360)))
 (let (($x490 (=> $x492 $x489)))
 (let (($x500 (= $x483 $x373)))
 (let (($x484 (=> $x471 $x500)))
 (let (($x481 (and $x471 $x472)))
 (let (($x482 (=> $x481 $x47)))
 (let (($x475 (= $x472 $x353)))
 (let (($x478 (=> $x471 $x475)))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x333)))
 (let ((?x442 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x337)))
 (let (($x477 (= input.spec-%var-l-1.2.0 ?x442)))
 (let (($x473 (=> $x471 $x477)))
 (let (($x520 (and (and (and (and (= $x470 $x322) (= $x471 $x225)) (=> $x470 $x47)) $x473) $x478)))
 (let (($x536 (and (and (and (and (and (and $x520 $x482) $x484) $x490) $x488) $x495) $x501)))
 (let (($x158 (and (and (and (and (and (and $x536 $x532) $x534) $x514) $x512) $x510) $x518)))
 (let (($x12 (and (and $x158 $x519) $x524)))
 (let (($x543 (= $x12 true)))
 (let (($x248 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x430 (= $x248 $x427)))
 (let (($x341 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x273 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x19 (and $x123 $x237)))
 (let (($x177 (and $x19 $x273)))
 (let (($x311 (and $x177 $x341)))
 (let (($x431 (=> $x311 $x430)))
 (let (($x335 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x425 (= $x335 $x420)))
 (let (($x423 (=> $x311 $x425)))
 (let (($x412 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x416)))
 (let (($x415 (=> $x311 $x412)))
 (let (($x405 (= $x341 $x452)))
 (let (($x432 (=> $x177 $x405)))
 (let (($x298 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x404 (= $x298 $x399)))
 (let (($x436 (=> $x177 $x404)))
 (let (($x451 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x388)))
 (let (($x389 (=> $x177 $x451)))
 (let (($x135 (and $x311 $x335)))
 (let (($x46 (=> $x135 $x47)))
 (let (($x224 (and $x177 $x298)))
 (let (($x286 (=> $x224 $x47)))
 (let (($x8 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x131 (and $x19 $x8)))
 (let (($x97 (=> $x131 $x47)))
 (let (($x402 (= $x273 $x134)))
 (let (($x167 (=> $x19 $x402)))
 (let (($x449 (= $x8 $x400)))
 (let (($x401 (=> $x19 $x449)))
 (let (($x355 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x360)))
 (let (($x358 (=> $x19 $x355)))
 (let (($x352 (= $x237 $x373)))
 (let (($x60 (=> $x123 $x352)))
 (let (($x126 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x292 (and $x123 $x126)))
 (let (($x253 (=> $x292 $x47)))
 (let (($x359 (= $x126 $x353)))
 (let (($x157 (=> $x123 $x359)))
 (let (($x346 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x442)))
 (let (($x279 (=> $x123 $x346)))
 (let (($x68 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x277 (=> $x68 $x47)))
 (let (($x457 (and (and (and (and (and (= $x68 $x322) (= $x123 $x225)) $x277) $x279) $x157) $x253)))
 (let (($x461 (and (and (and (and (and (and $x457 $x60) $x358) $x401) $x167) $x97) $x286)))
 (let (($x466 (and (and (and (and (and (and $x461 $x46) $x389) $x436) $x432) $x415) $x423)))
 (let (($x467 (and $x466 $x431)))
 (let (($x468 (= $x467 true)))
 (let (($x343 (= $x248 $x146)))
 (let (($x285 (=> $x311 $x343)))
 (let (($x65 (= $x335 $x345)))
 (let (($x184 (=> $x311 $x65)))
 (let (($x377 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x319)))
 (let (($x325 (=> $x311 $x377)))
 (let (($x264 (= $x341 $x85)))
 (let (($x250 (=> $x177 $x264)))
 (let (($x251 (= $x298 $x243)))
 (let (($x379 (=> $x177 $x251)))
 (let (($x226 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x280)))
 (let (($x213 (=> $x177 $x226)))
 (let (($x165 (= $x273 $x291)))
 (let (($x276 (=> $x19 $x165)))
 (let (($x51 (= $x8 $x318)))
 (let (($x262 (=> $x19 $x51)))
 (let (($x173 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x212)))
 (let (($x176 (=> $x19 $x173)))
 (let (($x240 (= $x237 $x83)))
 (let (($x129 (=> $x123 $x240)))
 (let (($x194 (= $x126 $x294)))
 (let (($x71 (=> $x123 $x194)))
 (let (($x166 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x15)))
 (let (($x178 (=> $x123 $x166)))
 (let (($x79 (and (and (and (and (and (= $x68 $x38) (= $x123 $x300)) $x277) $x253) $x178) $x71)))
 (let (($x37 (and (and (and (and (and (and $x79 $x129) $x176) $x262) $x276) $x97) $x213)))
 (let (($x327 (and (and (and (and (and (and $x37 $x379) $x286) $x250) $x325) $x184) $x46)))
 (let (($x263 (and $x327 $x285)))
 (let (($x27 (= $x263 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x189)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x297 $x302)))
 (let (($x61 (and $x16 $x208)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x203 $x61)))
 (let (($x281 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x281)))))))
 (let (($x110 (and $x185 $x54)))
 (let (($x95 (= $x110 true)))
 (let (($x148 (= $x95 true)))
 (let (($x140 (= $x148 true)))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x32 true)))
 (let (($x199 (= $x204 true)))
 (let (($x130 (= $x199 true)))
 (let (($x210 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x271 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x56 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x271) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x271))))
 (let (($x242 (and true $x56)))
 (let (($x310 (and $x56 $x242)))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x138))))
 (let (($x261 (= (bvand ?x268 (_ bv4294967288 32)) ?x268)))
 (let (($x49 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x100 (and $x49 $x261)))
 (let (($x162 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x304 (and (and (and (and (and $x242 $x162) $x49) $x100) $x310) $x210)))
 (let (($x92 (= true $x304)))
 (let (($x72 (not $x105)))
 (let (($x192 (=> $x72 $x92)))
 (let (($x295 (= $x192 true)))
 (let (($x70 (= $x295 true)))
 (let (($x76 (= $x70 true)))
 (let ((?x116 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x114 (= (_ bv0 3) ?x116)))
 (let (($x111 (= $x114 true)))
 (let (($x196 (= $x111 true)))
 (let ((?x143 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x143)))
 (let (($x197 (= ?x6 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (= $x197 true)))
 (let (($x34 (= $x108 true)))
 (let (($x18 (= $x72 true)))
 (let (($x45 (= $x18 true)))
 (let (($x179 (= $x45 true)))
 (let (($x183 (and $x179 $x34)))
 (let (($x23 (and $x183 $x196)))
 (let (($x266 (and $x23 $x76)))
 (let (($x200 (and $x266 $x130)))
 (let (($x181 (and $x200 $x140)))
 (let (($x439 (and $x181 $x27)))
 (let (($x498 (and $x439 $x468)))
 (let (($x544 (and $x498 $x543)))
 (let (($x590 (and $x544 $x589)))
 (let (($x591 (and $x123 $x590)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x267 $x591)))
 (let (($x118 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x39 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x42 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x118)))))))
 (let (($x57 (=> (and $x72 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x118)))))))
 (let (($x159 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x7 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32))) (or false (or false (and true (or $x115 $x159)))))))
 (let (($x98 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32)))) (or false (or false (and true (or $x115 $x159)))))))
 (let (($x206 (and $x98 $x57)))
 (let (($x593 (and $x206 $x592)))
 (let (($x670 (=> $x593 $x669)))
 (not $x670))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2166X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2161X () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x652 (concat ?x651 (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv4 32))))))
 (let ((?x654 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2166X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x658 (concat ?x657 (concat ?x654 ?x652))))
 (let (($x659 (= ?x658 ?x658)))
 (let ((?x132 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x209))))
 (let (($x296 (= (_ bv0 32) ?x137)))
 (let ((?x301 (ite $x296 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x301 (_ bv1 32))))
 (let (($x660 (=> $x83 $x659)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2166X))))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv2 32))) ?x639)))
 (let ((?x645 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2166X (_ bv3 32))) ?x642)))
 (let (($x646 (= ?x645 ?x645)))
 (let (($x647 (=> $x83 $x646)))
 (let (($x219 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x361 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x361 (_ bv1 32))))
 (let (($x634 (= $x83 $x225)))
 (let (($x322 (= ?x361 (_ bv0 32))))
 (let (($x294 (= ?x301 (_ bv0 32))))
 (let (($x633 (= $x294 $x322)))
 (let (($x662 (and (and (=> $x294 (= false false)) (= ?x137 input.dst.llvm-%l)) $x633)))
 (let (($x665 (and (and (and $x662 $x634) $x647) $x660)))
 (let ((?x616 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x617 (concat ?x616 (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv4 32))))))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2161X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x623 (concat ?x622 (concat ?x619 ?x617))))
 (let (($x624 (= ?x623 ?x623)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x374 (concat ?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x447 (concat ?x104 (concat ?x321 ?x374))))
 (let (($x350 (= (_ bv0 32) ?x447)))
 (let ((?x357 (ite $x350 (_ bv0 32) (_ bv1 32))))
 (let (($x373 (bvuge ?x357 (_ bv1 32))))
 (let (($x625 (=> $x373 $x624)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2161X))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv2 32))) ?x604)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2161X (_ bv3 32))) ?x607)))
 (let (($x611 (= ?x610 ?x610)))
 (let (($x612 (=> $x373 $x611)))
 (let (($x599 (= $x373 $x225)))
 (let (($x353 (= ?x357 (_ bv0 32))))
 (let (($x598 (= $x353 $x322)))
 (let (($x627 (and (and (=> $x353 (= false false)) (= ?x447 input.dst.llvm-%l)) $x598)))
 (let (($x630 (and (and (and $x627 $x599) $x612) $x625)))
 (let (($x595 (not true)))
 (let (($x667 (or (or $x595 $x630) $x665)))
 (let (($x594 (= true true)))
 (let (($x668 (and $x594 $x667)))
 (let (($x669 (= $x668 true)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x137 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x137 (_ bv4 32))))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x137 (_ bv4 32)) (_ bv2 32))) ?x171)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x137 (_ bv4 32)) (_ bv3 32))) ?x48)))
 (let ((?x257 (bvadd ?x220 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x307))))
 (let ((?x344 (bvadd ?x312 (_ bv4 32))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem ?x344))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv2 32))) ?x308))))
 (let (($x284 (= (_ bv0 32) ?x75)))
 (let ((?x366 (ite $x284 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x366 (_ bv1 32))))
 (let (($x527 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x569 (= $x527 $x146)))
 (let (($x515 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x491 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x483 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x471 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x492 (and $x471 $x483)))
 (let (($x537 (and $x492 $x491)))
 (let (($x508 (and $x537 $x515)))
 (let (($x570 (=> $x508 $x569)))
 (let (($x345 (= ?x366 (_ bv0 32))))
 (let (($x516 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x567 (= $x516 $x345)))
 (let (($x568 (=> $x508 $x567)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem ?x312))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv2 32))) ?x84))))
 (let (($x565 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x319)))
 (let (($x566 (=> $x508 $x565)))
 (let (($x303 (= (_ bv0 32) ?x312)))
 (let ((?x246 (ite $x303 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x246 (_ bv1 32))))
 (let (($x563 (= $x515 $x85)))
 (let (($x564 (=> $x537 $x563)))
 (let (($x243 (= ?x246 (_ bv0 32))))
 (let (($x533 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x561 (= $x533 $x243)))
 (let (($x562 (=> $x537 $x561)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x90))))
 (let (($x559 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x280)))
 (let (($x560 (=> $x537 $x559)))
 (let (($x443 (= (_ bv0 32) ?x220)))
 (let ((?x231 (ite $x443 (_ bv0 32) (_ bv1 32))))
 (let (($x291 (bvuge ?x231 (_ bv1 32))))
 (let (($x557 (= $x491 $x291)))
 (let (($x558 (=> $x492 $x557)))
 (let (($x318 (= ?x231 (_ bv0 32))))
 (let (($x487 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x555 (= $x487 $x318)))
 (let (($x556 (=> $x492 $x555)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x63))))
 (let (($x553 (= input.spec-%var-l-1.2.1.2.0 ?x212)))
 (let (($x554 (=> $x492 $x553)))
 (let (($x551 (= $x483 $x83)))
 (let (($x552 (=> $x471 $x551)))
 (let (($x472 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x549 (= $x472 $x294)))
 (let (($x550 (=> $x471 $x549)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x120) (concat ?x238 (concat ?x305 ?x35)))))
 (let (($x547 (= input.spec-%var-l-1.2.0 ?x15)))
 (let (($x548 (=> $x471 $x547)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x300 (bvuge ?x239 (_ bv1 32))))
 (let (($x546 (= $x471 $x300)))
 (let (($x38 (= ?x239 (_ bv0 32))))
 (let (($x470 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x545 (= $x470 $x38)))
 (let (($x47 (= false false)))
 (let (($x535 (and $x508 $x516)))
 (let (($x519 (=> $x535 $x47)))
 (let (($x506 (and $x537 $x533)))
 (let (($x514 (=> $x506 $x47)))
 (let (($x496 (and $x492 $x487)))
 (let (($x501 (=> $x496 $x47)))
 (let (($x573 (and (and (and (=> $x470 $x47) (=> (and $x471 $x472) $x47)) $x501) $x514)))
 (let (($x579 (and (and (and (and (and (and $x573 $x519) $x545) $x546) $x548) $x550) $x552)))
 (let (($x585 (and (and (and (and (and (and $x579 $x554) $x556) $x558) $x560) $x562) $x564)))
 (let (($x588 (and (and (and $x585 $x566) $x568) $x570)))
 (let (($x589 (= $x588 true)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x447 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x447 (_ bv4 32))))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x447 (_ bv4 32)) (_ bv2 32))) ?x367)))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x447 (_ bv4 32)) (_ bv3 32))) ?x364)))
 (let ((?x403 (bvadd ?x365 (_ bv4 32))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x403 (_ bv1 32))) (select input.dst.llvm-mem ?x403))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x403 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x403 (_ bv2 32))) ?x394))))
 (let ((?x413 (bvadd ?x391 (_ bv4 32))))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x419))))
 (let (($x428 (= (_ bv0 32) ?x422)))
 (let ((?x429 (ite $x428 (_ bv0 32) (_ bv1 32))))
 (let (($x427 (bvuge ?x429 (_ bv1 32))))
 (let (($x528 (= $x527 $x427)))
 (let (($x524 (=> $x508 $x528)))
 (let (($x420 (= ?x429 (_ bv0 32))))
 (let (($x517 (= $x516 $x420)))
 (let (($x518 (=> $x508 $x517)))
 (let ((?x434 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv1 32))) (select input.dst.llvm-mem ?x391))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv2 32))) ?x434))))
 (let (($x507 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x416)))
 (let (($x510 (=> $x508 $x507)))
 (let (($x393 (= (_ bv0 32) ?x391)))
 (let ((?x396 (ite $x393 (_ bv0 32) (_ bv1 32))))
 (let (($x452 (bvuge ?x396 (_ bv1 32))))
 (let (($x511 (= $x515 $x452)))
 (let (($x512 (=> $x537 $x511)))
 (let (($x399 (= ?x396 (_ bv0 32))))
 (let (($x505 (= $x533 $x399)))
 (let (($x534 (=> $x537 $x505)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x382))))
 (let (($x503 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x388)))
 (let (($x532 (=> $x537 $x503)))
 (let (($x383 (= (_ bv0 32) ?x365)))
 (let ((?x368 (ite $x383 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x368 (_ bv1 32))))
 (let (($x494 (= $x491 $x134)))
 (let (($x495 (=> $x492 $x494)))
 (let (($x400 (= ?x368 (_ bv0 32))))
 (let (($x485 (= $x487 $x400)))
 (let (($x488 (=> $x492 $x485)))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x372))))
 (let (($x489 (= input.spec-%var-l-1.2.1.2.0 ?x360)))
 (let (($x490 (=> $x492 $x489)))
 (let (($x500 (= $x483 $x373)))
 (let (($x484 (=> $x471 $x500)))
 (let (($x481 (and $x471 $x472)))
 (let (($x482 (=> $x481 $x47)))
 (let (($x475 (= $x472 $x353)))
 (let (($x478 (=> $x471 $x475)))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x333)))
 (let ((?x442 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x337)))
 (let (($x477 (= input.spec-%var-l-1.2.0 ?x442)))
 (let (($x473 (=> $x471 $x477)))
 (let (($x520 (and (and (and (and (= $x470 $x322) (= $x471 $x225)) (=> $x470 $x47)) $x473) $x478)))
 (let (($x536 (and (and (and (and (and (and $x520 $x482) $x484) $x490) $x488) $x495) $x501)))
 (let (($x158 (and (and (and (and (and (and $x536 $x532) $x534) $x514) $x512) $x510) $x518)))
 (let (($x12 (and (and $x158 $x519) $x524)))
 (let (($x543 (= $x12 true)))
 (let (($x248 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x430 (= $x248 $x427)))
 (let (($x341 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x273 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x19 (and $x123 $x237)))
 (let (($x177 (and $x19 $x273)))
 (let (($x311 (and $x177 $x341)))
 (let (($x431 (=> $x311 $x430)))
 (let (($x335 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x425 (= $x335 $x420)))
 (let (($x423 (=> $x311 $x425)))
 (let (($x412 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x416)))
 (let (($x415 (=> $x311 $x412)))
 (let (($x405 (= $x341 $x452)))
 (let (($x432 (=> $x177 $x405)))
 (let (($x298 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x404 (= $x298 $x399)))
 (let (($x436 (=> $x177 $x404)))
 (let (($x451 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x388)))
 (let (($x389 (=> $x177 $x451)))
 (let (($x135 (and $x311 $x335)))
 (let (($x46 (=> $x135 $x47)))
 (let (($x224 (and $x177 $x298)))
 (let (($x286 (=> $x224 $x47)))
 (let (($x8 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x131 (and $x19 $x8)))
 (let (($x97 (=> $x131 $x47)))
 (let (($x402 (= $x273 $x134)))
 (let (($x167 (=> $x19 $x402)))
 (let (($x449 (= $x8 $x400)))
 (let (($x401 (=> $x19 $x449)))
 (let (($x355 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x360)))
 (let (($x358 (=> $x19 $x355)))
 (let (($x352 (= $x237 $x373)))
 (let (($x60 (=> $x123 $x352)))
 (let (($x126 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x292 (and $x123 $x126)))
 (let (($x253 (=> $x292 $x47)))
 (let (($x359 (= $x126 $x353)))
 (let (($x157 (=> $x123 $x359)))
 (let (($x346 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x442)))
 (let (($x279 (=> $x123 $x346)))
 (let (($x68 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x277 (=> $x68 $x47)))
 (let (($x457 (and (and (and (and (and (= $x68 $x322) (= $x123 $x225)) $x277) $x279) $x157) $x253)))
 (let (($x461 (and (and (and (and (and (and $x457 $x60) $x358) $x401) $x167) $x97) $x286)))
 (let (($x466 (and (and (and (and (and (and $x461 $x46) $x389) $x436) $x432) $x415) $x423)))
 (let (($x467 (and $x466 $x431)))
 (let (($x468 (= $x467 true)))
 (let (($x343 (= $x248 $x146)))
 (let (($x285 (=> $x311 $x343)))
 (let (($x65 (= $x335 $x345)))
 (let (($x184 (=> $x311 $x65)))
 (let (($x377 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x319)))
 (let (($x325 (=> $x311 $x377)))
 (let (($x264 (= $x341 $x85)))
 (let (($x250 (=> $x177 $x264)))
 (let (($x251 (= $x298 $x243)))
 (let (($x379 (=> $x177 $x251)))
 (let (($x226 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x280)))
 (let (($x213 (=> $x177 $x226)))
 (let (($x165 (= $x273 $x291)))
 (let (($x276 (=> $x19 $x165)))
 (let (($x51 (= $x8 $x318)))
 (let (($x262 (=> $x19 $x51)))
 (let (($x173 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x212)))
 (let (($x176 (=> $x19 $x173)))
 (let (($x240 (= $x237 $x83)))
 (let (($x129 (=> $x123 $x240)))
 (let (($x194 (= $x126 $x294)))
 (let (($x71 (=> $x123 $x194)))
 (let (($x166 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x15)))
 (let (($x178 (=> $x123 $x166)))
 (let (($x79 (and (and (and (and (and (= $x68 $x38) (= $x123 $x300)) $x277) $x253) $x178) $x71)))
 (let (($x37 (and (and (and (and (and (and $x79 $x129) $x176) $x262) $x276) $x97) $x213)))
 (let (($x327 (and (and (and (and (and (and $x37 $x379) $x286) $x250) $x325) $x184) $x46)))
 (let (($x263 (and $x327 $x285)))
 (let (($x27 (= $x263 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x189)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x297 $x302)))
 (let (($x61 (and $x16 $x208)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x203 $x61)))
 (let (($x281 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x281)))))))
 (let (($x110 (and $x185 $x54)))
 (let (($x95 (= $x110 true)))
 (let (($x148 (= $x95 true)))
 (let (($x140 (= $x148 true)))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x32 true)))
 (let (($x199 (= $x204 true)))
 (let (($x130 (= $x199 true)))
 (let (($x210 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x271 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x56 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x271) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x271))))
 (let (($x242 (and true $x56)))
 (let (($x310 (and $x56 $x242)))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x138))))
 (let (($x261 (= (bvand ?x268 (_ bv4294967288 32)) ?x268)))
 (let (($x49 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x100 (and $x49 $x261)))
 (let (($x162 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x304 (and (and (and (and (and $x242 $x162) $x49) $x100) $x310) $x210)))
 (let (($x92 (= true $x304)))
 (let (($x72 (not $x105)))
 (let (($x192 (=> $x72 $x92)))
 (let (($x295 (= $x192 true)))
 (let (($x70 (= $x295 true)))
 (let (($x76 (= $x70 true)))
 (let ((?x116 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x114 (= (_ bv0 3) ?x116)))
 (let (($x111 (= $x114 true)))
 (let (($x196 (= $x111 true)))
 (let ((?x143 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x143)))
 (let (($x197 (= ?x6 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (= $x197 true)))
 (let (($x34 (= $x108 true)))
 (let (($x18 (= $x72 true)))
 (let (($x45 (= $x18 true)))
 (let (($x179 (= $x45 true)))
 (let (($x183 (and $x179 $x34)))
 (let (($x23 (and $x183 $x196)))
 (let (($x266 (and $x23 $x76)))
 (let (($x200 (and $x266 $x130)))
 (let (($x181 (and $x200 $x140)))
 (let (($x439 (and $x181 $x27)))
 (let (($x498 (and $x439 $x468)))
 (let (($x544 (and $x498 $x543)))
 (let (($x590 (and $x544 $x589)))
 (let (($x591 (and $x123 $x590)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x267 $x591)))
 (let (($x118 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x39 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x42 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x118)))))))
 (let (($x57 (=> (and $x72 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x118)))))))
 (let (($x159 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x7 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32))) (or false (or false (and true (or $x115 $x159)))))))
 (let (($x98 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32)))) (or false (or false (and true (or $x115 $x159)))))))
 (let (($x206 (and $x98 $x57)))
 (let (($x593 (and $x206 $x592)))
 (let (($x670 (=> $x593 $x669)))
 (not $x670))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00100000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00100000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var2161X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2166X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffdf06) #x01
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x0000fefb) #xff
    (ite (= x!0 #xffffdeff) #x00
    (ite (= x!0 #x0000fef9) #xff
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xffffdf03) #x01
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #xffffdf00) #x00
    (ite (= x!0 #xffffdf01) #x00
    (ite (= x!0 #x0000fefc) #xff
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x0000fef7) #x00
    (ite (= x!0 #x00000005) #xfe
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xffffdf02) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xffffdf04) #x01
    (ite (= x!0 #x0000fefa) #xde
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xffffdf05) #x40
    (ite (= x!0 #x00000004) #xf5
    (ite (= x!0 #x0000fef8) #x00
    (ite (= x!0 #x0000fef5) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000fef6) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00010001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00010001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var2161X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2166X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00010415) #x00
    (ite (= x!0 #x00010405) #x01
    (ite (= x!0 #x00010001) #x00
    (ite (= x!0 #x00010008) #x00
    (ite (= x!0 #x00010007) #x01
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00010410) #x00
    (ite (= x!0 #x00010408) #x00
    (ite (= x!0 #x00010407) #x00
    (ite (= x!0 #x00000041) #x00
    (ite (= x!0 #x00010401) #x00
    (ite (= x!0 #x00000043) #x00
    (ite (= x!0 #x0000000c) #x40
    (ite (= x!0 #x00010417) #x00
    (ite (= x!0 #x00000047) #x00
    (ite (= x!0 #x00010002) #x00
    (ite (= x!0 #x00010411) #x00
    (ite (= x!0 #x00000040) #x00
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00010003) #x00
    (ite (= x!0 #x00000045) #x04
    (ite (= x!0 #x00010005) #x01
    (ite (= x!0 #x0000000a) #x01
    (ite (= x!0 #x00010412) #x00
    (ite (= x!0 #x00010416) #x00
    (ite (= x!0 #x00000042) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00010406) #x00
    (ite (= x!0 #x00000044) #x10
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x00010413) #x00
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x00010404) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00010004) #x00
    (ite (= x!0 #x00010414) #x01
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00010403) #x00
    (ite (= x!0 #x00000046) #x01
    (ite (= x!0 #x00010006) #x04
    (ite (= x!0 #x00010402) #x00
      #x00))))))))))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x315 (concat ?x24 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x280 (concat ?x216 (concat ?x10 ?x315))))
 (let (($x226 (= ?x280 ?x280)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x300 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x300 (_ bv1 32))))
 (let (($x213 (=> $x47 $x226)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x273)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x276)))
 (let (($x331 (= ?x97 ?x97)))
 (let (($x177 (=> $x47 $x331)))
 (let ((?x106 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x77))))
 (let (($x296 (= (_ bv0 32) ?x113)))
 (let ((?x301 (ite $x296 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x301 (_ bv1 32))))
 (let (($x231 (= $x47 $x71)))
 (let (($x209 (= false false)))
 (let (($x109 (= ?x300 (_ bv0 32))))
 (let (($x443 (=> $x109 $x209)))
 (let (($x294 (= ?x301 (_ bv0 32))))
 (let (($x220 (= $x109 $x294)))
 (let (($x48 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x113)))
 (let (($x446 (and (and (and (and (and $x48 $x220) $x443) $x231) $x177) $x213)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x212 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x119 (concat ?x356 ?x173))))
 (let (($x141 (= ?x53 ?x53)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x101 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x101 (_ bv1 32))))
 (let (($x67 (=> $x305 $x141)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x306)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x186)))
 (let (($x283 (= ?x187 ?x187)))
 (let (($x278 (=> $x305 $x283)))
 (let (($x79 (= $x305 $x71)))
 (let (($x272 (= ?x101 (_ bv0 32))))
 (let (($x194 (= $x272 $x294)))
 (let (($x287 (and (and (and (=> $x272 $x209) (= input.dst.llvm-%l ?x113)) $x194) $x79)))
 (let (($x171 (and (and $x287 $x278) $x67)))
 (let (($x255 (not true)))
 (let (($x145 (or (or $x255 $x171) $x446)))
 (let (($x74 (= true true)))
 (let (($x217 (and $x74 $x145)))
 (let (($x282 (= $x217 true)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (= $x55 $x47)))
 (let (($x253 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x166 (= $x253 $x109)))
 (let (($x375 (and $x166 $x178)))
 (let (($x5 (= $x375 true)))
 (let (($x35 (= $x55 $x305)))
 (let (($x238 (= $x253 $x272)))
 (let (($x269 (and $x238 $x35)))
 (let (($x33 (= $x269 true)))
 (let (($x149 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x277 (= $x149 $x47)))
 (let (($x123 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x247 (= $x123 $x109)))
 (let (($x309 (and $x247 $x277)))
 (let (($x265 (= $x309 true)))
 (let ((?x260 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x68 (= (_ bv0 3) ?x260)))
 (let (($x239 (= $x68 true)))
 (let (($x38 (= $x239 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x110 (= $x54 true)))
 (let (($x95 (= $x110 true)))
 (let (($x148 (= $x95 true)))
 (let (($x214 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x227 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x227) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x227))))
 (let (($x100 (and true $x261)))
 (let (($x281 (and $x261 $x100)))
 (let (($x11 (= (bvand ?x113 (_ bv4294967288 32)) ?x113)))
 (let (($x192 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x152 (and $x192 $x11)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv4 32))) (bvult ?x106 (bvsub ?x106 (_ bv4 32))))))
 (let (($x203 (and (and (and (and (and $x100 $x210) $x192) $x152) $x281) $x214)))
 (let (($x297 (= true $x203)))
 (let (($x72 (not $x105)))
 (let (($x317 (=> $x72 $x297)))
 (let (($x302 (= $x317 true)))
 (let (($x16 (= $x302 true)))
 (let (($x189 (= $x16 true)))
 (let (($x128 (= $x72 true)))
 (let (($x82 (= $x128 true)))
 (let (($x78 (= $x82 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x127)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x232)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x50 $x162)))
 (let (($x49 (and $x190 $x103)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x114 $x49)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x271)))))))
 (let (($x99 (and $x9 $x17)))
 (let (($x198 (= $x99 true)))
 (let (($x234 (= $x198 true)))
 (let (($x112 (= $x234 true)))
 (let ((?x6 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x6)))
 (let (($x108 (= ?x107 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x34 (= $x108 true)))
 (let (($x183 (= $x34 true)))
 (let (($x258 (and $x183 $x112)))
 (let (($x138 (and $x258 $x78)))
 (let (($x208 (and $x138 $x189)))
 (let (($x140 (and $x208 $x148)))
 (let (($x169 (and $x140 $x38)))
 (let (($x126 (and $x169 $x265)))
 (let (($x15 (and $x126 $x33)))
 (let (($x275 (and $x15 $x5)))
 (let (($x102 (and $x149 $x275)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x64 (and $x45 $x102)))
 (let (($x168 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x106 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x267 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x168)))))))
 (let (($x188 (=> (and $x72 (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x155 $x168)))))))
 (let (($x20 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x161 (=> $x156 (or false (or false (and true (or $x117 $x20)))))))
 (let (($x163 (=> (and $x72 $x156) (or false (or false (and true (or $x117 $x20)))))))
 (let (($x59 (and $x163 $x188)))
 (let (($x207 (and $x59 $x64)))
 (let (($x66 (=> $x207 $x282)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x315 (concat ?x24 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x280 (concat ?x216 (concat ?x10 ?x315))))
 (let (($x226 (= ?x280 ?x280)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x300 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x300 (_ bv1 32))))
 (let (($x213 (=> $x47 $x226)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x273)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x276)))
 (let (($x331 (= ?x97 ?x97)))
 (let (($x177 (=> $x47 $x331)))
 (let ((?x106 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x77))))
 (let (($x296 (= (_ bv0 32) ?x113)))
 (let ((?x301 (ite $x296 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x301 (_ bv1 32))))
 (let (($x231 (= $x47 $x71)))
 (let (($x209 (= false false)))
 (let (($x109 (= ?x300 (_ bv0 32))))
 (let (($x443 (=> $x109 $x209)))
 (let (($x294 (= ?x301 (_ bv0 32))))
 (let (($x220 (= $x109 $x294)))
 (let (($x48 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x113)))
 (let (($x446 (and (and (and (and (and $x48 $x220) $x443) $x231) $x177) $x213)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x212 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x119 (concat ?x356 ?x173))))
 (let (($x141 (= ?x53 ?x53)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x101 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x101 (_ bv1 32))))
 (let (($x67 (=> $x305 $x141)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x306)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x186)))
 (let (($x283 (= ?x187 ?x187)))
 (let (($x278 (=> $x305 $x283)))
 (let (($x79 (= $x305 $x71)))
 (let (($x272 (= ?x101 (_ bv0 32))))
 (let (($x194 (= $x272 $x294)))
 (let (($x287 (and (and (and (=> $x272 $x209) (= input.dst.llvm-%l ?x113)) $x194) $x79)))
 (let (($x171 (and (and $x287 $x278) $x67)))
 (let (($x255 (not true)))
 (let (($x145 (or (or $x255 $x171) $x446)))
 (let (($x74 (= true true)))
 (let (($x217 (and $x74 $x145)))
 (let (($x282 (= $x217 true)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (= $x55 $x47)))
 (let (($x253 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x166 (= $x253 $x109)))
 (let (($x375 (and $x166 $x178)))
 (let (($x5 (= $x375 true)))
 (let (($x35 (= $x55 $x305)))
 (let (($x238 (= $x253 $x272)))
 (let (($x269 (and $x238 $x35)))
 (let (($x33 (= $x269 true)))
 (let (($x149 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x277 (= $x149 $x47)))
 (let (($x123 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x247 (= $x123 $x109)))
 (let (($x309 (and $x247 $x277)))
 (let (($x265 (= $x309 true)))
 (let ((?x260 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x68 (= (_ bv0 3) ?x260)))
 (let (($x239 (= $x68 true)))
 (let (($x38 (= $x239 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x110 (= $x54 true)))
 (let (($x95 (= $x110 true)))
 (let (($x148 (= $x95 true)))
 (let (($x214 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x227 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x227) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x227))))
 (let (($x100 (and true $x261)))
 (let (($x281 (and $x261 $x100)))
 (let (($x11 (= (bvand ?x113 (_ bv4294967288 32)) ?x113)))
 (let (($x192 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x152 (and $x192 $x11)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv4 32))) (bvult ?x106 (bvsub ?x106 (_ bv4 32))))))
 (let (($x203 (and (and (and (and (and $x100 $x210) $x192) $x152) $x281) $x214)))
 (let (($x297 (= true $x203)))
 (let (($x72 (not $x105)))
 (let (($x317 (=> $x72 $x297)))
 (let (($x302 (= $x317 true)))
 (let (($x16 (= $x302 true)))
 (let (($x189 (= $x16 true)))
 (let (($x128 (= $x72 true)))
 (let (($x82 (= $x128 true)))
 (let (($x78 (= $x82 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x127)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x232)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x50 $x162)))
 (let (($x49 (and $x190 $x103)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x114 $x49)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x271)))))))
 (let (($x99 (and $x9 $x17)))
 (let (($x198 (= $x99 true)))
 (let (($x234 (= $x198 true)))
 (let (($x112 (= $x234 true)))
 (let ((?x6 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x6)))
 (let (($x108 (= ?x107 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x34 (= $x108 true)))
 (let (($x183 (= $x34 true)))
 (let (($x258 (and $x183 $x112)))
 (let (($x138 (and $x258 $x78)))
 (let (($x208 (and $x138 $x189)))
 (let (($x140 (and $x208 $x148)))
 (let (($x169 (and $x140 $x38)))
 (let (($x126 (and $x169 $x265)))
 (let (($x15 (and $x126 $x33)))
 (let (($x275 (and $x15 $x5)))
 (let (($x102 (and $x149 $x275)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x64 (and $x45 $x102)))
 (let (($x168 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x106 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x267 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x168)))))))
 (let (($x188 (=> (and $x72 (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x155 $x168)))))))
 (let (($x20 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x161 (=> $x156 (or false (or false (and true (or $x117 $x20)))))))
 (let (($x163 (=> (and $x72 $x156) (or false (or false (and true (or $x117 $x20)))))))
 (let (($x59 (and $x163 $x188)))
 (let (($x207 (and $x59 $x64)))
 (let (($x66 (=> $x207 $x282)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000870)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x396c48f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x396c48fd
                     #x48)
              #x396c48ff
              #xb9)
       #x396c48fe
       #x6c))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff03)
  (define-fun input.ind-%var2352X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2347X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2352X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var2347X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x69 (concat ?x24 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x446 (concat ?x213 (concat ?x170 ?x69))))
 (let (($x145 (= ?x446 ?x446)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x47 (_ bv1 32))))
 (let (($x217 (=> $x265 $x145)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x273)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x331)))
 (let (($x90 (= ?x133 ?x133)))
 (let (($x216 (=> $x265 $x90)))
 (let ((?x156 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x70))))
 (let (($x287 (= (_ bv0 32) ?x11)))
 (let ((?x237 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x237 (_ bv1 32))))
 (let (($x291 (= $x265 $x19)))
 (let (($x292 (= false false)))
 (let (($x277 (= ?x47 (_ bv0 32))))
 (let (($x131 (=> $x277 $x292)))
 (let (($x193 (= ?x237 (_ bv0 32))))
 (let (($x329 (= $x277 $x193)))
 (let (($x318 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x11)))
 (let (($x299 (and (and (and (and (and $x318 $x329) $x131) $x291) $x216) $x217)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x63 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x244 (concat ?x171 (concat ?x53 ?x173))))
 (let (($x48 (= ?x244 ?x244)))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x269 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x269 (_ bv1 32))))
 (let (($x220 (=> $x178 $x48)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x186)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x278)))
 (let (($x119 (= ?x8 ?x8)))
 (let (($x176 (=> $x178 $x119)))
 (let (($x89 (= $x178 $x19)))
 (let (($x33 (= ?x269 (_ bv0 32))))
 (let (($x249 (= $x33 $x193)))
 (let (($x289 (and (and (and (=> $x33 $x292) (= input.dst.llvm-%l ?x11)) $x249) $x89)))
 (let (($x298 (and (and $x289 $x176) $x220)))
 (let (($x43 (not true)))
 (let (($x307 (or (or $x43 $x298) $x299)))
 (let (($x194 (= true true)))
 (let (($x293 (and $x194 $x307)))
 (let (($x312 (= $x293 true)))
 (let (($x166 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x255 (= $x166 $x265)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x74 (= $x55 $x277)))
 (let (($x5 (=> $x55 $x292)))
 (let (($x22 (and (and $x5 $x74) $x255)))
 (let (($x137 (= $x22 true)))
 (let (($x102 (and (and (= $x55 $x33) (= $x166 $x178)) $x5)))
 (let (($x64 (= $x102 true)))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x253 (=> $x149 $x292)))
 (let (($x107 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x126 (= $x107 $x265)))
 (let (($x309 (= $x149 $x277)))
 (let (($x62 (and (and $x309 $x126) $x253)))
 (let (($x101 (= $x62 true)))
 (let ((?x179 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x179)))
 (let (($x300 (= $x123 true)))
 (let (($x109 (= $x300 true)))
 (let (($x181 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x181 true)))
 (let (($x68 (= $x260 true)))
 (let (($x239 (= $x68 true)))
 (let (($x203 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x210 (and true $x201)))
 (let (($x147 (and $x201 $x210)))
 (let (($x281 (= (bvand ?x11 (_ bv4294967288 32)) ?x11)))
 (let (($x32 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x81 (and $x32 $x281)))
 (let (($x241 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv4 32))) (bvult ?x156 (bvsub ?x156 (_ bv4 32))))))
 (let (($x189 (and (and (and (and (and $x210 $x241) $x32) $x81) $x147) $x203)))
 (let (($x208 (= true $x189)))
 (let (($x72 (not $x105)))
 (let (($x61 (=> $x72 $x208)))
 (let (($x54 (= $x61 true)))
 (let (($x110 (= $x54 true)))
 (let (($x95 (= $x110 true)))
 (let (($x227 (= $x72 true)))
 (let (($x87 (= $x227 true)))
 (let (($x205 (= $x87 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x198)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x103 $x17)))
 (let (($x112 (and $x99 $x234)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x86 $x112)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x116)))))))
 (let (($x128 (and $x127 $x258)))
 (let (($x82 (= $x128 true)))
 (let (($x78 (= $x82 true)))
 (let (($x138 (= $x78 true)))
 (let ((?x34 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x34)))
 (let (($x196 (= ?x183 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x270 (= $x196 true)))
 (let (($x23 (= $x270 true)))
 (let (($x268 (and $x23 $x138)))
 (let (($x261 (and $x268 $x205)))
 (let (($x148 (and $x261 $x95)))
 (let (($x38 (and $x148 $x239)))
 (let (($x247 (and $x38 $x109)))
 (let (($x272 (and $x247 $x101)))
 (let (($x207 (and $x272 $x64)))
 (let (($x36 (and $x207 $x137)))
 (let (($x296 (and $x107 $x36)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x301 (and $x143 $x296)))
 (let (($x57 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x156 (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x45 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x57)))))))
 (let (($x52 (=> (and $x72 (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x42 $x57)))))))
 (let (($x98 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x118 (=> $x28 (or false (or false (and true (or $x7 $x98)))))))
 (let (($x120 (=> (and $x72 $x28) (or false (or false (and true (or $x7 $x98)))))))
 (let (($x230 (and $x120 $x52)))
 (let (($x294 (and $x230 $x301)))
 (let (($x303 (=> $x294 $x312)))
 (not $x303))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x69 (concat ?x24 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x446 (concat ?x213 (concat ?x170 ?x69))))
 (let (($x145 (= ?x446 ?x446)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x47 (_ bv1 32))))
 (let (($x217 (=> $x265 $x145)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x273)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x331)))
 (let (($x90 (= ?x133 ?x133)))
 (let (($x216 (=> $x265 $x90)))
 (let ((?x156 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x70))))
 (let (($x287 (= (_ bv0 32) ?x11)))
 (let ((?x237 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x237 (_ bv1 32))))
 (let (($x291 (= $x265 $x19)))
 (let (($x292 (= false false)))
 (let (($x277 (= ?x47 (_ bv0 32))))
 (let (($x131 (=> $x277 $x292)))
 (let (($x193 (= ?x237 (_ bv0 32))))
 (let (($x329 (= $x277 $x193)))
 (let (($x318 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x11)))
 (let (($x299 (and (and (and (and (and $x318 $x329) $x131) $x291) $x216) $x217)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x63 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x244 (concat ?x171 (concat ?x53 ?x173))))
 (let (($x48 (= ?x244 ?x244)))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x269 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x269 (_ bv1 32))))
 (let (($x220 (=> $x178 $x48)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x186)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x278)))
 (let (($x119 (= ?x8 ?x8)))
 (let (($x176 (=> $x178 $x119)))
 (let (($x89 (= $x178 $x19)))
 (let (($x33 (= ?x269 (_ bv0 32))))
 (let (($x249 (= $x33 $x193)))
 (let (($x289 (and (and (and (=> $x33 $x292) (= input.dst.llvm-%l ?x11)) $x249) $x89)))
 (let (($x298 (and (and $x289 $x176) $x220)))
 (let (($x43 (not true)))
 (let (($x307 (or (or $x43 $x298) $x299)))
 (let (($x194 (= true true)))
 (let (($x293 (and $x194 $x307)))
 (let (($x312 (= $x293 true)))
 (let (($x166 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x255 (= $x166 $x265)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x74 (= $x55 $x277)))
 (let (($x5 (=> $x55 $x292)))
 (let (($x22 (and (and $x5 $x74) $x255)))
 (let (($x137 (= $x22 true)))
 (let (($x102 (and (and (= $x55 $x33) (= $x166 $x178)) $x5)))
 (let (($x64 (= $x102 true)))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x253 (=> $x149 $x292)))
 (let (($x107 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x126 (= $x107 $x265)))
 (let (($x309 (= $x149 $x277)))
 (let (($x62 (and (and $x309 $x126) $x253)))
 (let (($x101 (= $x62 true)))
 (let ((?x179 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x179)))
 (let (($x300 (= $x123 true)))
 (let (($x109 (= $x300 true)))
 (let (($x181 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x181 true)))
 (let (($x68 (= $x260 true)))
 (let (($x239 (= $x68 true)))
 (let (($x203 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x210 (and true $x201)))
 (let (($x147 (and $x201 $x210)))
 (let (($x281 (= (bvand ?x11 (_ bv4294967288 32)) ?x11)))
 (let (($x32 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x81 (and $x32 $x281)))
 (let (($x241 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv4 32))) (bvult ?x156 (bvsub ?x156 (_ bv4 32))))))
 (let (($x189 (and (and (and (and (and $x210 $x241) $x32) $x81) $x147) $x203)))
 (let (($x208 (= true $x189)))
 (let (($x72 (not $x105)))
 (let (($x61 (=> $x72 $x208)))
 (let (($x54 (= $x61 true)))
 (let (($x110 (= $x54 true)))
 (let (($x95 (= $x110 true)))
 (let (($x227 (= $x72 true)))
 (let (($x87 (= $x227 true)))
 (let (($x205 (= $x87 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x198)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x103 $x17)))
 (let (($x112 (and $x99 $x234)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x86 $x112)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x116)))))))
 (let (($x128 (and $x127 $x258)))
 (let (($x82 (= $x128 true)))
 (let (($x78 (= $x82 true)))
 (let (($x138 (= $x78 true)))
 (let ((?x34 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x34)))
 (let (($x196 (= ?x183 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x270 (= $x196 true)))
 (let (($x23 (= $x270 true)))
 (let (($x268 (and $x23 $x138)))
 (let (($x261 (and $x268 $x205)))
 (let (($x148 (and $x261 $x95)))
 (let (($x38 (and $x148 $x239)))
 (let (($x247 (and $x38 $x109)))
 (let (($x272 (and $x247 $x101)))
 (let (($x207 (and $x272 $x64)))
 (let (($x36 (and $x207 $x137)))
 (let (($x296 (and $x107 $x36)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x301 (and $x143 $x296)))
 (let (($x57 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x156 (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x45 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x57)))))))
 (let (($x52 (=> (and $x72 (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x42 $x57)))))))
 (let (($x98 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x118 (=> $x28 (or false (or false (and true (or $x7 $x98)))))))
 (let (($x120 (=> (and $x72 $x28) (or false (or false (and true (or $x7 $x98)))))))
 (let (($x230 (and $x120 $x52)))
 (let (($x294 (and $x230 $x301)))
 (let (($x303 (=> $x294 $x312)))
 (not $x303))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000870)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x396c48f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x396c48fd
                     #x48)
              #x396c48ff
              #xb9)
       #x396c48fe
       #x6c))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff03)
  (define-fun input.ind-%var2352X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2347X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2352X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var2347X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x31 (concat ?x390 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x399 (concat ?x396 (concat ?x397 ?x31))))
 (let (($x404 (= ?x399 ?x399)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x265 (_ bv1 32))))
 (let (($x436 (=> $x292 $x404)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x382)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x451)))
 (let (($x94 (= ?x403 ?x403)))
 (let (($x398 (=> $x292 $x94)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x199))))
 (let (($x458 (= (_ bv0 32) ?x281)))
 (let ((?x348 (ite $x458 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x348 (_ bv1 32))))
 (let (($x384 (= $x292 $x139)))
 (let (($x62 (= false false)))
 (let (($x126 (= ?x265 (_ bv0 32))))
 (let (($x164 (=> $x126 $x62)))
 (let (($x144 (= ?x348 (_ bv0 32))))
 (let (($x381 (= $x126 $x144)))
 (let (($x462 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x281)))
 (let (($x497 (and (and (and (and (and $x462 $x381) $x164) $x384) $x398) $x436)))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x364 (concat ?x367 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x401 (concat ?x449 (concat ?x383 ?x364))))
 (let (($x142 (= ?x401 ?x401)))
 (let (($x90 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x216 (ite $x90 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x216 (_ bv1 32))))
 (let (($x134 (=> $x213 $x142)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x360)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x125)))
 (let (($x174 (= ?x362 ?x362)))
 (let (($x363 (=> $x213 $x174)))
 (let (($x351 (= $x213 $x139)))
 (let (($x160 (= ?x216 (_ bv0 32))))
 (let (($x370 (= $x160 $x144)))
 (let (($x459 (and (and (and (=> $x160 $x62) (= input.dst.llvm-%l ?x281)) $x370) $x351)))
 (let (($x461 (and (and $x459 $x363) $x134)))
 (let (($x373 (not true)))
 (let (($x410 (or (or $x373 $x461) $x497)))
 (let (($x457 (= true true)))
 (let (($x453 (and $x457 $x410)))
 (let (($x411 (= $x453 true)))
 (let ((?x117 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x22))))
 (let ((?x231 (bvadd ?x194 (_ bv4 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x233))))
 (let (($x244 (= (_ bv0 32) ?x141)))
 (let ((?x48 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x48 (_ bv1 32))))
 (let (($x285 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x91 (= $x285 $x329)))
 (let (($x222 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x21 (and $x226 $x222)))
 (let (($x104 (=> $x21 $x91)))
 (let (($x220 (= ?x48 (_ bv0 32))))
 (let (($x326 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x438 (= $x326 $x220)))
 (let (($x334 (=> $x21 $x438)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x254))))
 (let (($x346 (= input.spec-%var-l-1.2.1.2.0 ?x186)))
 (let (($x279 (=> $x21 $x346)))
 (let (($x43 (= (_ bv0 32) ?x194)))
 (let ((?x71 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x71 (_ bv1 32))))
 (let (($x337 (= $x222 $x193)))
 (let (($x442 (=> $x226 $x337)))
 (let (($x79 (= ?x71 (_ bv0 32))))
 (let (($x235 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x228 (= $x235 $x79)))
 (let (($x333 (=> $x226 $x228)))
 (let ((?x269 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x375 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x39 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x39) (concat ?x375 (concat ?x15 ?x269)))))
 (let (($x332 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x313 (=> $x226 $x332)))
 (let (($x444 (= $x226 $x292)))
 (let (($x331 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (= $x331 $x126)))
 (let (($x338 (and (and (and (=> $x331 $x62) (=> (and $x226 $x235) $x62)) $x324) $x444)))
 (let (($x350 (and (and (and (and (and (and $x338 $x313) $x333) $x442) $x279) $x334) $x104)))
 (let (($x357 (= $x350 true)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x379 (concat ?x251 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x85 (concat ?x341 (concat ?x224 ?x379))))
 (let ((?x245 (bvadd ?x85 (_ bv4 32))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x284))))
 (let (($x46 (= (_ bv0 32) ?x135)))
 (let ((?x327 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x263 (bvuge ?x327 (_ bv1 32))))
 (let (($x27 (= $x285 $x263)))
 (let (($x439 (=> $x21 $x27)))
 (let (($x248 (= ?x327 (_ bv0 32))))
 (let (($x146 (= $x326 $x248)))
 (let (($x343 (=> $x21 $x146)))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x325))))
 (let (($x223 (= input.spec-%var-l-1.2.1.2.0 ?x290)))
 (let (($x288 (=> $x21 $x223)))
 (let (($x264 (= (_ bv0 32) ?x85)))
 (let ((?x250 (ite $x264 (_ bv0 32) (_ bv1 32))))
 (let (($x316 (bvuge ?x250 (_ bv1 32))))
 (let (($x339 (= $x222 $x316)))
 (let (($x256 (=> $x226 $x339)))
 (let (($x25 (and $x226 $x235)))
 (let (($x136 (=> $x25 $x62)))
 (let (($x441 (= ?x250 (_ bv0 32))))
 (let (($x311 (= $x235 $x441)))
 (let (($x73 (=> $x226 $x311)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x280)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x217)))
 (let (($x312 (= input.spec-%var-l-1.2.0 ?x293)))
 (let (($x303 (=> $x226 $x312)))
 (let (($x322 (and (and (and (and (= $x331 $x160) (= $x226 $x213)) (=> $x331 $x62)) $x303) $x73)))
 (let (($x437 (and (and (and (and (and $x322 $x136) $x256) $x288) $x343) $x439)))
 (let (($x328 (= $x437 true)))
 (let (($x318 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x318 $x329)))
 (let (($x237 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x19 (and $x183 $x237)))
 (let (($x131 (=> $x19 $x282)))
 (let (($x176 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x298 (= $x176 $x220)))
 (let (($x80 (=> $x19 $x298)))
 (let (($x278 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x186)))
 (let (($x8 (=> $x19 $x278)))
 (let (($x249 (= $x237 $x193)))
 (let (($x443 (=> $x183 $x249)))
 (let (($x238 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x37 (= $x238 $x79)))
 (let (($x287 (=> $x183 $x37)))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x102)))
 (let (($x207 (=> $x183 $x64)))
 (let (($x55 (and $x183 $x238)))
 (let (($x305 (=> $x55 $x62)))
 (let (($x107 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x101 (=> $x107 $x62)))
 (let (($x177 (and (and (and (and (and (= $x107 $x126) (= $x183 $x292)) $x101) $x305) $x207) $x287)))
 (let (($x13 (and (and (and (and $x177 $x443) $x8) $x80) $x131)))
 (let (($x51 (= $x13 true)))
 (let ((?x6 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x149 (= (_ bv0 3) ?x6)))
 (let (($x47 (= $x149 true)))
 (let (($x277 (= $x47 true)))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x169 true)))
 (let (($x123 (= $x179 true)))
 (let (($x300 (= $x123 true)))
 (let (($x189 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x210 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x210) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x210))))
 (let (($x241 (and true $x192)))
 (let (($x214 (and $x192 $x241)))
 (let (($x147 (= (bvand ?x281 (_ bv4294967288 32)) ?x281)))
 (let (($x77 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x16 (and $x77 $x147)))
 (let (($x317 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x95 (and (and (and (and (and $x241 $x317) $x77) $x16) $x214) $x189)))
 (let (($x148 (= true $x95)))
 (let (($x72 (not $x105)))
 (let (($x140 (=> $x72 $x148)))
 (let (($x181 (= $x140 true)))
 (let (($x260 (= $x181 true)))
 (let (($x68 (= $x260 true)))
 (let (($x100 (= $x72 true)))
 (let (($x26 (= $x100 true)))
 (let (($x215 (= $x26 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x82)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x234 $x258)))
 (let (($x138 (and $x128 $x78)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (and $x114 $x138)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x198 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x271)))))))
 (let (($x227 (and $x198 $x268)))
 (let (($x87 (= $x227 true)))
 (let (($x205 (= $x87 true)))
 (let (($x261 (= $x205 true)))
 (let ((?x270 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x270)))
 (let (($x56 (= ?x23 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x190 (= $x56 true)))
 (let (($x242 (= $x190 true)))
 (let (($x310 (and $x242 $x261)))
 (let (($x201 (and $x310 $x215)))
 (let (($x239 (and $x201 $x68)))
 (let (($x109 (and $x239 $x300)))
 (let (($x309 (and $x109 $x277)))
 (let (($x262 (and $x309 $x51)))
 (let (($x323 (and $x262 $x328)))
 (let (($x353 (and $x323 $x357)))
 (let (($x359 (and $x183 $x353)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x157 (and $x108 $x359)))
 (let (($x188 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x28 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x143 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x267 $x188)))))))
 (let (($x18 (=> (and $x72 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x267 $x188)))))))
 (let (($x163 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x168 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32))) (or false (or false (and true (or $x161 $x163)))))))
 (let (($x202 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32)))) (or false (or false (and true (or $x161 $x163)))))))
 (let (($x229 (and $x202 $x18)))
 (let (($x456 (and $x229 $x157)))
 (let (($x433 (=> $x456 $x411)))
 (not $x433)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x31 (concat ?x390 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x399 (concat ?x396 (concat ?x397 ?x31))))
 (let (($x404 (= ?x399 ?x399)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x265 (_ bv1 32))))
 (let (($x436 (=> $x292 $x404)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x382)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x451)))
 (let (($x94 (= ?x403 ?x403)))
 (let (($x398 (=> $x292 $x94)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x199))))
 (let (($x458 (= (_ bv0 32) ?x281)))
 (let ((?x348 (ite $x458 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x348 (_ bv1 32))))
 (let (($x384 (= $x292 $x139)))
 (let (($x62 (= false false)))
 (let (($x126 (= ?x265 (_ bv0 32))))
 (let (($x164 (=> $x126 $x62)))
 (let (($x144 (= ?x348 (_ bv0 32))))
 (let (($x381 (= $x126 $x144)))
 (let (($x462 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x281)))
 (let (($x497 (and (and (and (and (and $x462 $x381) $x164) $x384) $x398) $x436)))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x364 (concat ?x367 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x401 (concat ?x449 (concat ?x383 ?x364))))
 (let (($x142 (= ?x401 ?x401)))
 (let (($x90 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x216 (ite $x90 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x216 (_ bv1 32))))
 (let (($x134 (=> $x213 $x142)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x360)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x125)))
 (let (($x174 (= ?x362 ?x362)))
 (let (($x363 (=> $x213 $x174)))
 (let (($x351 (= $x213 $x139)))
 (let (($x160 (= ?x216 (_ bv0 32))))
 (let (($x370 (= $x160 $x144)))
 (let (($x459 (and (and (and (=> $x160 $x62) (= input.dst.llvm-%l ?x281)) $x370) $x351)))
 (let (($x461 (and (and $x459 $x363) $x134)))
 (let (($x373 (not true)))
 (let (($x410 (or (or $x373 $x461) $x497)))
 (let (($x457 (= true true)))
 (let (($x453 (and $x457 $x410)))
 (let (($x411 (= $x453 true)))
 (let ((?x117 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x22))))
 (let ((?x231 (bvadd ?x194 (_ bv4 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x233))))
 (let (($x244 (= (_ bv0 32) ?x141)))
 (let ((?x48 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x48 (_ bv1 32))))
 (let (($x285 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x91 (= $x285 $x329)))
 (let (($x222 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x21 (and $x226 $x222)))
 (let (($x104 (=> $x21 $x91)))
 (let (($x220 (= ?x48 (_ bv0 32))))
 (let (($x326 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x438 (= $x326 $x220)))
 (let (($x334 (=> $x21 $x438)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x254))))
 (let (($x346 (= input.spec-%var-l-1.2.1.2.0 ?x186)))
 (let (($x279 (=> $x21 $x346)))
 (let (($x43 (= (_ bv0 32) ?x194)))
 (let ((?x71 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x71 (_ bv1 32))))
 (let (($x337 (= $x222 $x193)))
 (let (($x442 (=> $x226 $x337)))
 (let (($x79 (= ?x71 (_ bv0 32))))
 (let (($x235 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x228 (= $x235 $x79)))
 (let (($x333 (=> $x226 $x228)))
 (let ((?x269 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x375 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x39 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x39) (concat ?x375 (concat ?x15 ?x269)))))
 (let (($x332 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x313 (=> $x226 $x332)))
 (let (($x444 (= $x226 $x292)))
 (let (($x331 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (= $x331 $x126)))
 (let (($x338 (and (and (and (=> $x331 $x62) (=> (and $x226 $x235) $x62)) $x324) $x444)))
 (let (($x350 (and (and (and (and (and (and $x338 $x313) $x333) $x442) $x279) $x334) $x104)))
 (let (($x357 (= $x350 true)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x379 (concat ?x251 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x85 (concat ?x341 (concat ?x224 ?x379))))
 (let ((?x245 (bvadd ?x85 (_ bv4 32))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x284))))
 (let (($x46 (= (_ bv0 32) ?x135)))
 (let ((?x327 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x263 (bvuge ?x327 (_ bv1 32))))
 (let (($x27 (= $x285 $x263)))
 (let (($x439 (=> $x21 $x27)))
 (let (($x248 (= ?x327 (_ bv0 32))))
 (let (($x146 (= $x326 $x248)))
 (let (($x343 (=> $x21 $x146)))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x325))))
 (let (($x223 (= input.spec-%var-l-1.2.1.2.0 ?x290)))
 (let (($x288 (=> $x21 $x223)))
 (let (($x264 (= (_ bv0 32) ?x85)))
 (let ((?x250 (ite $x264 (_ bv0 32) (_ bv1 32))))
 (let (($x316 (bvuge ?x250 (_ bv1 32))))
 (let (($x339 (= $x222 $x316)))
 (let (($x256 (=> $x226 $x339)))
 (let (($x25 (and $x226 $x235)))
 (let (($x136 (=> $x25 $x62)))
 (let (($x441 (= ?x250 (_ bv0 32))))
 (let (($x311 (= $x235 $x441)))
 (let (($x73 (=> $x226 $x311)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x280)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x217)))
 (let (($x312 (= input.spec-%var-l-1.2.0 ?x293)))
 (let (($x303 (=> $x226 $x312)))
 (let (($x322 (and (and (and (and (= $x331 $x160) (= $x226 $x213)) (=> $x331 $x62)) $x303) $x73)))
 (let (($x437 (and (and (and (and (and $x322 $x136) $x256) $x288) $x343) $x439)))
 (let (($x328 (= $x437 true)))
 (let (($x318 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x282 (= $x318 $x329)))
 (let (($x237 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x19 (and $x183 $x237)))
 (let (($x131 (=> $x19 $x282)))
 (let (($x176 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x298 (= $x176 $x220)))
 (let (($x80 (=> $x19 $x298)))
 (let (($x278 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x186)))
 (let (($x8 (=> $x19 $x278)))
 (let (($x249 (= $x237 $x193)))
 (let (($x443 (=> $x183 $x249)))
 (let (($x238 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x37 (= $x238 $x79)))
 (let (($x287 (=> $x183 $x37)))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x102)))
 (let (($x207 (=> $x183 $x64)))
 (let (($x55 (and $x183 $x238)))
 (let (($x305 (=> $x55 $x62)))
 (let (($x107 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x101 (=> $x107 $x62)))
 (let (($x177 (and (and (and (and (and (= $x107 $x126) (= $x183 $x292)) $x101) $x305) $x207) $x287)))
 (let (($x13 (and (and (and (and $x177 $x443) $x8) $x80) $x131)))
 (let (($x51 (= $x13 true)))
 (let ((?x6 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x149 (= (_ bv0 3) ?x6)))
 (let (($x47 (= $x149 true)))
 (let (($x277 (= $x47 true)))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x169 true)))
 (let (($x123 (= $x179 true)))
 (let (($x300 (= $x123 true)))
 (let (($x189 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x210 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x210) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x210))))
 (let (($x241 (and true $x192)))
 (let (($x214 (and $x192 $x241)))
 (let (($x147 (= (bvand ?x281 (_ bv4294967288 32)) ?x281)))
 (let (($x77 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x16 (and $x77 $x147)))
 (let (($x317 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x95 (and (and (and (and (and $x241 $x317) $x77) $x16) $x214) $x189)))
 (let (($x148 (= true $x95)))
 (let (($x72 (not $x105)))
 (let (($x140 (=> $x72 $x148)))
 (let (($x181 (= $x140 true)))
 (let (($x260 (= $x181 true)))
 (let (($x68 (= $x260 true)))
 (let (($x100 (= $x72 true)))
 (let (($x26 (= $x100 true)))
 (let (($x215 (= $x26 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x82)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x234 $x258)))
 (let (($x138 (and $x128 $x78)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (and $x114 $x138)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x198 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x271)))))))
 (let (($x227 (and $x198 $x268)))
 (let (($x87 (= $x227 true)))
 (let (($x205 (= $x87 true)))
 (let (($x261 (= $x205 true)))
 (let ((?x270 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x270)))
 (let (($x56 (= ?x23 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x190 (= $x56 true)))
 (let (($x242 (= $x190 true)))
 (let (($x310 (and $x242 $x261)))
 (let (($x201 (and $x310 $x215)))
 (let (($x239 (and $x201 $x68)))
 (let (($x109 (and $x239 $x300)))
 (let (($x309 (and $x109 $x277)))
 (let (($x262 (and $x309 $x51)))
 (let (($x323 (and $x262 $x328)))
 (let (($x353 (and $x323 $x357)))
 (let (($x359 (and $x183 $x353)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x157 (and $x108 $x359)))
 (let (($x188 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x28 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x143 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x267 $x188)))))))
 (let (($x18 (=> (and $x72 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x267 $x188)))))))
 (let (($x163 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x168 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32))) (or false (or false (and true (or $x161 $x163)))))))
 (let (($x202 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32)))) (or false (or false (and true (or $x161 $x163)))))))
 (let (($x229 (and $x202 $x18)))
 (let (($x456 (and $x229 $x157)))
 (let (($x433 (=> $x456 $x411)))
 (not $x433)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2352X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var2347X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xb8bdfdb8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xb8)
                                #xfdb8b8b9
                                #xfd)
                         #x00000004
                         #x7f)
                  #x00000005
                  #xfe)))
(let ((a!2 (store (store (store (store a!1 #x00000000 #xbd) #xfffffff9 #xbd)
                         #x00000006
                         #xff)
                  #xffffffff
                  #xfd)))
(let ((a!3 (store (store (store (store a!2 #x00000005 #xfe) #x00000008 #xff)
                         #x00000002
                         #xbd)
                  #x00000002
                  #xbd)))
(let ((a!4 (store (store (store (store a!3 #xfdb8b8ba #xbd) #xffffffff #xfd)
                         #x00000007
                         #xff)
                  #x00000004
                  #x7f)))
  (store a!4 #xfffffffb #x7f))))))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xb8bdfdb8)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x7fb8bdb8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x7fb8bdb8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var2352X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2347X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x607 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x622 (concat ?x621 (concat ?x612 ?x610))))
 (let (($x618 (= ?x622 ?x622)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x292 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x62 (bvuge ?x292 (_ bv1 32))))
 (let (($x619 (=> $x62 $x618)))
 (let ((?x627 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x627)))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x600)))
 (let (($x606 (= ?x605 ?x605)))
 (let (($x602 (=> $x62 $x606)))
 (let ((?x155 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x113))))
 (let (($x577 (= (_ bv0 32) ?x147)))
 (let ((?x549 (ite $x577 (_ bv0 32) (_ bv1 32))))
 (let (($x551 (bvuge ?x549 (_ bv1 32))))
 (let (($x595 (= $x62 $x551)))
 (let (($x291 (= false false)))
 (let (($x253 (= ?x292 (_ bv0 32))))
 (let (($x594 (=> $x253 $x291)))
 (let (($x550 (= ?x549 (_ bv0 32))))
 (let (($x593 (= $x253 $x550)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x147)))
 (let (($x620 (and (and (and (and (and $x592 $x593) $x594) $x595) $x602) $x619)))
 (let ((?x563 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x564 (concat ?x563 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x568 (concat ?x567 (concat ?x565 ?x564))))
 (let (($x587 (= ?x568 ?x568)))
 (let (($x328 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x323 (ite $x328 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x323 (_ bv1 32))))
 (let (($x569 (=> $x444 $x587)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x555)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x557)))
 (let (($x560 (= ?x559 ?x559)))
 (let (($x583 (=> $x444 $x560)))
 (let (($x552 (= $x444 $x551)))
 (let (($x336 (= ?x323 (_ bv0 32))))
 (let (($x578 (= $x336 $x550)))
 (let (($x589 (and (and (and (=> $x336 $x291) (= input.dst.llvm-%l ?x147)) $x578) $x552)))
 (let (($x591 (and (and $x589 $x583) $x569)))
 (let (($x576 (not true)))
 (let (($x624 (or (or $x576 $x591) $x620)))
 (let (($x546 (= true true)))
 (let (($x625 (and $x546 $x624)))
 (let (($x630 (= $x625 true)))
 (let ((?x7 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x137))))
 (let ((?x8 (bvadd ?x296 (_ bv4 32))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x231))))
 (let ((?x93 (bvadd ?x171 (_ bv4 32))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x299))))
 (let ((?x221 (bvadd ?x24 (_ bv4 32))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x256))))
 (let (($x58 (= (_ bv0 32) ?x218)))
 (let ((?x319 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x319 (_ bv1 32))))
 (let (($x473 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x508 (= $x473 $x288)))
 (let (($x414 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x384 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x351 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x321 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x385 (and $x321 $x351)))
 (let (($x388 (and $x385 $x384)))
 (let (($x465 (and $x388 $x414)))
 (let (($x509 (=> $x465 $x508)))
 (let (($x377 (= ?x319 (_ bv0 32))))
 (let (($x425 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x512 (= $x425 $x377)))
 (let (($x541 (=> $x465 $x512)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x379))))
 (let (($x515 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x311)))
 (let (($x511 (=> $x465 $x515)))
 (let (($x280 (= (_ bv0 32) ?x24)))
 (let ((?x217 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x217 (_ bv1 32))))
 (let (($x514 (= $x414 $x132)))
 (let (($x540 (=> $x388 $x514)))
 (let (($x293 (= ?x217 (_ bv0 32))))
 (let (($x392 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x539 (= $x392 $x293)))
 (let (($x506 (=> $x388 $x539)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x262))))
 (let (($x505 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x160)))
 (let (($x534 (=> $x388 $x505)))
 (let (($x356 (= (_ bv0 32) ?x171)))
 (let ((?x233 (ite $x356 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x233 (_ bv1 32))))
 (let (($x504 (= $x384 $x220)))
 (let (($x533 (=> $x385 $x504)))
 (let (($x63 (= ?x233 (_ bv0 32))))
 (let (($x365 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x532 (= $x365 $x63)))
 (let (($x538 (=> $x385 $x532)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x306))))
 (let (($x502 (= input.spec-%var-l-1.2.1.2.0 ?x289)))
 (let (($x503 (=> $x385 $x502)))
 (let (($x194 (= (_ bv0 32) ?x296)))
 (let ((?x43 (ite $x194 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x43 (_ bv1 32))))
 (let (($x536 (= $x351 $x177)))
 (let (($x537 (=> $x321 $x536)))
 (let (($x71 (= ?x43 (_ bv0 32))))
 (let (($x91 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x496 (= $x91 $x71)))
 (let (($x501 (=> $x321 $x496)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x375 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x106 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x106) (concat ?x269 (concat ?x375 ?x5)))))
 (let (($x495 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x531 (=> $x321 $x495)))
 (let (($x494 (= $x321 $x62)))
 (let (($x439 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x491 (= $x439 $x253)))
 (let (($x476 (and $x465 $x425)))
 (let (($x477 (=> $x476 $x291)))
 (let (($x406 (and $x388 $x392)))
 (let (($x434 (=> $x406 $x291)))
 (let (($x463 (and $x385 $x365)))
 (let (($x41 (=> $x463 $x291)))
 (let (($x542 (and (and (and (=> $x439 $x291) (=> (and $x321 $x91) $x291)) $x41) $x434)))
 (let (($x535 (and (and (and (and (and (and $x542 $x477) $x491) $x494) $x531) $x501) $x537)))
 (let (($x12 (and (and (and (and (and (and $x535 $x503) $x538) $x533) $x534) $x506) $x540)))
 (let (($x571 (and (and (and $x12 $x511) $x541) $x509)))
 (let (($x572 (= $x571 true)))
 (let ((?x353 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x359 (concat ?x353 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x60 (concat ?x352 (concat ?x456 ?x359))))
 (let ((?x383 (bvadd ?x60 (_ bv4 32))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x364))))
 (let ((?x390 (bvadd ?x409 (_ bv4 32))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv1 32))) (select input.dst.llvm-mem ?x390))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv2 32))) ?x399))))
 (let ((?x423 (bvadd ?x411 (_ bv4 32))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv1 32))) (select input.dst.llvm-mem ?x423))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv2 32))) ?x431))))
 (let (($x471 (= (_ bv0 32) ?x499)))
 (let ((?x479 (ite $x471 (_ bv0 32) (_ bv1 32))))
 (let (($x522 (bvuge ?x479 (_ bv1 32))))
 (let (($x474 (= $x473 $x522)))
 (let (($x472 (=> $x465 $x474)))
 (let (($x525 (= ?x479 (_ bv0 32))))
 (let (($x480 (= $x425 $x525)))
 (let (($x521 (=> $x465 $x480)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x454))))
 (let (($x428 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x422)))
 (let (($x429 (=> $x465 $x428)))
 (let (($x433 (= (_ bv0 32) ?x411)))
 (let ((?x407 (ite $x433 (_ bv0 32) (_ bv1 32))))
 (let (($x416 (bvuge ?x407 (_ bv1 32))))
 (let (($x412 (= $x414 $x416)))
 (let (($x415 (=> $x388 $x412)))
 (let (($x159 (= ?x407 (_ bv0 32))))
 (let (($x121 (= $x392 $x159)))
 (let (($x9 (=> $x388 $x121)))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x451))))
 (let (($x396 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x393)))
 (let (($x394 (=> $x388 $x396)))
 (let (($x462 (= (_ bv0 32) ?x409)))
 (let ((?x381 (ite $x462 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x381 (_ bv1 32))))
 (let (($x380 (= $x384 $x405)))
 (let (($x389 (=> $x385 $x380)))
 (let (($x464 (= ?x381 (_ bv0 32))))
 (let (($x164 (= $x365 $x464)))
 (let (($x452 (=> $x385 $x164)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x371))))
 (let (($x349 (= input.spec-%var-l-1.2.1.2.0 ?x460)))
 (let (($x400 (=> $x385 $x349)))
 (let (($x402 (= (_ bv0 32) ?x60)))
 (let ((?x458 (ite $x402 (_ bv0 32) (_ bv1 32))))
 (let (($x459 (bvuge ?x458 (_ bv1 32))))
 (let (($x354 (= $x351 $x459)))
 (let (($x450 (=> $x321 $x354)))
 (let (($x167 (and $x321 $x91)))
 (let (($x139 (=> $x167 $x291)))
 (let (($x348 (= ?x458 (_ bv0 32))))
 (let (($x144 (= $x91 $x348)))
 (let (($x370 (=> $x321 $x144)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x374)))
 (let (($x438 (= input.spec-%var-l-1.2.0 ?x320)))
 (let (($x334 (=> $x321 $x438)))
 (let (($x481 (and (and (and (and (= $x439 $x336) (= $x321 $x444)) (=> $x439 $x291)) $x334) $x370)))
 (let (($x526 (and (and (and (and (and (and $x481 $x139) $x450) $x400) $x452) $x389) $x41)))
 (let (($x486 (and (and (and (and (and (and $x526 $x394) $x9) $x434) $x415) $x429) $x521)))
 (let (($x485 (and (and $x486 $x477) $x472)))
 (let (($x488 (= $x485 true)))
 (let (($x223 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x347 (= $x223 $x288)))
 (let (($x235 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x48 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x23 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x249 (and $x23 $x287)))
 (let (($x329 (and $x249 $x48)))
 (let (($x330 (and $x329 $x235)))
 (let (($x252 (=> $x330 $x347)))
 (let (($x136 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x335 (and $x330 $x136)))
 (let (($x290 (=> $x335 $x291)))
 (let (($x259 (= $x136 $x377)))
 (let (($x325 (=> $x330 $x259)))
 (let (($x73 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x311)))
 (let (($x322 (=> $x330 $x73)))
 (let (($x440 (= $x235 $x132)))
 (let (($x341 (=> $x329 $x440)))
 (let (($x315 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x361 (and $x329 $x315)))
 (let (($x246 (=> $x361 $x291)))
 (let (($x312 (= $x315 $x293)))
 (let (($x303 (=> $x329 $x312)))
 (let (($x191 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x160)))
 (let (($x226 (=> $x329 $x191)))
 (let (($x278 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x97 (and $x249 $x278)))
 (let (($x318 (=> $x97 $x291)))
 (let (($x298 (= $x48 $x220)))
 (let (($x80 (=> $x249 $x298)))
 (let (($x141 (= $x278 $x63)))
 (let (($x244 (=> $x249 $x141)))
 (let (($x254 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x289)))
 (let (($x83 (=> $x249 $x254)))
 (let (($x237 (= $x287 $x177)))
 (let (($x193 (=> $x23 $x237)))
 (let (($x55 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x55 $x71)))
 (let (($x37 (=> $x23 $x79)))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x102)))
 (let (($x207 (=> $x23 $x64)))
 (let (($x305 (and $x23 $x55)))
 (let (($x274 (=> $x305 $x291)))
 (let (($x183 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x272 (=> $x183 $x291)))
 (let (($x366 (and (and (and (and (and (= $x183 $x253) (= $x23 $x62)) $x272) $x274) $x207) $x37)))
 (let (($x65 (and (and (and (and (and (and $x366 $x193) $x83) $x244) $x80) $x318) $x226)))
 (let (($x343 (and (and (and (and (and (and $x65 $x303) $x246) $x341) $x322) $x325) $x290)))
 (let (($x455 (and $x343 $x252)))
 (let (($x285 (= $x455 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x107 (= (_ bv0 3) ?x34)))
 (let (($x265 (= $x107 true)))
 (let (($x126 (= $x265 true)))
 (let (($x247 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x6 (= $x247 true)))
 (let (($x149 (= $x6 true)))
 (let (($x47 (= $x149 true)))
 (let (($x95 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241))))
 (let (($x317 (and true $x32)))
 (let (($x203 (and $x32 $x317)))
 (let (($x214 (= (bvand ?x147 (_ bv4294967288 32)) ?x147)))
 (let (($x70 (= (bvand ?x155 (_ bv4294967292 32)) ?x155)))
 (let (($x110 (and $x70 $x214)))
 (let (($x61 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x155 (bvsub ?x155 (_ bv4 32))) (bvult ?x155 (bvsub ?x155 (_ bv4 32))))))
 (let (($x68 (and (and (and (and (and $x317 $x61) $x70) $x110) $x203) $x95)))
 (let (($x239 (= true $x68)))
 (let (($x72 (not $x105)))
 (let (($x38 (=> $x72 $x239)))
 (let (($x169 (= $x38 true)))
 (let (($x179 (= $x169 true)))
 (let (($x123 (= $x179 true)))
 (let (($x210 (= $x72 true)))
 (let (($x195 (= $x210 true)))
 (let (($x92 (= $x195 true)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x87)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x268 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x78 $x268)))
 (let (($x261 (and $x227 $x205)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x86 $x261)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x116)))))))
 (let (($x100 (and $x82 $x310)))
 (let (($x26 (= $x100 true)))
 (let (($x215 (= $x26 true)))
 (let (($x201 (= $x215 true)))
 (let ((?x190 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x190)))
 (let (($x232 (= ?x242 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= $x232 true)))
 (let (($x162 (= $x99 true)))
 (let (($x304 (and $x162 $x201)))
 (let (($x192 (and $x304 $x92)))
 (let (($x300 (and $x192 $x123)))
 (let (($x277 (and $x300 $x47)))
 (let (($x154 (and $x277 $x126)))
 (let (($x263 (and $x154 $x285)))
 (let (($x530 (and $x263 $x488)))
 (let (($x573 (and $x530 $x572)))
 (let (($x574 (and $x23 $x573)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x545 (and $x196 $x574)))
 (let (($x52 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x155 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x108 (=> (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x52)))))))
 (let (($x30 (=> (and $x72 (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x45 $x52)))))))
 (let (($x120 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x57 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x7 (_ bv1 32))) (or false (or false (and true (or $x118 $x120)))))))
 (let (($x172 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x7 (_ bv1 32)))) (or false (or false (and true (or $x118 $x120)))))))
 (let (($x206 (and $x172 $x30)))
 (let (($x575 (and $x206 $x545)))
 (let (($x666 (=> $x575 $x630)))
 (not $x666)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2352X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2347X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x607 (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv4 32))))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2352X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x622 (concat ?x621 (concat ?x612 ?x610))))
 (let (($x618 (= ?x622 ?x622)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x292 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x62 (bvuge ?x292 (_ bv1 32))))
 (let (($x619 (=> $x62 $x618)))
 (let ((?x627 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2352X))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv2 32))) ?x627)))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2352X (_ bv3 32))) ?x600)))
 (let (($x606 (= ?x605 ?x605)))
 (let (($x602 (=> $x62 $x606)))
 (let ((?x155 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x113))))
 (let (($x577 (= (_ bv0 32) ?x147)))
 (let ((?x549 (ite $x577 (_ bv0 32) (_ bv1 32))))
 (let (($x551 (bvuge ?x549 (_ bv1 32))))
 (let (($x595 (= $x62 $x551)))
 (let (($x291 (= false false)))
 (let (($x253 (= ?x292 (_ bv0 32))))
 (let (($x594 (=> $x253 $x291)))
 (let (($x550 (= ?x549 (_ bv0 32))))
 (let (($x593 (= $x253 $x550)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x147)))
 (let (($x620 (and (and (and (and (and $x592 $x593) $x594) $x595) $x602) $x619)))
 (let ((?x563 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x564 (concat ?x563 (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv4 32))))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2347X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x568 (concat ?x567 (concat ?x565 ?x564))))
 (let (($x587 (= ?x568 ?x568)))
 (let (($x328 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x323 (ite $x328 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x323 (_ bv1 32))))
 (let (($x569 (=> $x444 $x587)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2347X))))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv2 32))) ?x555)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2347X (_ bv3 32))) ?x557)))
 (let (($x560 (= ?x559 ?x559)))
 (let (($x583 (=> $x444 $x560)))
 (let (($x552 (= $x444 $x551)))
 (let (($x336 (= ?x323 (_ bv0 32))))
 (let (($x578 (= $x336 $x550)))
 (let (($x589 (and (and (and (=> $x336 $x291) (= input.dst.llvm-%l ?x147)) $x578) $x552)))
 (let (($x591 (and (and $x589 $x583) $x569)))
 (let (($x576 (not true)))
 (let (($x624 (or (or $x576 $x591) $x620)))
 (let (($x546 (= true true)))
 (let (($x625 (and $x546 $x624)))
 (let (($x630 (= $x625 true)))
 (let ((?x7 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x137))))
 (let ((?x8 (bvadd ?x296 (_ bv4 32))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x231))))
 (let ((?x93 (bvadd ?x171 (_ bv4 32))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x299))))
 (let ((?x221 (bvadd ?x24 (_ bv4 32))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x256))))
 (let (($x58 (= (_ bv0 32) ?x218)))
 (let ((?x319 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x319 (_ bv1 32))))
 (let (($x473 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x508 (= $x473 $x288)))
 (let (($x414 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x384 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x351 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x321 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x385 (and $x321 $x351)))
 (let (($x388 (and $x385 $x384)))
 (let (($x465 (and $x388 $x414)))
 (let (($x509 (=> $x465 $x508)))
 (let (($x377 (= ?x319 (_ bv0 32))))
 (let (($x425 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x512 (= $x425 $x377)))
 (let (($x541 (=> $x465 $x512)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x379))))
 (let (($x515 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x311)))
 (let (($x511 (=> $x465 $x515)))
 (let (($x280 (= (_ bv0 32) ?x24)))
 (let ((?x217 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x217 (_ bv1 32))))
 (let (($x514 (= $x414 $x132)))
 (let (($x540 (=> $x388 $x514)))
 (let (($x293 (= ?x217 (_ bv0 32))))
 (let (($x392 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x539 (= $x392 $x293)))
 (let (($x506 (=> $x388 $x539)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x262))))
 (let (($x505 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x160)))
 (let (($x534 (=> $x388 $x505)))
 (let (($x356 (= (_ bv0 32) ?x171)))
 (let ((?x233 (ite $x356 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x233 (_ bv1 32))))
 (let (($x504 (= $x384 $x220)))
 (let (($x533 (=> $x385 $x504)))
 (let (($x63 (= ?x233 (_ bv0 32))))
 (let (($x365 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x532 (= $x365 $x63)))
 (let (($x538 (=> $x385 $x532)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x306))))
 (let (($x502 (= input.spec-%var-l-1.2.1.2.0 ?x289)))
 (let (($x503 (=> $x385 $x502)))
 (let (($x194 (= (_ bv0 32) ?x296)))
 (let ((?x43 (ite $x194 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x43 (_ bv1 32))))
 (let (($x536 (= $x351 $x177)))
 (let (($x537 (=> $x321 $x536)))
 (let (($x71 (= ?x43 (_ bv0 32))))
 (let (($x91 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x496 (= $x91 $x71)))
 (let (($x501 (=> $x321 $x496)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x375 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x106 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x106) (concat ?x269 (concat ?x375 ?x5)))))
 (let (($x495 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x531 (=> $x321 $x495)))
 (let (($x494 (= $x321 $x62)))
 (let (($x439 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x491 (= $x439 $x253)))
 (let (($x476 (and $x465 $x425)))
 (let (($x477 (=> $x476 $x291)))
 (let (($x406 (and $x388 $x392)))
 (let (($x434 (=> $x406 $x291)))
 (let (($x463 (and $x385 $x365)))
 (let (($x41 (=> $x463 $x291)))
 (let (($x542 (and (and (and (=> $x439 $x291) (=> (and $x321 $x91) $x291)) $x41) $x434)))
 (let (($x535 (and (and (and (and (and (and $x542 $x477) $x491) $x494) $x531) $x501) $x537)))
 (let (($x12 (and (and (and (and (and (and $x535 $x503) $x538) $x533) $x534) $x506) $x540)))
 (let (($x571 (and (and (and $x12 $x511) $x541) $x509)))
 (let (($x572 (= $x571 true)))
 (let ((?x353 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x359 (concat ?x353 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x60 (concat ?x352 (concat ?x456 ?x359))))
 (let ((?x383 (bvadd ?x60 (_ bv4 32))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x364))))
 (let ((?x390 (bvadd ?x409 (_ bv4 32))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv1 32))) (select input.dst.llvm-mem ?x390))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv2 32))) ?x399))))
 (let ((?x423 (bvadd ?x411 (_ bv4 32))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv1 32))) (select input.dst.llvm-mem ?x423))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv2 32))) ?x431))))
 (let (($x471 (= (_ bv0 32) ?x499)))
 (let ((?x479 (ite $x471 (_ bv0 32) (_ bv1 32))))
 (let (($x522 (bvuge ?x479 (_ bv1 32))))
 (let (($x474 (= $x473 $x522)))
 (let (($x472 (=> $x465 $x474)))
 (let (($x525 (= ?x479 (_ bv0 32))))
 (let (($x480 (= $x425 $x525)))
 (let (($x521 (=> $x465 $x480)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x454))))
 (let (($x428 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x422)))
 (let (($x429 (=> $x465 $x428)))
 (let (($x433 (= (_ bv0 32) ?x411)))
 (let ((?x407 (ite $x433 (_ bv0 32) (_ bv1 32))))
 (let (($x416 (bvuge ?x407 (_ bv1 32))))
 (let (($x412 (= $x414 $x416)))
 (let (($x415 (=> $x388 $x412)))
 (let (($x159 (= ?x407 (_ bv0 32))))
 (let (($x121 (= $x392 $x159)))
 (let (($x9 (=> $x388 $x121)))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x451))))
 (let (($x396 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x393)))
 (let (($x394 (=> $x388 $x396)))
 (let (($x462 (= (_ bv0 32) ?x409)))
 (let ((?x381 (ite $x462 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x381 (_ bv1 32))))
 (let (($x380 (= $x384 $x405)))
 (let (($x389 (=> $x385 $x380)))
 (let (($x464 (= ?x381 (_ bv0 32))))
 (let (($x164 (= $x365 $x464)))
 (let (($x452 (=> $x385 $x164)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x371))))
 (let (($x349 (= input.spec-%var-l-1.2.1.2.0 ?x460)))
 (let (($x400 (=> $x385 $x349)))
 (let (($x402 (= (_ bv0 32) ?x60)))
 (let ((?x458 (ite $x402 (_ bv0 32) (_ bv1 32))))
 (let (($x459 (bvuge ?x458 (_ bv1 32))))
 (let (($x354 (= $x351 $x459)))
 (let (($x450 (=> $x321 $x354)))
 (let (($x167 (and $x321 $x91)))
 (let (($x139 (=> $x167 $x291)))
 (let (($x348 (= ?x458 (_ bv0 32))))
 (let (($x144 (= $x91 $x348)))
 (let (($x370 (=> $x321 $x144)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x374)))
 (let (($x438 (= input.spec-%var-l-1.2.0 ?x320)))
 (let (($x334 (=> $x321 $x438)))
 (let (($x481 (and (and (and (and (= $x439 $x336) (= $x321 $x444)) (=> $x439 $x291)) $x334) $x370)))
 (let (($x526 (and (and (and (and (and (and $x481 $x139) $x450) $x400) $x452) $x389) $x41)))
 (let (($x486 (and (and (and (and (and (and $x526 $x394) $x9) $x434) $x415) $x429) $x521)))
 (let (($x485 (and (and $x486 $x477) $x472)))
 (let (($x488 (= $x485 true)))
 (let (($x223 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x347 (= $x223 $x288)))
 (let (($x235 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x48 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x23 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x249 (and $x23 $x287)))
 (let (($x329 (and $x249 $x48)))
 (let (($x330 (and $x329 $x235)))
 (let (($x252 (=> $x330 $x347)))
 (let (($x136 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x335 (and $x330 $x136)))
 (let (($x290 (=> $x335 $x291)))
 (let (($x259 (= $x136 $x377)))
 (let (($x325 (=> $x330 $x259)))
 (let (($x73 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x311)))
 (let (($x322 (=> $x330 $x73)))
 (let (($x440 (= $x235 $x132)))
 (let (($x341 (=> $x329 $x440)))
 (let (($x315 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x361 (and $x329 $x315)))
 (let (($x246 (=> $x361 $x291)))
 (let (($x312 (= $x315 $x293)))
 (let (($x303 (=> $x329 $x312)))
 (let (($x191 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x160)))
 (let (($x226 (=> $x329 $x191)))
 (let (($x278 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x97 (and $x249 $x278)))
 (let (($x318 (=> $x97 $x291)))
 (let (($x298 (= $x48 $x220)))
 (let (($x80 (=> $x249 $x298)))
 (let (($x141 (= $x278 $x63)))
 (let (($x244 (=> $x249 $x141)))
 (let (($x254 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x289)))
 (let (($x83 (=> $x249 $x254)))
 (let (($x237 (= $x287 $x177)))
 (let (($x193 (=> $x23 $x237)))
 (let (($x55 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x55 $x71)))
 (let (($x37 (=> $x23 $x79)))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x102)))
 (let (($x207 (=> $x23 $x64)))
 (let (($x305 (and $x23 $x55)))
 (let (($x274 (=> $x305 $x291)))
 (let (($x183 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x272 (=> $x183 $x291)))
 (let (($x366 (and (and (and (and (and (= $x183 $x253) (= $x23 $x62)) $x272) $x274) $x207) $x37)))
 (let (($x65 (and (and (and (and (and (and $x366 $x193) $x83) $x244) $x80) $x318) $x226)))
 (let (($x343 (and (and (and (and (and (and $x65 $x303) $x246) $x341) $x322) $x325) $x290)))
 (let (($x455 (and $x343 $x252)))
 (let (($x285 (= $x455 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x107 (= (_ bv0 3) ?x34)))
 (let (($x265 (= $x107 true)))
 (let (($x126 (= $x265 true)))
 (let (($x247 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x6 (= $x247 true)))
 (let (($x149 (= $x6 true)))
 (let (($x47 (= $x149 true)))
 (let (($x95 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241))))
 (let (($x317 (and true $x32)))
 (let (($x203 (and $x32 $x317)))
 (let (($x214 (= (bvand ?x147 (_ bv4294967288 32)) ?x147)))
 (let (($x70 (= (bvand ?x155 (_ bv4294967292 32)) ?x155)))
 (let (($x110 (and $x70 $x214)))
 (let (($x61 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x155 (bvsub ?x155 (_ bv4 32))) (bvult ?x155 (bvsub ?x155 (_ bv4 32))))))
 (let (($x68 (and (and (and (and (and $x317 $x61) $x70) $x110) $x203) $x95)))
 (let (($x239 (= true $x68)))
 (let (($x72 (not $x105)))
 (let (($x38 (=> $x72 $x239)))
 (let (($x169 (= $x38 true)))
 (let (($x179 (= $x169 true)))
 (let (($x123 (= $x179 true)))
 (let (($x210 (= $x72 true)))
 (let (($x195 (= $x210 true)))
 (let (($x92 (= $x195 true)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x87)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x268 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x78 $x268)))
 (let (($x261 (and $x227 $x205)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x86 $x261)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x116)))))))
 (let (($x100 (and $x82 $x310)))
 (let (($x26 (= $x100 true)))
 (let (($x215 (= $x26 true)))
 (let (($x201 (= $x215 true)))
 (let ((?x190 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x190)))
 (let (($x232 (= ?x242 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= $x232 true)))
 (let (($x162 (= $x99 true)))
 (let (($x304 (and $x162 $x201)))
 (let (($x192 (and $x304 $x92)))
 (let (($x300 (and $x192 $x123)))
 (let (($x277 (and $x300 $x47)))
 (let (($x154 (and $x277 $x126)))
 (let (($x263 (and $x154 $x285)))
 (let (($x530 (and $x263 $x488)))
 (let (($x573 (and $x530 $x572)))
 (let (($x574 (and $x23 $x573)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x545 (and $x196 $x574)))
 (let (($x52 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x155 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x108 (=> (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x52)))))))
 (let (($x30 (=> (and $x72 (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x45 $x52)))))))
 (let (($x120 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x57 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x7 (_ bv1 32))) (or false (or false (and true (or $x118 $x120)))))))
 (let (($x172 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x7 (_ bv1 32)))) (or false (or false (and true (or $x118 $x120)))))))
 (let (($x206 (and $x172 $x30)))
 (let (($x575 (and $x206 $x545)))
 (let (($x666 (=> $x575 $x630)))
 (not $x666)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00001000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var2352X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2347X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000006) #x00
      #x00)))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var2352X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2347X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xffbffeda) #xff
    (ite (= x!0 #xffffffea) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xffffffee) #x00
    (ite (= x!0 #x00000002) #x02
    (ite (= x!0 #xffffffeb) #x00
    (ite (= x!0 #xffffffec) #x00
    (ite (= x!0 #xffbffedb) #xff
    (ite (= x!0 #x00000006) #xbf
    (ite (= x!0 #x00000005) #xfe
    (ite (= x!0 #xffbffed8) #xea
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xffbffed4) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xffffffed) #x00
    (ite (= x!0 #xffbffed6) #x00
    (ite (= x!0 #xffffffef) #x00
    (ite (= x!0 #xffbffed9) #xff
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffff0) #x80
    (ite (= x!0 #x00000004) #xd4
    (ite (= x!0 #xffbffed7) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xffbffed5) #x00
    (ite (= x!0 #xfffffff1) #x02
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x11))))
 (let ((?x74 ((_ extract 2 0) ?x214)))
 (let (($x22 (= (_ bv0 3) ?x74)))
 (let (($x36 (= $x22 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (bvuge ?x15 (_ bv1 32))))
 (let (($x242 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x242 $x375)))
 (let (($x269 (= ?x15 (_ bv0 32))))
 (let (($x275 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x178 (= $x275 $x269)))
 (let (($x33 (and $x178 $x5)))
 (let (($x166 (= $x33 true)))
 (let (($x326 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x291 (ite $x326 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x291 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x305 (= $x238 $x55)))
 (let (($x272 (= ?x291 (_ bv0 32))))
 (let (($x62 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x245 (= $x62 $x272)))
 (let (($x274 (and $x245 $x305)))
 (let (($x184 (= $x274 true)))
 (let ((?x270 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x270)))
 (let (($x292 (= $x183 true)))
 (let (($x253 (= $x292 true)))
 (let (($x309 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x34 (= $x309 true)))
 (let (($x107 (= $x34 true)))
 (let (($x265 (= $x107 true)))
 (let (($x68 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317))))
 (let (($x61 (and true $x77)))
 (let (($x189 (and $x77 $x61)))
 (let (($x203 (= (bvand ?x214 (_ bv4294967288 32)) ?x214)))
 (let (($x199 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x260 (and $x199 $x203)))
 (let (($x140 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x123 (and (and (and (and (and $x61 $x140) $x199) $x260) $x189) $x68)))
 (let (($x300 (= true $x123)))
 (let (($x72 (not $x105)))
 (let (($x109 (=> $x72 $x300)))
 (let (($x247 (= $x109 true)))
 (let (($x6 (= $x247 true)))
 (let (($x149 (= $x6 true)))
 (let (($x241 (= $x72 true)))
 (let (($x297 (= $x241 true)))
 (let (($x200 (= $x297 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x26)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x205 $x310)))
 (let (($x201 (and $x100 $x215)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (and $x114 $x201)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x271)))))))
 (let (($x210 (and $x87 $x304)))
 (let (($x195 (= $x210 true)))
 (let (($x92 (= $x195 true)))
 (let (($x192 (= $x92 true)))
 (let ((?x99 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x99)))
 (let (($x49 (= ?x162 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= $x49 true)))
 (let (($x17 (= $x128 true)))
 (let (($x295 (and $x17 $x192)))
 (let (($x32 (and $x295 $x200)))
 (let (($x47 (and $x32 $x149)))
 (let (($x126 (and $x47 $x265)))
 (let (($x66 (and $x126 $x253)))
 (let (($x35 (and $x66 $x184)))
 (let (($x102 (and $x35 $x166)))
 (let (($x64 (and $x242 $x102)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x207 (and $x56 $x64)))
 (let (($x18 (bvugt ?x42 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x42 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x196 (=> (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x18)))))))
 (let (($x197 (=> (and $x72 (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x143 $x18)))))))
 (let (($x202 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x267 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x188 (=> $x267 (or false (or false (and true (or $x168 $x202)))))))
 (let (($x39 (=> (and $x72 $x267) (or false (or false (and true (or $x168 $x202)))))))
 (let (($x59 (and $x39 $x197)))
 (let (($x445 (and $x59 $x207)))
 (let (($x209 (=> $x445 $x36)))
 (not $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x11))))
 (let ((?x74 ((_ extract 2 0) ?x214)))
 (let (($x22 (= (_ bv0 3) ?x74)))
 (let (($x36 (= $x22 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (bvuge ?x15 (_ bv1 32))))
 (let (($x242 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x242 $x375)))
 (let (($x269 (= ?x15 (_ bv0 32))))
 (let (($x275 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x178 (= $x275 $x269)))
 (let (($x33 (and $x178 $x5)))
 (let (($x166 (= $x33 true)))
 (let (($x326 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x291 (ite $x326 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x291 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x305 (= $x238 $x55)))
 (let (($x272 (= ?x291 (_ bv0 32))))
 (let (($x62 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x245 (= $x62 $x272)))
 (let (($x274 (and $x245 $x305)))
 (let (($x184 (= $x274 true)))
 (let ((?x270 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x270)))
 (let (($x292 (= $x183 true)))
 (let (($x253 (= $x292 true)))
 (let (($x309 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x34 (= $x309 true)))
 (let (($x107 (= $x34 true)))
 (let (($x265 (= $x107 true)))
 (let (($x68 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317))))
 (let (($x61 (and true $x77)))
 (let (($x189 (and $x77 $x61)))
 (let (($x203 (= (bvand ?x214 (_ bv4294967288 32)) ?x214)))
 (let (($x199 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x260 (and $x199 $x203)))
 (let (($x140 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x123 (and (and (and (and (and $x61 $x140) $x199) $x260) $x189) $x68)))
 (let (($x300 (= true $x123)))
 (let (($x72 (not $x105)))
 (let (($x109 (=> $x72 $x300)))
 (let (($x247 (= $x109 true)))
 (let (($x6 (= $x247 true)))
 (let (($x149 (= $x6 true)))
 (let (($x241 (= $x72 true)))
 (let (($x297 (= $x241 true)))
 (let (($x200 (= $x297 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x26)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x205 $x310)))
 (let (($x201 (and $x100 $x215)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (and $x114 $x201)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x271)))))))
 (let (($x210 (and $x87 $x304)))
 (let (($x195 (= $x210 true)))
 (let (($x92 (= $x195 true)))
 (let (($x192 (= $x92 true)))
 (let ((?x99 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x99)))
 (let (($x49 (= ?x162 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= $x49 true)))
 (let (($x17 (= $x128 true)))
 (let (($x295 (and $x17 $x192)))
 (let (($x32 (and $x295 $x200)))
 (let (($x47 (and $x32 $x149)))
 (let (($x126 (and $x47 $x265)))
 (let (($x66 (and $x126 $x253)))
 (let (($x35 (and $x66 $x184)))
 (let (($x102 (and $x35 $x166)))
 (let (($x64 (and $x242 $x102)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x207 (and $x56 $x64)))
 (let (($x18 (bvugt ?x42 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x42 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x196 (=> (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x18)))))))
 (let (($x197 (=> (and $x72 (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x143 $x18)))))))
 (let (($x202 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x267 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x188 (=> $x267 (or false (or false (and true (or $x168 $x202)))))))
 (let (($x39 (=> (and $x72 $x267) (or false (or false (and true (or $x168 $x202)))))))
 (let (($x59 (and $x39 $x197)))
 (let (($x445 (and $x59 $x207)))
 (let (($x209 (=> $x445 $x36)))
 (not $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem ?x28) (concat ?x296 (concat ?x165 ?x98)))))
 (let ((?x79 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x71)))
 (let ((?x301 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x117 (bvmul (_ bv4294967295 32) ?x301)))
 (let ((?x198 (bvneg ?x117)))
 (let (($x37 (= ?x198 ?x79)))
 (let (($x366 (= $x37 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x375 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge ?x375 (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x102 (= $x162 $x166)))
 (let (($x5 (= ?x375 (_ bv0 32))))
 (let (($x242 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x33 (= $x242 $x5)))
 (let (($x64 (and $x33 $x102)))
 (let (($x207 (= $x64 true)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x305 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x305 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x275 (= $x35 $x190)))
 (let (($x274 (= ?x305 (_ bv0 32))))
 (let (($x245 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x184 (= $x245 $x274)))
 (let (($x15 (and $x184 $x275)))
 (let (($x269 (= $x15 true)))
 (let ((?x253 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x253)))
 (let (($x62 (= ?x66 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x101 (= $x62 true)))
 (let (($x326 (= $x101 true)))
 (let ((?x107 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x265 (= (_ bv0 3) ?x107)))
 (let (($x126 (= $x265 true)))
 (let (($x154 (= $x126 true)))
 (let (($x6 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x6 true)))
 (let (($x47 (= $x149 true)))
 (let (($x277 (= $x47 true)))
 (let (($x110 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241))))
 (let (($x317 (and true $x204)))
 (let (($x16 (and $x204 $x317)))
 (let ((?x267 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x199))))
 (let (($x281 (= (bvand ?x147 (_ bv4294967288 32)) ?x147)))
 (let (($x70 (= (bvand ?x267 (_ bv4294967292 32)) ?x267)))
 (let (($x11 (and $x70 $x281)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x267 (bvsub ?x267 (_ bv4 32))) (bvult ?x267 (bvsub ?x267 (_ bv4 32))))))
 (let (($x189 (and (and (and (and (and $x317 $x130) $x70) $x11) $x16) $x110)))
 (let (($x179 (= true $x189)))
 (let (($x72 (not $x105)))
 (let (($x95 (=> $x72 $x179)))
 (let (($x68 (= $x95 true)))
 (let (($x123 (= $x68 true)))
 (let (($x300 (= $x123 true)))
 (let (($x195 (= $x72 true)))
 (let (($x92 (= $x195 true)))
 (let (($x192 (= $x92 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x310 (= (_ bv0 32) ?x261)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x87 $x114)))
 (let (($x100 (and $x205 $x310)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x128 $x100)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x258)))))))
 (let (($x215 (and $x268 $x26)))
 (let (($x201 (= $x215 true)))
 (let (($x304 (= $x201 true)))
 (let (($x210 (= $x304 true)))
 (let (($x295 (and $x210 $x192)))
 (let (($x109 (and $x295 $x300)))
 (let (($x309 (and $x109 $x277)))
 (let (($x270 (and $x309 $x154)))
 (let (($x291 (and $x270 $x326)))
 (let (($x178 (and $x291 $x269)))
 (let (($x445 (and $x178 $x207)))
 (let (($x74 (and $x162 $x445)))
 (let (($x232 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x22 (and $x232 $x74)))
 (let (($x30 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x267 (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x56 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x30)))))))
 (let (($x111 (=> (and $x72 (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x108 $x30)))))))
 (let (($x172 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x45 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x52 (=> $x45 (or false (or false (and true (or $x57 $x172)))))))
 (let (($x106 (=> (and $x72 $x45) (or false (or false (and true (or $x57 $x172)))))))
 (let (($x230 (and $x106 $x111)))
 (let (($x36 (and $x230 $x22)))
 (let (($x287 (=> $x36 $x366)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem ?x28) (concat ?x296 (concat ?x165 ?x98)))))
 (let ((?x79 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x71)))
 (let ((?x301 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x117 (bvmul (_ bv4294967295 32) ?x301)))
 (let ((?x198 (bvneg ?x117)))
 (let (($x37 (= ?x198 ?x79)))
 (let (($x366 (= $x37 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x375 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge ?x375 (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x102 (= $x162 $x166)))
 (let (($x5 (= ?x375 (_ bv0 32))))
 (let (($x242 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x33 (= $x242 $x5)))
 (let (($x64 (and $x33 $x102)))
 (let (($x207 (= $x64 true)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x305 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x305 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x275 (= $x35 $x190)))
 (let (($x274 (= ?x305 (_ bv0 32))))
 (let (($x245 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x184 (= $x245 $x274)))
 (let (($x15 (and $x184 $x275)))
 (let (($x269 (= $x15 true)))
 (let ((?x253 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x253)))
 (let (($x62 (= ?x66 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x101 (= $x62 true)))
 (let (($x326 (= $x101 true)))
 (let ((?x107 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x265 (= (_ bv0 3) ?x107)))
 (let (($x126 (= $x265 true)))
 (let (($x154 (= $x126 true)))
 (let (($x6 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x6 true)))
 (let (($x47 (= $x149 true)))
 (let (($x277 (= $x47 true)))
 (let (($x110 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x241 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x241))))
 (let (($x317 (and true $x204)))
 (let (($x16 (and $x204 $x317)))
 (let ((?x267 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x199))))
 (let (($x281 (= (bvand ?x147 (_ bv4294967288 32)) ?x147)))
 (let (($x70 (= (bvand ?x267 (_ bv4294967292 32)) ?x267)))
 (let (($x11 (and $x70 $x281)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x267 (bvsub ?x267 (_ bv4 32))) (bvult ?x267 (bvsub ?x267 (_ bv4 32))))))
 (let (($x189 (and (and (and (and (and $x317 $x130) $x70) $x11) $x16) $x110)))
 (let (($x179 (= true $x189)))
 (let (($x72 (not $x105)))
 (let (($x95 (=> $x72 $x179)))
 (let (($x68 (= $x95 true)))
 (let (($x123 (= $x68 true)))
 (let (($x300 (= $x123 true)))
 (let (($x195 (= $x72 true)))
 (let (($x92 (= $x195 true)))
 (let (($x192 (= $x92 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x310 (= (_ bv0 32) ?x261)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x87 $x114)))
 (let (($x100 (and $x205 $x310)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x128 $x100)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x258)))))))
 (let (($x215 (and $x268 $x26)))
 (let (($x201 (= $x215 true)))
 (let (($x304 (= $x201 true)))
 (let (($x210 (= $x304 true)))
 (let (($x295 (and $x210 $x192)))
 (let (($x109 (and $x295 $x300)))
 (let (($x309 (and $x109 $x277)))
 (let (($x270 (and $x309 $x154)))
 (let (($x291 (and $x270 $x326)))
 (let (($x178 (and $x291 $x269)))
 (let (($x445 (and $x178 $x207)))
 (let (($x74 (and $x162 $x445)))
 (let (($x232 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x22 (and $x232 $x74)))
 (let (($x30 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x267 (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x56 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x30)))))))
 (let (($x111 (=> (and $x72 (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x108 $x30)))))))
 (let (($x172 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x45 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x52 (=> $x45 (or false (or false (and true (or $x57 $x172)))))))
 (let (($x106 (=> (and $x72 $x45) (or false (or false (and true (or $x57 $x172)))))))
 (let (($x230 (and $x106 $x111)))
 (let (($x36 (and $x230 $x22)))
 (let (($x287 (=> $x36 $x366)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x366 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x155) (concat ?x163 (concat ?x177 ?x366)))))
 (let ((?x249 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x345)))
 (let ((?x71 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x79 (bvmul (_ bv4294967295 32) ?x71)))
 (let ((?x37 (bvneg ?x79)))
 (let (($x443 (= ?x37 ?x249)))
 (let (($x240 (= $x443 true)))
 (let (($x112 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x117 (not $x112)))
 (let (($x207 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x301 (not $x207)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x445 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x445 (_ bv1 32))))
 (let (($x209 (= $x112 $x36)))
 (let (($x74 (= ?x445 (_ bv0 32))))
 (let (($x22 (= $x207 $x74)))
 (let (($x255 (and (and (and $x22 $x209) $x301) $x117)))
 (let (($x296 (= $x255 true)))
 (let (($x178 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x5 (not $x178)))
 (let (($x184 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x375 (not $x184)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x275 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x275 (_ bv1 32))))
 (let (($x242 (= $x178 $x99)))
 (let (($x15 (= ?x275 (_ bv0 32))))
 (let (($x269 (= $x184 $x15)))
 (let (($x166 (and (and (and $x269 $x242) $x375) $x5)))
 (let (($x102 (= $x166 true)))
 (let ((?x326 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x326)))
 (let (($x245 (= ?x291 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= $x245 true)))
 (let (($x55 (= $x238 true)))
 (let ((?x183 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x292 (= (_ bv0 3) ?x183)))
 (let (($x253 (= $x292 true)))
 (let (($x66 (= $x253 true)))
 (let (($x34 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x107 (= $x34 true)))
 (let (($x265 (= $x107 true)))
 (let (($x126 (= $x265 true)))
 (let (($x189 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317))))
 (let (($x130 (and true $x61)))
 (let (($x214 (and $x61 $x130)))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x239))))
 (let (($x16 (= (bvand ?x281 (_ bv4294967288 32)) ?x281)))
 (let (($x38 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x169 (and $x38 $x16)))
 (let (($x203 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv4 32))) (bvult ?x45 (bvsub ?x45 (_ bv4 32))))))
 (let (($x300 (and (and (and (and (and $x130 $x203) $x38) $x169) $x214) $x189)))
 (let (($x109 (= true $x300)))
 (let (($x72 (not $x105)))
 (let (($x247 (=> $x72 $x109)))
 (let (($x6 (= $x247 true)))
 (let (($x149 (= $x6 true)))
 (let (($x47 (= $x149 true)))
 (let (($x241 (= $x72 true)))
 (let (($x200 (= $x241 true)))
 (let (($x32 (= $x200 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x201)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x310 $x26)))
 (let (($x210 (and $x215 $x304)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x82 $x210)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x268 $x49)))))))
 (let (($x92 (and $x261 $x195)))
 (let (($x192 (= $x92 true)))
 (let (($x295 (= $x192 true)))
 (let (($x297 (= $x295 true)))
 (let (($x204 (and $x297 $x32)))
 (let (($x277 (and $x204 $x47)))
 (let (($x154 (and $x277 $x126)))
 (let (($x23 (and $x154 $x66)))
 (let (($x305 (and $x23 $x55)))
 (let (($x64 (and $x305 $x102)))
 (let (($x294 (and $x64 $x296)))
 (let (($x165 (and $x112 $x294)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x98 (and $x234 $x165)))
 (let (($x197 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x45 (_ bv3 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x232 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x197)))))))
 (let (($x153 (=> (and $x72 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x196 $x197)))))))
 (let (($x39 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x143 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x143 (or false (or false (and true (or $x188 $x39)))))))
 (let (($x156 (=> (and $x72 $x143) (or false (or false (and true (or $x188 $x39)))))))
 (let (($x229 (and $x156 $x153)))
 (let (($x137 (and $x229 $x98)))
 (let (($x211 (=> $x137 $x240)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x366 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x155) (concat ?x163 (concat ?x177 ?x366)))))
 (let ((?x249 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x345)))
 (let ((?x71 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x79 (bvmul (_ bv4294967295 32) ?x71)))
 (let ((?x37 (bvneg ?x79)))
 (let (($x443 (= ?x37 ?x249)))
 (let (($x240 (= $x443 true)))
 (let (($x112 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x117 (not $x112)))
 (let (($x207 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x301 (not $x207)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x445 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x445 (_ bv1 32))))
 (let (($x209 (= $x112 $x36)))
 (let (($x74 (= ?x445 (_ bv0 32))))
 (let (($x22 (= $x207 $x74)))
 (let (($x255 (and (and (and $x22 $x209) $x301) $x117)))
 (let (($x296 (= $x255 true)))
 (let (($x178 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x5 (not $x178)))
 (let (($x184 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x375 (not $x184)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x275 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x275 (_ bv1 32))))
 (let (($x242 (= $x178 $x99)))
 (let (($x15 (= ?x275 (_ bv0 32))))
 (let (($x269 (= $x184 $x15)))
 (let (($x166 (and (and (and $x269 $x242) $x375) $x5)))
 (let (($x102 (= $x166 true)))
 (let ((?x326 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x326)))
 (let (($x245 (= ?x291 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= $x245 true)))
 (let (($x55 (= $x238 true)))
 (let ((?x183 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x292 (= (_ bv0 3) ?x183)))
 (let (($x253 (= $x292 true)))
 (let (($x66 (= $x253 true)))
 (let (($x34 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x107 (= $x34 true)))
 (let (($x265 (= $x107 true)))
 (let (($x126 (= $x265 true)))
 (let (($x189 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317))))
 (let (($x130 (and true $x61)))
 (let (($x214 (and $x61 $x130)))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x239))))
 (let (($x16 (= (bvand ?x281 (_ bv4294967288 32)) ?x281)))
 (let (($x38 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x169 (and $x38 $x16)))
 (let (($x203 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv4 32))) (bvult ?x45 (bvsub ?x45 (_ bv4 32))))))
 (let (($x300 (and (and (and (and (and $x130 $x203) $x38) $x169) $x214) $x189)))
 (let (($x109 (= true $x300)))
 (let (($x72 (not $x105)))
 (let (($x247 (=> $x72 $x109)))
 (let (($x6 (= $x247 true)))
 (let (($x149 (= $x6 true)))
 (let (($x47 (= $x149 true)))
 (let (($x241 (= $x72 true)))
 (let (($x200 (= $x241 true)))
 (let (($x32 (= $x200 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x201)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x310 $x26)))
 (let (($x210 (and $x215 $x304)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x82 $x210)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x268 $x49)))))))
 (let (($x92 (and $x261 $x195)))
 (let (($x192 (= $x92 true)))
 (let (($x295 (= $x192 true)))
 (let (($x297 (= $x295 true)))
 (let (($x204 (and $x297 $x32)))
 (let (($x277 (and $x204 $x47)))
 (let (($x154 (and $x277 $x126)))
 (let (($x23 (and $x154 $x66)))
 (let (($x305 (and $x23 $x55)))
 (let (($x64 (and $x305 $x102)))
 (let (($x294 (and $x64 $x296)))
 (let (($x165 (and $x112 $x294)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x98 (and $x234 $x165)))
 (let (($x197 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x45 (_ bv3 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x232 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x197)))))))
 (let (($x153 (=> (and $x72 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x196 $x197)))))))
 (let (($x39 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x143 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x143 (or false (or false (and true (or $x188 $x39)))))))
 (let (($x156 (=> (and $x72 $x143) (or false (or false (and true (or $x188 $x39)))))))
 (let (($x229 (and $x156 $x153)))
 (let (($x137 (and $x229 $x98)))
 (let (($x211 (=> $x137 $x240)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x42 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x42) (concat ?x366 (concat ?x163 ?x193)))))
 (let ((?x249 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x345)))
 (let ((?x71 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x79 (bvmul (_ bv4294967295 32) ?x71)))
 (let ((?x37 (bvneg ?x79)))
 (let (($x443 (= ?x37 ?x249)))
 (let (($x240 (= $x443 true)))
 (let (($x102 (= false false)))
 (let (($x22 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x43 (=> $x22 $x102)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x112 (_ bv1 32))))
 (let (($x78 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x301 (= $x78 $x198)))
 (let (($x36 (= ?x112 (_ bv0 32))))
 (let (($x209 (= $x22 $x36)))
 (let (($x255 (and (and $x209 $x301) $x43)))
 (let (($x296 (= $x255 true)))
 (let (($x269 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x269 $x102)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x242 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x242 (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x166 (= $x162 $x5)))
 (let (($x33 (= ?x242 (_ bv0 32))))
 (let (($x375 (= $x269 $x33)))
 (let (($x207 (and (and $x375 $x166) $x64)))
 (let (($x445 (= $x207 true)))
 (let ((?x55 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x55)))
 (let (($x184 (= ?x305 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (= $x184 true)))
 (let (($x190 (= $x35 true)))
 (let ((?x62 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x101 (= (_ bv0 3) ?x62)))
 (let (($x326 (= $x101 true)))
 (let (($x291 (= $x326 true)))
 (let (($x270 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x183 (= $x270 true)))
 (let (($x292 (= $x183 true)))
 (let (($x253 (= $x292 true)))
 (let (($x300 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130))))
 (let (($x203 (and true $x70)))
 (let (($x110 (and $x70 $x203)))
 (let ((?x143 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x54))))
 (let (($x214 (= (bvand ?x16 (_ bv4294967288 32)) ?x16)))
 (let (($x199 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x123 (and $x199 $x214)))
 (let (($x95 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv4 32))) (bvult ?x143 (bvsub ?x143 (_ bv4 32))))))
 (let (($x47 (and (and (and (and (and $x203 $x95) $x199) $x123) $x110) $x300)))
 (let (($x277 (= true $x47)))
 (let (($x72 (not $x105)))
 (let (($x309 (=> $x72 $x277)))
 (let (($x34 (= $x309 true)))
 (let (($x107 (= $x34 true)))
 (let (($x265 (= $x107 true)))
 (let (($x317 (= $x72 true)))
 (let (($x208 (= $x317 true)))
 (let (($x77 (= $x208 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x192)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x304 $x195)))
 (let (($x297 (and $x92 $x295)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x128 $x297)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x261 $x258)))))))
 (let (($x200 (and $x201 $x241)))
 (let (($x32 (= $x200 true)))
 (let (($x204 (= $x32 true)))
 (let (($x44 (= $x204 true)))
 (let (($x61 (and $x44 $x77)))
 (let (($x126 (and $x61 $x265)))
 (let (($x66 (and $x126 $x253)))
 (let (($x272 (and $x66 $x291)))
 (let (($x275 (and $x272 $x190)))
 (let (($x74 (and $x275 $x445)))
 (let (($x294 (and $x74 $x296)))
 (let (($x165 (and $x78 $x294)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x98 (and $x86 $x165)))
 (let (($x111 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x143 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x234 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x111)))))))
 (let (($x50 (=> (and $x72 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x111)))))))
 (let (($x106 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x108 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x108 (or false (or false (and true (or $x52 $x106)))))))
 (let (($x28 (=> (and $x72 $x108) (or false (or false (and true (or $x52 $x106)))))))
 (let (($x206 (and $x28 $x50)))
 (let (($x137 (and $x206 $x98)))
 (let (($x211 (=> $x137 $x240)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x42 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x42) (concat ?x366 (concat ?x163 ?x193)))))
 (let ((?x249 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x345)))
 (let ((?x71 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x79 (bvmul (_ bv4294967295 32) ?x71)))
 (let ((?x37 (bvneg ?x79)))
 (let (($x443 (= ?x37 ?x249)))
 (let (($x240 (= $x443 true)))
 (let (($x102 (= false false)))
 (let (($x22 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x43 (=> $x22 $x102)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x112 (_ bv1 32))))
 (let (($x78 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x301 (= $x78 $x198)))
 (let (($x36 (= ?x112 (_ bv0 32))))
 (let (($x209 (= $x22 $x36)))
 (let (($x255 (and (and $x209 $x301) $x43)))
 (let (($x296 (= $x255 true)))
 (let (($x269 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x269 $x102)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x242 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x242 (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x166 (= $x162 $x5)))
 (let (($x33 (= ?x242 (_ bv0 32))))
 (let (($x375 (= $x269 $x33)))
 (let (($x207 (and (and $x375 $x166) $x64)))
 (let (($x445 (= $x207 true)))
 (let ((?x55 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x55)))
 (let (($x184 (= ?x305 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (= $x184 true)))
 (let (($x190 (= $x35 true)))
 (let ((?x62 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x101 (= (_ bv0 3) ?x62)))
 (let (($x326 (= $x101 true)))
 (let (($x291 (= $x326 true)))
 (let (($x270 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x183 (= $x270 true)))
 (let (($x292 (= $x183 true)))
 (let (($x253 (= $x292 true)))
 (let (($x300 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130))))
 (let (($x203 (and true $x70)))
 (let (($x110 (and $x70 $x203)))
 (let ((?x143 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x54))))
 (let (($x214 (= (bvand ?x16 (_ bv4294967288 32)) ?x16)))
 (let (($x199 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x123 (and $x199 $x214)))
 (let (($x95 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv4 32))) (bvult ?x143 (bvsub ?x143 (_ bv4 32))))))
 (let (($x47 (and (and (and (and (and $x203 $x95) $x199) $x123) $x110) $x300)))
 (let (($x277 (= true $x47)))
 (let (($x72 (not $x105)))
 (let (($x309 (=> $x72 $x277)))
 (let (($x34 (= $x309 true)))
 (let (($x107 (= $x34 true)))
 (let (($x265 (= $x107 true)))
 (let (($x317 (= $x72 true)))
 (let (($x208 (= $x317 true)))
 (let (($x77 (= $x208 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x192)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x304 $x195)))
 (let (($x297 (and $x92 $x295)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x128 $x297)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x261 $x258)))))))
 (let (($x200 (and $x201 $x241)))
 (let (($x32 (= $x200 true)))
 (let (($x204 (= $x32 true)))
 (let (($x44 (= $x204 true)))
 (let (($x61 (and $x44 $x77)))
 (let (($x126 (and $x61 $x265)))
 (let (($x66 (and $x126 $x253)))
 (let (($x272 (and $x66 $x291)))
 (let (($x275 (and $x272 $x190)))
 (let (($x74 (and $x275 $x445)))
 (let (($x294 (and $x74 $x296)))
 (let (($x165 (and $x78 $x294)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x98 (and $x86 $x165)))
 (let (($x111 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x143 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x234 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x111)))))))
 (let (($x50 (=> (and $x72 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x111)))))))
 (let (($x106 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x108 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x108 (or false (or false (and true (or $x52 $x106)))))))
 (let (($x28 (=> (and $x72 $x108) (or false (or false (and true (or $x52 $x106)))))))
 (let (($x206 (and $x28 $x50)))
 (let (($x137 (and $x206 $x98)))
 (let (($x211 (=> $x137 $x240)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x267 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x267) (concat ?x211 (concat ?x249 ?x7)))))
 (let ((?x202 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x268)))
 (let ((?x163 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x193 (bvmul (_ bv4294967295 32) ?x163)))
 (let ((?x287 (bvneg ?x193)))
 (let (($x161 (= ?x287 ?x202)))
 (let (($x227 (= $x161 true)))
 (let (($x205 (= false false)))
 (let (($x301 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x98 (=> $x301 $x205)))
 (let (($x114 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x165 (not $x114)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x117 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x117 (_ bv1 32))))
 (let (($x294 (= $x114 $x296)))
 (let (($x43 (= ?x117 (_ bv0 32))))
 (let (($x255 (= $x301 $x43)))
 (let (($x71 (and (and (and $x255 $x294) $x165) $x98)))
 (let (($x79 (= $x71 true)))
 (let (($x375 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x375 $x205)))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x74 (not $x64)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x166 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x166 (_ bv1 32))))
 (let (($x445 (= $x64 $x207)))
 (let (($x138 (= ?x166 (_ bv0 32))))
 (let (($x102 (= $x375 $x138)))
 (let (($x209 (and (and (and $x102 $x445) $x74) $x22)))
 (let (($x78 (= $x209 true)))
 (let ((?x190 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x190)))
 (let (($x269 (= ?x275 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= $x269 true)))
 (let (($x99 (= $x178 true)))
 (let ((?x245 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= (_ bv0 3) ?x245)))
 (let (($x55 (= $x238 true)))
 (let (($x305 (= $x55 true)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x23 true)))
 (let (($x101 (= $x62 true)))
 (let (($x326 (= $x101 true)))
 (let (($x47 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x203 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x203) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x203))))
 (let (($x95 (and true $x38)))
 (let (($x189 (and $x38 $x95)))
 (let ((?x108 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x147))))
 (let (($x110 (= (bvand ?x214 (_ bv4294967288 32)) ?x214)))
 (let (($x239 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x149 (and $x239 $x110)))
 (let (($x247 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 (_ bv4 32))) (bvult ?x108 (bvsub ?x108 (_ bv4 32))))))
 (let (($x265 (and (and (and (and (and $x95 $x247) $x239) $x149) $x189) $x47)))
 (let (($x126 (= true $x265)))
 (let (($x72 (not $x105)))
 (let (($x154 (=> $x72 $x126)))
 (let (($x270 (= $x154 true)))
 (let (($x183 (= $x270 true)))
 (let (($x292 (= $x183 true)))
 (let (($x130 (= $x72 true)))
 (let (($x181 (= $x130 true)))
 (let (($x185 (= $x181 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x32)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x241 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x295 $x241)))
 (let (($x44 (and $x200 $x204)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x82 $x44)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x49)))))))
 (let (($x208 (and $x192 $x317)))
 (let (($x77 (= $x208 true)))
 (let (($x61 (= $x77 true)))
 (let (($x148 (= $x61 true)))
 (let (($x70 (and $x148 $x185)))
 (let (($x253 (and $x70 $x292)))
 (let (($x291 (and $x253 $x326)))
 (let (($x274 (and $x291 $x305)))
 (let (($x242 (and $x274 $x99)))
 (let (($x198 (and $x242 $x78)))
 (let (($x37 (and $x198 $x79)))
 (let (($x237 (and $x114 $x37)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x177 (and $x116 $x237)))
 (let (($x153 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x108 (_ bv3 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x86 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x153)))))))
 (let (($x17 (=> (and $x72 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x232 $x153)))))))
 (let (($x156 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x196 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x197 (=> $x196 (or false (or false (and true (or $x18 $x156)))))))
 (let (($x155 (=> (and $x72 $x196) (or false (or false (and true (or $x18 $x156)))))))
 (let (($x59 (and $x155 $x17)))
 (let (($x366 (and $x59 $x177)))
 (let (($x120 (=> $x366 $x227)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x267 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x267) (concat ?x211 (concat ?x249 ?x7)))))
 (let ((?x202 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x268)))
 (let ((?x163 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x193 (bvmul (_ bv4294967295 32) ?x163)))
 (let ((?x287 (bvneg ?x193)))
 (let (($x161 (= ?x287 ?x202)))
 (let (($x227 (= $x161 true)))
 (let (($x205 (= false false)))
 (let (($x301 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x98 (=> $x301 $x205)))
 (let (($x114 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x165 (not $x114)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x117 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x117 (_ bv1 32))))
 (let (($x294 (= $x114 $x296)))
 (let (($x43 (= ?x117 (_ bv0 32))))
 (let (($x255 (= $x301 $x43)))
 (let (($x71 (and (and (and $x255 $x294) $x165) $x98)))
 (let (($x79 (= $x71 true)))
 (let (($x375 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x375 $x205)))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x74 (not $x64)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x166 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x166 (_ bv1 32))))
 (let (($x445 (= $x64 $x207)))
 (let (($x138 (= ?x166 (_ bv0 32))))
 (let (($x102 (= $x375 $x138)))
 (let (($x209 (and (and (and $x102 $x445) $x74) $x22)))
 (let (($x78 (= $x209 true)))
 (let ((?x190 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x190)))
 (let (($x269 (= ?x275 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= $x269 true)))
 (let (($x99 (= $x178 true)))
 (let ((?x245 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= (_ bv0 3) ?x245)))
 (let (($x55 (= $x238 true)))
 (let (($x305 (= $x55 true)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x23 true)))
 (let (($x101 (= $x62 true)))
 (let (($x326 (= $x101 true)))
 (let (($x47 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x203 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x203) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x203))))
 (let (($x95 (and true $x38)))
 (let (($x189 (and $x38 $x95)))
 (let ((?x108 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x147))))
 (let (($x110 (= (bvand ?x214 (_ bv4294967288 32)) ?x214)))
 (let (($x239 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x149 (and $x239 $x110)))
 (let (($x247 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 (_ bv4 32))) (bvult ?x108 (bvsub ?x108 (_ bv4 32))))))
 (let (($x265 (and (and (and (and (and $x95 $x247) $x239) $x149) $x189) $x47)))
 (let (($x126 (= true $x265)))
 (let (($x72 (not $x105)))
 (let (($x154 (=> $x72 $x126)))
 (let (($x270 (= $x154 true)))
 (let (($x183 (= $x270 true)))
 (let (($x292 (= $x183 true)))
 (let (($x130 (= $x72 true)))
 (let (($x181 (= $x130 true)))
 (let (($x185 (= $x181 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x32)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x241 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x295 $x241)))
 (let (($x44 (and $x200 $x204)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x82 $x44)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x49)))))))
 (let (($x208 (and $x192 $x317)))
 (let (($x77 (= $x208 true)))
 (let (($x61 (= $x77 true)))
 (let (($x148 (= $x61 true)))
 (let (($x70 (and $x148 $x185)))
 (let (($x253 (and $x70 $x292)))
 (let (($x291 (and $x253 $x326)))
 (let (($x274 (and $x291 $x305)))
 (let (($x242 (and $x274 $x99)))
 (let (($x198 (and $x242 $x78)))
 (let (($x37 (and $x198 $x79)))
 (let (($x237 (and $x114 $x37)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x177 (and $x116 $x237)))
 (let (($x153 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x108 (_ bv3 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x86 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x153)))))))
 (let (($x17 (=> (and $x72 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x232 $x153)))))))
 (let (($x156 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x196 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x197 (=> $x196 (or false (or false (and true (or $x18 $x156)))))))
 (let (($x155 (=> (and $x72 $x196) (or false (or false (and true (or $x18 $x156)))))))
 (let (($x59 (and $x155 $x17)))
 (let (($x366 (and $x59 $x177)))
 (let (($x120 (=> $x366 $x227)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x45 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem ?x45) (concat ?x299 (concat ?x219 ?x307)))))
 (let ((?x442 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x280)))
 (let ((?x346 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x279 (bvmul (_ bv4294967295 32) ?x346)))
 (let ((?x337 (bvneg ?x279)))
 (let (($x228 (= ?x337 ?x442)))
 (let (($x333 (= $x228 true)))
 (let ((?x52 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x361))))
 (let ((?x222 (bvadd ?x341 (_ bv4 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x58))))
 (let (($x290 (= (_ bv0 32) ?x335)))
 (let ((?x343 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x455 (bvuge ?x343 (_ bv1 32))))
 (let (($x252 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x285 (= $x252 $x455)))
 (let (($x286 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (and $x26 $x286)))
 (let (($x263 (=> $x243 $x285)))
 (let (($x223 (= ?x343 (_ bv0 32))))
 (let (($x339 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x288 (= $x339 $x223)))
 (let (($x347 (=> $x243 $x288)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x322))))
 (let (($x225 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x342)))
 (let (($x21 (=> $x243 $x225)))
 (let (($x327 (= (_ bv0 32) ?x341)))
 (let ((?x330 (ite $x327 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x330 (_ bv1 32))))
 (let (($x251 (= $x286 $x85)))
 (let (($x124 (=> $x26 $x251)))
 (let (($x224 (= ?x330 (_ bv0 32))))
 (let (($x315 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x250 (= $x315 $x224)))
 (let (($x441 (=> $x26 $x250)))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x280)))
 (let (($x293 (=> $x26 $x217)))
 (let (($x209 (= false false)))
 (let (($x93 (and $x26 $x315)))
 (let (($x10 (=> $x93 $x209)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x65 (=> $x131 $x209)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x262 (_ bv1 32))))
 (let (($x226 (= $x26 $x191)))
 (let (($x133 (= ?x262 (_ bv0 32))))
 (let (($x160 (= $x131 $x133)))
 (let (($x336 (and (and (and (and (and (and $x160 $x226) $x65) $x10) $x293) $x441) $x124)))
 (let (($x444 (and (and (and $x336 $x21) $x347) $x263)))
 (let (($x338 (= $x444 true)))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x103 (concat ?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x211 (concat ?x240 (concat ?x193 ?x103))))
 (let ((?x67 (bvadd ?x211 (_ bv4 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x176))))
 (let (($x63 (= (_ bv0 32) ?x233)))
 (let ((?x141 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x298 (bvuge ?x141 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x80 (= $x220 $x298)))
 (let (($x161 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x36 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x168 (and $x36 $x161)))
 (let (($x308 (=> $x168 $x80)))
 (let (($x244 (= ?x141 (_ bv0 32))))
 (let (($x212 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x75 (= $x212 $x244)))
 (let (($x48 (=> $x168 $x75)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x257))))
 (let (($x186 (= input.spec-%var-l-1.2.1.2.0 ?x340)))
 (let (($x278 (=> $x168 $x186)))
 (let (($x345 (= (_ bv0 32) ?x211)))
 (let ((?x249 (ite $x345 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x249 (_ bv1 32))))
 (let (($x120 (= $x161 $x227)))
 (let (($x187 (=> $x36 $x120)))
 (let (($x79 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x268 (and $x36 $x79)))
 (let (($x202 (=> $x268 $x209)))
 (let (($x7 (= ?x249 (_ bv0 32))))
 (let (($x443 (= $x79 $x7)))
 (let (($x129 (=> $x36 $x443)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x43)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x296)))
 (let (($x194 (= input.spec-%var-l-1.2.0 ?x165)))
 (let (($x98 (=> $x36 $x194)))
 (let (($x102 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (=> $x102 $x209)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x445 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x445 (_ bv1 32))))
 (let (($x22 (= $x36 $x205)))
 (let (($x112 (= ?x445 (_ bv0 32))))
 (let (($x74 (= $x102 $x112)))
 (let (($x90 (and (and (and (and (and (and $x74 $x22) $x78) $x98) $x129) $x202) $x187)))
 (let (($x331 (and (and (and $x90 $x278) $x48) $x308)))
 (let (($x13 (= $x331 true)))
 (let ((?x99 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x99)))
 (let (($x375 (= ?x242 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= $x375 true)))
 (let (($x5 (= $x162 true)))
 (let ((?x184 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (= (_ bv0 3) ?x184)))
 (let (($x190 (= $x35 true)))
 (let (($x275 (= $x190 true)))
 (let (($x272 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x272 true)))
 (let (($x238 (= $x245 true)))
 (let (($x55 (= $x238 true)))
 (let (($x265 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x95 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x199 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95))))
 (let (($x247 (and true $x199)))
 (let (($x300 (and $x199 $x247)))
 (let ((?x196 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x281))))
 (let (($x189 (= (bvand ?x110 (_ bv4294967288 32)) ?x110)))
 (let (($x54 (= (bvand ?x196 (_ bv4294967292 32)) ?x196)))
 (let (($x107 (and $x54 $x189)))
 (let (($x309 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x196 (bvsub ?x196 (_ bv4 32))) (bvult ?x196 (bvsub ?x196 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x247 $x309) $x54) $x107) $x300) $x265)))
 (let (($x253 (= true $x292)))
 (let (($x72 (not $x105)))
 (let (($x66 (=> $x72 $x253)))
 (let (($x23 (= $x66 true)))
 (let (($x62 (= $x23 true)))
 (let (($x101 (= $x62 true)))
 (let (($x203 (= $x72 true)))
 (let (($x179 (= $x203 true)))
 (let (($x81 (= $x179 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x77)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x317 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x204 $x317)))
 (let (($x148 (and $x208 $x61)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x128 $x148)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x258)))))))
 (let (($x181 (and $x32 $x130)))
 (let (($x185 (= $x181 true)))
 (let (($x70 (= $x185 true)))
 (let (($x140 (= $x70 true)))
 (let (($x38 (and $x140 $x81)))
 (let (($x326 (and $x38 $x101)))
 (let (($x305 (and $x326 $x55)))
 (let (($x15 (and $x305 $x275)))
 (let (($x166 (and $x15 $x5)))
 (let (($x51 (and $x166 $x13)))
 (let (($x475 (and $x51 $x338)))
 (let (($x332 (and $x26 $x475)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x478 (and $x100 $x332)))
 (let (($x50 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x196 (_ bv3 32))))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x116 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x50)))))))
 (let (($x271 (=> (and $x72 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x234 $x50)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x111 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x52 (_ bv1 32))) (or false (or false (and true (or $x30 $x28)))))))
 (let (($x42 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x52 (_ bv1 32)))) (or false (or false (and true (or $x30 $x28)))))))
 (let (($x230 (and $x42 $x271)))
 (let (($x313 (and $x230 $x478)))
 (let (($x182 (=> $x313 $x333)))
 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x45 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem ?x45) (concat ?x299 (concat ?x219 ?x307)))))
 (let ((?x442 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x280)))
 (let ((?x346 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x279 (bvmul (_ bv4294967295 32) ?x346)))
 (let ((?x337 (bvneg ?x279)))
 (let (($x228 (= ?x337 ?x442)))
 (let (($x333 (= $x228 true)))
 (let ((?x52 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x361))))
 (let ((?x222 (bvadd ?x341 (_ bv4 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x58))))
 (let (($x290 (= (_ bv0 32) ?x335)))
 (let ((?x343 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x455 (bvuge ?x343 (_ bv1 32))))
 (let (($x252 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x285 (= $x252 $x455)))
 (let (($x286 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x26 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (and $x26 $x286)))
 (let (($x263 (=> $x243 $x285)))
 (let (($x223 (= ?x343 (_ bv0 32))))
 (let (($x339 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x288 (= $x339 $x223)))
 (let (($x347 (=> $x243 $x288)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x322))))
 (let (($x225 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x342)))
 (let (($x21 (=> $x243 $x225)))
 (let (($x327 (= (_ bv0 32) ?x341)))
 (let ((?x330 (ite $x327 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x330 (_ bv1 32))))
 (let (($x251 (= $x286 $x85)))
 (let (($x124 (=> $x26 $x251)))
 (let (($x224 (= ?x330 (_ bv0 32))))
 (let (($x315 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x250 (= $x315 $x224)))
 (let (($x441 (=> $x26 $x250)))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x280)))
 (let (($x293 (=> $x26 $x217)))
 (let (($x209 (= false false)))
 (let (($x93 (and $x26 $x315)))
 (let (($x10 (=> $x93 $x209)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x65 (=> $x131 $x209)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x262 (_ bv1 32))))
 (let (($x226 (= $x26 $x191)))
 (let (($x133 (= ?x262 (_ bv0 32))))
 (let (($x160 (= $x131 $x133)))
 (let (($x336 (and (and (and (and (and (and $x160 $x226) $x65) $x10) $x293) $x441) $x124)))
 (let (($x444 (and (and (and $x336 $x21) $x347) $x263)))
 (let (($x338 (= $x444 true)))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x103 (concat ?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x211 (concat ?x240 (concat ?x193 ?x103))))
 (let ((?x67 (bvadd ?x211 (_ bv4 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x176))))
 (let (($x63 (= (_ bv0 32) ?x233)))
 (let ((?x141 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x298 (bvuge ?x141 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x80 (= $x220 $x298)))
 (let (($x161 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x36 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x168 (and $x36 $x161)))
 (let (($x308 (=> $x168 $x80)))
 (let (($x244 (= ?x141 (_ bv0 32))))
 (let (($x212 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x75 (= $x212 $x244)))
 (let (($x48 (=> $x168 $x75)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x257))))
 (let (($x186 (= input.spec-%var-l-1.2.1.2.0 ?x340)))
 (let (($x278 (=> $x168 $x186)))
 (let (($x345 (= (_ bv0 32) ?x211)))
 (let ((?x249 (ite $x345 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x249 (_ bv1 32))))
 (let (($x120 (= $x161 $x227)))
 (let (($x187 (=> $x36 $x120)))
 (let (($x79 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x268 (and $x36 $x79)))
 (let (($x202 (=> $x268 $x209)))
 (let (($x7 (= ?x249 (_ bv0 32))))
 (let (($x443 (= $x79 $x7)))
 (let (($x129 (=> $x36 $x443)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x43)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x296)))
 (let (($x194 (= input.spec-%var-l-1.2.0 ?x165)))
 (let (($x98 (=> $x36 $x194)))
 (let (($x102 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (=> $x102 $x209)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x445 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x445 (_ bv1 32))))
 (let (($x22 (= $x36 $x205)))
 (let (($x112 (= ?x445 (_ bv0 32))))
 (let (($x74 (= $x102 $x112)))
 (let (($x90 (and (and (and (and (and (and $x74 $x22) $x78) $x98) $x129) $x202) $x187)))
 (let (($x331 (and (and (and $x90 $x278) $x48) $x308)))
 (let (($x13 (= $x331 true)))
 (let ((?x99 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x99)))
 (let (($x375 (= ?x242 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= $x375 true)))
 (let (($x5 (= $x162 true)))
 (let ((?x184 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (= (_ bv0 3) ?x184)))
 (let (($x190 (= $x35 true)))
 (let (($x275 (= $x190 true)))
 (let (($x272 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x272 true)))
 (let (($x238 (= $x245 true)))
 (let (($x55 (= $x238 true)))
 (let (($x265 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x95 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x199 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95))))
 (let (($x247 (and true $x199)))
 (let (($x300 (and $x199 $x247)))
 (let ((?x196 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x281))))
 (let (($x189 (= (bvand ?x110 (_ bv4294967288 32)) ?x110)))
 (let (($x54 (= (bvand ?x196 (_ bv4294967292 32)) ?x196)))
 (let (($x107 (and $x54 $x189)))
 (let (($x309 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x196 (bvsub ?x196 (_ bv4 32))) (bvult ?x196 (bvsub ?x196 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x247 $x309) $x54) $x107) $x300) $x265)))
 (let (($x253 (= true $x292)))
 (let (($x72 (not $x105)))
 (let (($x66 (=> $x72 $x253)))
 (let (($x23 (= $x66 true)))
 (let (($x62 (= $x23 true)))
 (let (($x101 (= $x62 true)))
 (let (($x203 (= $x72 true)))
 (let (($x179 (= $x203 true)))
 (let (($x81 (= $x179 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x77)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x317 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x204 $x317)))
 (let (($x148 (and $x208 $x61)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x128 $x148)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x258)))))))
 (let (($x181 (and $x32 $x130)))
 (let (($x185 (= $x181 true)))
 (let (($x70 (= $x185 true)))
 (let (($x140 (= $x70 true)))
 (let (($x38 (and $x140 $x81)))
 (let (($x326 (and $x38 $x101)))
 (let (($x305 (and $x326 $x55)))
 (let (($x15 (and $x305 $x275)))
 (let (($x166 (and $x15 $x5)))
 (let (($x51 (and $x166 $x13)))
 (let (($x475 (and $x51 $x338)))
 (let (($x332 (and $x26 $x475)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x478 (and $x100 $x332)))
 (let (($x50 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x196 (_ bv3 32))))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x116 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x50)))))))
 (let (($x271 (=> (and $x72 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x234 $x50)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x111 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x52 (_ bv1 32))) (or false (or false (and true (or $x30 $x28)))))))
 (let (($x42 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x52 (_ bv1 32)))) (or false (or false (and true (or $x30 $x28)))))))
 (let (($x230 (and $x42 $x271)))
 (let (($x313 (and $x230 $x478)))
 (let (($x182 (=> $x313 $x333)))
 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x300))))
 (let (($x37 (bvule ?x66 (_ bv4294967294 32))))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x301 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x301 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x296 (= $x195 $x43)))
 (let (($x117 (= ?x301 (_ bv0 32))))
 (let (($x114 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x215 (= $x114 $x117)))
 (let (($x165 (and $x215 $x296)))
 (let (($x194 (= $x165 true)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x22 (ite $x205 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x22 (_ bv1 32))))
 (let (($x78 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (= $x78 $x318)))
 (let (($x97 (= ?x22 (_ bv0 32))))
 (let (($x74 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x209 (= $x74 $x97)))
 (let (($x294 (and $x209 $x198)))
 (let (($x137 (= $x294 true)))
 (let ((?x138 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= (_ bv0 3) ?x138)))
 (let (($x64 (= $x102 true)))
 (let (($x207 (= $x64 true)))
 (let (($x242 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x242 true)))
 (let (($x375 (= $x33 true)))
 (let (($x162 (= $x375 true)))
 (let (($x245 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54))))
 (let (($x169 (and true $x147)))
 (let (($x291 (and $x147 $x169)))
 (let (($x101 (= (bvand ?x66 (_ bv4294967288 32)) ?x66)))
 (let (($x149 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x326 (and $x149 $x101)))
 (let (($x281 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x184 (and (and (and (and (and $x169 $x281) $x149) $x326) $x291) $x245)))
 (let (($x35 (= true $x184)))
 (let (($x72 (not $x105)))
 (let (($x190 (=> $x72 $x35)))
 (let (($x275 (= $x190 true)))
 (let (($x15 (= $x275 true)))
 (let (($x269 (= $x15 true)))
 (let (($x309 (= $x72 true)))
 (let (($x126 (= $x309 true)))
 (let (($x76 (= $x126 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x95)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x179 $x38)))
 (let (($x266 (and $x152 $x109)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x44 $x266)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x148)))))))
 (let (($x247 (and $x203 $x199)))
 (let (($x113 (= $x247 true)))
 (let (($x277 (= $x113 true)))
 (let (($x260 (= $x277 true)))
 (let ((?x82 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x82)))
 (let (($x241 (= ?x295 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= $x241 true)))
 (let (($x49 (= $x32 true)))
 (let (($x239 (and $x49 $x260)))
 (let (($x68 (and $x239 $x76)))
 (let (($x178 (and $x68 $x269)))
 (let (($x5 (and $x178 $x162)))
 (let (($x445 (and $x5 $x207)))
 (let (($x255 (and $x445 $x137)))
 (let (($x98 (and $x255 $x194)))
 (let (($x284 (and $x195 $x98)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x71 (and $x210 $x284)))
 (let (($x17 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x56 (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x100 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x17)))))))
 (let (($x87 (=> (and $x72 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x86 $x17)))))))
 (let (($x155 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x232 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x153 (=> $x232 (or false (or false (and true (or $x197 $x155)))))))
 (let (($x267 (=> (and $x72 $x232) (or false (or false (and true (or $x197 $x155)))))))
 (let (($x229 (and $x267 $x87)))
 (let (($x79 (and $x229 $x71)))
 (let (($x163 (=> $x79 $x240)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x300))))
 (let (($x37 (bvule ?x66 (_ bv4294967294 32))))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x301 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x301 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x296 (= $x195 $x43)))
 (let (($x117 (= ?x301 (_ bv0 32))))
 (let (($x114 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x215 (= $x114 $x117)))
 (let (($x165 (and $x215 $x296)))
 (let (($x194 (= $x165 true)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x22 (ite $x205 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x22 (_ bv1 32))))
 (let (($x78 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (= $x78 $x318)))
 (let (($x97 (= ?x22 (_ bv0 32))))
 (let (($x74 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x209 (= $x74 $x97)))
 (let (($x294 (and $x209 $x198)))
 (let (($x137 (= $x294 true)))
 (let ((?x138 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= (_ bv0 3) ?x138)))
 (let (($x64 (= $x102 true)))
 (let (($x207 (= $x64 true)))
 (let (($x242 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x242 true)))
 (let (($x375 (= $x33 true)))
 (let (($x162 (= $x375 true)))
 (let (($x245 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54))))
 (let (($x169 (and true $x147)))
 (let (($x291 (and $x147 $x169)))
 (let (($x101 (= (bvand ?x66 (_ bv4294967288 32)) ?x66)))
 (let (($x149 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x326 (and $x149 $x101)))
 (let (($x281 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x184 (and (and (and (and (and $x169 $x281) $x149) $x326) $x291) $x245)))
 (let (($x35 (= true $x184)))
 (let (($x72 (not $x105)))
 (let (($x190 (=> $x72 $x35)))
 (let (($x275 (= $x190 true)))
 (let (($x15 (= $x275 true)))
 (let (($x269 (= $x15 true)))
 (let (($x309 (= $x72 true)))
 (let (($x126 (= $x309 true)))
 (let (($x76 (= $x126 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x95)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x179 $x38)))
 (let (($x266 (and $x152 $x109)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x44 $x266)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x148)))))))
 (let (($x247 (and $x203 $x199)))
 (let (($x113 (= $x247 true)))
 (let (($x277 (= $x113 true)))
 (let (($x260 (= $x277 true)))
 (let ((?x82 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x82)))
 (let (($x241 (= ?x295 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= $x241 true)))
 (let (($x49 (= $x32 true)))
 (let (($x239 (and $x49 $x260)))
 (let (($x68 (and $x239 $x76)))
 (let (($x178 (and $x68 $x269)))
 (let (($x5 (and $x178 $x162)))
 (let (($x445 (and $x5 $x207)))
 (let (($x255 (and $x445 $x137)))
 (let (($x98 (and $x255 $x194)))
 (let (($x284 (and $x195 $x98)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x71 (and $x210 $x284)))
 (let (($x17 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x56 (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x100 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x17)))))))
 (let (($x87 (=> (and $x72 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x86 $x17)))))))
 (let (($x155 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x232 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x153 (=> $x232 (or false (or false (and true (or $x197 $x155)))))))
 (let (($x267 (=> (and $x72 $x232) (or false (or false (and true (or $x197 $x155)))))))
 (let (($x229 (and $x267 $x87)))
 (let (($x79 (and $x229 $x71)))
 (let (($x163 (=> $x79 $x240)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 98
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2662X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2662X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x212 (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2662X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2662X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x173 (concat ?x356 ?x67))))
 (let (($x150 (= ?x119 ?x119)))
 (let ((?x30 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x177))))
 (let (($x7 (= (_ bv0 32) ?x345)))
 (let ((?x443 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x443 (_ bv1 32))))
 (let (($x176 (=> $x120 $x150)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2662X))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv2 32))) ?x306)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv3 32))) ?x89)))
 (let (($x340 (= ?x289 ?x289)))
 (let (($x186 (=> $x120 $x340)))
 (let ((?x232 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x189))))
 (let (($x329 (= (_ bv0 32) ?x101)))
 (let ((?x268 (ite $x329 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x268 (_ bv1 32))))
 (let (($x90 (= $x120 $x187)))
 (let (($x161 (= false false)))
 (let (($x129 (= ?x443 (_ bv0 32))))
 (let (($x227 (=> $x129 $x161)))
 (let (($x141 (and (and (and (and (= ?x345 ?x101) (= $x129 (= ?x268 (_ bv0 32)))) $x227) $x90) $x186)))
 (let (($x244 (and $x141 $x176)))
 (let (($x193 (not true)))
 (let (($x75 (or $x193 $x244)))
 (let (($x163 (= true true)))
 (let (($x48 (and $x163 $x75)))
 (let (($x273 (= $x48 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x195 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x195 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x98 (= $x165 $x194)))
 (let (($x43 (= ?x195 (_ bv0 32))))
 (let (($x301 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (= $x301 $x43)))
 (let (($x284 (and $x296 $x98)))
 (let (($x71 (= $x284 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x209 (_ bv1 32))))
 (let (($x295 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x294 (= $x295 $x198)))
 (let (($x78 (= ?x209 (_ bv0 32))))
 (let (($x97 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x318 (= $x97 $x78)))
 (let (($x137 (and $x318 $x294)))
 (let (($x255 (= $x137 true)))
 (let ((?x112 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= (_ bv0 3) ?x112)))
 (let (($x36 (= $x74 true)))
 (let (($x205 (= $x36 true)))
 (let (($x166 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x166 true)))
 (let (($x102 (= $x138 true)))
 (let (($x64 (= $x102 true)))
 (let (($x184 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x281 (and true $x16)))
 (let (($x272 (and $x16 $x281)))
 (let (($x291 (= (bvand ?x101 (_ bv4294967288 32)) ?x101)))
 (let (($x183 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x274 (and $x183 $x291)))
 (let (($x55 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv4 32))) (bvult ?x232 (bvsub ?x232 (_ bv4 32))))))
 (let (($x269 (and (and (and (and (and $x281 $x55) $x183) $x274) $x272) $x184)))
 (let (($x178 (= true $x269)))
 (let (($x72 (not $x105)))
 (let (($x99 (=> $x72 $x178)))
 (let (($x242 (= $x99 true)))
 (let (($x33 (= $x242 true)))
 (let (($x375 (= $x33 true)))
 (let (($x54 (= $x72 true)))
 (let (($x11 (= $x54 true)))
 (let (($x6 (= $x11 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x113)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x109 $x199)))
 (let (($x260 (and $x247 $x277)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x130 $x260)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x204)))))))
 (let (($x309 (and $x95 $x239)))
 (let (($x126 (= $x309 true)))
 (let (($x76 (= $x126 true)))
 (let (($x68 (= $x76 true)))
 (let ((?x32 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x32)))
 (let (($x208 (= ?x49 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= $x208 true)))
 (let (($x77 (= $x140 true)))
 (let (($x154 (and $x77 $x68)))
 (let (($x147 (and $x154 $x6)))
 (let (($x162 (and $x147 $x375)))
 (let (($x207 (and $x162 $x64)))
 (let (($x22 (and $x207 $x205)))
 (let (($x200 (and $x22 $x255)))
 (let (($x79 (and $x200 $x71)))
 (let (($x37 (and $x295 $x79)))
 (let (($x258 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x258 $x37)))
 (let (($x271 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x232 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x210 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x271)))))))
 (let (($x310 (=> (and $x72 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x271)))))))
 (let (($x42 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x50 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x30 (_ bv1 32))) (or false (or false (and true (or $x111 $x42)))))))
 (let (($x45 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x30 (_ bv1 32)))) (or false (or false (and true (or $x111 $x42)))))))
 (let (($x206 (and $x45 $x310)))
 (let (($x240 (and $x206 $x118)))
 (let (($x220 (=> $x240 $x273)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2662X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2662X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x212 (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2662X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2662X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x173 (concat ?x356 ?x67))))
 (let (($x150 (= ?x119 ?x119)))
 (let ((?x30 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x177))))
 (let (($x7 (= (_ bv0 32) ?x345)))
 (let ((?x443 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x443 (_ bv1 32))))
 (let (($x176 (=> $x120 $x150)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2662X))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv2 32))) ?x306)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2662X (_ bv3 32))) ?x89)))
 (let (($x340 (= ?x289 ?x289)))
 (let (($x186 (=> $x120 $x340)))
 (let ((?x232 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x189))))
 (let (($x329 (= (_ bv0 32) ?x101)))
 (let ((?x268 (ite $x329 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x268 (_ bv1 32))))
 (let (($x90 (= $x120 $x187)))
 (let (($x161 (= false false)))
 (let (($x129 (= ?x443 (_ bv0 32))))
 (let (($x227 (=> $x129 $x161)))
 (let (($x141 (and (and (and (and (= ?x345 ?x101) (= $x129 (= ?x268 (_ bv0 32)))) $x227) $x90) $x186)))
 (let (($x244 (and $x141 $x176)))
 (let (($x193 (not true)))
 (let (($x75 (or $x193 $x244)))
 (let (($x163 (= true true)))
 (let (($x48 (and $x163 $x75)))
 (let (($x273 (= $x48 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x195 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x195 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x98 (= $x165 $x194)))
 (let (($x43 (= ?x195 (_ bv0 32))))
 (let (($x301 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (= $x301 $x43)))
 (let (($x284 (and $x296 $x98)))
 (let (($x71 (= $x284 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x209 (_ bv1 32))))
 (let (($x295 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x294 (= $x295 $x198)))
 (let (($x78 (= ?x209 (_ bv0 32))))
 (let (($x97 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x318 (= $x97 $x78)))
 (let (($x137 (and $x318 $x294)))
 (let (($x255 (= $x137 true)))
 (let ((?x112 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= (_ bv0 3) ?x112)))
 (let (($x36 (= $x74 true)))
 (let (($x205 (= $x36 true)))
 (let (($x166 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x166 true)))
 (let (($x102 (= $x138 true)))
 (let (($x64 (= $x102 true)))
 (let (($x184 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x281 (and true $x16)))
 (let (($x272 (and $x16 $x281)))
 (let (($x291 (= (bvand ?x101 (_ bv4294967288 32)) ?x101)))
 (let (($x183 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x274 (and $x183 $x291)))
 (let (($x55 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv4 32))) (bvult ?x232 (bvsub ?x232 (_ bv4 32))))))
 (let (($x269 (and (and (and (and (and $x281 $x55) $x183) $x274) $x272) $x184)))
 (let (($x178 (= true $x269)))
 (let (($x72 (not $x105)))
 (let (($x99 (=> $x72 $x178)))
 (let (($x242 (= $x99 true)))
 (let (($x33 (= $x242 true)))
 (let (($x375 (= $x33 true)))
 (let (($x54 (= $x72 true)))
 (let (($x11 (= $x54 true)))
 (let (($x6 (= $x11 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x113)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x109 $x199)))
 (let (($x260 (and $x247 $x277)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x130 $x260)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x204)))))))
 (let (($x309 (and $x95 $x239)))
 (let (($x126 (= $x309 true)))
 (let (($x76 (= $x126 true)))
 (let (($x68 (= $x76 true)))
 (let ((?x32 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x32)))
 (let (($x208 (= ?x49 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= $x208 true)))
 (let (($x77 (= $x140 true)))
 (let (($x154 (and $x77 $x68)))
 (let (($x147 (and $x154 $x6)))
 (let (($x162 (and $x147 $x375)))
 (let (($x207 (and $x162 $x64)))
 (let (($x22 (and $x207 $x205)))
 (let (($x200 (and $x22 $x255)))
 (let (($x79 (and $x200 $x71)))
 (let (($x37 (and $x295 $x79)))
 (let (($x258 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x258 $x37)))
 (let (($x271 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x232 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x210 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x271)))))))
 (let (($x310 (=> (and $x72 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x271)))))))
 (let (($x42 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x50 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x30 (_ bv1 32))) (or false (or false (and true (or $x111 $x42)))))))
 (let (($x45 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x30 (_ bv1 32)))) (or false (or false (and true (or $x111 $x42)))))))
 (let (($x206 (and $x45 $x310)))
 (let (($x240 (and $x206 $x118)))
 (let (($x220 (=> $x240 $x273)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 99
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x296 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (not $x105)))
 (let (($x118 (=> $x72 $x296)))
 (let (($x274 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x147 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x147) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x147))))
 (let (($x16 (and true $x302)))
 (let (($x305 (and $x302 $x16)))
 (let ((?x234 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x62))))
 (let (($x101 (= (bvand ?x265 (_ bv4294967288 32)) ?x265)))
 (let (($x34 (= (bvand ?x234 (_ bv4294967292 32)) ?x234)))
 (let (($x326 (and $x34 $x101)))
 (let (($x149 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x234 (bvsub ?x234 (_ bv4 32))) (bvult ?x234 (bvsub ?x234 (_ bv4 32))))))
 (let (($x184 (and (and (and (and (and $x16 $x149) $x34) $x326) $x305) $x274)))
 (let (($x269 (= true $x184)))
 (let (($x178 (=> $x72 $x269)))
 (let (($x240 (=> (and $x178 $x72) $x296)))
 (let (($x163 (= $x240 true)))
 (let (($x193 (= $x163 true)))
 (let ((?x215 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x215 (_ bv1 32))))
 (let (($x194 (= $x296 $x165)))
 (let (($x195 (= ?x215 (_ bv0 32))))
 (let (($x117 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x43 (= $x117 $x195)))
 (let (($x98 (and $x43 $x194)))
 (let (($x284 (= $x98 true)))
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x78 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x294 (bvuge ?x78 (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x137 (= $x198 $x294)))
 (let (($x318 (= ?x78 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x295 (= $x82 $x318)))
 (let (($x255 (and $x295 $x137)))
 (let (($x200 (= $x255 true)))
 (let ((?x445 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= (_ bv0 3) ?x445)))
 (let (($x74 (= $x112 true)))
 (let (($x36 (= $x74 true)))
 (let (($x5 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x166 (= $x5 true)))
 (let (($x138 (= $x166 true)))
 (let (($x102 (= $x138 true)))
 (let (($x99 (= $x178 true)))
 (let (($x242 (= $x99 true)))
 (let (($x33 (= $x242 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x239)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x247 $x277)))
 (let (($x126 (and $x260 $x309)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x203 $x126)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x38)))))))
 (let (($x68 (and $x199 $x76)))
 (let (($x154 (= $x68 true)))
 (let (($x54 (= $x154 true)))
 (let (($x11 (= $x54 true)))
 (let ((?x317 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x317)))
 (let (($x77 (= ?x208 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x181 (= $x77 true)))
 (let (($x185 (= $x181 true)))
 (let (($x6 (and $x185 $x11)))
 (let (($x375 (and $x6 $x33)))
 (let (($x64 (and $x375 $x102)))
 (let (($x205 (and $x64 $x36)))
 (let (($x114 (and $x205 $x200)))
 (let (($x71 (and $x114 $x284)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x79 (and $x241 $x71)))
 (let (($x87 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x234 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x258 (=> (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x87)))))))
 (let (($x304 (=> (and $x72 (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x100 $x87)))))))
 (let (($x267 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x86 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x17 (=> $x86 (or false (or false (and true (or $x153 $x267)))))))
 (let (($x143 (=> (and $x72 $x86) (or false (or false (and true (or $x153 $x267)))))))
 (let (($x59 (and $x143 $x304)))
 (let (($x37 (and $x59 $x79)))
 (let (($x287 (=> $x37 $x193)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x296 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (not $x105)))
 (let (($x118 (=> $x72 $x296)))
 (let (($x274 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x147 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x147) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x147))))
 (let (($x16 (and true $x302)))
 (let (($x305 (and $x302 $x16)))
 (let ((?x234 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x62))))
 (let (($x101 (= (bvand ?x265 (_ bv4294967288 32)) ?x265)))
 (let (($x34 (= (bvand ?x234 (_ bv4294967292 32)) ?x234)))
 (let (($x326 (and $x34 $x101)))
 (let (($x149 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x234 (bvsub ?x234 (_ bv4 32))) (bvult ?x234 (bvsub ?x234 (_ bv4 32))))))
 (let (($x184 (and (and (and (and (and $x16 $x149) $x34) $x326) $x305) $x274)))
 (let (($x269 (= true $x184)))
 (let (($x178 (=> $x72 $x269)))
 (let (($x240 (=> (and $x178 $x72) $x296)))
 (let (($x163 (= $x240 true)))
 (let (($x193 (= $x163 true)))
 (let ((?x215 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x215 (_ bv1 32))))
 (let (($x194 (= $x296 $x165)))
 (let (($x195 (= ?x215 (_ bv0 32))))
 (let (($x117 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x43 (= $x117 $x195)))
 (let (($x98 (and $x43 $x194)))
 (let (($x284 (= $x98 true)))
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x78 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x294 (bvuge ?x78 (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x137 (= $x198 $x294)))
 (let (($x318 (= ?x78 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x295 (= $x82 $x318)))
 (let (($x255 (and $x295 $x137)))
 (let (($x200 (= $x255 true)))
 (let ((?x445 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= (_ bv0 3) ?x445)))
 (let (($x74 (= $x112 true)))
 (let (($x36 (= $x74 true)))
 (let (($x5 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x166 (= $x5 true)))
 (let (($x138 (= $x166 true)))
 (let (($x102 (= $x138 true)))
 (let (($x99 (= $x178 true)))
 (let (($x242 (= $x99 true)))
 (let (($x33 (= $x242 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x239)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x247 $x277)))
 (let (($x126 (and $x260 $x309)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x203 $x126)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x38)))))))
 (let (($x68 (and $x199 $x76)))
 (let (($x154 (= $x68 true)))
 (let (($x54 (= $x154 true)))
 (let (($x11 (= $x54 true)))
 (let ((?x317 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x317)))
 (let (($x77 (= ?x208 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x181 (= $x77 true)))
 (let (($x185 (= $x181 true)))
 (let (($x6 (and $x185 $x11)))
 (let (($x375 (and $x6 $x33)))
 (let (($x64 (and $x375 $x102)))
 (let (($x205 (and $x64 $x36)))
 (let (($x114 (and $x205 $x200)))
 (let (($x71 (and $x114 $x284)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x79 (and $x241 $x71)))
 (let (($x87 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x234 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x258 (=> (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x87)))))))
 (let (($x304 (=> (and $x72 (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x100 $x87)))))))
 (let (($x267 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x86 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x17 (=> $x86 (or false (or false (and true (or $x153 $x267)))))))
 (let (($x143 (=> (and $x72 $x86) (or false (or false (and true (or $x153 $x267)))))))
 (let (($x59 (and $x143 $x304)))
 (let (($x37 (and $x59 $x79)))
 (let (($x287 (=> $x37 $x193)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 100
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2738X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2738X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x173 (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv4 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2738X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2738X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x276 (concat ?x67 (concat ?x8 ?x171))))
 (let (($x119 (= ?x276 ?x276)))
 (let ((?x111 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x188))))
 (let (($x329 (= (_ bv0 32) ?x443)))
 (let ((?x268 (ite $x329 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x268 (_ bv1 32))))
 (let (($x150 (=> $x187 $x119)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2738X))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv2 32))) ?x19)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv3 32))) ?x261)))
 (let (($x340 (= ?x289 ?x289)))
 (let (($x186 (=> $x187 $x340)))
 (let ((?x86 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x189))))
 (let (($x282 (= (_ bv0 32) ?x245)))
 (let ((?x53 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x53 (_ bv1 32))))
 (let (($x63 (= $x187 $x90)))
 (let (($x233 (= false false)))
 (let (($x202 (= ?x268 (_ bv0 32))))
 (let (($x120 (=> $x202 $x233)))
 (let (($x48 (and (and (and (and (= ?x443 ?x245) (= $x202 (= ?x53 (_ bv0 32)))) $x120) $x63) $x186)))
 (let (($x273 (and $x48 $x150)))
 (let (($x366 (not true)))
 (let (($x220 (or $x366 $x273)))
 (let (($x28 (= true true)))
 (let (($x298 (and $x28 $x220)))
 (let (($x156 (= $x298 true)))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x284 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x284 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x240 (= $x37 $x118)))
 (let (($x71 (= ?x284 (_ bv0 32))))
 (let (($x165 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (= $x165 $x71)))
 (let (($x163 (and $x79 $x240)))
 (let (($x193 (= $x163 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x255 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (bvuge ?x255 (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x117 (= $x208 $x301)))
 (let (($x200 (= ?x255 (_ bv0 32))))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x114 (= $x137 $x200)))
 (let (($x215 (and $x114 $x117)))
 (let (($x195 (= $x215 true)))
 (let ((?x78 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x318 (= (_ bv0 3) ?x78)))
 (let (($x295 (= $x318 true)))
 (let (($x198 (= $x295 true)))
 (let (($x36 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x205 (= $x36 true)))
 (let (($x22 (= $x205 true)))
 (let (($x82 (= $x22 true)))
 (let (($x242 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110))))
 (let (($x34 (and true $x35)))
 (let (($x178 (and $x35 $x34)))
 (let (($x184 (= (bvand ?x245 (_ bv4294967288 32)) ?x245)))
 (let (($x47 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x269 (and $x47 $x184)))
 (let (($x292 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x86 (bvsub ?x86 (_ bv4 32))) (bvult ?x86 (bvsub ?x86 (_ bv4 32))))))
 (let (($x166 (and (and (and (and (and $x34 $x292) $x47) $x269) $x178) $x242)))
 (let (($x138 (= true $x166)))
 (let (($x72 (not $x105)))
 (let (($x102 (=> $x72 $x138)))
 (let (($x64 (= $x102 true)))
 (let (($x207 (= $x64 true)))
 (let (($x445 (= $x207 true)))
 (let (($x16 (= $x72 true)))
 (let (($x123 (= $x16 true)))
 (let (($x281 (= $x123 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x154)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x309 $x76)))
 (let (($x11 (and $x68 $x54)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x95 $x11)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x70)))))))
 (let (($x122 (and $x239 $x6)))
 (let (($x147 (= $x122 true)))
 (let (($x169 (= $x147 true)))
 (let (($x214 (= $x169 true)))
 (let ((?x181 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x181)))
 (let (($x44 (= ?x185 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x44 true)))
 (let (($x179 (= $x266 true)))
 (let (($x302 (and $x179 $x214)))
 (let (($x238 (and $x302 $x281)))
 (let (($x112 (and $x238 $x445)))
 (let (($x97 (and $x112 $x82)))
 (let (($x294 (and $x97 $x198)))
 (let (($x43 (and $x294 $x195)))
 (let (($x287 (and $x43 $x193)))
 (let (($x211 (and $x208 $x287)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x18 (and $x49 $x211)))
 (let (($x310 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x86 (_ bv3 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x241 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x210 $x310)))))))
 (let (($x192 (=> (and $x72 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x210 $x310)))))))
 (let (($x45 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x271 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32))) (or false (or false (and true (or $x50 $x45)))))))
 (let (($x108 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32)))) (or false (or false (and true (or $x50 $x45)))))))
 (let (($x230 (and $x108 $x192)))
 (let (($x152 (and $x230 $x18)))
 (let (($x52 (=> $x152 $x156)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2738X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2738X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x173 (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv4 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2738X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2738X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x276 (concat ?x67 (concat ?x8 ?x171))))
 (let (($x119 (= ?x276 ?x276)))
 (let ((?x111 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x188))))
 (let (($x329 (= (_ bv0 32) ?x443)))
 (let ((?x268 (ite $x329 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x268 (_ bv1 32))))
 (let (($x150 (=> $x187 $x119)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2738X))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv2 32))) ?x19)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2738X (_ bv3 32))) ?x261)))
 (let (($x340 (= ?x289 ?x289)))
 (let (($x186 (=> $x187 $x340)))
 (let ((?x86 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x189))))
 (let (($x282 (= (_ bv0 32) ?x245)))
 (let ((?x53 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x53 (_ bv1 32))))
 (let (($x63 (= $x187 $x90)))
 (let (($x233 (= false false)))
 (let (($x202 (= ?x268 (_ bv0 32))))
 (let (($x120 (=> $x202 $x233)))
 (let (($x48 (and (and (and (and (= ?x443 ?x245) (= $x202 (= ?x53 (_ bv0 32)))) $x120) $x63) $x186)))
 (let (($x273 (and $x48 $x150)))
 (let (($x366 (not true)))
 (let (($x220 (or $x366 $x273)))
 (let (($x28 (= true true)))
 (let (($x298 (and $x28 $x220)))
 (let (($x156 (= $x298 true)))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x284 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x284 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x240 (= $x37 $x118)))
 (let (($x71 (= ?x284 (_ bv0 32))))
 (let (($x165 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (= $x165 $x71)))
 (let (($x163 (and $x79 $x240)))
 (let (($x193 (= $x163 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x255 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (bvuge ?x255 (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x117 (= $x208 $x301)))
 (let (($x200 (= ?x255 (_ bv0 32))))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x114 (= $x137 $x200)))
 (let (($x215 (and $x114 $x117)))
 (let (($x195 (= $x215 true)))
 (let ((?x78 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x318 (= (_ bv0 3) ?x78)))
 (let (($x295 (= $x318 true)))
 (let (($x198 (= $x295 true)))
 (let (($x36 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x205 (= $x36 true)))
 (let (($x22 (= $x205 true)))
 (let (($x82 (= $x22 true)))
 (let (($x242 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110))))
 (let (($x34 (and true $x35)))
 (let (($x178 (and $x35 $x34)))
 (let (($x184 (= (bvand ?x245 (_ bv4294967288 32)) ?x245)))
 (let (($x47 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x269 (and $x47 $x184)))
 (let (($x292 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x86 (bvsub ?x86 (_ bv4 32))) (bvult ?x86 (bvsub ?x86 (_ bv4 32))))))
 (let (($x166 (and (and (and (and (and $x34 $x292) $x47) $x269) $x178) $x242)))
 (let (($x138 (= true $x166)))
 (let (($x72 (not $x105)))
 (let (($x102 (=> $x72 $x138)))
 (let (($x64 (= $x102 true)))
 (let (($x207 (= $x64 true)))
 (let (($x445 (= $x207 true)))
 (let (($x16 (= $x72 true)))
 (let (($x123 (= $x16 true)))
 (let (($x281 (= $x123 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x154)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x309 $x76)))
 (let (($x11 (and $x68 $x54)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x95 $x11)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x70)))))))
 (let (($x122 (and $x239 $x6)))
 (let (($x147 (= $x122 true)))
 (let (($x169 (= $x147 true)))
 (let (($x214 (= $x169 true)))
 (let ((?x181 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x181)))
 (let (($x44 (= ?x185 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x44 true)))
 (let (($x179 (= $x266 true)))
 (let (($x302 (and $x179 $x214)))
 (let (($x238 (and $x302 $x281)))
 (let (($x112 (and $x238 $x445)))
 (let (($x97 (and $x112 $x82)))
 (let (($x294 (and $x97 $x198)))
 (let (($x43 (and $x294 $x195)))
 (let (($x287 (and $x43 $x193)))
 (let (($x211 (and $x208 $x287)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x18 (and $x49 $x211)))
 (let (($x310 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x86 (_ bv3 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x241 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x210 $x310)))))))
 (let (($x192 (=> (and $x72 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x210 $x310)))))))
 (let (($x45 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x271 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32))) (or false (or false (and true (or $x50 $x45)))))))
 (let (($x108 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32)))) (or false (or false (and true (or $x50 $x45)))))))
 (let (($x230 (and $x108 $x192)))
 (let (($x152 (and $x230 $x18)))
 (let (($x52 (=> $x152 $x156)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 101
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (not $x105)))
 (let (($x188 (=> $x72 true)))
 (let (($x162 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x149 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149))))
 (let (($x34 (and true $x35)))
 (let (($x184 (and $x35 $x34)))
 (let ((?x116 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x23))))
 (let (($x291 (= (bvand ?x189 (_ bv4294967288 32)) ?x189)))
 (let (($x190 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let (($x274 (and $x190 $x291)))
 (let (($x292 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv4 32))) (bvult ?x116 (bvsub ?x116 (_ bv4 32))))))
 (let (($x166 (and (and (and (and (and $x34 $x292) $x190) $x274) $x184) $x162)))
 (let (($x138 (= true $x166)))
 (let (($x102 (=> $x72 $x138)))
 (let (($x345 (=> (and $x102 $x72) true)))
 (let (($x443 (= $x345 true)))
 (let (($x129 (= $x443 true)))
 (let ((?x163 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x163 (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x71 $x211)))
 (let (($x193 (= ?x163 (_ bv0 32))))
 (let (($x98 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x249 (= $x98 $x193)))
 (let (($x177 (and $x249 $x7)))
 (let (($x103 (= $x177 true)))
 (let (($x117 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x18 (= $x117 $x211)))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x287 (= $x137 $x193)))
 (let (($x152 (and $x287 $x18)))
 (let (($x28 (= $x152 true)))
 (let (($x200 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x114 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x114 (_ bv1 32))))
 (let (($x79 (= $x71 $x215)))
 (let (($x208 (= ?x114 (_ bv0 32))))
 (let (($x284 (= $x98 $x208)))
 (let (($x37 (and $x284 $x79)))
 (let (($x118 (= $x37 true)))
 (let (($x195 (= $x117 $x215)))
 (let (($x301 (= $x137 $x208)))
 (let (($x43 (and $x301 $x195)))
 (let (($x296 (= $x43 true)))
 (let ((?x78 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x318 (= (_ bv0 3) ?x78)))
 (let (($x295 (= $x318 true)))
 (let (($x198 (= $x295 true)))
 (let (($x36 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x205 (= $x36 true)))
 (let (($x22 (= $x205 true)))
 (let (($x82 (= $x22 true)))
 (let (($x64 (= $x102 true)))
 (let (($x207 (= $x64 true)))
 (let (($x445 (= $x207 true)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x122)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x154 $x11)))
 (let (($x169 (and $x6 $x147)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x70 $x169)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x277 $x239)))))))
 (let (($x302 (and $x68 $x214)))
 (let (($x16 (= $x302 true)))
 (let (($x123 (= $x16 true)))
 (let (($x281 (= $x123 true)))
 (let (($x179 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x148 (= $x179 true)))
 (let (($x130 (= $x148 true)))
 (let (($x185 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x204 (= $x185 true)))
 (let (($x44 (= $x204 true)))
 (let (($x260 (and $x44 $x130)))
 (let (($x238 (and $x260 $x281)))
 (let (($x112 (and $x238 $x445)))
 (let (($x97 (and $x112 $x82)))
 (let (($x294 (and $x97 $x198)))
 (let (($x165 (and $x294 $x296)))
 (let (($x240 (and $x165 $x118)))
 (let (($x366 (and $x240 $x28)))
 (let (($x128 (and $x366 $x103)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x106 (and $x77 $x128)))
 (let (($x304 (bvugt ?x116 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x116 (_ bv3 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x49 (=> (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x258 $x304)))))))
 (let (($x297 (=> (and $x72 (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x258 $x304)))))))
 (let (($x143 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x100 (or false (or false (and true (or $x17 $x143)))))))
 (let (($x196 (=> (and $x72 $x100) (or false (or false (and true (or $x17 $x143)))))))
 (let (($x229 (and $x196 $x297)))
 (let (($x237 (and $x229 $x106)))
 (let (($x329 (=> $x237 $x129)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (not $x105)))
 (let (($x188 (=> $x72 true)))
 (let (($x162 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x149 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149))))
 (let (($x34 (and true $x35)))
 (let (($x184 (and $x35 $x34)))
 (let ((?x116 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x23))))
 (let (($x291 (= (bvand ?x189 (_ bv4294967288 32)) ?x189)))
 (let (($x190 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let (($x274 (and $x190 $x291)))
 (let (($x292 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv4 32))) (bvult ?x116 (bvsub ?x116 (_ bv4 32))))))
 (let (($x166 (and (and (and (and (and $x34 $x292) $x190) $x274) $x184) $x162)))
 (let (($x138 (= true $x166)))
 (let (($x102 (=> $x72 $x138)))
 (let (($x345 (=> (and $x102 $x72) true)))
 (let (($x443 (= $x345 true)))
 (let (($x129 (= $x443 true)))
 (let ((?x163 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x163 (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x71 $x211)))
 (let (($x193 (= ?x163 (_ bv0 32))))
 (let (($x98 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x249 (= $x98 $x193)))
 (let (($x177 (and $x249 $x7)))
 (let (($x103 (= $x177 true)))
 (let (($x117 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x18 (= $x117 $x211)))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x287 (= $x137 $x193)))
 (let (($x152 (and $x287 $x18)))
 (let (($x28 (= $x152 true)))
 (let (($x200 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x114 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x114 (_ bv1 32))))
 (let (($x79 (= $x71 $x215)))
 (let (($x208 (= ?x114 (_ bv0 32))))
 (let (($x284 (= $x98 $x208)))
 (let (($x37 (and $x284 $x79)))
 (let (($x118 (= $x37 true)))
 (let (($x195 (= $x117 $x215)))
 (let (($x301 (= $x137 $x208)))
 (let (($x43 (and $x301 $x195)))
 (let (($x296 (= $x43 true)))
 (let ((?x78 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x318 (= (_ bv0 3) ?x78)))
 (let (($x295 (= $x318 true)))
 (let (($x198 (= $x295 true)))
 (let (($x36 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x205 (= $x36 true)))
 (let (($x22 (= $x205 true)))
 (let (($x82 (= $x22 true)))
 (let (($x64 (= $x102 true)))
 (let (($x207 (= $x64 true)))
 (let (($x445 (= $x207 true)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x122)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x154 $x11)))
 (let (($x169 (and $x6 $x147)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x70 $x169)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x277 $x239)))))))
 (let (($x302 (and $x68 $x214)))
 (let (($x16 (= $x302 true)))
 (let (($x123 (= $x16 true)))
 (let (($x281 (= $x123 true)))
 (let (($x179 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x148 (= $x179 true)))
 (let (($x130 (= $x148 true)))
 (let (($x185 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x204 (= $x185 true)))
 (let (($x44 (= $x204 true)))
 (let (($x260 (and $x44 $x130)))
 (let (($x238 (and $x260 $x281)))
 (let (($x112 (and $x238 $x445)))
 (let (($x97 (and $x112 $x82)))
 (let (($x294 (and $x97 $x198)))
 (let (($x165 (and $x294 $x296)))
 (let (($x240 (and $x165 $x118)))
 (let (($x366 (and $x240 $x28)))
 (let (($x128 (and $x366 $x103)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x106 (and $x77 $x128)))
 (let (($x304 (bvugt ?x116 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x116 (_ bv3 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x49 (=> (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x258 $x304)))))))
 (let (($x297 (=> (and $x72 (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x258 $x304)))))))
 (let (($x143 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x100 (or false (or false (and true (or $x17 $x143)))))))
 (let (($x196 (=> (and $x72 $x100) (or false (or false (and true (or $x17 $x143)))))))
 (let (($x229 (and $x196 $x297)))
 (let (($x237 (and $x229 $x106)))
 (let (($x329 (=> $x237 $x129)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 102
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x265))))
 (let ((?x109 ((_ extract 2 0) ?x99)))
 (let (($x42 (= (_ bv0 3) ?x109)))
 (let (($x202 (= $x42 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x366 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x366 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x345 (= $x287 $x177)))
 (let (($x249 (= ?x366 (_ bv0 32))))
 (let (($x163 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x188 (= $x163 $x249)))
 (let (($x443 (and $x188 $x345)))
 (let (($x129 (= $x443 true)))
 (let (($x98 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x103 (= $x98 $x177)))
 (let (($x215 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x7 (= $x215 $x249)))
 (let (($x128 (and $x7 $x103)))
 (let (($x106 (= $x128 true)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x296 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x284 (bvuge ?x296 (_ bv1 32))))
 (let (($x211 (= $x287 $x284)))
 (let (($x165 (= ?x296 (_ bv0 32))))
 (let (($x193 (= $x163 $x165)))
 (let (($x18 (and $x193 $x211)))
 (let (($x152 (= $x18 true)))
 (let (($x71 (= $x98 $x284)))
 (let (($x194 (= $x215 $x165)))
 (let (($x79 (and $x194 $x71)))
 (let (($x37 (= $x79 true)))
 (let ((?x255 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x255)))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x318 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x295 (= $x318 true)))
 (let (($x198 (= $x295 true)))
 (let (($x294 (= $x198 true)))
 (let (($x102 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x253 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253))))
 (let (($x33 (and true $x178)))
 (let (($x166 (and $x178 $x33)))
 (let (($x269 (= (bvand ?x99 (_ bv4294967288 32)) ?x99)))
 (let (($x107 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x162 (and $x107 $x269)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x100 (bvsub ?x100 (_ bv4 32))) (bvult ?x100 (bvsub ?x100 (_ bv4 32))))))
 (let (($x74 (and (and (and (and (and $x33 $x62) $x107) $x162) $x166) $x102)))
 (let (($x36 (= true $x74)))
 (let (($x72 (not $x105)))
 (let (($x205 (=> $x72 $x36)))
 (let (($x22 (= $x205 true)))
 (let (($x82 (= $x22 true)))
 (let (($x97 (= $x82 true)))
 (let (($x55 (= $x72 true)))
 (let (($x35 (= $x55 true)))
 (let (($x34 (= $x35 true)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x302 (= (_ bv0 32) ?x214)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x6 $x147)))
 (let (($x16 (and $x169 $x302)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x277 $x16)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x126)))))))
 (let (($x281 (and $x11 $x123)))
 (let (($x238 (= $x281 true)))
 (let (($x110 (= $x238 true)))
 (let (($x149 (= $x110 true)))
 (let (($x130 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x260 (= $x130 true)))
 (let (($x203 (= $x260 true)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x44 true)))
 (let (($x179 (= $x266 true)))
 (let (($x247 (and $x179 $x203)))
 (let (($x275 (and $x247 $x149)))
 (let (($x272 (and $x275 $x34)))
 (let (($x209 (and $x272 $x97)))
 (let (($x317 (and $x209 $x294)))
 (let (($x301 (and $x317 $x208)))
 (let (($x118 (and $x301 $x37)))
 (let (($x28 (and $x118 $x152)))
 (let (($x237 (and $x28 $x106)))
 (let (($x329 (and $x237 $x129)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x185 $x329)))
 (let (($x192 (bvugt ?x100 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x100 (_ bv3 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x77 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x241 $x192)))))))
 (let (($x32 (=> (and $x72 (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x241 $x192)))))))
 (let (($x108 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x210 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x310 (=> $x210 (or false (or false (and true (or $x271 $x108)))))))
 (let (($x56 (=> (and $x72 $x210) (or false (or false (and true (or $x271 $x108)))))))
 (let (($x206 (and $x56 $x32)))
 (let (($x197 (and $x206 $x268)))
 (let (($x282 (=> $x197 $x202)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x265))))
 (let ((?x109 ((_ extract 2 0) ?x99)))
 (let (($x42 (= (_ bv0 3) ?x109)))
 (let (($x202 (= $x42 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x366 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x366 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x345 (= $x287 $x177)))
 (let (($x249 (= ?x366 (_ bv0 32))))
 (let (($x163 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x188 (= $x163 $x249)))
 (let (($x443 (and $x188 $x345)))
 (let (($x129 (= $x443 true)))
 (let (($x98 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x103 (= $x98 $x177)))
 (let (($x215 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x7 (= $x215 $x249)))
 (let (($x128 (and $x7 $x103)))
 (let (($x106 (= $x128 true)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x296 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x284 (bvuge ?x296 (_ bv1 32))))
 (let (($x211 (= $x287 $x284)))
 (let (($x165 (= ?x296 (_ bv0 32))))
 (let (($x193 (= $x163 $x165)))
 (let (($x18 (and $x193 $x211)))
 (let (($x152 (= $x18 true)))
 (let (($x71 (= $x98 $x284)))
 (let (($x194 (= $x215 $x165)))
 (let (($x79 (and $x194 $x71)))
 (let (($x37 (= $x79 true)))
 (let ((?x255 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x255)))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x318 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x295 (= $x318 true)))
 (let (($x198 (= $x295 true)))
 (let (($x294 (= $x198 true)))
 (let (($x102 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x253 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253))))
 (let (($x33 (and true $x178)))
 (let (($x166 (and $x178 $x33)))
 (let (($x269 (= (bvand ?x99 (_ bv4294967288 32)) ?x99)))
 (let (($x107 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x162 (and $x107 $x269)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x100 (bvsub ?x100 (_ bv4 32))) (bvult ?x100 (bvsub ?x100 (_ bv4 32))))))
 (let (($x74 (and (and (and (and (and $x33 $x62) $x107) $x162) $x166) $x102)))
 (let (($x36 (= true $x74)))
 (let (($x72 (not $x105)))
 (let (($x205 (=> $x72 $x36)))
 (let (($x22 (= $x205 true)))
 (let (($x82 (= $x22 true)))
 (let (($x97 (= $x82 true)))
 (let (($x55 (= $x72 true)))
 (let (($x35 (= $x55 true)))
 (let (($x34 (= $x35 true)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x302 (= (_ bv0 32) ?x214)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x6 $x147)))
 (let (($x16 (and $x169 $x302)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x277 $x16)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x126)))))))
 (let (($x281 (and $x11 $x123)))
 (let (($x238 (= $x281 true)))
 (let (($x110 (= $x238 true)))
 (let (($x149 (= $x110 true)))
 (let (($x130 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x260 (= $x130 true)))
 (let (($x203 (= $x260 true)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x44 true)))
 (let (($x179 (= $x266 true)))
 (let (($x247 (and $x179 $x203)))
 (let (($x275 (and $x247 $x149)))
 (let (($x272 (and $x275 $x34)))
 (let (($x209 (and $x272 $x97)))
 (let (($x317 (and $x209 $x294)))
 (let (($x301 (and $x317 $x208)))
 (let (($x118 (and $x301 $x37)))
 (let (($x28 (and $x118 $x152)))
 (let (($x237 (and $x28 $x106)))
 (let (($x329 (and $x237 $x129)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x185 $x329)))
 (let (($x192 (bvugt ?x100 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x100 (_ bv3 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x77 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x241 $x192)))))))
 (let (($x32 (=> (and $x72 (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x241 $x192)))))))
 (let (($x108 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x210 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x310 (=> $x210 (or false (or false (and true (or $x271 $x108)))))))
 (let (($x56 (=> (and $x72 $x210) (or false (or false (and true (or $x271 $x108)))))))
 (let (($x206 (and $x56 $x32)))
 (let (($x197 (and $x206 $x268)))
 (let (($x282 (=> $x197 $x202)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 103
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem ?x86) (concat ?x161 (concat ?x111 ?x282)))))
 (let ((?x120 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x233)))
 (let (($x244 (= (_ bv0 32) ?x120)))
 (let (($x187 (= $x244 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x177 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x329 (= $x152 $x106)))
 (let (($x103 (= ?x177 (_ bv0 32))))
 (let (($x211 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x129 (= $x211 $x103)))
 (let (($x268 (and $x129 $x329)))
 (let (($x197 (= $x268 true)))
 (let (($x79 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x237 (= $x79 $x106)))
 (let (($x296 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x128 (= $x296 $x103)))
 (let (($x188 (and $x128 $x237)))
 (let (($x345 (= $x188 true)))
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x98 (ite $x194 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x98 (_ bv1 32))))
 (let (($x28 (= $x152 $x37)))
 (let (($x284 (= ?x98 (_ bv0 32))))
 (let (($x18 (= $x211 $x284)))
 (let (($x366 (and $x18 $x28)))
 (let (($x249 (= $x366 true)))
 (let (($x118 (= $x79 $x37)))
 (let (($x71 (= $x296 $x284)))
 (let (($x240 (and $x71 $x118)))
 (let (($x163 (= $x240 true)))
 (let ((?x208 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (= (_ bv0 3) ?x208)))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x317 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x137 (= $x317 true)))
 (let (($x255 (= $x137 true)))
 (let (($x209 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x209 true)))
 (let (($x318 (= $x78 true)))
 (let (($x295 (= $x318 true)))
 (let (($x269 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x34 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34))))
 (let (($x292 (and true $x300)))
 (let (($x184 (and $x300 $x292)))
 (let ((?x210 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x183))))
 (let (($x291 (= (bvand ?x23 (_ bv4294967288 32)) ?x23)))
 (let (($x64 (= (bvand ?x210 (_ bv4294967292 32)) ?x210)))
 (let (($x99 (and $x64 $x291)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x210 (bvsub ?x210 (_ bv4 32))) (bvult ?x210 (bvsub ?x210 (_ bv4 32))))))
 (let (($x138 (and (and (and (and (and $x292 $x5) $x64) $x99) $x184) $x269)))
 (let (($x102 (= true $x138)))
 (let (($x72 (not $x105)))
 (let (($x74 (=> $x72 $x102)))
 (let (($x36 (= $x74 true)))
 (let (($x205 (= $x36 true)))
 (let (($x22 (= $x205 true)))
 (let (($x149 (= $x72 true)))
 (let (($x275 (= $x149 true)))
 (let (($x55 (= $x275 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x147)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x277)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x113 $x6)))
 (let (($x214 (and $x122 $x169)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x247 $x214)))
 (let (($x309 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x309)))))))
 (let (($x16 (and $x11 $x302)))
 (let (($x123 (= $x16 true)))
 (let (($x281 (= $x123 true)))
 (let (($x238 (= $x281 true)))
 (let (($x179 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x148 (= $x179 true)))
 (let (($x130 (= $x148 true)))
 (let (($x110 (and $x130 $x238)))
 (let (($x35 (and $x110 $x55)))
 (let (($x82 (and $x35 $x22)))
 (let (($x198 (and $x82 $x295)))
 (let (($x200 (and $x198 $x255)))
 (let (($x195 (and $x200 $x215)))
 (let (($x193 (and $x195 $x163)))
 (let (($x7 (and $x193 $x249)))
 (let (($x443 (and $x7 $x345)))
 (let (($x109 (and $x443 $x197)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x42 (and $x44 $x109)))
 (let (($x297 (bvugt ?x210 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x210 (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x185 (=> (bvule ?x210 (bvsub (bvadd ?x210 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x297)))))))
 (let (($x140 (=> (and $x72 (bvule ?x210 (bvsub (bvadd ?x210 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x49 $x297)))))))
 (let (($x196 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x258 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x304 (=> $x258 (or false (or false (and true (or $x87 $x196)))))))
 (let (($x232 (=> (and $x72 $x258) (or false (or false (and true (or $x87 $x196)))))))
 (let (($x59 (and $x232 $x140)))
 (let (($x202 (and $x59 $x42)))
 (let (($x90 (=> $x202 $x187)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem ?x86) (concat ?x161 (concat ?x111 ?x282)))))
 (let ((?x120 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x233)))
 (let (($x244 (= (_ bv0 32) ?x120)))
 (let (($x187 (= $x244 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x177 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x329 (= $x152 $x106)))
 (let (($x103 (= ?x177 (_ bv0 32))))
 (let (($x211 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x129 (= $x211 $x103)))
 (let (($x268 (and $x129 $x329)))
 (let (($x197 (= $x268 true)))
 (let (($x79 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x237 (= $x79 $x106)))
 (let (($x296 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x128 (= $x296 $x103)))
 (let (($x188 (and $x128 $x237)))
 (let (($x345 (= $x188 true)))
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x98 (ite $x194 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x98 (_ bv1 32))))
 (let (($x28 (= $x152 $x37)))
 (let (($x284 (= ?x98 (_ bv0 32))))
 (let (($x18 (= $x211 $x284)))
 (let (($x366 (and $x18 $x28)))
 (let (($x249 (= $x366 true)))
 (let (($x118 (= $x79 $x37)))
 (let (($x71 (= $x296 $x284)))
 (let (($x240 (and $x71 $x118)))
 (let (($x163 (= $x240 true)))
 (let ((?x208 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (= (_ bv0 3) ?x208)))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x317 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x137 (= $x317 true)))
 (let (($x255 (= $x137 true)))
 (let (($x209 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x209 true)))
 (let (($x318 (= $x78 true)))
 (let (($x295 (= $x318 true)))
 (let (($x269 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x34 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34))))
 (let (($x292 (and true $x300)))
 (let (($x184 (and $x300 $x292)))
 (let ((?x210 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x183))))
 (let (($x291 (= (bvand ?x23 (_ bv4294967288 32)) ?x23)))
 (let (($x64 (= (bvand ?x210 (_ bv4294967292 32)) ?x210)))
 (let (($x99 (and $x64 $x291)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x210 (bvsub ?x210 (_ bv4 32))) (bvult ?x210 (bvsub ?x210 (_ bv4 32))))))
 (let (($x138 (and (and (and (and (and $x292 $x5) $x64) $x99) $x184) $x269)))
 (let (($x102 (= true $x138)))
 (let (($x72 (not $x105)))
 (let (($x74 (=> $x72 $x102)))
 (let (($x36 (= $x74 true)))
 (let (($x205 (= $x36 true)))
 (let (($x22 (= $x205 true)))
 (let (($x149 (= $x72 true)))
 (let (($x275 (= $x149 true)))
 (let (($x55 (= $x275 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x147)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x277)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x113 $x6)))
 (let (($x214 (and $x122 $x169)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x247 $x214)))
 (let (($x309 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x309)))))))
 (let (($x16 (and $x11 $x302)))
 (let (($x123 (= $x16 true)))
 (let (($x281 (= $x123 true)))
 (let (($x238 (= $x281 true)))
 (let (($x179 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x148 (= $x179 true)))
 (let (($x130 (= $x148 true)))
 (let (($x110 (and $x130 $x238)))
 (let (($x35 (and $x110 $x55)))
 (let (($x82 (and $x35 $x22)))
 (let (($x198 (and $x82 $x295)))
 (let (($x200 (and $x198 $x255)))
 (let (($x195 (and $x200 $x215)))
 (let (($x193 (and $x195 $x163)))
 (let (($x7 (and $x193 $x249)))
 (let (($x443 (and $x7 $x345)))
 (let (($x109 (and $x443 $x197)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x42 (and $x44 $x109)))
 (let (($x297 (bvugt ?x210 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x210 (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x185 (=> (bvule ?x210 (bvsub (bvadd ?x210 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x297)))))))
 (let (($x140 (=> (and $x72 (bvule ?x210 (bvsub (bvadd ?x210 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x49 $x297)))))))
 (let (($x196 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x258 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x304 (=> $x258 (or false (or false (and true (or $x87 $x196)))))))
 (let (($x232 (=> (and $x72 $x258) (or false (or false (and true (or $x87 $x196)))))))
 (let (($x59 (and $x232 $x140)))
 (let (($x202 (and $x59 $x42)))
 (let (($x90 (=> $x202 $x187)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 104
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x116 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x257 (concat (select input.dst.llvm-mem ?x116) (concat ?x89 (concat ?x75 ?x260)))))
 (let ((?x283 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x257)))
 (let (($x172 (= (_ bv0 32) ?x283)))
 (let (($x19 (= $x172 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x197 (_ bv1 32))))
 (let (($x128 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x227 (= $x128 $x202)))
 (let (($x109 (= ?x197 (_ bv0 32))))
 (let (($x177 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x177 $x109)))
 (let (($x244 (and (and (and (not $x177) (not $x128)) $x76) $x227)))
 (let (($x187 (= $x244 true)))
 (let (($x240 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x211 (not $x240)))
 (let (($x98 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x287 (not $x98)))
 (let (($x53 (and (and (and (= $x98 $x109) (= $x240 $x202)) $x287) $x211)))
 (let (($x111 (= $x53 true)))
 (let (($x188 (not $x128)))
 (let (($x237 (not $x177)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x79 (_ bv1 32))))
 (let (($x106 (= $x128 $x163)))
 (let (($x37 (= ?x79 (_ bv0 32))))
 (let (($x103 (= $x177 $x37)))
 (let (($x129 (and (and (and $x103 $x106) $x237) $x188)))
 (let (($x329 (= $x129 true)))
 (let (($x28 (and (and (and (= $x98 $x37) (= $x240 $x163)) $x287) $x211)))
 (let (($x366 (= $x28 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x195 (= (_ bv0 3) ?x215)))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x200 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x295 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x198 (= $x295 true)))
 (let (($x294 (= $x198 true)))
 (let (($x317 (= $x294 true)))
 (let (($x242 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x253 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253))))
 (let (($x190 (and true $x178)))
 (let (($x184 (and $x178 $x190)))
 (let ((?x258 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x107))))
 (let (($x99 (= (bvand ?x305 (_ bv4294967288 32)) ?x305)))
 (let (($x101 (= (bvand ?x258 (_ bv4294967292 32)) ?x258)))
 (let (($x166 (and $x101 $x99)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x258 (bvsub ?x258 (_ bv4 32))) (bvult ?x258 (bvsub ?x258 (_ bv4 32))))))
 (let (($x36 (and (and (and (and (and $x190 $x62) $x101) $x166) $x184) $x242)))
 (let (($x205 (= true $x36)))
 (let (($x72 (not $x105)))
 (let (($x22 (=> $x72 $x205)))
 (let (($x82 (= $x22 true)))
 (let (($x97 (= $x82 true)))
 (let (($x209 (= $x97 true)))
 (let (($x35 (= $x72 true)))
 (let (($x272 (= $x35 true)))
 (let (($x34 (= $x272 true)))
 (let ((?x302 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x302)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x122 $x169)))
 (let (($x123 (and $x214 $x16)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x95 $x123)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x70)))))))
 (let (($x238 (and $x6 $x281)))
 (let (($x110 (= $x238 true)))
 (let (($x149 (= $x110 true)))
 (let (($x275 (= $x149 true)))
 (let (($x130 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x239 (= $x130 true)))
 (let (($x38 (= $x239 true)))
 (let (($x55 (and $x38 $x275)))
 (let (($x270 (and $x55 $x34)))
 (let (($x78 (and $x270 $x209)))
 (let (($x137 (and $x78 $x317)))
 (let (($x301 (and $x137 $x208)))
 (let (($x165 (and $x301 $x296)))
 (let (($x249 (and $x165 $x366)))
 (let (($x268 (and $x249 $x329)))
 (let (($x282 (and $x268 $x111)))
 (let (($x90 (and $x282 $x187)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x63 (and $x179 $x90)))
 (let (($x32 (bvugt ?x258 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x258 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x44 (=> (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x32)))))))
 (let (($x181 (=> (and $x72 (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x77 $x32)))))))
 (let (($x56 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x241 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x192 (=> $x241 (or false (or false (and true (or $x310 $x56)))))))
 (let (($x234 (=> (and $x72 $x241) (or false (or false (and true (or $x310 $x56)))))))
 (let (($x230 (and $x234 $x181)))
 (let (($x153 (and $x230 $x63)))
 (let (($x261 (=> $x153 $x19)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x116 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x257 (concat (select input.dst.llvm-mem ?x116) (concat ?x89 (concat ?x75 ?x260)))))
 (let ((?x283 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x257)))
 (let (($x172 (= (_ bv0 32) ?x283)))
 (let (($x19 (= $x172 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x197 (_ bv1 32))))
 (let (($x128 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x227 (= $x128 $x202)))
 (let (($x109 (= ?x197 (_ bv0 32))))
 (let (($x177 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x177 $x109)))
 (let (($x244 (and (and (and (not $x177) (not $x128)) $x76) $x227)))
 (let (($x187 (= $x244 true)))
 (let (($x240 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x211 (not $x240)))
 (let (($x98 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x287 (not $x98)))
 (let (($x53 (and (and (and (= $x98 $x109) (= $x240 $x202)) $x287) $x211)))
 (let (($x111 (= $x53 true)))
 (let (($x188 (not $x128)))
 (let (($x237 (not $x177)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x79 (_ bv1 32))))
 (let (($x106 (= $x128 $x163)))
 (let (($x37 (= ?x79 (_ bv0 32))))
 (let (($x103 (= $x177 $x37)))
 (let (($x129 (and (and (and $x103 $x106) $x237) $x188)))
 (let (($x329 (= $x129 true)))
 (let (($x28 (and (and (and (= $x98 $x37) (= $x240 $x163)) $x287) $x211)))
 (let (($x366 (= $x28 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x195 (= (_ bv0 3) ?x215)))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x200 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x295 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x198 (= $x295 true)))
 (let (($x294 (= $x198 true)))
 (let (($x317 (= $x294 true)))
 (let (($x242 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x253 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x253))))
 (let (($x190 (and true $x178)))
 (let (($x184 (and $x178 $x190)))
 (let ((?x258 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x107))))
 (let (($x99 (= (bvand ?x305 (_ bv4294967288 32)) ?x305)))
 (let (($x101 (= (bvand ?x258 (_ bv4294967292 32)) ?x258)))
 (let (($x166 (and $x101 $x99)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x258 (bvsub ?x258 (_ bv4 32))) (bvult ?x258 (bvsub ?x258 (_ bv4 32))))))
 (let (($x36 (and (and (and (and (and $x190 $x62) $x101) $x166) $x184) $x242)))
 (let (($x205 (= true $x36)))
 (let (($x72 (not $x105)))
 (let (($x22 (=> $x72 $x205)))
 (let (($x82 (= $x22 true)))
 (let (($x97 (= $x82 true)))
 (let (($x209 (= $x97 true)))
 (let (($x35 (= $x72 true)))
 (let (($x272 (= $x35 true)))
 (let (($x34 (= $x272 true)))
 (let ((?x302 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x302)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x122 $x169)))
 (let (($x123 (and $x214 $x16)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x95 $x123)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x70)))))))
 (let (($x238 (and $x6 $x281)))
 (let (($x110 (= $x238 true)))
 (let (($x149 (= $x110 true)))
 (let (($x275 (= $x149 true)))
 (let (($x130 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x239 (= $x130 true)))
 (let (($x38 (= $x239 true)))
 (let (($x55 (and $x38 $x275)))
 (let (($x270 (and $x55 $x34)))
 (let (($x78 (and $x270 $x209)))
 (let (($x137 (and $x78 $x317)))
 (let (($x301 (and $x137 $x208)))
 (let (($x165 (and $x301 $x296)))
 (let (($x249 (and $x165 $x366)))
 (let (($x268 (and $x249 $x329)))
 (let (($x282 (and $x268 $x111)))
 (let (($x90 (and $x282 $x187)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x63 (and $x179 $x90)))
 (let (($x32 (bvugt ?x258 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x258 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x44 (=> (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x32)))))))
 (let (($x181 (=> (and $x72 (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x77 $x32)))))))
 (let (($x56 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x241 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x192 (=> $x241 (or false (or false (and true (or $x310 $x56)))))))
 (let (($x234 (=> (and $x72 $x241) (or false (or false (and true (or $x310 $x56)))))))
 (let (($x230 (and $x234 $x181)))
 (let (($x153 (and $x230 $x63)))
 (let (($x261 (=> $x153 $x19)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 105
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x100 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x168 (concat (select input.dst.llvm-mem ?x100) (concat ?x45 (concat ?x83 ?x63)))))
 (let ((?x254 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x168)))
 (let (($x257 (= (_ bv0 32) ?x254)))
 (let (($x283 (= $x257 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x197 (_ bv1 32))))
 (let (($x345 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x233 (= $x345 $x202)))
 (let (($x109 (= ?x197 (_ bv0 32))))
 (let (($x128 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x282 (= $x128 $x109)))
 (let (($x211 (= false false)))
 (let (($x443 (=> $x128 $x211)))
 (let (($x120 (and (and $x443 $x282) $x233)))
 (let (($x227 (= $x120 true)))
 (let (($x79 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x28 (=> $x79 $x211)))
 (let (($x18 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x176 (= $x18 $x202)))
 (let (($x42 (= $x79 $x109)))
 (let (($x161 (and (and $x42 $x176) $x28)))
 (let (($x53 (= $x161 true)))
 (let (($x118 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x240 (ite $x118 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x240 (_ bv1 32))))
 (let (($x237 (= $x345 $x287)))
 (let (($x163 (= ?x240 (_ bv0 32))))
 (let (($x106 (= $x128 $x163)))
 (let (($x129 (and (and $x106 $x237) $x443)))
 (let (($x329 (= $x129 true)))
 (let (($x249 (and (and (= $x79 $x163) (= $x18 $x287)) $x28)))
 (let (($x7 (= $x249 true)))
 (let ((?x296 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x165 (= (_ bv0 3) ?x296)))
 (let (($x194 (= $x165 true)))
 (let (($x98 (= $x194 true)))
 (let (($x301 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x317 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x317 true)))
 (let (($x255 (= $x137 true)))
 (let (($x200 (= $x255 true)))
 (let (($x112 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x33 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x33) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x33))))
 (let (($x162 (and true $x66)))
 (let (($x184 (and $x66 $x162)))
 (let ((?x241 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x189))))
 (let (($x166 (= (bvand ?x265 (_ bv4294967288 32)) ?x265)))
 (let (($x375 (= (bvand ?x241 (_ bv4294967292 32)) ?x241)))
 (let (($x102 (and $x375 $x166)))
 (let (($x445 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x241 (bvsub ?x241 (_ bv4 32))) (bvult ?x241 (bvsub ?x241 (_ bv4 32))))))
 (let (($x82 (and (and (and (and (and $x162 $x445) $x375) $x102) $x184) $x112)))
 (let (($x97 (= true $x82)))
 (let (($x72 (not $x105)))
 (let (($x209 (=> $x72 $x97)))
 (let (($x78 (= $x209 true)))
 (let (($x318 (= $x78 true)))
 (let (($x295 (= $x318 true)))
 (let (($x270 (= $x72 true)))
 (let (($x300 (= $x270 true)))
 (let (($x253 (= $x300 true)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x281)))
 (let ((?x302 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x302)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x214 $x16)))
 (let (($x110 (and $x123 $x238)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x199 $x110)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x113)))))))
 (let (($x275 (and $x169 $x149)))
 (let (($x55 (= $x275 true)))
 (let (($x35 (= $x55 true)))
 (let (($x272 (= $x35 true)))
 (let (($x38 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x309 (= $x38 true)))
 (let (($x126 (= $x309 true)))
 (let (($x34 (and $x126 $x272)))
 (let (($x292 (and $x34 $x253)))
 (let (($x198 (and $x292 $x295)))
 (let (($x114 (and $x198 $x200)))
 (let (($x195 (and $x114 $x215)))
 (let (($x284 (and $x195 $x98)))
 (let (($x177 (and $x284 $x7)))
 (let (($x268 (and $x177 $x329)))
 (let (($x111 (and $x268 $x53)))
 (let (($x244 (and $x111 $x227)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x187 (and $x130 $x244)))
 (let (($x140 (bvugt ?x241 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x241 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x179 (=> (bvule ?x241 (bvsub (bvadd ?x241 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x140)))))))
 (let (($x204 (=> (and $x72 (bvule ?x241 (bvsub (bvadd ?x241 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x185 $x140)))))))
 (let (($x232 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x49 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x297 (=> $x49 (or false (or false (and true (or $x304 $x232)))))))
 (let (($x86 (=> (and $x72 $x49) (or false (or false (and true (or $x304 $x232)))))))
 (let (($x229 (and $x86 $x204)))
 (let (($x90 (and $x229 $x187)))
 (let (($x172 (=> $x90 $x283)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x100 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x168 (concat (select input.dst.llvm-mem ?x100) (concat ?x45 (concat ?x83 ?x63)))))
 (let ((?x254 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x168)))
 (let (($x257 (= (_ bv0 32) ?x254)))
 (let (($x283 (= $x257 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x197 (_ bv1 32))))
 (let (($x345 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x233 (= $x345 $x202)))
 (let (($x109 (= ?x197 (_ bv0 32))))
 (let (($x128 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x282 (= $x128 $x109)))
 (let (($x211 (= false false)))
 (let (($x443 (=> $x128 $x211)))
 (let (($x120 (and (and $x443 $x282) $x233)))
 (let (($x227 (= $x120 true)))
 (let (($x79 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x28 (=> $x79 $x211)))
 (let (($x18 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x176 (= $x18 $x202)))
 (let (($x42 (= $x79 $x109)))
 (let (($x161 (and (and $x42 $x176) $x28)))
 (let (($x53 (= $x161 true)))
 (let (($x118 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x240 (ite $x118 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x240 (_ bv1 32))))
 (let (($x237 (= $x345 $x287)))
 (let (($x163 (= ?x240 (_ bv0 32))))
 (let (($x106 (= $x128 $x163)))
 (let (($x129 (and (and $x106 $x237) $x443)))
 (let (($x329 (= $x129 true)))
 (let (($x249 (and (and (= $x79 $x163) (= $x18 $x287)) $x28)))
 (let (($x7 (= $x249 true)))
 (let ((?x296 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x165 (= (_ bv0 3) ?x296)))
 (let (($x194 (= $x165 true)))
 (let (($x98 (= $x194 true)))
 (let (($x301 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x317 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x317 true)))
 (let (($x255 (= $x137 true)))
 (let (($x200 (= $x255 true)))
 (let (($x112 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x33 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x33) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x33))))
 (let (($x162 (and true $x66)))
 (let (($x184 (and $x66 $x162)))
 (let ((?x241 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x189))))
 (let (($x166 (= (bvand ?x265 (_ bv4294967288 32)) ?x265)))
 (let (($x375 (= (bvand ?x241 (_ bv4294967292 32)) ?x241)))
 (let (($x102 (and $x375 $x166)))
 (let (($x445 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x241 (bvsub ?x241 (_ bv4 32))) (bvult ?x241 (bvsub ?x241 (_ bv4 32))))))
 (let (($x82 (and (and (and (and (and $x162 $x445) $x375) $x102) $x184) $x112)))
 (let (($x97 (= true $x82)))
 (let (($x72 (not $x105)))
 (let (($x209 (=> $x72 $x97)))
 (let (($x78 (= $x209 true)))
 (let (($x318 (= $x78 true)))
 (let (($x295 (= $x318 true)))
 (let (($x270 (= $x72 true)))
 (let (($x300 (= $x270 true)))
 (let (($x253 (= $x300 true)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x281)))
 (let ((?x302 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x302)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x214 $x16)))
 (let (($x110 (and $x123 $x238)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x199 $x110)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x113)))))))
 (let (($x275 (and $x169 $x149)))
 (let (($x55 (= $x275 true)))
 (let (($x35 (= $x55 true)))
 (let (($x272 (= $x35 true)))
 (let (($x38 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x309 (= $x38 true)))
 (let (($x126 (= $x309 true)))
 (let (($x34 (and $x126 $x272)))
 (let (($x292 (and $x34 $x253)))
 (let (($x198 (and $x292 $x295)))
 (let (($x114 (and $x198 $x200)))
 (let (($x195 (and $x114 $x215)))
 (let (($x284 (and $x195 $x98)))
 (let (($x177 (and $x284 $x7)))
 (let (($x268 (and $x177 $x329)))
 (let (($x111 (and $x268 $x53)))
 (let (($x244 (and $x111 $x227)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x187 (and $x130 $x244)))
 (let (($x140 (bvugt ?x241 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x241 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x179 (=> (bvule ?x241 (bvsub (bvadd ?x241 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x140)))))))
 (let (($x204 (=> (and $x72 (bvule ?x241 (bvsub (bvadd ?x241 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x185 $x140)))))))
 (let (($x232 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x49 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x297 (=> $x49 (or false (or false (and true (or $x304 $x232)))))))
 (let (($x86 (=> (and $x72 $x49) (or false (or false (and true (or $x304 $x232)))))))
 (let (($x229 (and $x86 $x204)))
 (let (($x90 (and $x229 $x187)))
 (let (($x172 (=> $x90 $x283)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 106
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x254 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x210 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x261 (concat (select input.dst.llvm-mem ?x210) (concat ?x17 (concat ?x283 ?x254)))))
 (let ((?x289 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x261)))
 (let (($x50 (= (_ bv0 32) ?x289)))
 (let (($x154 (= $x50 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x53 (_ bv1 32))))
 (let (($x329 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x89 (= $x329 $x76)))
 (let (($x111 (= ?x53 (_ bv0 32))))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (= $x443 $x111)))
 (let (($x83 (and (and (and (not $x329) (=> $x443 (= false false))) $x260) $x89)))
 (let (($x63 (= $x83 true)))
 (let (($x7 (= false false)))
 (let (($x240 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x177 (=> $x240 $x7)))
 (let (($x366 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x249 (not $x366)))
 (let (($x244 (and (and (and (= $x240 $x111) (= $x366 $x76)) $x249) $x177)))
 (let (($x187 (= $x244 true)))
 (let (($x109 (=> $x443 $x7)))
 (let (($x197 (not $x329)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x18 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x18 (_ bv1 32))))
 (let (($x268 (= $x329 $x211)))
 (let (($x287 (= ?x18 (_ bv0 32))))
 (let (($x129 (= $x443 $x287)))
 (let (($x176 (and (and (and $x129 $x268) $x197) $x109)))
 (let (($x267 (= $x176 true)))
 (let (($x106 (and (and (and (= $x240 $x287) (= $x366 $x211)) $x249) $x177)))
 (let (($x345 (= $x106 true)))
 (let ((?x98 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x284 (= (_ bv0 3) ?x98)))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x195 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x200 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x301 (= $x208 true)))
 (let (($x74 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x5 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x5) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x5))))
 (let (($x269 (and true $x47)))
 (let (($x184 (and $x47 $x269)))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x326))))
 (let (($x102 (= (bvand ?x291 (_ bv4294967288 32)) ?x291)))
 (let (($x23 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x205 (and $x23 $x102)))
 (let (($x138 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv4 32))) (bvult ?x49 (bvsub ?x49 (_ bv4 32))))))
 (let (($x78 (and (and (and (and (and $x269 $x138) $x23) $x205) $x184) $x74)))
 (let (($x318 (= true $x78)))
 (let (($x72 (not $x105)))
 (let (($x295 (=> $x72 $x318)))
 (let (($x198 (= $x295 true)))
 (let (($x294 (= $x198 true)))
 (let (($x317 (= $x294 true)))
 (let (($x292 (= $x72 true)))
 (let (($x178 (= $x292 true)))
 (let (($x33 (= $x178 true)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x275 (= (_ bv0 32) ?x149)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x123 $x238)))
 (let (($x55 (and $x110 $x275)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x247 $x55)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x122)))))))
 (let (($x272 (and $x16 $x35)))
 (let (($x34 (= $x272 true)))
 (let (($x270 (= $x34 true)))
 (let (($x300 (= $x270 true)))
 (let (($x126 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x70 (= $x126 true)))
 (let (($x11 (= $x70 true)))
 (let (($x253 (and $x11 $x300)))
 (let (($x190 (and $x253 $x33)))
 (let (($x137 (and $x190 $x317)))
 (let (($x117 (and $x137 $x301)))
 (let (($x165 (and $x117 $x296)))
 (let (($x37 (and $x165 $x79)))
 (let (($x237 (and $x37 $x345)))
 (let (($x161 (and $x237 $x267)))
 (let (($x90 (and $x161 $x187)))
 (let (($x306 (and $x90 $x63)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x38 $x306)))
 (let (($x181 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x49 (_ bv3 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x130 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x181)))))))
 (let (($x266 (=> (and $x72 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x44 $x181)))))))
 (let (($x234 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x210)))
 (let (($x77 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x77 (or false (or false (and true (or $x192 $x234)))))))
 (let (($x116 (=> (and $x72 $x77) (or false (or false (and true (or $x192 $x234)))))))
 (let (($x206 (and $x116 $x266)))
 (let (($x168 (and $x206 $x75)))
 (let (($x143 (=> $x168 $x154)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x254 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x210 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x261 (concat (select input.dst.llvm-mem ?x210) (concat ?x17 (concat ?x283 ?x254)))))
 (let ((?x289 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x261)))
 (let (($x50 (= (_ bv0 32) ?x289)))
 (let (($x154 (= $x50 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x53 (_ bv1 32))))
 (let (($x329 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x89 (= $x329 $x76)))
 (let (($x111 (= ?x53 (_ bv0 32))))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (= $x443 $x111)))
 (let (($x83 (and (and (and (not $x329) (=> $x443 (= false false))) $x260) $x89)))
 (let (($x63 (= $x83 true)))
 (let (($x7 (= false false)))
 (let (($x240 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x177 (=> $x240 $x7)))
 (let (($x366 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x249 (not $x366)))
 (let (($x244 (and (and (and (= $x240 $x111) (= $x366 $x76)) $x249) $x177)))
 (let (($x187 (= $x244 true)))
 (let (($x109 (=> $x443 $x7)))
 (let (($x197 (not $x329)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x18 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x18 (_ bv1 32))))
 (let (($x268 (= $x329 $x211)))
 (let (($x287 (= ?x18 (_ bv0 32))))
 (let (($x129 (= $x443 $x287)))
 (let (($x176 (and (and (and $x129 $x268) $x197) $x109)))
 (let (($x267 (= $x176 true)))
 (let (($x106 (and (and (and (= $x240 $x287) (= $x366 $x211)) $x249) $x177)))
 (let (($x345 (= $x106 true)))
 (let ((?x98 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x284 (= (_ bv0 3) ?x98)))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x195 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x200 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x301 (= $x208 true)))
 (let (($x74 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x5 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x5) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x5))))
 (let (($x269 (and true $x47)))
 (let (($x184 (and $x47 $x269)))
 (let ((?x49 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x326))))
 (let (($x102 (= (bvand ?x291 (_ bv4294967288 32)) ?x291)))
 (let (($x23 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x205 (and $x23 $x102)))
 (let (($x138 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv4 32))) (bvult ?x49 (bvsub ?x49 (_ bv4 32))))))
 (let (($x78 (and (and (and (and (and $x269 $x138) $x23) $x205) $x184) $x74)))
 (let (($x318 (= true $x78)))
 (let (($x72 (not $x105)))
 (let (($x295 (=> $x72 $x318)))
 (let (($x198 (= $x295 true)))
 (let (($x294 (= $x198 true)))
 (let (($x317 (= $x294 true)))
 (let (($x292 (= $x72 true)))
 (let (($x178 (= $x292 true)))
 (let (($x33 (= $x178 true)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x275 (= (_ bv0 32) ?x149)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x123 $x238)))
 (let (($x55 (and $x110 $x275)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x247 $x55)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x122)))))))
 (let (($x272 (and $x16 $x35)))
 (let (($x34 (= $x272 true)))
 (let (($x270 (= $x34 true)))
 (let (($x300 (= $x270 true)))
 (let (($x126 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x70 (= $x126 true)))
 (let (($x11 (= $x70 true)))
 (let (($x253 (and $x11 $x300)))
 (let (($x190 (and $x253 $x33)))
 (let (($x137 (and $x190 $x317)))
 (let (($x117 (and $x137 $x301)))
 (let (($x165 (and $x117 $x296)))
 (let (($x37 (and $x165 $x79)))
 (let (($x237 (and $x37 $x345)))
 (let (($x161 (and $x237 $x267)))
 (let (($x90 (and $x161 $x187)))
 (let (($x306 (and $x90 $x63)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x38 $x306)))
 (let (($x181 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x49 (_ bv3 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x130 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x181)))))))
 (let (($x266 (=> (and $x72 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x44 $x181)))))))
 (let (($x234 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x210)))
 (let (($x77 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x32 (=> $x77 (or false (or false (and true (or $x192 $x234)))))))
 (let (($x116 (=> (and $x72 $x77) (or false (or false (and true (or $x192 $x234)))))))
 (let (($x206 (and $x116 $x266)))
 (let (($x168 (and $x206 $x75)))
 (let (($x143 (=> $x168 $x154)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 107
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x336 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x379 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x258 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x73 (concat (select input.dst.llvm-mem ?x258) (concat ?x248 (concat ?x379 ?x336)))))
 (let ((?x362 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x73)))
 (let (($x460 (= (_ bv0 32) ?x362)))
 (let (($x349 (= $x460 true)))
 (let ((?x304 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem ?x304))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv2 32))) ?x21))))
 (let ((?x475 (bvadd ?x146 (_ bv4 32))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv1 32))) (select input.dst.llvm-mem ?x475))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv2 32))) ?x346))))
 (let (($x88 (= (_ bv0 32) ?x182)))
 (let ((?x39 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x39 (_ bv1 32))))
 (let (($x440 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x351 (= $x440 $x320)))
 (let (($x299 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x307 (and $x226 $x299)))
 (let (($x459 (=> $x307 $x351)))
 (let (($x57 (= ?x39 (_ bv0 32))))
 (let (($x293 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x139 (= $x293 $x57)))
 (let (($x482 (=> $x307 $x139)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x288))))
 (let (($x481 (= input.spec-%var-l-1.2.1.2.0 ?x263)))
 (let (($x167 (=> $x307 $x481)))
 (let (($x319 (= (_ bv0 32) ?x146)))
 (let ((?x377 (ite $x319 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x377 (_ bv1 32))))
 (let (($x144 (= $x299 $x58)))
 (let (($x370 (=> $x226 $x144)))
 (let (($x84 (= ?x377 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x458 (= $x10 $x84)))
 (let (($x348 (=> $x226 $x458)))
 (let (($x60 (= input.spec-%var-l-1.2.0 ?x73)))
 (let (($x402 (=> $x226 $x60)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x323 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (bvuge ?x323 (_ bv1 32))))
 (let (($x457 (= $x226 $x251)))
 (let (($x286 (= ?x323 (_ bv0 32))))
 (let (($x26 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x359 (= $x26 $x286)))
 (let (($x7 (= false false)))
 (let (($x24 (and $x226 $x10)))
 (let (($x170 (=> $x24 $x7)))
 (let (($x65 (=> $x26 $x7)))
 (let (($x174 (and (and (and (and (and (and $x65 $x170) $x359) $x457) $x402) $x348) $x370)))
 (let (($x125 (and (and (and $x174 $x167) $x482) $x459)))
 (let (($x372 (= $x125 true)))
 (let (($x156 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x438 (= $x156 $x320)))
 (let (($x168 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x257 (and $x103 $x168)))
 (let (($x334 (=> $x257 $x438)))
 (let (($x48 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x48 $x57)))
 (let (($x374 (=> $x257 $x201)))
 (let (($x444 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x263)))
 (let (($x338 (=> $x257 $x444)))
 (let (($x259 (= $x168 $x58)))
 (let (($x335 (=> $x103 $x259)))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x161 $x84)))
 (let (($x256 (=> $x103 $x218)))
 (let (($x264 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x73)))
 (let (($x322 (=> $x103 $x264)))
 (let (($x306 (and $x103 $x161)))
 (let (($x75 (=> $x306 $x7)))
 (let (($x18 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x177 (=> $x18 $x7)))
 (let (($x373 (and (and (and (and (and (= $x18 $x286) (= $x103 $x251)) $x177) $x75) $x322) $x256)))
 (let (($x357 (and (and (and (and $x373 $x335) $x338) $x374) $x334)))
 (let (($x353 (= $x357 true)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x233 (concat ?x76 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x45 (concat ?x90 (concat ?x227 ?x233))))
 (let ((?x141 (bvadd ?x45 (_ bv4 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x8))))
 (let (($x119 (= (_ bv0 32) ?x276)))
 (let ((?x150 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x150 (_ bv1 32))))
 (let (($x246 (= $x440 $x52)))
 (let (($x46 (=> $x307 $x246)))
 (let (($x273 (= ?x150 (_ bv0 32))))
 (let (($x328 (= $x293 $x273)))
 (let (($x132 (=> $x307 $x328)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x261))))
 (let (($x145 (= input.spec-%var-l-1.2.1.2.0 ?x271)))
 (let (($x280 (=> $x307 $x145)))
 (let (($x260 (= (_ bv0 32) ?x45)))
 (let ((?x153 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x153 (_ bv1 32))))
 (let (($x446 (= $x299 $x108)))
 (let (($x219 (=> $x226 $x446)))
 (let (($x89 (= ?x153 (_ bv0 32))))
 (let (($x437 (= $x10 $x89)))
 (let (($x69 (=> $x226 $x437)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x443)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x268)))
 (let (($x213 (= input.spec-%var-l-1.2.0 ?x202)))
 (let (($x315 (=> $x226 $x213)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x366 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x366 (_ bv1 32))))
 (let (($x27 (= $x226 $x249)))
 (let (($x211 (= ?x366 (_ bv0 32))))
 (let (($x191 (= $x26 $x211)))
 (let (($x341 (and (and (and (and (and (and $x191 $x27) $x65) $x315) $x69) $x170) $x219)))
 (let (($x224 (and (and (and $x341 $x280) $x132) $x46)))
 (let (($x250 (= $x224 true)))
 (let (($x61 (= $x156 $x52)))
 (let (($x155 (=> $x257 $x61)))
 (let (($x220 (= $x48 $x273)))
 (let (($x298 (=> $x257 $x220)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x271)))
 (let (($x196 (=> $x257 $x147)))
 (let (($x19 (= $x168 $x108)))
 (let (($x17 (=> $x103 $x19)))
 (let (($x83 (= $x161 $x89)))
 (let (($x63 (=> $x103 $x83)))
 (let (($x109 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x202)))
 (let (($x176 (=> $x103 $x109)))
 (let (($x331 (and (and (and (and (and (= $x18 $x211) (= $x103 $x249)) $x177) $x176) $x63) $x75)))
 (let (($x131 (and (and (and (and $x331 $x17) $x196) $x298) $x155)))
 (let (($x262 (= $x131 true)))
 (let ((?x79 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x37 (= (_ bv0 3) ?x79)))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x165 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= $x165 true)))
 (let (($x98 (= $x194 true)))
 (let (($x301 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x195 (= $x215 true)))
 (let (($x22 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x62 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x64 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x62) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x62))))
 (let (($x242 (and true $x64)))
 (let (($x184 (and $x64 $x242)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x274))))
 (let (($x205 (= (bvand ?x99 (_ bv4294967288 32)) ?x99)))
 (let (($x305 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x97 (and $x305 $x205)))
 (let (($x36 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x198 (and (and (and (and (and $x242 $x36) $x305) $x97) $x184) $x22)))
 (let (($x294 (= true $x198)))
 (let (($x72 (not $x105)))
 (let (($x317 (=> $x72 $x294)))
 (let (($x137 (= $x317 true)))
 (let (($x255 (= $x137 true)))
 (let (($x200 (= $x255 true)))
 (let (($x190 (= $x72 true)))
 (let (($x66 (= $x190 true)))
 (let (($x5 (= $x66 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x35)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x110 $x275)))
 (let (($x34 (and $x55 $x272)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x95 $x34)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x214)))))))
 (let (($x300 (and $x238 $x270)))
 (let (($x253 (= $x300 true)))
 (let (($x292 (= $x253 true)))
 (let (($x178 (= $x292 true)))
 (let (($x11 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x113 (= $x11 true)))
 (let (($x6 (= $x113 true)))
 (let (($x33 (and $x6 $x178)))
 (let (($x162 (and $x33 $x5)))
 (let (($x114 (and $x162 $x200)))
 (let (($x43 (and $x114 $x195)))
 (let (($x284 (and $x43 $x98)))
 (let (($x163 (and $x284 $x240)))
 (let (($x133 (and $x163 $x262)))
 (let (($x441 (and $x133 $x250)))
 (let (($x350 (and $x441 $x353)))
 (let (($x448 (and $x350 $x372)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x358 (and $x126 $x448)))
 (let (($x204 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x77 (_ bv3 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x38 (=> (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x204)))))))
 (let (($x148 (=> (and $x72 (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x179 $x204)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x258)))
 (let (($x140 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x304 (_ bv1 32))) (or false (or false (and true (or $x297 $x86)))))))
 (let (($x100 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x304 (_ bv1 32)))) (or false (or false (and true (or $x297 $x86)))))))
 (let (($x59 (and $x100 $x148)))
 (let (($x371 (and $x59 $x358)))
 (let (($x400 (=> $x371 $x349)))
 (not $x400))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x336 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x379 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x258 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x73 (concat (select input.dst.llvm-mem ?x258) (concat ?x248 (concat ?x379 ?x336)))))
 (let ((?x362 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x73)))
 (let (($x460 (= (_ bv0 32) ?x362)))
 (let (($x349 (= $x460 true)))
 (let ((?x304 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem ?x304))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv2 32))) ?x21))))
 (let ((?x475 (bvadd ?x146 (_ bv4 32))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv1 32))) (select input.dst.llvm-mem ?x475))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv2 32))) ?x346))))
 (let (($x88 (= (_ bv0 32) ?x182)))
 (let ((?x39 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x39 (_ bv1 32))))
 (let (($x440 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x351 (= $x440 $x320)))
 (let (($x299 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x307 (and $x226 $x299)))
 (let (($x459 (=> $x307 $x351)))
 (let (($x57 (= ?x39 (_ bv0 32))))
 (let (($x293 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x139 (= $x293 $x57)))
 (let (($x482 (=> $x307 $x139)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x288))))
 (let (($x481 (= input.spec-%var-l-1.2.1.2.0 ?x263)))
 (let (($x167 (=> $x307 $x481)))
 (let (($x319 (= (_ bv0 32) ?x146)))
 (let ((?x377 (ite $x319 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x377 (_ bv1 32))))
 (let (($x144 (= $x299 $x58)))
 (let (($x370 (=> $x226 $x144)))
 (let (($x84 (= ?x377 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x458 (= $x10 $x84)))
 (let (($x348 (=> $x226 $x458)))
 (let (($x60 (= input.spec-%var-l-1.2.0 ?x73)))
 (let (($x402 (=> $x226 $x60)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x323 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (bvuge ?x323 (_ bv1 32))))
 (let (($x457 (= $x226 $x251)))
 (let (($x286 (= ?x323 (_ bv0 32))))
 (let (($x26 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x359 (= $x26 $x286)))
 (let (($x7 (= false false)))
 (let (($x24 (and $x226 $x10)))
 (let (($x170 (=> $x24 $x7)))
 (let (($x65 (=> $x26 $x7)))
 (let (($x174 (and (and (and (and (and (and $x65 $x170) $x359) $x457) $x402) $x348) $x370)))
 (let (($x125 (and (and (and $x174 $x167) $x482) $x459)))
 (let (($x372 (= $x125 true)))
 (let (($x156 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x438 (= $x156 $x320)))
 (let (($x168 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x257 (and $x103 $x168)))
 (let (($x334 (=> $x257 $x438)))
 (let (($x48 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x48 $x57)))
 (let (($x374 (=> $x257 $x201)))
 (let (($x444 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x263)))
 (let (($x338 (=> $x257 $x444)))
 (let (($x259 (= $x168 $x58)))
 (let (($x335 (=> $x103 $x259)))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x161 $x84)))
 (let (($x256 (=> $x103 $x218)))
 (let (($x264 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x73)))
 (let (($x322 (=> $x103 $x264)))
 (let (($x306 (and $x103 $x161)))
 (let (($x75 (=> $x306 $x7)))
 (let (($x18 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x177 (=> $x18 $x7)))
 (let (($x373 (and (and (and (and (and (= $x18 $x286) (= $x103 $x251)) $x177) $x75) $x322) $x256)))
 (let (($x357 (and (and (and (and $x373 $x335) $x338) $x374) $x334)))
 (let (($x353 (= $x357 true)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x233 (concat ?x76 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x45 (concat ?x90 (concat ?x227 ?x233))))
 (let ((?x141 (bvadd ?x45 (_ bv4 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x8))))
 (let (($x119 (= (_ bv0 32) ?x276)))
 (let ((?x150 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x150 (_ bv1 32))))
 (let (($x246 (= $x440 $x52)))
 (let (($x46 (=> $x307 $x246)))
 (let (($x273 (= ?x150 (_ bv0 32))))
 (let (($x328 (= $x293 $x273)))
 (let (($x132 (=> $x307 $x328)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x261))))
 (let (($x145 (= input.spec-%var-l-1.2.1.2.0 ?x271)))
 (let (($x280 (=> $x307 $x145)))
 (let (($x260 (= (_ bv0 32) ?x45)))
 (let ((?x153 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x153 (_ bv1 32))))
 (let (($x446 (= $x299 $x108)))
 (let (($x219 (=> $x226 $x446)))
 (let (($x89 (= ?x153 (_ bv0 32))))
 (let (($x437 (= $x10 $x89)))
 (let (($x69 (=> $x226 $x437)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x443)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x268)))
 (let (($x213 (= input.spec-%var-l-1.2.0 ?x202)))
 (let (($x315 (=> $x226 $x213)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x366 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x366 (_ bv1 32))))
 (let (($x27 (= $x226 $x249)))
 (let (($x211 (= ?x366 (_ bv0 32))))
 (let (($x191 (= $x26 $x211)))
 (let (($x341 (and (and (and (and (and (and $x191 $x27) $x65) $x315) $x69) $x170) $x219)))
 (let (($x224 (and (and (and $x341 $x280) $x132) $x46)))
 (let (($x250 (= $x224 true)))
 (let (($x61 (= $x156 $x52)))
 (let (($x155 (=> $x257 $x61)))
 (let (($x220 (= $x48 $x273)))
 (let (($x298 (=> $x257 $x220)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x271)))
 (let (($x196 (=> $x257 $x147)))
 (let (($x19 (= $x168 $x108)))
 (let (($x17 (=> $x103 $x19)))
 (let (($x83 (= $x161 $x89)))
 (let (($x63 (=> $x103 $x83)))
 (let (($x109 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x202)))
 (let (($x176 (=> $x103 $x109)))
 (let (($x331 (and (and (and (and (and (= $x18 $x211) (= $x103 $x249)) $x177) $x176) $x63) $x75)))
 (let (($x131 (and (and (and (and $x331 $x17) $x196) $x298) $x155)))
 (let (($x262 (= $x131 true)))
 (let ((?x79 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x37 (= (_ bv0 3) ?x79)))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x165 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= $x165 true)))
 (let (($x98 (= $x194 true)))
 (let (($x301 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x195 (= $x215 true)))
 (let (($x22 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x62 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x64 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x62) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x62))))
 (let (($x242 (and true $x64)))
 (let (($x184 (and $x64 $x242)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x274))))
 (let (($x205 (= (bvand ?x99 (_ bv4294967288 32)) ?x99)))
 (let (($x305 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x97 (and $x305 $x205)))
 (let (($x36 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x198 (and (and (and (and (and $x242 $x36) $x305) $x97) $x184) $x22)))
 (let (($x294 (= true $x198)))
 (let (($x72 (not $x105)))
 (let (($x317 (=> $x72 $x294)))
 (let (($x137 (= $x317 true)))
 (let (($x255 (= $x137 true)))
 (let (($x200 (= $x255 true)))
 (let (($x190 (= $x72 true)))
 (let (($x66 (= $x190 true)))
 (let (($x5 (= $x66 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x35)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x110 $x275)))
 (let (($x34 (and $x55 $x272)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x95 $x34)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x214)))))))
 (let (($x300 (and $x238 $x270)))
 (let (($x253 (= $x300 true)))
 (let (($x292 (= $x253 true)))
 (let (($x178 (= $x292 true)))
 (let (($x11 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x113 (= $x11 true)))
 (let (($x6 (= $x113 true)))
 (let (($x33 (and $x6 $x178)))
 (let (($x162 (and $x33 $x5)))
 (let (($x114 (and $x162 $x200)))
 (let (($x43 (and $x114 $x195)))
 (let (($x284 (and $x43 $x98)))
 (let (($x163 (and $x284 $x240)))
 (let (($x133 (and $x163 $x262)))
 (let (($x441 (and $x133 $x250)))
 (let (($x350 (and $x441 $x353)))
 (let (($x448 (and $x350 $x372)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x358 (and $x126 $x448)))
 (let (($x204 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x77 (_ bv3 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x38 (=> (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x204)))))))
 (let (($x148 (=> (and $x72 (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x179 $x204)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x258)))
 (let (($x140 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x304 (_ bv1 32))) (or false (or false (and true (or $x297 $x86)))))))
 (let (($x100 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x304 (_ bv1 32)))) (or false (or false (and true (or $x297 $x86)))))))
 (let (($x59 (and $x100 $x148)))
 (let (($x371 (and $x59 $x358)))
 (let (($x400 (=> $x371 $x349)))
 (not $x400))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv1024 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xa0a0a0a0)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xa007a0ad)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xa007a0a8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xa0a0a0a0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xa8a007a0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x07)
                                #xa007a0a7
                                #x80)
                         #xa007a0b2
                         #xa0)
                  #xa007a0a6
                  #xa0)))
(let ((a!2 (store (store (store (store a!1 #xa007a0b0 #xa8) #xa007a0a5 #xa0)
                         #xa007a0ac
                         #xa0)
                  #xa007a0af
                  #xa0)))
(let ((a!3 (store (store (store (store a!2 #xa007a0a3 #xa0) #xa007a0ad #xa0)
                         #xa007a0ab
                         #xa8)
                  #xa007a0b1
                  #xa3)))
(let ((a!4 (store (store (store (store a!3 #xa007a0a7 #x80) #xa007a0a8 #xa0)
                         #xa007a0b4
                         #xa0)
                  #xa007a0ad
                  #xa0)))
(let ((a!5 (store (store (store (store a!4 #xa007a0a5 #xa0) #xa007a0aa #xa0)
                         #xa007a0a4
                         #xa0)
                  #xa007a0aa
                  #xa0)))
(let ((a!6 (store (store (store (store a!5 #xa007a0a0 #xa0) #xa007a0a6 #xa0)
                         #xa007a0a8
                         #xa0)
                  #xa007a0a2
                  #xa0)))
  (store (store (store (store a!6 #xa007a0a1 #xa0) #xa007a0a3 #xa0)
                #xa007a0a4
                #xa0)
         #xa007a0af
         #xa0))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xa8a007a0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 108
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x241 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x339 (concat (select input.dst.llvm-mem ?x241) (concat ?x225 (concat ?x324 ?x222)))))
 (let ((?x142 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x339)))
 (let (($x409 (= (_ bv0 32) ?x142)))
 (let (($x462 (= $x409 true)))
 (let ((?x192 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x256))))
 (let ((?x346 (bvadd ?x455 (_ bv4 32))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv1 32))) (select input.dst.llvm-mem ?x346))))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv2 32))) ?x39))))
 (let (($x334 (= (_ bv0 32) ?x438)))
 (let ((?x357 (ite $x334 (_ bv0 32) (_ bv1 32))))
 (let (($x359 (bvuge ?x357 (_ bv1 32))))
 (let (($x246 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x349 (= $x246 $x359)))
 (let (($x307 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x93 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x280 (and $x93 $x307)))
 (let (($x400 (=> $x280 $x349)))
 (let (($x353 (= ?x357 (_ bv0 32))))
 (let (($x132 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x132 $x353)))
 (let (($x460 (=> $x280 $x362)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv1 32))) (select input.dst.llvm-mem ?x455))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv2 32))) ?x157))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x478)))
 (let (($x371 (=> $x280 $x358)))
 (let (($x285 (= (_ bv0 32) ?x455)))
 (let ((?x347 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x347 (_ bv1 32))))
 (let (($x372 (= $x307 $x290)))
 (let (($x448 (=> $x93 $x372)))
 (let (($x321 (= ?x347 (_ bv0 32))))
 (let (($x235 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x459 (= $x235 $x321)))
 (let (($x125 (=> $x93 $x459)))
 (let (($x360 (= input.spec-%var-l-1.2.0 ?x339)))
 (let (($x351 (=> $x93 $x360)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x25 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x322 (bvuge ?x25 (_ bv1 32))))
 (let (($x482 (= $x93 $x322)))
 (let (($x73 (= ?x25 (_ bv0 32))))
 (let (($x315 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x139 (= $x315 $x73)))
 (let (($x323 (and $x280 $x246)))
 (let (($x286 (not $x323)))
 (let (($x250 (and $x280 $x132)))
 (let (($x441 (not $x250)))
 (let (($x81 (= false false)))
 (let (($x219 (and $x93 $x235)))
 (let (($x341 (=> $x219 $x81)))
 (let (($x437 (=> $x315 $x81)))
 (let (($x365 (and (and (and (and (and (and $x437 $x341) $x441) $x286) $x139) $x482) $x351)))
 (let (($x401 (and (and (and (and (and $x365 $x125) $x448) $x371) $x460) $x400)))
 (let (($x367 (= $x401 true)))
 (let (($x150 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x75 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x30 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x19 (and $x30 $x75)))
 (let (($x52 (and $x19 $x150)))
 (let (($x61 (not $x52)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x92 (and $x19 $x147)))
 (let (($x156 (not $x92)))
 (let (($x450 (= $x150 $x359)))
 (let (($x457 (=> $x19 $x450)))
 (let (($x350 (= $x147 $x353)))
 (let (($x354 (=> $x19 $x350)))
 (let (($x313 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x478)))
 (let (($x332 (=> $x19 $x313)))
 (let (($x288 (= $x75 $x290)))
 (let (($x252 (=> $x30 $x288)))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x161 $x321)))
 (let (($x223 (=> $x30 $x343)))
 (let (($x146 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x339)))
 (let (($x319 (=> $x30 $x146)))
 (let (($x308 (and $x30 $x161)))
 (let (($x306 (=> $x308 $x81)))
 (let (($x366 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x106 (=> $x366 $x81)))
 (let (($x458 (and (and (and (and (and (= $x366 $x73) (= $x30 $x322)) $x106) $x306) $x319) $x223)))
 (let (($x481 (and (and (and (and (and (and $x458 $x252) $x332) $x354) $x457) $x156) $x61)))
 (let (($x167 (= $x481 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x227 (concat ?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x45 (concat ?x244 (concat ?x76 ?x227))))
 (let ((?x196 (bvadd ?x45 (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x141))))
 (let (($x216 (= (_ bv0 32) ?x356)))
 (let ((?x8 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x8 (_ bv1 32))))
 (let (($x46 (= $x246 $x273)))
 (let (($x224 (=> $x280 $x46)))
 (let (($x278 (= ?x8 (_ bv0 32))))
 (let (($x330 (= $x132 $x278)))
 (let (($x440 (=> $x280 $x330)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x143))))
 (let (($x217 (= input.spec-%var-l-1.2.1.2.0 ?x254)))
 (let (($x293 (=> $x280 $x217)))
 (let (($x260 (= (_ bv0 32) ?x45)))
 (let ((?x153 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x331 (bvuge ?x153 (_ bv1 32))))
 (let (($x40 (= $x307 $x331)))
 (let (($x145 (=> $x93 $x40)))
 (let (($x89 (= ?x153 (_ bv0 32))))
 (let (($x299 (= $x235 $x89)))
 (let (($x446 (=> $x93 $x299)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x237)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x443)))
 (let (($x361 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x24 (=> $x93 $x361)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x103 (_ bv1 32))))
 (let (($x10 (= $x93 $x7)))
 (let (($x249 (= ?x103 (_ bv0 32))))
 (let (($x312 (= $x315 $x249)))
 (let (($x91 (and (and (and (and (and (and $x312 $x10) $x437) $x24) $x446) $x341) $x145)))
 (let (($x379 (and (and (and (and (and $x91 $x293) $x440) $x224) $x441) $x286)))
 (let (($x336 (= $x379 true)))
 (let (($x220 (= $x150 $x273)))
 (let (($x298 (=> $x19 $x220)))
 (let (($x276 (= $x147 $x278)))
 (let (($x119 (=> $x19 $x276)))
 (let (($x261 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x254)))
 (let (($x154 (=> $x19 $x261)))
 (let (($x168 (= $x75 $x331)))
 (let (($x108 (=> $x30 $x168)))
 (let (($x83 (= $x161 $x89)))
 (let (($x63 (=> $x30 $x83)))
 (let (($x176 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x109)))
 (let (($x80 (=> $x30 $x176)))
 (let (($x160 (and (and (and (and (and (= $x366 $x249) (= $x30 $x7)) $x106) $x80) $x63) $x306)))
 (let (($x65 (and (and (and (and (and (and $x160 $x108) $x154) $x119) $x298) $x156) $x61)))
 (let (($x135 (= $x65 true)))
 (let ((?x240 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x163 (= (_ bv0 3) ?x240)))
 (let (($x193 (= $x163 true)))
 (let (($x18 (= $x193 true)))
 (let (($x284 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x195 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x165 (= $x296 true)))
 (let (($x209 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x445 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x445) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x445))))
 (let (($x112 (and true $x101)))
 (let (($x184 (and $x101 $x112)))
 (let ((?x185 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x207))))
 (let (($x97 (= (bvand ?x166 (_ bv4294967288 32)) ?x166)))
 (let (($x265 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x318 (and $x265 $x97)))
 (let (($x82 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv4 32))) (bvult ?x185 (bvsub ?x185 (_ bv4 32))))))
 (let (($x137 (and (and (and (and (and $x112 $x82) $x265) $x318) $x184) $x209)))
 (let (($x255 (= true $x137)))
 (let (($x72 (not $x105)))
 (let (($x200 (=> $x72 $x255)))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x301 (= $x208 true)))
 (let (($x162 (= $x72 true)))
 (let (($x47 (= $x162 true)))
 (let (($x62 (= $x47 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x270)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x55 $x272)))
 (let (($x253 (and $x34 $x300)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x292 (and $x199 $x253)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x275 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x123)))))))
 (let (($x178 (and $x275 $x292)))
 (let (($x33 (= $x178 true)))
 (let (($x190 (= $x33 true)))
 (let (($x66 (= $x190 true)))
 (let (($x6 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x122 (= $x6 true)))
 (let (($x169 (= $x122 true)))
 (let (($x5 (and $x169 $x66)))
 (let (($x269 (and $x5 $x62)))
 (let (($x117 (and $x269 $x301)))
 (let (($x194 (and $x117 $x165)))
 (let (($x37 (and $x194 $x79)))
 (let (($x287 (and $x37 $x18)))
 (let (($x439 (and $x287 $x135)))
 (let (($x221 (and $x439 $x336)))
 (let (($x363 (and $x221 $x167)))
 (let (($x369 (and $x363 $x367)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x376 (and $x11 $x369)))
 (let (($x266 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x185 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x126 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x130 $x266)))))))
 (let (($x239 (=> (and $x72 (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x130 $x266)))))))
 (let (($x116 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x181 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32))) (or false (or false (and true (or $x32 $x116)))))))
 (let (($x210 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32)))) (or false (or false (and true (or $x32 $x116)))))))
 (let (($x230 (and $x210 $x239)))
 (let (($x364 (and $x230 $x376)))
 (let (($x381 (=> $x364 $x462)))
 (not $x381))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x241 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x339 (concat (select input.dst.llvm-mem ?x241) (concat ?x225 (concat ?x324 ?x222)))))
 (let ((?x142 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x339)))
 (let (($x409 (= (_ bv0 32) ?x142)))
 (let (($x462 (= $x409 true)))
 (let ((?x192 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x256))))
 (let ((?x346 (bvadd ?x455 (_ bv4 32))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv1 32))) (select input.dst.llvm-mem ?x346))))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv2 32))) ?x39))))
 (let (($x334 (= (_ bv0 32) ?x438)))
 (let ((?x357 (ite $x334 (_ bv0 32) (_ bv1 32))))
 (let (($x359 (bvuge ?x357 (_ bv1 32))))
 (let (($x246 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x349 (= $x246 $x359)))
 (let (($x307 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x93 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x280 (and $x93 $x307)))
 (let (($x400 (=> $x280 $x349)))
 (let (($x353 (= ?x357 (_ bv0 32))))
 (let (($x132 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x132 $x353)))
 (let (($x460 (=> $x280 $x362)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv1 32))) (select input.dst.llvm-mem ?x455))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv2 32))) ?x157))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x478)))
 (let (($x371 (=> $x280 $x358)))
 (let (($x285 (= (_ bv0 32) ?x455)))
 (let ((?x347 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x347 (_ bv1 32))))
 (let (($x372 (= $x307 $x290)))
 (let (($x448 (=> $x93 $x372)))
 (let (($x321 (= ?x347 (_ bv0 32))))
 (let (($x235 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x459 (= $x235 $x321)))
 (let (($x125 (=> $x93 $x459)))
 (let (($x360 (= input.spec-%var-l-1.2.0 ?x339)))
 (let (($x351 (=> $x93 $x360)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x25 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x322 (bvuge ?x25 (_ bv1 32))))
 (let (($x482 (= $x93 $x322)))
 (let (($x73 (= ?x25 (_ bv0 32))))
 (let (($x315 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x139 (= $x315 $x73)))
 (let (($x323 (and $x280 $x246)))
 (let (($x286 (not $x323)))
 (let (($x250 (and $x280 $x132)))
 (let (($x441 (not $x250)))
 (let (($x81 (= false false)))
 (let (($x219 (and $x93 $x235)))
 (let (($x341 (=> $x219 $x81)))
 (let (($x437 (=> $x315 $x81)))
 (let (($x365 (and (and (and (and (and (and $x437 $x341) $x441) $x286) $x139) $x482) $x351)))
 (let (($x401 (and (and (and (and (and $x365 $x125) $x448) $x371) $x460) $x400)))
 (let (($x367 (= $x401 true)))
 (let (($x150 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x75 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x30 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x19 (and $x30 $x75)))
 (let (($x52 (and $x19 $x150)))
 (let (($x61 (not $x52)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x92 (and $x19 $x147)))
 (let (($x156 (not $x92)))
 (let (($x450 (= $x150 $x359)))
 (let (($x457 (=> $x19 $x450)))
 (let (($x350 (= $x147 $x353)))
 (let (($x354 (=> $x19 $x350)))
 (let (($x313 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x478)))
 (let (($x332 (=> $x19 $x313)))
 (let (($x288 (= $x75 $x290)))
 (let (($x252 (=> $x30 $x288)))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x161 $x321)))
 (let (($x223 (=> $x30 $x343)))
 (let (($x146 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x339)))
 (let (($x319 (=> $x30 $x146)))
 (let (($x308 (and $x30 $x161)))
 (let (($x306 (=> $x308 $x81)))
 (let (($x366 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x106 (=> $x366 $x81)))
 (let (($x458 (and (and (and (and (and (= $x366 $x73) (= $x30 $x322)) $x106) $x306) $x319) $x223)))
 (let (($x481 (and (and (and (and (and (and $x458 $x252) $x332) $x354) $x457) $x156) $x61)))
 (let (($x167 (= $x481 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x227 (concat ?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x45 (concat ?x244 (concat ?x76 ?x227))))
 (let ((?x196 (bvadd ?x45 (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x141))))
 (let (($x216 (= (_ bv0 32) ?x356)))
 (let ((?x8 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x8 (_ bv1 32))))
 (let (($x46 (= $x246 $x273)))
 (let (($x224 (=> $x280 $x46)))
 (let (($x278 (= ?x8 (_ bv0 32))))
 (let (($x330 (= $x132 $x278)))
 (let (($x440 (=> $x280 $x330)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x143))))
 (let (($x217 (= input.spec-%var-l-1.2.1.2.0 ?x254)))
 (let (($x293 (=> $x280 $x217)))
 (let (($x260 (= (_ bv0 32) ?x45)))
 (let ((?x153 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x331 (bvuge ?x153 (_ bv1 32))))
 (let (($x40 (= $x307 $x331)))
 (let (($x145 (=> $x93 $x40)))
 (let (($x89 (= ?x153 (_ bv0 32))))
 (let (($x299 (= $x235 $x89)))
 (let (($x446 (=> $x93 $x299)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x237)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x443)))
 (let (($x361 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x24 (=> $x93 $x361)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x103 (_ bv1 32))))
 (let (($x10 (= $x93 $x7)))
 (let (($x249 (= ?x103 (_ bv0 32))))
 (let (($x312 (= $x315 $x249)))
 (let (($x91 (and (and (and (and (and (and $x312 $x10) $x437) $x24) $x446) $x341) $x145)))
 (let (($x379 (and (and (and (and (and $x91 $x293) $x440) $x224) $x441) $x286)))
 (let (($x336 (= $x379 true)))
 (let (($x220 (= $x150 $x273)))
 (let (($x298 (=> $x19 $x220)))
 (let (($x276 (= $x147 $x278)))
 (let (($x119 (=> $x19 $x276)))
 (let (($x261 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x254)))
 (let (($x154 (=> $x19 $x261)))
 (let (($x168 (= $x75 $x331)))
 (let (($x108 (=> $x30 $x168)))
 (let (($x83 (= $x161 $x89)))
 (let (($x63 (=> $x30 $x83)))
 (let (($x176 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x109)))
 (let (($x80 (=> $x30 $x176)))
 (let (($x160 (and (and (and (and (and (= $x366 $x249) (= $x30 $x7)) $x106) $x80) $x63) $x306)))
 (let (($x65 (and (and (and (and (and (and $x160 $x108) $x154) $x119) $x298) $x156) $x61)))
 (let (($x135 (= $x65 true)))
 (let ((?x240 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x163 (= (_ bv0 3) ?x240)))
 (let (($x193 (= $x163 true)))
 (let (($x18 (= $x193 true)))
 (let (($x284 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x195 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x165 (= $x296 true)))
 (let (($x209 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x445 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x445) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x445))))
 (let (($x112 (and true $x101)))
 (let (($x184 (and $x101 $x112)))
 (let ((?x185 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x207))))
 (let (($x97 (= (bvand ?x166 (_ bv4294967288 32)) ?x166)))
 (let (($x265 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x318 (and $x265 $x97)))
 (let (($x82 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv4 32))) (bvult ?x185 (bvsub ?x185 (_ bv4 32))))))
 (let (($x137 (and (and (and (and (and $x112 $x82) $x265) $x318) $x184) $x209)))
 (let (($x255 (= true $x137)))
 (let (($x72 (not $x105)))
 (let (($x200 (=> $x72 $x255)))
 (let (($x114 (= $x200 true)))
 (let (($x208 (= $x114 true)))
 (let (($x301 (= $x208 true)))
 (let (($x162 (= $x72 true)))
 (let (($x47 (= $x162 true)))
 (let (($x62 (= $x47 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x270)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x55 $x272)))
 (let (($x253 (and $x34 $x300)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x292 (and $x199 $x253)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x275 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x123)))))))
 (let (($x178 (and $x275 $x292)))
 (let (($x33 (= $x178 true)))
 (let (($x190 (= $x33 true)))
 (let (($x66 (= $x190 true)))
 (let (($x6 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x122 (= $x6 true)))
 (let (($x169 (= $x122 true)))
 (let (($x5 (and $x169 $x66)))
 (let (($x269 (and $x5 $x62)))
 (let (($x117 (and $x269 $x301)))
 (let (($x194 (and $x117 $x165)))
 (let (($x37 (and $x194 $x79)))
 (let (($x287 (and $x37 $x18)))
 (let (($x439 (and $x287 $x135)))
 (let (($x221 (and $x439 $x336)))
 (let (($x363 (and $x221 $x167)))
 (let (($x369 (and $x363 $x367)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x376 (and $x11 $x369)))
 (let (($x266 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x185 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x126 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x130 $x266)))))))
 (let (($x239 (=> (and $x72 (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x130 $x266)))))))
 (let (($x116 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x181 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32))) (or false (or false (and true (or $x32 $x116)))))))
 (let (($x210 (=> (and $x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32)))) (or false (or false (and true (or $x32 $x116)))))))
 (let (($x230 (and $x210 $x239)))
 (let (($x364 (and $x230 $x376)))
 (let (($x381 (=> $x364 $x462)))
 (not $x381))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv128 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000d)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x65000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000010
                                #x65)
                         #x0000000b
                         #x65)
                  #x00000000
                  #x40)))
  (store a!1 #x00000000 #x40)))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x65000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 109
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x274))))
 (let (($x76 (bvule ?x166 (_ bv4294967294 32))))
 (let (($x90 (= $x76 true)))
 (let (($x120 (= $x90 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x129 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x129 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x267 (= $x42 $x237)))
 (let (($x329 (= ?x129 (_ bv0 32))))
 (let (($x106 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (= $x106 $x329)))
 (let (($x161 (and $x262 $x267)))
 (let (($x53 (= $x161 true)))
 (let (($x249 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x443 (= $x249 $x237)))
 (let (($x287 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x197 (= $x287 $x329)))
 (let (($x109 (and $x197 $x443)))
 (let (($x176 (= $x109 true)))
 (let (($x366 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x211 (ite $x366 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x211 (_ bv1 32))))
 (let (($x268 (= $x42 $x128)))
 (let (($x28 (= ?x211 (_ bv0 32))))
 (let (($x131 (= $x106 $x28)))
 (let (($x202 (and $x131 $x268)))
 (let (($x188 (= $x202 true)))
 (let (($x30 (= $x249 $x128)))
 (let (($x103 (= $x287 $x28)))
 (let (($x7 (and $x103 $x30)))
 (let (($x177 (= $x7 true)))
 (let ((?x37 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x118 (= (_ bv0 3) ?x37)))
 (let (($x240 (= $x118 true)))
 (let (($x163 (= $x240 true)))
 (let (($x296 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x296 true)))
 (let (($x194 (= $x165 true)))
 (let (($x284 (= $x194 true)))
 (let (($x317 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x242 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242))))
 (let (($x375 (and true $x36)))
 (let (($x294 (and $x36 $x375)))
 (let (($x97 (= (bvand ?x166 (_ bv4294967288 32)) ?x166)))
 (let (($x198 (= (bvand ?x258 (_ bv4294967292 32)) ?x258)))
 (let (($x318 (and $x198 $x97)))
 (let (($x305 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x258 (bvsub ?x258 (_ bv4 32))) (bvult ?x258 (bvsub ?x258 (_ bv4 32))))))
 (let (($x200 (and (and (and (and (and $x375 $x305) $x198) $x318) $x294) $x317)))
 (let (($x114 (= true $x200)))
 (let (($x105 (not $x14)))
 (let (($x208 (=> $x105 $x114)))
 (let (($x301 (= $x208 true)))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x62 (= $x105 true)))
 (let (($x269 (= $x62 true)))
 (let (($x64 (= $x269 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x253)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x272 $x270)))
 (let (($x178 (and $x300 $x292)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x203 $x178)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x95)))))))
 (let (($x190 (and $x35 $x33)))
 (let (($x66 (= $x190 true)))
 (let (($x5 (= $x66 true)))
 (let (($x162 (= $x5 true)))
 (let (($x122 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x169 (= $x122 true)))
 (let (($x214 (= $x169 true)))
 (let (($x47 (and $x214 $x162)))
 (let (($x445 (and $x47 $x64)))
 (let (($x195 (and $x445 $x215)))
 (let (($x71 (and $x195 $x284)))
 (let (($x193 (and $x71 $x163)))
 (let (($x155 (and $x193 $x177)))
 (let (($x345 (and $x155 $x188)))
 (let (($x80 (and $x345 $x176)))
 (let (($x233 (and $x80 $x53)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x244 (and $x113 $x233)))
 (let (($x38 (bvugt ?x258 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x258 (_ bv3 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x70 (=> (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x38)))))))
 (let (($x204 (=> (and $x105 (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x206 $x38)))))))
 (let (($x140 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x185 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x179 (=> $x185 (or false (or false (and true (or $x49 $x140)))))))
 (let (($x234 (=> (and $x105 $x185) (or false (or false (and true (or $x49 $x140)))))))
 (let (($x309 (and $x234 $x204)))
 (let (($x282 (and $x309 $x244)))
 (let (($x187 (=> $x282 $x120)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x274))))
 (let (($x76 (bvule ?x166 (_ bv4294967294 32))))
 (let (($x90 (= $x76 true)))
 (let (($x120 (= $x90 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x129 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x129 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x267 (= $x42 $x237)))
 (let (($x329 (= ?x129 (_ bv0 32))))
 (let (($x106 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (= $x106 $x329)))
 (let (($x161 (and $x262 $x267)))
 (let (($x53 (= $x161 true)))
 (let (($x249 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x443 (= $x249 $x237)))
 (let (($x287 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x197 (= $x287 $x329)))
 (let (($x109 (and $x197 $x443)))
 (let (($x176 (= $x109 true)))
 (let (($x366 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x211 (ite $x366 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x211 (_ bv1 32))))
 (let (($x268 (= $x42 $x128)))
 (let (($x28 (= ?x211 (_ bv0 32))))
 (let (($x131 (= $x106 $x28)))
 (let (($x202 (and $x131 $x268)))
 (let (($x188 (= $x202 true)))
 (let (($x30 (= $x249 $x128)))
 (let (($x103 (= $x287 $x28)))
 (let (($x7 (and $x103 $x30)))
 (let (($x177 (= $x7 true)))
 (let ((?x37 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x118 (= (_ bv0 3) ?x37)))
 (let (($x240 (= $x118 true)))
 (let (($x163 (= $x240 true)))
 (let (($x296 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x296 true)))
 (let (($x194 (= $x165 true)))
 (let (($x284 (= $x194 true)))
 (let (($x317 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x242 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242))))
 (let (($x375 (and true $x36)))
 (let (($x294 (and $x36 $x375)))
 (let (($x97 (= (bvand ?x166 (_ bv4294967288 32)) ?x166)))
 (let (($x198 (= (bvand ?x258 (_ bv4294967292 32)) ?x258)))
 (let (($x318 (and $x198 $x97)))
 (let (($x305 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x258 (bvsub ?x258 (_ bv4 32))) (bvult ?x258 (bvsub ?x258 (_ bv4 32))))))
 (let (($x200 (and (and (and (and (and $x375 $x305) $x198) $x318) $x294) $x317)))
 (let (($x114 (= true $x200)))
 (let (($x105 (not $x14)))
 (let (($x208 (=> $x105 $x114)))
 (let (($x301 (= $x208 true)))
 (let (($x117 (= $x301 true)))
 (let (($x215 (= $x117 true)))
 (let (($x62 (= $x105 true)))
 (let (($x269 (= $x62 true)))
 (let (($x64 (= $x269 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x253)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x272 $x270)))
 (let (($x178 (and $x300 $x292)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x203 $x178)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x95)))))))
 (let (($x190 (and $x35 $x33)))
 (let (($x66 (= $x190 true)))
 (let (($x5 (= $x66 true)))
 (let (($x162 (= $x5 true)))
 (let (($x122 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x169 (= $x122 true)))
 (let (($x214 (= $x169 true)))
 (let (($x47 (and $x214 $x162)))
 (let (($x445 (and $x47 $x64)))
 (let (($x195 (and $x445 $x215)))
 (let (($x71 (and $x195 $x284)))
 (let (($x193 (and $x71 $x163)))
 (let (($x155 (and $x193 $x177)))
 (let (($x345 (and $x155 $x188)))
 (let (($x80 (and $x345 $x176)))
 (let (($x233 (and $x80 $x53)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x244 (and $x113 $x233)))
 (let (($x38 (bvugt ?x258 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x258 (_ bv3 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x70 (=> (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x38)))))))
 (let (($x204 (=> (and $x105 (bvule ?x258 (bvsub (bvadd ?x258 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x206 $x38)))))))
 (let (($x140 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x185 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x179 (=> $x185 (or false (or false (and true (or $x49 $x140)))))))
 (let (($x234 (=> (and $x105 $x185) (or false (or false (and true (or $x49 $x140)))))))
 (let (($x309 (and $x234 $x204)))
 (let (($x282 (and $x309 $x244)))
 (let (($x187 (=> $x282 $x120)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 110
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x303 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x315 (concat ?x213 (concat ?x65 ?x52))))
 (let (($x312 (= ?x315 ?x315)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x28 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x28 (_ bv1 32))))
 (let (($x93 (=> $x30 $x312)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x8)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x119)))
 (let (($x220 (= ?x273 ?x273)))
 (let (($x298 (=> $x30 $x220)))
 (let ((?x185 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x189))))
 (let (($x111 (= (_ bv0 32) ?x102)))
 (let ((?x45 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x45 (_ bv1 32))))
 (let (($x51 (= $x30 $x89)))
 (let (($x72 (= false false)))
 (let (($x103 (= ?x28 (_ bv0 32))))
 (let (($x48 (=> $x103 $x72)))
 (let (($x260 (= ?x45 (_ bv0 32))))
 (let (($x186 (= $x103 $x260)))
 (let (($x212 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102)))
 (let (($x69 (and (and (and (and (and $x212 $x186) $x48) $x51) $x298) $x93)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x283 (concat ?x257 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x154 (concat ?x261 (concat ?x143 ?x283))))
 (let (($x191 (= ?x154 ?x154)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x42 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x42 (_ bv1 32))))
 (let (($x271 (=> $x188 $x191)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x160)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x168)))
 (let (($x17 (= ?x19 ?x19)))
 (let (($x172 (=> $x188 $x17)))
 (let (($x83 (= $x188 $x89)))
 (let (($x268 (= ?x42 (_ bv0 32))))
 (let (($x153 (= $x268 $x260)))
 (let (($x173 (and (and (and (=> $x268 $x72) (= input.dst.llvm-%l ?x102)) $x153) $x83)))
 (let (($x171 (and (and $x173 $x172) $x271)))
 (let (($x227 (not true)))
 (let (($x24 (or (or $x227 $x171) $x69)))
 (let (($x187 (= true true)))
 (let (($x124 (and $x187 $x24)))
 (let (($x170 (= $x124 true)))
 (let (($x176 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x233 (= $x176 $x30)))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x53 (= $x443 $x103)))
 (let (($x244 (and $x53 $x233)))
 (let (($x282 (= $x244 true)))
 (let (($x80 (= $x176 $x188)))
 (let (($x109 (= $x443 $x268)))
 (let (($x262 (and $x109 $x80)))
 (let (($x267 (= $x262 true)))
 (let (($x128 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x345 (= $x128 $x188)))
 (let (($x211 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x202 (= $x211 $x268)))
 (let (($x129 (and $x202 $x345)))
 (let (($x329 (= $x129 true)))
 (let (($x7 (= $x128 $x30)))
 (let (($x249 (= $x211 $x103)))
 (let (($x177 (and $x249 $x7)))
 (let (($x155 (= $x177 true)))
 (let ((?x163 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= (_ bv0 3) ?x163)))
 (let (($x18 (= $x193 true)))
 (let (($x287 (= $x18 true)))
 (let (($x284 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x37 (= $x79 true)))
 (let (($x184 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112))))
 (let (($x82 (and true $x74)))
 (let (($x294 (and $x74 $x82)))
 (let (($x318 (= (bvand ?x102 (_ bv4294967288 32)) ?x102)))
 (let (($x291 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x137 (and $x291 $x318)))
 (let (($x265 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv4 32))) (bvult ?x185 (bvsub ?x185 (_ bv4 32))))))
 (let (($x301 (and (and (and (and (and $x82 $x265) $x291) $x137) $x294) $x184)))
 (let (($x117 (= true $x301)))
 (let (($x105 (not $x14)))
 (let (($x215 (=> $x105 $x117)))
 (let (($x195 (= $x215 true)))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x445 (= $x105 true)))
 (let (($x138 (= $x445 true)))
 (let (($x242 (= $x138 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x33)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x300 $x292)))
 (let (($x66 (and $x178 $x190)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x54 $x66)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x270 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x199)))))))
 (let (($x162 (and $x270 $x5)))
 (let (($x47 (= $x162 true)))
 (let (($x62 (= $x47 true)))
 (let (($x269 (= $x62 true)))
 (let (($x214 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x247 (= $x214 true)))
 (let (($x123 (= $x247 true)))
 (let (($x64 (and $x123 $x269)))
 (let (($x101 (and $x64 $x242)))
 (let (($x165 (and $x101 $x296)))
 (let (($x118 (and $x165 $x37)))
 (let (($x152 (and $x118 $x287)))
 (let (($x81 (and $x152 $x155)))
 (let (($x197 (and $x81 $x329)))
 (let (($x161 (and $x197 $x267)))
 (let (($x76 (and $x161 $x282)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x90 (and $x122 $x76)))
 (let (($x126 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x185 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x113 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x126)))))))
 (let (($x230 (=> (and $x105 (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x126)))))))
 (let (($x181 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x229 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x130 (=> $x229 (or false (or false (and true (or $x77 $x181)))))))
 (let (($x86 (=> (and $x105 $x229) (or false (or false (and true (or $x77 $x181)))))))
 (let (($x266 (and $x86 $x230)))
 (let (($x120 (and $x266 $x90)))
 (let (($x235 (=> $x120 $x170)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x303 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x315 (concat ?x213 (concat ?x65 ?x52))))
 (let (($x312 (= ?x315 ?x315)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x28 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x28 (_ bv1 32))))
 (let (($x93 (=> $x30 $x312)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x8)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x119)))
 (let (($x220 (= ?x273 ?x273)))
 (let (($x298 (=> $x30 $x220)))
 (let ((?x185 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x189))))
 (let (($x111 (= (_ bv0 32) ?x102)))
 (let ((?x45 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x45 (_ bv1 32))))
 (let (($x51 (= $x30 $x89)))
 (let (($x72 (= false false)))
 (let (($x103 (= ?x28 (_ bv0 32))))
 (let (($x48 (=> $x103 $x72)))
 (let (($x260 (= ?x45 (_ bv0 32))))
 (let (($x186 (= $x103 $x260)))
 (let (($x212 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102)))
 (let (($x69 (and (and (and (and (and $x212 $x186) $x48) $x51) $x298) $x93)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x283 (concat ?x257 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x154 (concat ?x261 (concat ?x143 ?x283))))
 (let (($x191 (= ?x154 ?x154)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x42 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x42 (_ bv1 32))))
 (let (($x271 (=> $x188 $x191)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x160)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x168)))
 (let (($x17 (= ?x19 ?x19)))
 (let (($x172 (=> $x188 $x17)))
 (let (($x83 (= $x188 $x89)))
 (let (($x268 (= ?x42 (_ bv0 32))))
 (let (($x153 (= $x268 $x260)))
 (let (($x173 (and (and (and (=> $x268 $x72) (= input.dst.llvm-%l ?x102)) $x153) $x83)))
 (let (($x171 (and (and $x173 $x172) $x271)))
 (let (($x227 (not true)))
 (let (($x24 (or (or $x227 $x171) $x69)))
 (let (($x187 (= true true)))
 (let (($x124 (and $x187 $x24)))
 (let (($x170 (= $x124 true)))
 (let (($x176 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x233 (= $x176 $x30)))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x53 (= $x443 $x103)))
 (let (($x244 (and $x53 $x233)))
 (let (($x282 (= $x244 true)))
 (let (($x80 (= $x176 $x188)))
 (let (($x109 (= $x443 $x268)))
 (let (($x262 (and $x109 $x80)))
 (let (($x267 (= $x262 true)))
 (let (($x128 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x345 (= $x128 $x188)))
 (let (($x211 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x202 (= $x211 $x268)))
 (let (($x129 (and $x202 $x345)))
 (let (($x329 (= $x129 true)))
 (let (($x7 (= $x128 $x30)))
 (let (($x249 (= $x211 $x103)))
 (let (($x177 (and $x249 $x7)))
 (let (($x155 (= $x177 true)))
 (let ((?x163 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= (_ bv0 3) ?x163)))
 (let (($x18 (= $x193 true)))
 (let (($x287 (= $x18 true)))
 (let (($x284 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x37 (= $x79 true)))
 (let (($x184 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x112))))
 (let (($x82 (and true $x74)))
 (let (($x294 (and $x74 $x82)))
 (let (($x318 (= (bvand ?x102 (_ bv4294967288 32)) ?x102)))
 (let (($x291 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x137 (and $x291 $x318)))
 (let (($x265 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv4 32))) (bvult ?x185 (bvsub ?x185 (_ bv4 32))))))
 (let (($x301 (and (and (and (and (and $x82 $x265) $x291) $x137) $x294) $x184)))
 (let (($x117 (= true $x301)))
 (let (($x105 (not $x14)))
 (let (($x215 (=> $x105 $x117)))
 (let (($x195 (= $x215 true)))
 (let (($x43 (= $x195 true)))
 (let (($x296 (= $x43 true)))
 (let (($x445 (= $x105 true)))
 (let (($x138 (= $x445 true)))
 (let (($x242 (= $x138 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x33)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x300 $x292)))
 (let (($x66 (and $x178 $x190)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x54 $x66)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x270 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x199)))))))
 (let (($x162 (and $x270 $x5)))
 (let (($x47 (= $x162 true)))
 (let (($x62 (= $x47 true)))
 (let (($x269 (= $x62 true)))
 (let (($x214 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x247 (= $x214 true)))
 (let (($x123 (= $x247 true)))
 (let (($x64 (and $x123 $x269)))
 (let (($x101 (and $x64 $x242)))
 (let (($x165 (and $x101 $x296)))
 (let (($x118 (and $x165 $x37)))
 (let (($x152 (and $x118 $x287)))
 (let (($x81 (and $x152 $x155)))
 (let (($x197 (and $x81 $x329)))
 (let (($x161 (and $x197 $x267)))
 (let (($x76 (and $x161 $x282)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x90 (and $x122 $x76)))
 (let (($x126 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x185 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x113 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x126)))))))
 (let (($x230 (=> (and $x105 (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x126)))))))
 (let (($x181 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x229 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x130 (=> $x229 (or false (or false (and true (or $x77 $x181)))))))
 (let (($x86 (=> (and $x105 $x229) (or false (or false (and true (or $x77 $x181)))))))
 (let (($x266 (and $x86 $x230)))
 (let (($x120 (and $x266 $x90)))
 (let (($x235 (=> $x120 $x170)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000a40)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4c485f48)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x5f)
                     #x4c485f4c
                     #x48)
              #x4c485f4f
              #xcc)
       #x4c485f4e
       #x48))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3013X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3018X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var3013X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3018X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 111
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x92 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x24 (concat ?x69 (concat ?x315 ?x52))))
 (let (($x124 (= ?x24 ?x24)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x128 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x128 (_ bv1 32))))
 (let (($x170 (=> $x155 $x124)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x119)))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x298)))
 (let (($x213 (= ?x439 ?x439)))
 (let (($x61 (=> $x155 $x213)))
 (let ((?x229 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x326))))
 (let (($x63 (= (_ bv0 32) ?x205)))
 (let ((?x108 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x331 (bvuge ?x108 (_ bv1 32))))
 (let (($x276 (= $x155 $x331)))
 (let (($x106 (= false false)))
 (let (($x30 (= ?x128 (_ bv0 32))))
 (let (($x278 (=> $x30 $x106)))
 (let (($x26 (= ?x108 (_ bv0 32))))
 (let (($x150 (= $x30 $x26)))
 (let (($x226 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x205)))
 (let (($x55 (and (and (and (and (and $x226 $x150) $x278) $x276) $x61) $x170)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x50 (concat ?x283 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x212 (concat ?x361 (concat ?x191 ?x50))))
 (let (($x186 (= ?x212 ?x212)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x329 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (bvuge ?x329 (_ bv1 32))))
 (let (($x10 (=> $x443 $x186)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x19)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x67)))
 (let (($x13 (= ?x261 ?x261)))
 (let (($x143 (=> $x443 $x13)))
 (let (($x308 (= $x443 $x331)))
 (let (($x197 (= ?x329 (_ bv0 32))))
 (let (($x75 (= $x197 $x26)))
 (let (($x51 (and (and (and (=> $x197 $x106) (= input.dst.llvm-%l ?x205)) $x75) $x308)))
 (let (($x141 (and (and $x51 $x143) $x10)))
 (let (($x89 (not true)))
 (let (($x520 (or (or $x89 $x141) $x55)))
 (let (($x196 (= true true)))
 (let (($x219 (and $x196 $x520)))
 (let (($x341 (= $x219 true)))
 (let (($x244 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (= $x244 $x155)))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (= $x53 $x30)))
 (let (($x76 (=> $x53 $x106)))
 (let (($x147 (and (and $x76 $x72) $x16)))
 (let (($x111 (= $x147 true)))
 (let (($x120 (and (and (= $x53 $x197) (= $x244 $x443)) $x76)))
 (let (($x187 (= $x120 true)))
 (let (($x249 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x131 (=> $x249 $x106)))
 (let (($x177 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x177 $x443)))
 (let (($x237 (= $x249 $x197)))
 (let (($x80 (and (and $x237 $x109) $x131)))
 (let (($x262 (= $x80 true)))
 (let (($x268 (and (and (= $x249 $x30) (= $x177 $x155)) $x131)))
 (let (($x202 (= $x268 true)))
 (let ((?x287 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= (_ bv0 3) ?x287)))
 (let (($x366 (= $x152 true)))
 (let (($x211 (= $x366 true)))
 (let (($x37 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x163 (= $x240 true)))
 (let (($x255 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23))))
 (let (($x295 (and true $x22)))
 (let (($x294 (and $x22 $x295)))
 (let (($x137 (= (bvand ?x205 (_ bv4294967288 32)) ?x205)))
 (let (($x245 (= (bvand ?x229 (_ bv4294967292 32)) ?x229)))
 (let (($x114 (and $x245 $x137)))
 (let (($x209 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x229 (bvsub ?x229 (_ bv4 32))) (bvult ?x229 (bvsub ?x229 (_ bv4 32))))))
 (let (($x195 (and (and (and (and (and $x295 $x209) $x245) $x114) $x294) $x255)))
 (let (($x43 (= true $x195)))
 (let (($x105 (not $x14)))
 (let (($x296 (=> $x105 $x43)))
 (let (($x165 (= $x296 true)))
 (let (($x194 (= $x165 true)))
 (let (($x284 (= $x194 true)))
 (let (($x101 (= $x105 true)))
 (let (($x36 (= $x101 true)))
 (let (($x112 (= $x36 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x5)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x178 $x190)))
 (let (($x47 (and $x66 $x162)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x68 $x47)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x272)))))))
 (let (($x269 (and $x292 $x62)))
 (let (($x64 (= $x269 true)))
 (let (($x445 (= $x64 true)))
 (let (($x138 (= $x445 true)))
 (let (($x123 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x95 (= $x123 true)))
 (let (($x110 (= $x95 true)))
 (let (($x242 (and $x110 $x138)))
 (let (($x375 (and $x242 $x112)))
 (let (($x71 (and $x375 $x284)))
 (let (($x193 (and $x71 $x163)))
 (let (($x28 (and $x193 $x211)))
 (let (($x188 (and $x28 $x202)))
 (let (($x267 (and $x188 $x262)))
 (let (($x227 (and $x267 $x187)))
 (let (($x45 (and $x227 $x111)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x260 (and $x214 $x45)))
 (let (($x204 (bvugt ?x229 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd ?x229 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x122 (=> (bvule ?x229 (bvsub (bvadd ?x229 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x204)))))))
 (let (($x11 (=> (and $x105 (bvule ?x229 (bvsub (bvadd ?x229 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x70 $x204)))))))
 (let (($x234 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x206 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x38 (=> $x206 (or false (or false (and true (or $x179 $x234)))))))
 (let (($x116 (=> (and $x105 $x206) (or false (or false (and true (or $x179 $x234)))))))
 (let (($x148 (and $x116 $x11)))
 (let (($x153 (and $x148 $x260)))
 (let (($x447 (=> $x153 $x341)))
 (not $x447))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x92 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x24 (concat ?x69 (concat ?x315 ?x52))))
 (let (($x124 (= ?x24 ?x24)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x128 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x128 (_ bv1 32))))
 (let (($x170 (=> $x155 $x124)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x119)))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x298)))
 (let (($x213 (= ?x439 ?x439)))
 (let (($x61 (=> $x155 $x213)))
 (let ((?x229 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x326))))
 (let (($x63 (= (_ bv0 32) ?x205)))
 (let ((?x108 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x331 (bvuge ?x108 (_ bv1 32))))
 (let (($x276 (= $x155 $x331)))
 (let (($x106 (= false false)))
 (let (($x30 (= ?x128 (_ bv0 32))))
 (let (($x278 (=> $x30 $x106)))
 (let (($x26 (= ?x108 (_ bv0 32))))
 (let (($x150 (= $x30 $x26)))
 (let (($x226 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x205)))
 (let (($x55 (and (and (and (and (and $x226 $x150) $x278) $x276) $x61) $x170)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x50 (concat ?x283 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x212 (concat ?x361 (concat ?x191 ?x50))))
 (let (($x186 (= ?x212 ?x212)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x329 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (bvuge ?x329 (_ bv1 32))))
 (let (($x10 (=> $x443 $x186)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x19)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x67)))
 (let (($x13 (= ?x261 ?x261)))
 (let (($x143 (=> $x443 $x13)))
 (let (($x308 (= $x443 $x331)))
 (let (($x197 (= ?x329 (_ bv0 32))))
 (let (($x75 (= $x197 $x26)))
 (let (($x51 (and (and (and (=> $x197 $x106) (= input.dst.llvm-%l ?x205)) $x75) $x308)))
 (let (($x141 (and (and $x51 $x143) $x10)))
 (let (($x89 (not true)))
 (let (($x520 (or (or $x89 $x141) $x55)))
 (let (($x196 (= true true)))
 (let (($x219 (and $x196 $x520)))
 (let (($x341 (= $x219 true)))
 (let (($x244 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (= $x244 $x155)))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (= $x53 $x30)))
 (let (($x76 (=> $x53 $x106)))
 (let (($x147 (and (and $x76 $x72) $x16)))
 (let (($x111 (= $x147 true)))
 (let (($x120 (and (and (= $x53 $x197) (= $x244 $x443)) $x76)))
 (let (($x187 (= $x120 true)))
 (let (($x249 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x131 (=> $x249 $x106)))
 (let (($x177 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x109 (= $x177 $x443)))
 (let (($x237 (= $x249 $x197)))
 (let (($x80 (and (and $x237 $x109) $x131)))
 (let (($x262 (= $x80 true)))
 (let (($x268 (and (and (= $x249 $x30) (= $x177 $x155)) $x131)))
 (let (($x202 (= $x268 true)))
 (let ((?x287 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= (_ bv0 3) ?x287)))
 (let (($x366 (= $x152 true)))
 (let (($x211 (= $x366 true)))
 (let (($x37 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x163 (= $x240 true)))
 (let (($x255 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x23))))
 (let (($x295 (and true $x22)))
 (let (($x294 (and $x22 $x295)))
 (let (($x137 (= (bvand ?x205 (_ bv4294967288 32)) ?x205)))
 (let (($x245 (= (bvand ?x229 (_ bv4294967292 32)) ?x229)))
 (let (($x114 (and $x245 $x137)))
 (let (($x209 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x229 (bvsub ?x229 (_ bv4 32))) (bvult ?x229 (bvsub ?x229 (_ bv4 32))))))
 (let (($x195 (and (and (and (and (and $x295 $x209) $x245) $x114) $x294) $x255)))
 (let (($x43 (= true $x195)))
 (let (($x105 (not $x14)))
 (let (($x296 (=> $x105 $x43)))
 (let (($x165 (= $x296 true)))
 (let (($x194 (= $x165 true)))
 (let (($x284 (= $x194 true)))
 (let (($x101 (= $x105 true)))
 (let (($x36 (= $x101 true)))
 (let (($x112 (= $x36 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x5)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x178 $x190)))
 (let (($x47 (and $x66 $x162)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x68 $x47)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x272)))))))
 (let (($x269 (and $x292 $x62)))
 (let (($x64 (= $x269 true)))
 (let (($x445 (= $x64 true)))
 (let (($x138 (= $x445 true)))
 (let (($x123 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x95 (= $x123 true)))
 (let (($x110 (= $x95 true)))
 (let (($x242 (and $x110 $x138)))
 (let (($x375 (and $x242 $x112)))
 (let (($x71 (and $x375 $x284)))
 (let (($x193 (and $x71 $x163)))
 (let (($x28 (and $x193 $x211)))
 (let (($x188 (and $x28 $x202)))
 (let (($x267 (and $x188 $x262)))
 (let (($x227 (and $x267 $x187)))
 (let (($x45 (and $x227 $x111)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x260 (and $x214 $x45)))
 (let (($x204 (bvugt ?x229 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd ?x229 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x122 (=> (bvule ?x229 (bvsub (bvadd ?x229 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x204)))))))
 (let (($x11 (=> (and $x105 (bvule ?x229 (bvsub (bvadd ?x229 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x70 $x204)))))))
 (let (($x234 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x206 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x38 (=> $x206 (or false (or false (and true (or $x179 $x234)))))))
 (let (($x116 (=> (and $x105 $x206) (or false (or false (and true (or $x179 $x234)))))))
 (let (($x148 (and $x116 $x11)))
 (let (($x153 (and $x148 $x260)))
 (let (($x447 (=> $x153 $x341)))
 (not $x447))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000a40)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4c485f48)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x5f)
                     #x4c485f4c
                     #x48)
              #x4c485f4f
              #xcc)
       #x4c485f4e
       #x48))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3013X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3018X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3018X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3013X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 112
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x399 (concat ?x180 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x411 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x121 (concat ?x159 (concat ?x411 ?x399))))
 (let (($x9 (= ?x121 ?x121)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x177 (_ bv1 32))))
 (let (($x493 (=> $x106 $x9)))
 (let ((?x396 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x396)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x397)))
 (let (($x453 (= ?x410 ?x410)))
 (let (($x404 (=> $x106 $x453)))
 (let ((?x206 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x99))))
 (let (($x134 (= (_ bv0 32) ?x97)))
 (let ((?x358 (ite $x134 (_ bv0 32) (_ bv1 32))))
 (let (($x362 (bvuge ?x358 (_ bv1 32))))
 (let (($x382 (= $x106 $x362)))
 (let (($x268 (= false false)))
 (let (($x155 (= ?x177 (_ bv0 32))))
 (let (($x387 (=> $x155 $x268)))
 (let (($x371 (= ?x358 (_ bv0 32))))
 (let (($x94 (= $x155 $x371)))
 (let (($x403 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x97)))
 (let (($x416 (and (and (and (and (and $x403 $x94) $x387) $x382) $x404) $x493)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x452 (concat ?x164 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x384 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x389 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x484 (concat ?x389 (concat ?x384 ?x452))))
 (let (($x463 (= ?x484 ?x484)))
 (let (($x220 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x231 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x231 (_ bv1 32))))
 (let (($x41 (=> $x119 $x463)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x367)))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x364)))
 (let (($x381 (= ?x462 ?x462)))
 (let (($x464 (=> $x119 $x381)))
 (let (($x460 (= $x119 $x362)))
 (let (($x8 (= ?x231 (_ bv0 32))))
 (let (($x461 (= $x8 $x371)))
 (let (($x378 (and (and (and (=> $x8 $x268) (= input.dst.llvm-%l ?x97)) $x461) $x460)))
 (let (($x395 (and (and $x378 $x464) $x41)))
 (let (($x383 (not true)))
 (let (($x415 (or (or $x383 $x395) $x416)))
 (let (($x125 (= true true)))
 (let (($x490 (and $x125 $x415)))
 (let (($x465 (= $x490 true)))
 (let ((?x77 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x120))))
 (let ((?x19 (bvadd ?x147 (_ bv4 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x143))))
 (let (($x340 (= (_ bv0 32) ?x191)))
 (let ((?x283 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x283 (_ bv1 32))))
 (let (($x333 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (= $x333 $x186)))
 (let (($x288 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x218 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x279 (and $x218 $x288)))
 (let (($x481 (=> $x279 $x174)))
 (let (($x257 (= ?x283 (_ bv0 32))))
 (let (($x338 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x457 (= $x338 $x257)))
 (let (($x370 (=> $x279 $x457)))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x331))))
 (let (($x359 (= input.spec-%var-l-1.2.1.2.0 ?x17)))
 (let (($x450 (=> $x279 $x359)))
 (let (($x111 (= (_ bv0 32) ?x147)))
 (let ((?x45 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x45 (_ bv1 32))))
 (let (($x354 (= $x288 $x83)))
 (let (($x144 (=> $x218 $x354)))
 (let (($x260 (= ?x45 (_ bv0 32))))
 (let (($x321 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x353 (= $x321 $x260)))
 (let (($x350 (=> $x218 $x353)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x258 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x258) (concat ?x262 (concat ?x109 ?x237)))))
 (let (($x334 (= input.spec-%var-l-1.2.0 ?x53)))
 (let (($x357 (=> $x218 $x334)))
 (let (($x438 (= $x218 $x106)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x374 (= $x58 $x155)))
 (let (($x483 (and (and (and (=> $x58 $x268) (=> (and $x218 $x321) $x268)) $x374) $x438)))
 (let (($x449 (and (and (and (and (and (and $x483 $x357) $x350) $x144) $x450) $x370) $x481)))
 (let (($x360 (= $x449 true)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x170 (concat ?x124 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x520 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x447 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x307 (concat ?x447 (concat ?x520 ?x170))))
 (let ((?x250 (bvadd ?x307 (_ bv4 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x286))))
 (let (($x322 (= (_ bv0 32) ?x264)))
 (let ((?x104 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x104 (_ bv1 32))))
 (let (($x478 (= $x333 $x21)))
 (let (($x313 (=> $x279 $x478)))
 (let (($x523 (= ?x104 (_ bv0 32))))
 (let (($x263 (= $x338 $x523)))
 (let (($x157 (=> $x279 $x263)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x328))))
 (let (($x475 (= input.spec-%var-l-1.2.1.2.0 ?x46)))
 (let (($x228 (=> $x279 $x475)))
 (let (($x236 (= (_ bv0 32) ?x307)))
 (let ((?x44 (ite $x236 (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge ?x44 (_ bv1 32))))
 (let (($x252 (= $x288 $x91)))
 (let (($x348 (=> $x218 $x252)))
 (let (($x458 (and $x218 $x321)))
 (let (($x290 (=> $x458 $x268)))
 (let (($x34 (= ?x44 (_ bv0 32))))
 (let (($x343 (= $x321 $x34)))
 (let (($x223 (=> $x218 $x343)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x304)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x69)))
 (let (($x455 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x285 (=> $x218 $x455)))
 (let (($x456 (and (and (and (and (= $x58 $x8) (= $x218 $x119)) (=> $x58 $x268)) $x285) $x223)))
 (let (($x88 (and (and (and (and (and $x456 $x290) $x348) $x228) $x157) $x313)))
 (let (($x442 (= $x88 true)))
 (let (($x212 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x342 (= $x212 $x21)))
 (let (($x89 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x63 (and $x42 $x89)))
 (let (($x225 (=> $x63 $x342)))
 (let (($x133 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x60 (= $x133 $x523)))
 (let (($x402 (=> $x63 $x60)))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x46)))
 (let (($x248 (=> $x63 $x224)))
 (let (($x280 (= $x89 $x91)))
 (let (($x327 (=> $x42 $x280)))
 (let (($x345 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x129 (and $x42 $x345)))
 (let (($x329 (=> $x129 $x268)))
 (let (($x40 (= $x345 $x34)))
 (let (($x145 (=> $x42 $x40)))
 (let (($x92 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x303)))
 (let (($x156 (=> $x42 $x92)))
 (let (($x7 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x202 (=> $x7 $x268)))
 (let (($x136 (and (and (and (and (and (= $x7 $x8) (= $x42 $x119)) $x202) $x156) $x145) $x329)))
 (let (($x385 (and (and (and (and $x136 $x327) $x248) $x402) $x225)))
 (let (($x335 (= $x385 true)))
 (let (($x10 (= $x212 $x186)))
 (let (($x141 (=> $x63 $x10)))
 (let (($x50 (= $x133 $x257)))
 (let (($x271 (=> $x63 $x50)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x17)))
 (let (($x160 (=> $x63 $x172)))
 (let (($x173 (= $x89 $x83)))
 (let (($x48 (=> $x42 $x173)))
 (let (($x153 (= $x345 $x260)))
 (let (($x196 (=> $x42 $x153)))
 (let (($x233 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x53)))
 (let (($x244 (=> $x42 $x233)))
 (let (($x278 (and (and (and (and (and (= $x7 $x155) (= $x42 $x106)) $x202) $x329) $x244) $x196)))
 (let (($x356 (and (and (and (and $x278 $x48) $x160) $x271) $x141)))
 (let (($x251 (= $x356 true)))
 (let ((?x211 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x28 (= (_ bv0 3) ?x211)))
 (let (($x103 (= $x28 true)))
 (let (($x249 (= $x103 true)))
 (let (($x163 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x163 true)))
 (let (($x18 (= $x193 true)))
 (let (($x287 (= $x18 true)))
 (let (($x208 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x305 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x305) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x305))))
 (let (($x317 (and true $x78)))
 (let (($x294 (and $x78 $x317)))
 (let (($x114 (= (bvand ?x97 (_ bv4294967288 32)) ?x97)))
 (let (($x166 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x117 (and $x166 $x114)))
 (let (($x200 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv4 32))) (bvult ?x206 (bvsub ?x206 (_ bv4 32))))))
 (let (($x165 (and (and (and (and (and $x317 $x200) $x166) $x117) $x294) $x208)))
 (let (($x194 (= true $x165)))
 (let (($x105 (not $x14)))
 (let (($x284 (=> $x105 $x194)))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x37 (= $x79 true)))
 (let (($x375 (= $x105 true)))
 (let (($x74 (= $x375 true)))
 (let (($x23 (= $x74 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x62)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x66 $x162)))
 (let (($x64 (and $x47 $x269)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (and $x203 $x64)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x300)))))))
 (let (($x138 (and $x190 $x445)))
 (let (($x242 (= $x138 true)))
 (let (($x101 (= $x242 true)))
 (let (($x36 (= $x101 true)))
 (let (($x110 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x199 (= $x110 true)))
 (let (($x35 (= $x199 true)))
 (let (($x112 (and $x35 $x36)))
 (let (($x82 (and $x112 $x23)))
 (let (($x118 (and $x82 $x37)))
 (let (($x152 (and $x118 $x287)))
 (let (($x128 (and $x152 $x249)))
 (let (($x27 (and $x128 $x251)))
 (let (($x352 (and $x27 $x335)))
 (let (($x39 (and $x352 $x442)))
 (let (($x351 (and $x39 $x360)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x365 (and $x123 $x351)))
 (let (($x230 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x309 (bvadd ?x206 (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x309)))
 (let (($x214 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x230)))))))
 (let (($x6 (=> (and $x105 (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x113 $x230)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x258)))
 (let (($x126 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x77 (_ bv1 32))) (or false (or false (and true (or $x130 $x86)))))))
 (let (($x100 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x77 (_ bv1 32)))) (or false (or false (and true (or $x130 $x86)))))))
 (let (($x239 (and $x100 $x6)))
 (let (($x459 (and $x239 $x365)))
 (let (($x413 (=> $x459 $x465)))
 (not $x413))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x399 (concat ?x180 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x411 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x121 (concat ?x159 (concat ?x411 ?x399))))
 (let (($x9 (= ?x121 ?x121)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x177 (_ bv1 32))))
 (let (($x493 (=> $x106 $x9)))
 (let ((?x396 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x396)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x397)))
 (let (($x453 (= ?x410 ?x410)))
 (let (($x404 (=> $x106 $x453)))
 (let ((?x206 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x99))))
 (let (($x134 (= (_ bv0 32) ?x97)))
 (let ((?x358 (ite $x134 (_ bv0 32) (_ bv1 32))))
 (let (($x362 (bvuge ?x358 (_ bv1 32))))
 (let (($x382 (= $x106 $x362)))
 (let (($x268 (= false false)))
 (let (($x155 (= ?x177 (_ bv0 32))))
 (let (($x387 (=> $x155 $x268)))
 (let (($x371 (= ?x358 (_ bv0 32))))
 (let (($x94 (= $x155 $x371)))
 (let (($x403 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x97)))
 (let (($x416 (and (and (and (and (and $x403 $x94) $x387) $x382) $x404) $x493)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x452 (concat ?x164 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x384 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x389 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x484 (concat ?x389 (concat ?x384 ?x452))))
 (let (($x463 (= ?x484 ?x484)))
 (let (($x220 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x231 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x231 (_ bv1 32))))
 (let (($x41 (=> $x119 $x463)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x367)))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x364)))
 (let (($x381 (= ?x462 ?x462)))
 (let (($x464 (=> $x119 $x381)))
 (let (($x460 (= $x119 $x362)))
 (let (($x8 (= ?x231 (_ bv0 32))))
 (let (($x461 (= $x8 $x371)))
 (let (($x378 (and (and (and (=> $x8 $x268) (= input.dst.llvm-%l ?x97)) $x461) $x460)))
 (let (($x395 (and (and $x378 $x464) $x41)))
 (let (($x383 (not true)))
 (let (($x415 (or (or $x383 $x395) $x416)))
 (let (($x125 (= true true)))
 (let (($x490 (and $x125 $x415)))
 (let (($x465 (= $x490 true)))
 (let ((?x77 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x120))))
 (let ((?x19 (bvadd ?x147 (_ bv4 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x143))))
 (let (($x340 (= (_ bv0 32) ?x191)))
 (let ((?x283 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x283 (_ bv1 32))))
 (let (($x333 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (= $x333 $x186)))
 (let (($x288 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x218 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x279 (and $x218 $x288)))
 (let (($x481 (=> $x279 $x174)))
 (let (($x257 (= ?x283 (_ bv0 32))))
 (let (($x338 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x457 (= $x338 $x257)))
 (let (($x370 (=> $x279 $x457)))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x331))))
 (let (($x359 (= input.spec-%var-l-1.2.1.2.0 ?x17)))
 (let (($x450 (=> $x279 $x359)))
 (let (($x111 (= (_ bv0 32) ?x147)))
 (let ((?x45 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x45 (_ bv1 32))))
 (let (($x354 (= $x288 $x83)))
 (let (($x144 (=> $x218 $x354)))
 (let (($x260 (= ?x45 (_ bv0 32))))
 (let (($x321 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x353 (= $x321 $x260)))
 (let (($x350 (=> $x218 $x353)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x258 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x258) (concat ?x262 (concat ?x109 ?x237)))))
 (let (($x334 (= input.spec-%var-l-1.2.0 ?x53)))
 (let (($x357 (=> $x218 $x334)))
 (let (($x438 (= $x218 $x106)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x374 (= $x58 $x155)))
 (let (($x483 (and (and (and (=> $x58 $x268) (=> (and $x218 $x321) $x268)) $x374) $x438)))
 (let (($x449 (and (and (and (and (and (and $x483 $x357) $x350) $x144) $x450) $x370) $x481)))
 (let (($x360 (= $x449 true)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x170 (concat ?x124 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x520 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x447 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x307 (concat ?x447 (concat ?x520 ?x170))))
 (let ((?x250 (bvadd ?x307 (_ bv4 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x286))))
 (let (($x322 (= (_ bv0 32) ?x264)))
 (let ((?x104 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x104 (_ bv1 32))))
 (let (($x478 (= $x333 $x21)))
 (let (($x313 (=> $x279 $x478)))
 (let (($x523 (= ?x104 (_ bv0 32))))
 (let (($x263 (= $x338 $x523)))
 (let (($x157 (=> $x279 $x263)))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x328))))
 (let (($x475 (= input.spec-%var-l-1.2.1.2.0 ?x46)))
 (let (($x228 (=> $x279 $x475)))
 (let (($x236 (= (_ bv0 32) ?x307)))
 (let ((?x44 (ite $x236 (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge ?x44 (_ bv1 32))))
 (let (($x252 (= $x288 $x91)))
 (let (($x348 (=> $x218 $x252)))
 (let (($x458 (and $x218 $x321)))
 (let (($x290 (=> $x458 $x268)))
 (let (($x34 (= ?x44 (_ bv0 32))))
 (let (($x343 (= $x321 $x34)))
 (let (($x223 (=> $x218 $x343)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x304)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x69)))
 (let (($x455 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x285 (=> $x218 $x455)))
 (let (($x456 (and (and (and (and (= $x58 $x8) (= $x218 $x119)) (=> $x58 $x268)) $x285) $x223)))
 (let (($x88 (and (and (and (and (and $x456 $x290) $x348) $x228) $x157) $x313)))
 (let (($x442 (= $x88 true)))
 (let (($x212 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x342 (= $x212 $x21)))
 (let (($x89 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x63 (and $x42 $x89)))
 (let (($x225 (=> $x63 $x342)))
 (let (($x133 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x60 (= $x133 $x523)))
 (let (($x402 (=> $x63 $x60)))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x46)))
 (let (($x248 (=> $x63 $x224)))
 (let (($x280 (= $x89 $x91)))
 (let (($x327 (=> $x42 $x280)))
 (let (($x345 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x129 (and $x42 $x345)))
 (let (($x329 (=> $x129 $x268)))
 (let (($x40 (= $x345 $x34)))
 (let (($x145 (=> $x42 $x40)))
 (let (($x92 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x303)))
 (let (($x156 (=> $x42 $x92)))
 (let (($x7 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x202 (=> $x7 $x268)))
 (let (($x136 (and (and (and (and (and (= $x7 $x8) (= $x42 $x119)) $x202) $x156) $x145) $x329)))
 (let (($x385 (and (and (and (and $x136 $x327) $x248) $x402) $x225)))
 (let (($x335 (= $x385 true)))
 (let (($x10 (= $x212 $x186)))
 (let (($x141 (=> $x63 $x10)))
 (let (($x50 (= $x133 $x257)))
 (let (($x271 (=> $x63 $x50)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x17)))
 (let (($x160 (=> $x63 $x172)))
 (let (($x173 (= $x89 $x83)))
 (let (($x48 (=> $x42 $x173)))
 (let (($x153 (= $x345 $x260)))
 (let (($x196 (=> $x42 $x153)))
 (let (($x233 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x53)))
 (let (($x244 (=> $x42 $x233)))
 (let (($x278 (and (and (and (and (and (= $x7 $x155) (= $x42 $x106)) $x202) $x329) $x244) $x196)))
 (let (($x356 (and (and (and (and $x278 $x48) $x160) $x271) $x141)))
 (let (($x251 (= $x356 true)))
 (let ((?x211 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x28 (= (_ bv0 3) ?x211)))
 (let (($x103 (= $x28 true)))
 (let (($x249 (= $x103 true)))
 (let (($x163 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x163 true)))
 (let (($x18 (= $x193 true)))
 (let (($x287 (= $x18 true)))
 (let (($x208 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x305 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x305) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x305))))
 (let (($x317 (and true $x78)))
 (let (($x294 (and $x78 $x317)))
 (let (($x114 (= (bvand ?x97 (_ bv4294967288 32)) ?x97)))
 (let (($x166 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x117 (and $x166 $x114)))
 (let (($x200 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv4 32))) (bvult ?x206 (bvsub ?x206 (_ bv4 32))))))
 (let (($x165 (and (and (and (and (and $x317 $x200) $x166) $x117) $x294) $x208)))
 (let (($x194 (= true $x165)))
 (let (($x105 (not $x14)))
 (let (($x284 (=> $x105 $x194)))
 (let (($x71 (= $x284 true)))
 (let (($x79 (= $x71 true)))
 (let (($x37 (= $x79 true)))
 (let (($x375 (= $x105 true)))
 (let (($x74 (= $x375 true)))
 (let (($x23 (= $x74 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x62)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x66 $x162)))
 (let (($x64 (and $x47 $x269)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (and $x203 $x64)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x300)))))))
 (let (($x138 (and $x190 $x445)))
 (let (($x242 (= $x138 true)))
 (let (($x101 (= $x242 true)))
 (let (($x36 (= $x101 true)))
 (let (($x110 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x199 (= $x110 true)))
 (let (($x35 (= $x199 true)))
 (let (($x112 (and $x35 $x36)))
 (let (($x82 (and $x112 $x23)))
 (let (($x118 (and $x82 $x37)))
 (let (($x152 (and $x118 $x287)))
 (let (($x128 (and $x152 $x249)))
 (let (($x27 (and $x128 $x251)))
 (let (($x352 (and $x27 $x335)))
 (let (($x39 (and $x352 $x442)))
 (let (($x351 (and $x39 $x360)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x365 (and $x123 $x351)))
 (let (($x230 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x309 (bvadd ?x206 (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x309)))
 (let (($x214 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x230)))))))
 (let (($x6 (=> (and $x105 (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x113 $x230)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x258)))
 (let (($x126 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x77 (_ bv1 32))) (or false (or false (and true (or $x130 $x86)))))))
 (let (($x100 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x77 (_ bv1 32)))) (or false (or false (and true (or $x130 $x86)))))))
 (let (($x239 (and $x100 $x6)))
 (let (($x459 (and $x239 $x365)))
 (let (($x413 (=> $x459 $x465)))
 (not $x413))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3018X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3013X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf0000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xf8f8f8f8)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xefffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xeffffff8)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf8f8f8f8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xf8f859f8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xf8)
                                #xeffffff9
                                #x59)
                         #xf0000004
                         #xff)
                  #xf0000003
                  #xfe)))
  (store (store (store a!1 #xf0000006 #x6f) #xf0000005 #xff) #xf0000000 #x59)))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf8f859f8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf0000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf0000003)
  (define-fun input.ind-%var3013X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3018X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 113
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x648 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x656 (concat ?x648 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x649 (concat ?x651 (concat ?x653 ?x656))))
 (let (($x652 (= ?x649 ?x649)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x42 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x42 (_ bv1 32))))
 (let (($x655 (=> $x268 $x652)))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x644)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x637)))
 (let (($x642 (= ?x639 ?x639)))
 (let (($x645 (=> $x268 $x642)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x15))))
 (let (($x614 (= (_ bv0 32) ?x318)))
 (let ((?x596 (ite $x614 (_ bv0 32) (_ bv1 32))))
 (let (($x599 (bvuge ?x596 (_ bv1 32))))
 (let (($x662 (= $x268 $x599)))
 (let (($x226 (= false false)))
 (let (($x106 (= ?x42 (_ bv0 32))))
 (let (($x633 (=> $x106 $x226)))
 (let (($x608 (= ?x596 (_ bv0 32))))
 (let (($x661 (= $x106 $x608)))
 (let (($x632 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x318)))
 (let (($x667 (and (and (and (and (and $x632 $x661) $x633) $x662) $x645) $x655)))
 (let ((?x601 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x601 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x620 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x624 (concat ?x620 (concat ?x622 ?x610))))
 (let (($x625 (= ?x624 ?x624)))
 (let (($x346 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x347 (ite $x346 (_ bv0 32) (_ bv1 32))))
 (let (($x223 (bvuge ?x347 (_ bv1 32))))
 (let (($x630 (=> $x223 $x625)))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x602 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x600)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x602)))
 (let (($x621 (= ?x613 ?x613)))
 (let (($x611 (=> $x223 $x621)))
 (let (($x628 (= $x223 $x599)))
 (let (($x321 (= ?x347 (_ bv0 32))))
 (let (($x609 (= $x321 $x608)))
 (let (($x20 (and (and (and (=> $x321 $x226) (= input.dst.llvm-%l ?x318)) $x609) $x628)))
 (let (($x127 (and (and $x20 $x611) $x630)))
 (let (($x594 (not true)))
 (let (($x669 (or (or $x594 $x127) $x667)))
 (let (($x615 (= true true)))
 (let (($x670 (and $x615 $x669)))
 (let (($x671 (= $x670 true)))
 (let ((?x179 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x187))))
 (let ((?x160 (bvadd ?x72 (_ bv4 32))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x19))))
 (let ((?x315 (bvadd ?x13 (_ bv4 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x61))))
 (let ((?x293 (bvadd ?x156 (_ bv4 32))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x440))))
 (let (($x73 (= (_ bv0 32) ?x25)))
 (let ((?x379 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x379 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x553 (= $x151 $x264)))
 (let (($x531 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x522 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x499 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x420 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x525 (and $x420 $x499)))
 (let (($x530 (and $x525 $x522)))
 (let (($x501 (and $x530 $x531)))
 (let (($x555 (=> $x501 $x553)))
 (let (($x336 (= ?x379 (_ bv0 32))))
 (let (($x502 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x554 (= $x502 $x336)))
 (let (($x580 (=> $x501 $x554)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x145))))
 (let (($x556 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x339)))
 (let (($x581 (=> $x501 $x556)))
 (let (($x222 (= (_ bv0 32) ?x156)))
 (let ((?x52 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (bvuge ?x52 (_ bv1 32))))
 (let (($x558 (= $x531 $x312)))
 (let (($x582 (=> $x530 $x558)))
 (let (($x341 (= ?x52 (_ bv0 32))))
 (let (($x491 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x589 (= $x491 $x341)))
 (let (($x579 (=> $x530 $x589)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x27))))
 (let (($x551 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x119)))
 (let (($x552 (=> $x530 $x551)))
 (let (($x67 (= (_ bv0 32) ?x13)))
 (let ((?x143 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x143 (_ bv1 32))))
 (let (($x578 (= $x522 $x257)))
 (let (($x588 (=> $x525 $x578)))
 (let (($x171 (= ?x143 (_ bv0 32))))
 (let (($x477 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x549 (= $x477 $x171)))
 (let (($x550 (=> $x525 $x549)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x277))))
 (let (($x570 (= input.spec-%var-l-1.2.1.2.0 ?x26)))
 (let (($x577 (=> $x525 $x570)))
 (let (($x147 (= (_ bv0 32) ?x72)))
 (let ((?x111 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x278 (bvuge ?x111 (_ bv1 32))))
 (let (($x547 (= $x499 $x278)))
 (let (($x548 (=> $x420 $x547)))
 (let (($x45 (= ?x111 (_ bv0 32))))
 (let (($x427 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x546 (= $x427 $x45)))
 (let (($x576 (=> $x420 $x546)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x185 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x185) (concat ?x237 (concat ?x262 ?x161)))))
 (let (($x545 (= input.spec-%var-l-1.2.0 ?x53)))
 (let (($x575 (=> $x420 $x545)))
 (let (($x574 (= $x420 $x268)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x573 (= $x429 $x106)))
 (let (($x532 (and $x501 $x502)))
 (let (($x538 (=> $x532 $x226)))
 (let (($x517 (and $x530 $x491)))
 (let (($x495 (=> $x517 $x226)))
 (let (($x485 (and $x525 $x477)))
 (let (($x488 (=> $x485 $x226)))
 (let (($x560 (and (and (and (=> $x429 $x226) (=> (and $x420 $x427) $x226)) $x488) $x495)))
 (let (($x585 (and (and (and (and (and (and $x560 $x538) $x573) $x574) $x575) $x576) $x548)))
 (let (($x566 (and (and (and (and (and (and $x585 $x577) $x550) $x588) $x552) $x579) $x582)))
 (let (($x569 (and (and (and $x566 $x581) $x580) $x555)))
 (let (($x591 (= $x569 true)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x182 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x442 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x39 (concat ?x442 (concat ?x478 ?x182))))
 (let ((?x174 (bvadd ?x39 (_ bv4 32))))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x351))))
 (let ((?x381 (bvadd ?x448 (_ bv4 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x380))))
 (let ((?x393 (bvadd ?x310 (_ bv4 32))))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x410))))
 (let (($x497 (= (_ bv0 32) ?x159)))
 (let ((?x411 (ite $x497 (_ bv0 32) (_ bv1 32))))
 (let (($x399 (bvuge ?x411 (_ bv1 32))))
 (let (($x504 (= $x151 $x399)))
 (let (($x533 (=> $x501 $x504)))
 (let (($x391 (= ?x411 (_ bv0 32))))
 (let (($x503 (= $x502 $x391)))
 (let (($x519 (=> $x501 $x503)))
 (let ((?x434 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x434))))
 (let (($x536 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x394)))
 (let (($x537 (=> $x501 $x536)))
 (let (($x452 (= (_ bv0 32) ?x310)))
 (let ((?x405 (ite $x452 (_ bv0 32) (_ bv1 32))))
 (let (($x395 (bvuge ?x405 (_ bv1 32))))
 (let (($x518 (= $x531 $x395)))
 (let (($x496 (=> $x530 $x518)))
 (let (($x484 (= ?x405 (_ bv0 32))))
 (let (($x516 (= $x491 $x484)))
 (let (($x494 (=> $x530 $x516)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv1 32))) (select input.dst.llvm-mem ?x448))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv2 32))) ?x409))))
 (let (($x510 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x367)))
 (let (($x542 (=> $x530 $x510)))
 (let (($x526 (= (_ bv0 32) ?x448)))
 (let ((?x134 (ite $x526 (_ bv0 32) (_ bv1 32))))
 (let (($x388 (bvuge ?x134 (_ bv1 32))))
 (let (($x474 (= $x522 $x388)))
 (let (($x472 (=> $x525 $x474)))
 (let (($x358 (= ?x134 (_ bv0 32))))
 (let (($x487 (= $x477 $x358)))
 (let (($x473 (=> $x525 $x487)))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x354))))
 (let (($x521 (= input.spec-%var-l-1.2.1.2.0 ?x457)))
 (let (($x486 (=> $x525 $x521)))
 (let (($x167 (= (_ bv0 32) ?x39)))
 (let ((?x374 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x374 (_ bv1 32))))
 (let (($x471 (= $x499 $x334)))
 (let (($x479 (=> $x420 $x471)))
 (let (($x431 (and $x420 $x427)))
 (let (($x498 (=> $x431 $x226)))
 (let (($x363 (= ?x374 (_ bv0 32))))
 (let (($x430 (= $x427 $x363)))
 (let (($x466 (=> $x420 $x430)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x288)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x57)))
 (let (($x470 (= input.spec-%var-l-1.2.0 ?x475)))
 (let (($x467 (=> $x420 $x470)))
 (let (($x528 (and (and (and (and (= $x429 $x321) (= $x420 $x223)) (=> $x429 $x226)) $x467) $x466)))
 (let (($x12 (and (and (and (and (and (and $x528 $x498) $x479) $x486) $x473) $x472) $x488)))
 (let (($x544 (and (and (and (and (and (and $x12 $x542) $x494) $x495) $x496) $x537) $x519)))
 (let (($x509 (and (and $x544 $x538) $x533)))
 (let (($x571 (= $x509 true)))
 (let (($x221 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x433 (= $x221 $x399)))
 (let (($x124 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x446 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x173 (and $x446 $x196)))
 (let (($x186 (and $x173 $x283)))
 (let (($x307 (and $x186 $x124)))
 (let (($x121 (=> $x307 $x433)))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x180 (= $x330 $x391)))
 (let (($x31 (=> $x307 $x180)))
 (let (($x492 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x394)))
 (let (($x398 (=> $x307 $x492)))
 (let (($x412 (= $x124 $x395)))
 (let (($x403 (=> $x186 $x412)))
 (let (($x135 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x463 (= $x135 $x484)))
 (let (($x41 (=> $x186 $x463)))
 (let (($x364 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x367)))
 (let (($x462 (=> $x186 $x364)))
 (let (($x441 (and $x307 $x330)))
 (let (($x286 (=> $x441 $x226)))
 (let (($x520 (and $x186 $x135)))
 (let (($x24 (=> $x520 $x226)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x297 (and $x173 $x172)))
 (let (($x212 (=> $x297 $x226)))
 (let (($x362 (= $x283 $x388)))
 (let (($x460 (=> $x173 $x362)))
 (let (($x371 (= $x172 $x358)))
 (let (($x461 (=> $x173 $x371)))
 (let (($x370 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x457)))
 (let (($x482 (=> $x173 $x370)))
 (let (($x357 (= $x196 $x334)))
 (let (($x56 (=> $x446 $x357)))
 (let (($x129 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x329 (and $x446 $x129)))
 (let (($x150 (=> $x329 $x226)))
 (let (($x438 (= $x129 $x363)))
 (let (($x483 (=> $x446 $x438)))
 (let (($x228 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x475)))
 (let (($x201 (=> $x446 $x228)))
 (let (($x81 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x188 (=> $x81 $x226)))
 (let (($x490 (and (and (and (and (and (= $x81 $x321) (= $x446 $x223)) $x188) $x201) $x483) $x150)))
 (let (($x253 (and (and (and (and (and (and $x490 $x56) $x482) $x461) $x460) $x212) $x24)))
 (let (($x424 (and (and (and (and (and (and $x253 $x286) $x462) $x41) $x403) $x398) $x31)))
 (let (($x454 (and $x424 $x121)))
 (let (($x408 (= $x454 true)))
 (let (($x322 (= $x221 $x264)))
 (let (($x104 (=> $x307 $x322)))
 (let (($x243 (= $x330 $x336)))
 (let (($x323 (=> $x307 $x243)))
 (let (($x344 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x339)))
 (let (($x246 (=> $x307 $x344)))
 (let (($x170 (= $x124 $x312)))
 (let (($x219 (=> $x186 $x170)))
 (let (($x447 (= $x135 $x341)))
 (let (($x55 (=> $x186 $x447)))
 (let (($x298 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x119)))
 (let (($x325 (=> $x186 $x298)))
 (let (($x50 (= $x283 $x257)))
 (let (($x271 (=> $x173 $x50)))
 (let (($x191 (= $x172 $x171)))
 (let (($x340 (=> $x173 $x191)))
 (let (($x331 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x26)))
 (let (($x306 (=> $x173 $x331)))
 (let (($x89 (= $x196 $x278)))
 (let (($x83 (=> $x446 $x89)))
 (let (($x260 (= $x129 $x45)))
 (let (($x153 (=> $x446 $x260)))
 (let (($x233 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x53)))
 (let (($x244 (=> $x446 $x233)))
 (let (($x21 (and (and (and (and (and (= $x81 $x106) (= $x446 $x268)) $x188) $x150) $x244) $x153)))
 (let (($x373 (and (and (and (and (and (and $x21 $x83) $x306) $x340) $x271) $x212) $x325)))
 (let (($x256 (and (and (and (and (and (and $x373 $x55) $x24) $x219) $x246) $x323) $x286)))
 (let (($x355 (and $x256 $x104)))
 (let (($x259 (= $x355 true)))
 (let ((?x249 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= (_ bv0 3) ?x249)))
 (let (($x30 (= $x128 true)))
 (let (($x7 (= $x30 true)))
 (let (($x287 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x287 true)))
 (let (($x366 (= $x152 true)))
 (let (($x211 (= $x366 true)))
 (let (($x215 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265))))
 (let (($x184 (and true $x198)))
 (let (($x294 (and $x198 $x184)))
 (let (($x117 (= (bvand ?x318 (_ bv4294967288 32)) ?x318)))
 (let (($x102 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x43 (and $x102 $x117)))
 (let (($x301 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x71 (and (and (and (and (and $x184 $x301) $x102) $x43) $x294) $x215)))
 (let (($x79 (= true $x71)))
 (let (($x105 (not $x14)))
 (let (($x37 (=> $x105 $x79)))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x163 (= $x240 true)))
 (let (($x82 (= $x105 true)))
 (let (($x22 (= $x82 true)))
 (let (($x305 (= $x22 true)))
 (let ((?x445 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x445)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x47 $x269)))
 (let (($x242 (and $x64 $x138)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x54 $x242)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x178)))))))
 (let (($x36 (and $x162 $x101)))
 (let (($x112 (= $x36 true)))
 (let (($x375 (= $x112 true)))
 (let (($x74 (= $x375 true)))
 (let (($x35 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x272 (= $x35 true)))
 (let (($x270 (= $x272 true)))
 (let (($x23 (and $x270 $x74)))
 (let (($x295 (and $x23 $x305)))
 (let (($x193 (and $x295 $x163)))
 (let (($x28 (and $x193 $x211)))
 (let (($x177 (and $x28 $x7)))
 (let (($x455 (and $x177 $x259)))
 (let (($x422 (and $x455 $x408)))
 (let (($x572 (and $x422 $x571)))
 (let (($x623 (and $x572 $x591)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x110 $x623)))
 (let (($x11 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x59 (_ bv3 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x123 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x11)))))))
 (let (($x169 (=> (and $x105 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x122 $x11)))))))
 (let (($x116 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x204 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x179 (_ bv1 32))) (or false (or false (and true (or $x38 $x116)))))))
 (let (($x210 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x179 (_ bv1 32)))) (or false (or false (and true (or $x38 $x116)))))))
 (let (($x309 (and $x210 $x169)))
 (let (($x593 (and $x309 $x592)))
 (let (($x314 (=> $x593 $x671)))
 (not $x314))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3018X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3013X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x648 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x656 (concat ?x648 (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv4 32))))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3018X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x649 (concat ?x651 (concat ?x653 ?x656))))
 (let (($x652 (= ?x649 ?x649)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x42 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x42 (_ bv1 32))))
 (let (($x655 (=> $x268 $x652)))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3018X))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv2 32))) ?x644)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3018X (_ bv3 32))) ?x637)))
 (let (($x642 (= ?x639 ?x639)))
 (let (($x645 (=> $x268 $x642)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x15))))
 (let (($x614 (= (_ bv0 32) ?x318)))
 (let ((?x596 (ite $x614 (_ bv0 32) (_ bv1 32))))
 (let (($x599 (bvuge ?x596 (_ bv1 32))))
 (let (($x662 (= $x268 $x599)))
 (let (($x226 (= false false)))
 (let (($x106 (= ?x42 (_ bv0 32))))
 (let (($x633 (=> $x106 $x226)))
 (let (($x608 (= ?x596 (_ bv0 32))))
 (let (($x661 (= $x106 $x608)))
 (let (($x632 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x318)))
 (let (($x667 (and (and (and (and (and $x632 $x661) $x633) $x662) $x645) $x655)))
 (let ((?x601 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x601 (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv4 32))))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x620 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3013X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x624 (concat ?x620 (concat ?x622 ?x610))))
 (let (($x625 (= ?x624 ?x624)))
 (let (($x346 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x347 (ite $x346 (_ bv0 32) (_ bv1 32))))
 (let (($x223 (bvuge ?x347 (_ bv1 32))))
 (let (($x630 (=> $x223 $x625)))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3013X))))
 (let ((?x602 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv2 32))) ?x600)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3013X (_ bv3 32))) ?x602)))
 (let (($x621 (= ?x613 ?x613)))
 (let (($x611 (=> $x223 $x621)))
 (let (($x628 (= $x223 $x599)))
 (let (($x321 (= ?x347 (_ bv0 32))))
 (let (($x609 (= $x321 $x608)))
 (let (($x20 (and (and (and (=> $x321 $x226) (= input.dst.llvm-%l ?x318)) $x609) $x628)))
 (let (($x127 (and (and $x20 $x611) $x630)))
 (let (($x594 (not true)))
 (let (($x669 (or (or $x594 $x127) $x667)))
 (let (($x615 (= true true)))
 (let (($x670 (and $x615 $x669)))
 (let (($x671 (= $x670 true)))
 (let ((?x179 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x187))))
 (let ((?x160 (bvadd ?x72 (_ bv4 32))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x19))))
 (let ((?x315 (bvadd ?x13 (_ bv4 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x61))))
 (let ((?x293 (bvadd ?x156 (_ bv4 32))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x440))))
 (let (($x73 (= (_ bv0 32) ?x25)))
 (let ((?x379 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x379 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x553 (= $x151 $x264)))
 (let (($x531 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x522 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x499 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x420 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x525 (and $x420 $x499)))
 (let (($x530 (and $x525 $x522)))
 (let (($x501 (and $x530 $x531)))
 (let (($x555 (=> $x501 $x553)))
 (let (($x336 (= ?x379 (_ bv0 32))))
 (let (($x502 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x554 (= $x502 $x336)))
 (let (($x580 (=> $x501 $x554)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x145))))
 (let (($x556 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x339)))
 (let (($x581 (=> $x501 $x556)))
 (let (($x222 (= (_ bv0 32) ?x156)))
 (let ((?x52 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (bvuge ?x52 (_ bv1 32))))
 (let (($x558 (= $x531 $x312)))
 (let (($x582 (=> $x530 $x558)))
 (let (($x341 (= ?x52 (_ bv0 32))))
 (let (($x491 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x589 (= $x491 $x341)))
 (let (($x579 (=> $x530 $x589)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x27))))
 (let (($x551 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x119)))
 (let (($x552 (=> $x530 $x551)))
 (let (($x67 (= (_ bv0 32) ?x13)))
 (let ((?x143 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x143 (_ bv1 32))))
 (let (($x578 (= $x522 $x257)))
 (let (($x588 (=> $x525 $x578)))
 (let (($x171 (= ?x143 (_ bv0 32))))
 (let (($x477 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x549 (= $x477 $x171)))
 (let (($x550 (=> $x525 $x549)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x277))))
 (let (($x570 (= input.spec-%var-l-1.2.1.2.0 ?x26)))
 (let (($x577 (=> $x525 $x570)))
 (let (($x147 (= (_ bv0 32) ?x72)))
 (let ((?x111 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x278 (bvuge ?x111 (_ bv1 32))))
 (let (($x547 (= $x499 $x278)))
 (let (($x548 (=> $x420 $x547)))
 (let (($x45 (= ?x111 (_ bv0 32))))
 (let (($x427 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x546 (= $x427 $x45)))
 (let (($x576 (=> $x420 $x546)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x185 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x185) (concat ?x237 (concat ?x262 ?x161)))))
 (let (($x545 (= input.spec-%var-l-1.2.0 ?x53)))
 (let (($x575 (=> $x420 $x545)))
 (let (($x574 (= $x420 $x268)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x573 (= $x429 $x106)))
 (let (($x532 (and $x501 $x502)))
 (let (($x538 (=> $x532 $x226)))
 (let (($x517 (and $x530 $x491)))
 (let (($x495 (=> $x517 $x226)))
 (let (($x485 (and $x525 $x477)))
 (let (($x488 (=> $x485 $x226)))
 (let (($x560 (and (and (and (=> $x429 $x226) (=> (and $x420 $x427) $x226)) $x488) $x495)))
 (let (($x585 (and (and (and (and (and (and $x560 $x538) $x573) $x574) $x575) $x576) $x548)))
 (let (($x566 (and (and (and (and (and (and $x585 $x577) $x550) $x588) $x552) $x579) $x582)))
 (let (($x569 (and (and (and $x566 $x581) $x580) $x555)))
 (let (($x591 (= $x569 true)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x182 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x442 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x39 (concat ?x442 (concat ?x478 ?x182))))
 (let ((?x174 (bvadd ?x39 (_ bv4 32))))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x351))))
 (let ((?x381 (bvadd ?x448 (_ bv4 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x380))))
 (let ((?x393 (bvadd ?x310 (_ bv4 32))))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x410))))
 (let (($x497 (= (_ bv0 32) ?x159)))
 (let ((?x411 (ite $x497 (_ bv0 32) (_ bv1 32))))
 (let (($x399 (bvuge ?x411 (_ bv1 32))))
 (let (($x504 (= $x151 $x399)))
 (let (($x533 (=> $x501 $x504)))
 (let (($x391 (= ?x411 (_ bv0 32))))
 (let (($x503 (= $x502 $x391)))
 (let (($x519 (=> $x501 $x503)))
 (let ((?x434 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x434))))
 (let (($x536 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x394)))
 (let (($x537 (=> $x501 $x536)))
 (let (($x452 (= (_ bv0 32) ?x310)))
 (let ((?x405 (ite $x452 (_ bv0 32) (_ bv1 32))))
 (let (($x395 (bvuge ?x405 (_ bv1 32))))
 (let (($x518 (= $x531 $x395)))
 (let (($x496 (=> $x530 $x518)))
 (let (($x484 (= ?x405 (_ bv0 32))))
 (let (($x516 (= $x491 $x484)))
 (let (($x494 (=> $x530 $x516)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv1 32))) (select input.dst.llvm-mem ?x448))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv2 32))) ?x409))))
 (let (($x510 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x367)))
 (let (($x542 (=> $x530 $x510)))
 (let (($x526 (= (_ bv0 32) ?x448)))
 (let ((?x134 (ite $x526 (_ bv0 32) (_ bv1 32))))
 (let (($x388 (bvuge ?x134 (_ bv1 32))))
 (let (($x474 (= $x522 $x388)))
 (let (($x472 (=> $x525 $x474)))
 (let (($x358 (= ?x134 (_ bv0 32))))
 (let (($x487 (= $x477 $x358)))
 (let (($x473 (=> $x525 $x487)))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x354))))
 (let (($x521 (= input.spec-%var-l-1.2.1.2.0 ?x457)))
 (let (($x486 (=> $x525 $x521)))
 (let (($x167 (= (_ bv0 32) ?x39)))
 (let ((?x374 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x374 (_ bv1 32))))
 (let (($x471 (= $x499 $x334)))
 (let (($x479 (=> $x420 $x471)))
 (let (($x431 (and $x420 $x427)))
 (let (($x498 (=> $x431 $x226)))
 (let (($x363 (= ?x374 (_ bv0 32))))
 (let (($x430 (= $x427 $x363)))
 (let (($x466 (=> $x420 $x430)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x288)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x57)))
 (let (($x470 (= input.spec-%var-l-1.2.0 ?x475)))
 (let (($x467 (=> $x420 $x470)))
 (let (($x528 (and (and (and (and (= $x429 $x321) (= $x420 $x223)) (=> $x429 $x226)) $x467) $x466)))
 (let (($x12 (and (and (and (and (and (and $x528 $x498) $x479) $x486) $x473) $x472) $x488)))
 (let (($x544 (and (and (and (and (and (and $x12 $x542) $x494) $x495) $x496) $x537) $x519)))
 (let (($x509 (and (and $x544 $x538) $x533)))
 (let (($x571 (= $x509 true)))
 (let (($x221 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x433 (= $x221 $x399)))
 (let (($x124 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x446 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x173 (and $x446 $x196)))
 (let (($x186 (and $x173 $x283)))
 (let (($x307 (and $x186 $x124)))
 (let (($x121 (=> $x307 $x433)))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x180 (= $x330 $x391)))
 (let (($x31 (=> $x307 $x180)))
 (let (($x492 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x394)))
 (let (($x398 (=> $x307 $x492)))
 (let (($x412 (= $x124 $x395)))
 (let (($x403 (=> $x186 $x412)))
 (let (($x135 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x463 (= $x135 $x484)))
 (let (($x41 (=> $x186 $x463)))
 (let (($x364 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x367)))
 (let (($x462 (=> $x186 $x364)))
 (let (($x441 (and $x307 $x330)))
 (let (($x286 (=> $x441 $x226)))
 (let (($x520 (and $x186 $x135)))
 (let (($x24 (=> $x520 $x226)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x297 (and $x173 $x172)))
 (let (($x212 (=> $x297 $x226)))
 (let (($x362 (= $x283 $x388)))
 (let (($x460 (=> $x173 $x362)))
 (let (($x371 (= $x172 $x358)))
 (let (($x461 (=> $x173 $x371)))
 (let (($x370 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x457)))
 (let (($x482 (=> $x173 $x370)))
 (let (($x357 (= $x196 $x334)))
 (let (($x56 (=> $x446 $x357)))
 (let (($x129 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x329 (and $x446 $x129)))
 (let (($x150 (=> $x329 $x226)))
 (let (($x438 (= $x129 $x363)))
 (let (($x483 (=> $x446 $x438)))
 (let (($x228 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x475)))
 (let (($x201 (=> $x446 $x228)))
 (let (($x81 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x188 (=> $x81 $x226)))
 (let (($x490 (and (and (and (and (and (= $x81 $x321) (= $x446 $x223)) $x188) $x201) $x483) $x150)))
 (let (($x253 (and (and (and (and (and (and $x490 $x56) $x482) $x461) $x460) $x212) $x24)))
 (let (($x424 (and (and (and (and (and (and $x253 $x286) $x462) $x41) $x403) $x398) $x31)))
 (let (($x454 (and $x424 $x121)))
 (let (($x408 (= $x454 true)))
 (let (($x322 (= $x221 $x264)))
 (let (($x104 (=> $x307 $x322)))
 (let (($x243 (= $x330 $x336)))
 (let (($x323 (=> $x307 $x243)))
 (let (($x344 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x339)))
 (let (($x246 (=> $x307 $x344)))
 (let (($x170 (= $x124 $x312)))
 (let (($x219 (=> $x186 $x170)))
 (let (($x447 (= $x135 $x341)))
 (let (($x55 (=> $x186 $x447)))
 (let (($x298 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x119)))
 (let (($x325 (=> $x186 $x298)))
 (let (($x50 (= $x283 $x257)))
 (let (($x271 (=> $x173 $x50)))
 (let (($x191 (= $x172 $x171)))
 (let (($x340 (=> $x173 $x191)))
 (let (($x331 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x26)))
 (let (($x306 (=> $x173 $x331)))
 (let (($x89 (= $x196 $x278)))
 (let (($x83 (=> $x446 $x89)))
 (let (($x260 (= $x129 $x45)))
 (let (($x153 (=> $x446 $x260)))
 (let (($x233 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x53)))
 (let (($x244 (=> $x446 $x233)))
 (let (($x21 (and (and (and (and (and (= $x81 $x106) (= $x446 $x268)) $x188) $x150) $x244) $x153)))
 (let (($x373 (and (and (and (and (and (and $x21 $x83) $x306) $x340) $x271) $x212) $x325)))
 (let (($x256 (and (and (and (and (and (and $x373 $x55) $x24) $x219) $x246) $x323) $x286)))
 (let (($x355 (and $x256 $x104)))
 (let (($x259 (= $x355 true)))
 (let ((?x249 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x128 (= (_ bv0 3) ?x249)))
 (let (($x30 (= $x128 true)))
 (let (($x7 (= $x30 true)))
 (let (($x287 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x287 true)))
 (let (($x366 (= $x152 true)))
 (let (($x211 (= $x366 true)))
 (let (($x215 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265))))
 (let (($x184 (and true $x198)))
 (let (($x294 (and $x198 $x184)))
 (let (($x117 (= (bvand ?x318 (_ bv4294967288 32)) ?x318)))
 (let (($x102 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x43 (and $x102 $x117)))
 (let (($x301 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x71 (and (and (and (and (and $x184 $x301) $x102) $x43) $x294) $x215)))
 (let (($x79 (= true $x71)))
 (let (($x105 (not $x14)))
 (let (($x37 (=> $x105 $x79)))
 (let (($x118 (= $x37 true)))
 (let (($x240 (= $x118 true)))
 (let (($x163 (= $x240 true)))
 (let (($x82 (= $x105 true)))
 (let (($x22 (= $x82 true)))
 (let (($x305 (= $x22 true)))
 (let ((?x445 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x445)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x47 $x269)))
 (let (($x242 (and $x64 $x138)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x54 $x242)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x178)))))))
 (let (($x36 (and $x162 $x101)))
 (let (($x112 (= $x36 true)))
 (let (($x375 (= $x112 true)))
 (let (($x74 (= $x375 true)))
 (let (($x35 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x272 (= $x35 true)))
 (let (($x270 (= $x272 true)))
 (let (($x23 (and $x270 $x74)))
 (let (($x295 (and $x23 $x305)))
 (let (($x193 (and $x295 $x163)))
 (let (($x28 (and $x193 $x211)))
 (let (($x177 (and $x28 $x7)))
 (let (($x455 (and $x177 $x259)))
 (let (($x422 (and $x455 $x408)))
 (let (($x572 (and $x422 $x571)))
 (let (($x623 (and $x572 $x591)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x110 $x623)))
 (let (($x11 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x59 (_ bv3 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x123 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x11)))))))
 (let (($x169 (=> (and $x105 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x122 $x11)))))))
 (let (($x116 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x204 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x179 (_ bv1 32))) (or false (or false (and true (or $x38 $x116)))))))
 (let (($x210 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x179 (_ bv1 32)))) (or false (or false (and true (or $x38 $x116)))))))
 (let (($x309 (and $x210 $x169)))
 (let (($x593 (and $x309 $x592)))
 (let (($x314 (=> $x593 $x671)))
 (not $x314))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3018X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3013X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff06) #x01
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x0000fefb) #xff
    (ite (= x!0 #xfffffeff) #x00
    (ite (= x!0 #x0000fef9) #xff
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xffffff03) #x01
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #xffffff00) #x00
    (ite (= x!0 #xffffff01) #x00
    (ite (= x!0 #x0000fefc) #xff
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x0000fef7) #x00
    (ite (= x!0 #x00000005) #xfe
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xffffff02) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xffffff04) #x01
    (ite (= x!0 #x0000fefa) #xfe
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xffffff05) #x40
    (ite (= x!0 #x00000004) #xf5
    (ite (= x!0 #x0000fef8) #x00
    (ite (= x!0 #x0000fef5) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000fef6) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3018X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3013X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 114
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x273 (concat ?x216 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x231 (concat ?x27 (concat ?x356 ?x273))))
 (let (($x119 (= ?x231 ?x231)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x443 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x443 (_ bv1 32))))
 (let (($x298 (=> $x233 $x119)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x385)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x50)))
 (let (($x212 (= ?x297 ?x297)))
 (let (($x352 (=> $x233 $x212)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x183))))
 (let (($x72 (= (_ bv0 32) ?x137)))
 (let ((?x147 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x147 (_ bv1 32))))
 (let (($x67 (= $x233 $x260)))
 (let (($x235 (= false false)))
 (let (($x176 (= ?x443 (_ bv0 32))))
 (let (($x13 (=> $x176 $x235)))
 (let (($x111 (= ?x147 (_ bv0 32))))
 (let (($x437 (= $x176 $x111)))
 (let (($x19 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x137)))
 (let (($x315 (and (and (and (and (and $x19 $x437) $x13) $x67) $x352) $x298)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x51 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x160 (concat ?x172 (concat ?x306 ?x26))))
 (let (($x289 (= ?x160 ?x160)))
 (let (($x268 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x202 (ite $x268 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x202 (_ bv1 32))))
 (let (($x261 (=> $x60 $x289)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x83)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x48)))
 (let (($x308 (= ?x254 ?x254)))
 (let (($x63 (=> $x60 $x308)))
 (let (($x153 (= $x60 $x260)))
 (let (($x523 (= ?x202 (_ bv0 32))))
 (let (($x45 (= $x523 $x111)))
 (let (($x168 (and (and (and (=> $x523 $x235) (= input.dst.llvm-%l ?x137)) $x45) $x153)))
 (let (($x276 (and (and $x168 $x63) $x261)))
 (let (($x16 (not true)))
 (let (($x92 (or (or $x16 $x276) $x315)))
 (let (($x192 (= true true)))
 (let (($x439 (and $x192 $x92)))
 (let (($x304 (= $x439 true)))
 (let (($x109 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (= $x109 $x233)))
 (let (($x197 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x53 (= $x197 $x176)))
 (let (($x319 (and $x53 $x244)))
 (let (($x282 (= $x319 true)))
 (let (($x237 (= $x109 $x60)))
 (let (($x267 (= $x197 $x523)))
 (let (($x80 (and $x267 $x237)))
 (let (($x262 (= $x80 true)))
 (let (($x188 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x345 (= $x188 $x60)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x226 (= $x131 $x523)))
 (let (($x129 (and $x226 $x345)))
 (let (($x329 (= $x129 true)))
 (let ((?x7 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= (_ bv0 3) ?x7)))
 (let (($x155 (= $x177 true)))
 (let (($x81 (= $x155 true)))
 (let (($x211 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x211 true)))
 (let (($x103 (= $x28 true)))
 (let (($x249 (= $x103 true)))
 (let (($x296 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x291 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209))))
 (let (($x255 (and true $x291)))
 (let (($x294 (and $x291 $x255)))
 (let (($x43 (= (bvand ?x137 (_ bv4294967288 32)) ?x137)))
 (let (($x205 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x194 (and $x205 $x43)))
 (let (($x195 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x118 (and (and (and (and (and $x255 $x195) $x205) $x194) $x294) $x296)))
 (let (($x240 (= true $x118)))
 (let (($x105 (not $x14)))
 (let (($x163 (=> $x105 $x240)))
 (let (($x193 (= $x163 true)))
 (let (($x18 (= $x193 true)))
 (let (($x287 (= $x18 true)))
 (let (($x295 (= $x105 true)))
 (let (($x78 (= $x295 true)))
 (let (($x265 (= $x78 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x101)))
 (let ((?x445 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x445)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x64 $x138)))
 (let (($x112 (and $x242 $x36)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x68 $x112)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x269 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x66)))))))
 (let (($x74 (and $x269 $x375)))
 (let (($x23 (= $x74 true)))
 (let (($x82 (= $x23 true)))
 (let (($x22 (= $x82 true)))
 (let (($x270 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x300 (= $x270 true)))
 (let (($x292 (= $x300 true)))
 (let (($x305 (and $x292 $x22)))
 (let (($x317 (and $x305 $x265)))
 (let (($x152 (and $x317 $x287)))
 (let (($x128 (and $x152 $x249)))
 (let (($x42 (and $x128 $x81)))
 (let (($x150 (and $x42 $x329)))
 (let (($x161 (and $x150 $x262)))
 (let (($x120 (and $x161 $x282)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x227 (and $x35 $x120)))
 (let (($x6 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x70 (_ bv3 32))))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x110 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x6)))))))
 (let (($x247 (=> (and $x105 (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x214 $x6)))))))
 (let (($x100 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x230 (=> $x113 (or false (or false (and true (or $x126 $x100)))))))
 (let (($x258 (=> (and $x105 $x113) (or false (or false (and true (or $x126 $x100)))))))
 (let (($x266 (and $x258 $x247)))
 (let (($x90 (and $x266 $x227)))
 (let (($x93 (=> $x90 $x304)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x273 (concat ?x216 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x231 (concat ?x27 (concat ?x356 ?x273))))
 (let (($x119 (= ?x231 ?x231)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x443 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x443 (_ bv1 32))))
 (let (($x298 (=> $x233 $x119)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x385)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x50)))
 (let (($x212 (= ?x297 ?x297)))
 (let (($x352 (=> $x233 $x212)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x183))))
 (let (($x72 (= (_ bv0 32) ?x137)))
 (let ((?x147 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x147 (_ bv1 32))))
 (let (($x67 (= $x233 $x260)))
 (let (($x235 (= false false)))
 (let (($x176 (= ?x443 (_ bv0 32))))
 (let (($x13 (=> $x176 $x235)))
 (let (($x111 (= ?x147 (_ bv0 32))))
 (let (($x437 (= $x176 $x111)))
 (let (($x19 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x137)))
 (let (($x315 (and (and (and (and (and $x19 $x437) $x13) $x67) $x352) $x298)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x51 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x160 (concat ?x172 (concat ?x306 ?x26))))
 (let (($x289 (= ?x160 ?x160)))
 (let (($x268 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x202 (ite $x268 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x202 (_ bv1 32))))
 (let (($x261 (=> $x60 $x289)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x83)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x48)))
 (let (($x308 (= ?x254 ?x254)))
 (let (($x63 (=> $x60 $x308)))
 (let (($x153 (= $x60 $x260)))
 (let (($x523 (= ?x202 (_ bv0 32))))
 (let (($x45 (= $x523 $x111)))
 (let (($x168 (and (and (and (=> $x523 $x235) (= input.dst.llvm-%l ?x137)) $x45) $x153)))
 (let (($x276 (and (and $x168 $x63) $x261)))
 (let (($x16 (not true)))
 (let (($x92 (or (or $x16 $x276) $x315)))
 (let (($x192 (= true true)))
 (let (($x439 (and $x192 $x92)))
 (let (($x304 (= $x439 true)))
 (let (($x109 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (= $x109 $x233)))
 (let (($x197 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x53 (= $x197 $x176)))
 (let (($x319 (and $x53 $x244)))
 (let (($x282 (= $x319 true)))
 (let (($x237 (= $x109 $x60)))
 (let (($x267 (= $x197 $x523)))
 (let (($x80 (and $x267 $x237)))
 (let (($x262 (= $x80 true)))
 (let (($x188 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x345 (= $x188 $x60)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x226 (= $x131 $x523)))
 (let (($x129 (and $x226 $x345)))
 (let (($x329 (= $x129 true)))
 (let ((?x7 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= (_ bv0 3) ?x7)))
 (let (($x155 (= $x177 true)))
 (let (($x81 (= $x155 true)))
 (let (($x211 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x211 true)))
 (let (($x103 (= $x28 true)))
 (let (($x249 (= $x103 true)))
 (let (($x296 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x291 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209))))
 (let (($x255 (and true $x291)))
 (let (($x294 (and $x291 $x255)))
 (let (($x43 (= (bvand ?x137 (_ bv4294967288 32)) ?x137)))
 (let (($x205 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x194 (and $x205 $x43)))
 (let (($x195 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x118 (and (and (and (and (and $x255 $x195) $x205) $x194) $x294) $x296)))
 (let (($x240 (= true $x118)))
 (let (($x105 (not $x14)))
 (let (($x163 (=> $x105 $x240)))
 (let (($x193 (= $x163 true)))
 (let (($x18 (= $x193 true)))
 (let (($x287 (= $x18 true)))
 (let (($x295 (= $x105 true)))
 (let (($x78 (= $x295 true)))
 (let (($x265 (= $x78 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x101)))
 (let ((?x445 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x445)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x64 $x138)))
 (let (($x112 (and $x242 $x36)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x68 $x112)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x269 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x66)))))))
 (let (($x74 (and $x269 $x375)))
 (let (($x23 (= $x74 true)))
 (let (($x82 (= $x23 true)))
 (let (($x22 (= $x82 true)))
 (let (($x270 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x300 (= $x270 true)))
 (let (($x292 (= $x300 true)))
 (let (($x305 (and $x292 $x22)))
 (let (($x317 (and $x305 $x265)))
 (let (($x152 (and $x317 $x287)))
 (let (($x128 (and $x152 $x249)))
 (let (($x42 (and $x128 $x81)))
 (let (($x150 (and $x42 $x329)))
 (let (($x161 (and $x150 $x262)))
 (let (($x120 (and $x161 $x282)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x227 (and $x35 $x120)))
 (let (($x6 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x70 (_ bv3 32))))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x110 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x6)))))))
 (let (($x247 (=> (and $x105 (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x214 $x6)))))))
 (let (($x100 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x230 (=> $x113 (or false (or false (and true (or $x126 $x100)))))))
 (let (($x258 (=> (and $x105 $x113) (or false (or false (and true (or $x126 $x100)))))))
 (let (($x266 (and $x258 $x247)))
 (let (($x90 (and $x266 $x227)))
 (let (($x93 (=> $x90 $x304)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00820210)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x8fd24610)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x46)
                     #x8fd24614
                     #x10)
              #x8fd24617
              #x0f)
       #x8fd24616
       #xd2))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.ind-%var3196X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3201X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3201X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3196X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 115
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x216 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x315 (concat ?x298 (concat ?x251 ?x10))))
 (let (($x92 (= ?x315 ?x315)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x227 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x227 (_ bv1 32))))
 (let (($x439 (=> $x16 $x92)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x385)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x212)))
 (let (($x141 (= ?x186 ?x186)))
 (let (($x27 (=> $x16 $x141)))
 (let ((?x113 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x107))))
 (let (($x168 (= (_ bv0 32) ?x114)))
 (let ((?x21 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x342 (bvuge ?x21 (_ bv1 32))))
 (let (($x283 (= $x16 $x342)))
 (let (($x402 (= false false)))
 (let (($x90 (= ?x227 (_ bv0 32))))
 (let (($x335 (=> $x90 $x402)))
 (let (($x75 (= ?x21 (_ bv0 32))))
 (let (($x271 (= $x90 $x75)))
 (let (($x143 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114)))
 (let (($x77 (and (and (and (and (and $x143 $x271) $x335) $x283) $x27) $x439)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x299 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x303 (concat ?x276 (concat ?x160 ?x26))))
 (let (($x19 (= ?x303 ?x303)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x188 (_ bv1 32))))
 (let (($x437 (=> $x329 $x19)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x48)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x63)))
 (let (($x172 (= ?x17 ?x17)))
 (let (($x331 (=> $x329 $x172)))
 (let (($x173 (= $x329 $x342)))
 (let (($x60 (= ?x188 (_ bv0 32))))
 (let (($x85 (= $x60 $x75)))
 (let (($x373 (and (and (and (=> $x60 $x402) (= input.dst.llvm-%l ?x114)) $x85) $x173)))
 (let (($x324 (and (and $x373 $x331) $x437)))
 (let (($x154 (not true)))
 (let (($x65 (or (or $x154 $x324) $x77)))
 (let (($x45 (= true true)))
 (let (($x61 (and $x45 $x65)))
 (let (($x69 (= $x61 true)))
 (let (($x176 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x235 (= $x176 $x16)))
 (let (($x161 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x192 (= $x161 $x90)))
 (let (($x233 (=> $x161 $x402)))
 (let (($x76 (and (and $x233 $x192) $x235)))
 (let (($x361 (= $x76 true)))
 (let (($x319 (and (and (= $x161 $x60) (= $x176 $x329)) $x233)))
 (let (($x282 (= $x319 true)))
 (let (($x202 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x197 (=> $x202 $x402)))
 (let (($x129 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x150 (= $x129 $x329)))
 (let (($x345 (= $x202 $x60)))
 (let (($x109 (and (and $x345 $x150) $x197)))
 (let (($x237 (= $x109 true)))
 (let ((?x81 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x42 (= (_ bv0 3) ?x81)))
 (let (($x106 (= $x42 true)))
 (let (($x131 (= $x106 true)))
 (let (($x249 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x249 true)))
 (let (($x30 (= $x128 true)))
 (let (($x7 (= $x30 true)))
 (let (($x284 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x200 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x200) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x200))))
 (let (($x208 (and true $x245)))
 (let (($x294 (and $x245 $x208)))
 (let (($x194 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x97 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x79 (and $x97 $x194)))
 (let (($x165 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x113 (bvsub ?x113 (_ bv4 32))) (bvult ?x113 (bvsub ?x113 (_ bv4 32))))))
 (let (($x193 (and (and (and (and (and $x208 $x165) $x97) $x79) $x294) $x284)))
 (let (($x18 (= true $x193)))
 (let (($x105 (not $x14)))
 (let (($x287 (=> $x105 $x18)))
 (let (($x152 (= $x287 true)))
 (let (($x366 (= $x152 true)))
 (let (($x211 (= $x366 true)))
 (let (($x317 (= $x105 true)))
 (let (($x198 (= $x317 true)))
 (let (($x209 (= $x198 true)))
 (let ((?x375 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x375)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x242 $x36)))
 (let (($x23 (and $x112 $x74)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x203 $x23)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x47)))))))
 (let (($x22 (and $x138 $x82)))
 (let (($x305 (= $x22 true)))
 (let (($x295 (= $x305 true)))
 (let (($x78 (= $x295 true)))
 (let (($x292 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x178 (= $x292 true)))
 (let (($x190 (= $x178 true)))
 (let (($x265 (and $x190 $x78)))
 (let (($x184 (and $x265 $x209)))
 (let (($x28 (and $x184 $x211)))
 (let (($x177 (and $x28 $x7)))
 (let (($x446 (and $x177 $x131)))
 (let (($x80 (and $x446 $x237)))
 (let (($x120 (and $x80 $x282)))
 (let (($x72 (and $x120 $x361)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x270 $x72)))
 (let (($x169 (bvugt ?x113 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd ?x113 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x35 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x169)))))))
 (let (($x95 (=> (and $x105 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x123 $x169)))))))
 (let (($x210 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x122 (or false (or false (and true (or $x204 $x210)))))))
 (let (($x185 (=> (and $x105 $x122) (or false (or false (and true (or $x204 $x210)))))))
 (let (($x148 (and $x185 $x95)))
 (let (($x111 (and $x148 $x147)))
 (let (($x156 (=> $x111 $x69)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x216 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x315 (concat ?x298 (concat ?x251 ?x10))))
 (let (($x92 (= ?x315 ?x315)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x227 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x227 (_ bv1 32))))
 (let (($x439 (=> $x16 $x92)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x385)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x212)))
 (let (($x141 (= ?x186 ?x186)))
 (let (($x27 (=> $x16 $x141)))
 (let ((?x113 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x107))))
 (let (($x168 (= (_ bv0 32) ?x114)))
 (let ((?x21 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x342 (bvuge ?x21 (_ bv1 32))))
 (let (($x283 (= $x16 $x342)))
 (let (($x402 (= false false)))
 (let (($x90 (= ?x227 (_ bv0 32))))
 (let (($x335 (=> $x90 $x402)))
 (let (($x75 (= ?x21 (_ bv0 32))))
 (let (($x271 (= $x90 $x75)))
 (let (($x143 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114)))
 (let (($x77 (and (and (and (and (and $x143 $x271) $x335) $x283) $x27) $x439)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x299 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x303 (concat ?x276 (concat ?x160 ?x26))))
 (let (($x19 (= ?x303 ?x303)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x188 (_ bv1 32))))
 (let (($x437 (=> $x329 $x19)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x48)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x63)))
 (let (($x172 (= ?x17 ?x17)))
 (let (($x331 (=> $x329 $x172)))
 (let (($x173 (= $x329 $x342)))
 (let (($x60 (= ?x188 (_ bv0 32))))
 (let (($x85 (= $x60 $x75)))
 (let (($x373 (and (and (and (=> $x60 $x402) (= input.dst.llvm-%l ?x114)) $x85) $x173)))
 (let (($x324 (and (and $x373 $x331) $x437)))
 (let (($x154 (not true)))
 (let (($x65 (or (or $x154 $x324) $x77)))
 (let (($x45 (= true true)))
 (let (($x61 (and $x45 $x65)))
 (let (($x69 (= $x61 true)))
 (let (($x176 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x235 (= $x176 $x16)))
 (let (($x161 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x192 (= $x161 $x90)))
 (let (($x233 (=> $x161 $x402)))
 (let (($x76 (and (and $x233 $x192) $x235)))
 (let (($x361 (= $x76 true)))
 (let (($x319 (and (and (= $x161 $x60) (= $x176 $x329)) $x233)))
 (let (($x282 (= $x319 true)))
 (let (($x202 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x197 (=> $x202 $x402)))
 (let (($x129 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x150 (= $x129 $x329)))
 (let (($x345 (= $x202 $x60)))
 (let (($x109 (and (and $x345 $x150) $x197)))
 (let (($x237 (= $x109 true)))
 (let ((?x81 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x42 (= (_ bv0 3) ?x81)))
 (let (($x106 (= $x42 true)))
 (let (($x131 (= $x106 true)))
 (let (($x249 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x249 true)))
 (let (($x30 (= $x128 true)))
 (let (($x7 (= $x30 true)))
 (let (($x284 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x200 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x200) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x200))))
 (let (($x208 (and true $x245)))
 (let (($x294 (and $x245 $x208)))
 (let (($x194 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x97 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x79 (and $x97 $x194)))
 (let (($x165 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x113 (bvsub ?x113 (_ bv4 32))) (bvult ?x113 (bvsub ?x113 (_ bv4 32))))))
 (let (($x193 (and (and (and (and (and $x208 $x165) $x97) $x79) $x294) $x284)))
 (let (($x18 (= true $x193)))
 (let (($x105 (not $x14)))
 (let (($x287 (=> $x105 $x18)))
 (let (($x152 (= $x287 true)))
 (let (($x366 (= $x152 true)))
 (let (($x211 (= $x366 true)))
 (let (($x317 (= $x105 true)))
 (let (($x198 (= $x317 true)))
 (let (($x209 (= $x198 true)))
 (let ((?x375 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x375)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x242 $x36)))
 (let (($x23 (and $x112 $x74)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x203 $x23)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x47)))))))
 (let (($x22 (and $x138 $x82)))
 (let (($x305 (= $x22 true)))
 (let (($x295 (= $x305 true)))
 (let (($x78 (= $x295 true)))
 (let (($x292 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x178 (= $x292 true)))
 (let (($x190 (= $x178 true)))
 (let (($x265 (and $x190 $x78)))
 (let (($x184 (and $x265 $x209)))
 (let (($x28 (and $x184 $x211)))
 (let (($x177 (and $x28 $x7)))
 (let (($x446 (and $x177 $x131)))
 (let (($x80 (and $x446 $x237)))
 (let (($x120 (and $x80 $x282)))
 (let (($x72 (and $x120 $x361)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x270 $x72)))
 (let (($x169 (bvugt ?x113 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd ?x113 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x35 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x169)))))))
 (let (($x95 (=> (and $x105 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x123 $x169)))))))
 (let (($x210 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x122 (or false (or false (and true (or $x204 $x210)))))))
 (let (($x185 (=> (and $x105 $x122) (or false (or false (and true (or $x204 $x210)))))))
 (let (($x148 (and $x185 $x95)))
 (let (($x111 (and $x148 $x147)))
 (let (($x156 (=> $x111 $x69)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00820210)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x8fd24610)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x46)
                     #x8fd24614
                     #x10)
              #x8fd24617
              #x0f)
       #x8fd24616
       #xd2))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.ind-%var3196X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3201X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3201X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3196X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 116
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x232 (concat ?x432 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x405 (concat ?x452 (concat ?x380 ?x232))))
 (let (($x484 (= ?x405 ?x405)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x316 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x316 (_ bv1 32))))
 (let (($x463 (=> $x40 $x484)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x378)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x367)))
 (let (($x381 (= ?x417 ?x417)))
 (let (($x281 (=> $x40 $x381)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x274))))
 (let (($x56 (= (_ bv0 32) ?x117)))
 (let ((?x465 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x465 (_ bv1 32))))
 (let (($x349 (= $x40 $x144)))
 (let (($x109 (= false false)))
 (let (($x136 (= ?x316 (_ bv0 32))))
 (let (($x401 (=> $x136 $x109)))
 (let (($x450 (= ?x465 (_ bv0 32))))
 (let (($x421 (= $x136 $x450)))
 (let (($x253 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x117)))
 (let (($x403 (and (and (and (and (and $x253 $x421) $x401) $x349) $x281) $x463)))
 (let ((?x481 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x351 (concat ?x481 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x448 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x371 (concat ?x358 (concat ?x448 ?x351))))
 (let (($x461 (= ?x371 ?x371)))
 (let (($x345 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x129 (ite $x345 (_ bv0 32) (_ bv1 32))))
 (let (($x402 (bvuge ?x129 (_ bv1 32))))
 (let (($x419 (=> $x402 $x461)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x359)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x482)))
 (let (($x372 (= ?x383 ?x383)))
 (let (($x365 (=> $x402 $x372)))
 (let (($x139 (= $x402 $x144)))
 (let (($x329 (= ?x129 (_ bv0 32))))
 (let (($x302 (= $x329 $x450)))
 (let (($x460 (and (and (and (=> $x329 $x109) (= input.dst.llvm-%l ?x117)) $x302) $x139)))
 (let (($x241 (and (and $x460 $x365) $x419)))
 (let (($x490 (not true)))
 (let (($x392 (or (or $x490 $x241) $x403)))
 (let (($x415 (= true true)))
 (let (($x390 (and $x415 $x392)))
 (let (($x382 (= $x390 true)))
 (let ((?x126 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x328))))
 (let ((?x456 (bvadd ?x379 (_ bv4 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x456 (_ bv1 32))) (select input.dst.llvm-mem ?x456))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x456 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x456 (_ bv2 32))) ?x337))))
 (let (($x57 (= (_ bv0 32) ?x288)))
 (let ((?x475 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x475 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x88 (= $x55 $x444)))
 (let (($x65 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x298 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (and $x298 $x65)))
 (let (($x442 (=> $x156 $x88)))
 (let (($x228 (= ?x475 (_ bv0 32))))
 (let (($x52 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x52 $x228)))
 (let (($x416 (=> $x156 $x201)))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x379 (_ bv1 32))) (select input.dst.llvm-mem ?x379))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x379 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x379 (_ bv2 32))) ?x355))))
 (let (($x343 (= input.spec-%var-l-1.2.1.2.0 ?x321)))
 (let (($x223 (=> $x156 $x343)))
 (let (($x336 (= (_ bv0 32) ?x379)))
 (let ((?x243 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x243 (_ bv1 32))))
 (let (($x256 (= $x65 $x286)))
 (let (($x221 (=> $x298 $x256)))
 (let (($x323 (= ?x243 (_ bv0 32))))
 (let (($x231 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x332 (= $x231 $x323)))
 (let (($x441 (=> $x298 $x332)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x339 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x293 (concat (select input.dst.llvm-mem ?x59) (concat ?x377 (concat ?x339 ?x145)))))
 (let (($x146 (= input.spec-%var-l-1.2.0 ?x293)))
 (let (($x250 (=> $x298 $x146)))
 (let (($x44 (= $x298 $x40)))
 (let (($x220 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x34 (= $x220 $x136)))
 (let (($x263 (and (and (and (=> $x220 $x109) (=> (and $x298 $x231) $x109)) $x34) $x44)))
 (let (($x167 (and (and (and (and (and (and $x263 $x250) $x441) $x221) $x223) $x416) $x442)))
 (let (($x374 (= $x167 true)))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x72 (concat ?x361 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x153 (concat ?x260 (concat ?x111 ?x72))))
 (let ((?x160 (bvadd ?x153 (_ bv4 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x26))))
 (let (($x143 (= (_ bv0 32) ?x5)))
 (let ((?x271 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x271 (_ bv1 32))))
 (let (($x58 (= $x55 $x213)))
 (let (($x520 (=> $x156 $x58)))
 (let (($x304 (= ?x271 (_ bv0 32))))
 (let (($x341 (= $x52 $x304)))
 (let (($x447 (=> $x156 $x341)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x89))))
 (let (($x86 (= input.spec-%var-l-1.2.1.2.0 ?x67)))
 (let (($x179 (=> $x156 $x86)))
 (let (($x325 (= (_ bv0 32) ?x153)))
 (let ((?x168 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x373 (bvuge ?x168 (_ bv1 32))))
 (let (($x61 (= $x65 $x373)))
 (let (($x69 (=> $x298 $x61)))
 (let (($x439 (and $x298 $x231)))
 (let (($x77 (=> $x439 $x109)))
 (let (($x21 (= ?x168 (_ bv0 32))))
 (let (($x315 (= $x231 $x21)))
 (let (($x92 (=> $x298 $x315)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x176)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x216 (= input.spec-%var-l-1.2.0 ?x120)))
 (let (($x356 (=> $x298 $x216)))
 (let (($x312 (and (and (and (and (= $x220 $x329) (= $x298 $x402)) (=> $x220 $x109)) $x356) $x92)))
 (let (($x236 (and (and (and (and (and $x312 $x77) $x69) $x179) $x447) $x520)))
 (let (($x280 (= $x236 true)))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x257 (= $x283 $x213)))
 (let (($x173 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x267 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x108 (and $x267 $x173)))
 (let (($x352 (=> $x108 $x257)))
 (let (($x225 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x335 (= $x225 $x304)))
 (let (($x93 (=> $x108 $x335)))
 (let (($x306 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x67)))
 (let (($x261 (=> $x108 $x306)))
 (let (($x278 (= $x173 $x373)))
 (let (($x133 (=> $x267 $x278)))
 (let (($x187 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x13 (and $x267 $x187)))
 (let (($x342 (=> $x13 $x109)))
 (let (($x75 (= $x187 $x21)))
 (let (($x85 (=> $x267 $x75)))
 (let (($x227 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x120)))
 (let (($x90 (=> $x267 $x227)))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x237 (=> $x188 $x109)))
 (let (($x171 (and (and (and (and (and (= $x188 $x329) (= $x267 $x402)) $x237) $x90) $x85) $x342)))
 (let (($x186 (and (and (and (and $x171 $x133) $x261) $x93) $x352)))
 (let (($x141 (= $x186 true)))
 (let ((?x131 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x446 (= (_ bv0 3) ?x131)))
 (let (($x268 (= $x446 true)))
 (let (($x202 (= $x268 true)))
 (let (($x7 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x177 (= $x7 true)))
 (let (($x155 (= $x177 true)))
 (let (($x81 (= $x155 true)))
 (let (($x37 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x301 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x301) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x301))))
 (let (($x215 (and true $x166)))
 (let (($x294 (and $x166 $x215)))
 (let (($x79 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x318 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x240 (and $x318 $x79)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x152 (and (and (and (and (and $x215 $x71) $x318) $x240) $x294) $x37)))
 (let (($x366 (= true $x152)))
 (let (($x105 (not $x14)))
 (let (($x211 (=> $x105 $x366)))
 (let (($x28 (= $x211 true)))
 (let (($x103 (= $x28 true)))
 (let (($x249 (= $x103 true)))
 (let (($x184 (= $x105 true)))
 (let (($x291 (= $x184 true)))
 (let (($x200 (= $x291 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x82)))
 (let ((?x375 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x375)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x112 $x74)))
 (let (($x305 (and $x23 $x22)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x54 $x305)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x64)))))))
 (let (($x78 (and $x36 $x295)))
 (let (($x265 (= $x78 true)))
 (let (($x317 (= $x265 true)))
 (let (($x198 (= $x317 true)))
 (let (($x190 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x66 (= $x190 true)))
 (let (($x162 (= $x66 true)))
 (let (($x209 (and $x162 $x198)))
 (let (($x255 (and $x209 $x200)))
 (let (($x128 (and $x255 $x249)))
 (let (($x42 (and $x128 $x81)))
 (let (($x523 (and $x42 $x202)))
 (let (($x27 (and $x523 $x141)))
 (let (($x327 (and $x27 $x280)))
 (let (($x363 (and $x327 $x374)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x438 (and $x292 $x363)))
 (let (($x247 (bvugt ?x122 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x309 (bvadd ?x122 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x309)))
 (let (($x270 (=> (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x247)))))))
 (let (($x199 (=> (and $x105 (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x110 $x247)))))))
 (let (($x258 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x6 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x126 (_ bv1 32))) (or false (or false (and true (or $x230 $x258)))))))
 (let (($x229 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x126 (_ bv1 32)))) (or false (or false (and true (or $x230 $x258)))))))
 (let (($x239 (and $x229 $x199)))
 (let (($x483 (and $x239 $x438)))
 (let (($x489 (=> $x483 $x382)))
 (not $x489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x232 (concat ?x432 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x405 (concat ?x452 (concat ?x380 ?x232))))
 (let (($x484 (= ?x405 ?x405)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x316 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x316 (_ bv1 32))))
 (let (($x463 (=> $x40 $x484)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x378)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x367)))
 (let (($x381 (= ?x417 ?x417)))
 (let (($x281 (=> $x40 $x381)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x274))))
 (let (($x56 (= (_ bv0 32) ?x117)))
 (let ((?x465 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x465 (_ bv1 32))))
 (let (($x349 (= $x40 $x144)))
 (let (($x109 (= false false)))
 (let (($x136 (= ?x316 (_ bv0 32))))
 (let (($x401 (=> $x136 $x109)))
 (let (($x450 (= ?x465 (_ bv0 32))))
 (let (($x421 (= $x136 $x450)))
 (let (($x253 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x117)))
 (let (($x403 (and (and (and (and (and $x253 $x421) $x401) $x349) $x281) $x463)))
 (let ((?x481 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x351 (concat ?x481 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x448 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x371 (concat ?x358 (concat ?x448 ?x351))))
 (let (($x461 (= ?x371 ?x371)))
 (let (($x345 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x129 (ite $x345 (_ bv0 32) (_ bv1 32))))
 (let (($x402 (bvuge ?x129 (_ bv1 32))))
 (let (($x419 (=> $x402 $x461)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x359)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x482)))
 (let (($x372 (= ?x383 ?x383)))
 (let (($x365 (=> $x402 $x372)))
 (let (($x139 (= $x402 $x144)))
 (let (($x329 (= ?x129 (_ bv0 32))))
 (let (($x302 (= $x329 $x450)))
 (let (($x460 (and (and (and (=> $x329 $x109) (= input.dst.llvm-%l ?x117)) $x302) $x139)))
 (let (($x241 (and (and $x460 $x365) $x419)))
 (let (($x490 (not true)))
 (let (($x392 (or (or $x490 $x241) $x403)))
 (let (($x415 (= true true)))
 (let (($x390 (and $x415 $x392)))
 (let (($x382 (= $x390 true)))
 (let ((?x126 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x328))))
 (let ((?x456 (bvadd ?x379 (_ bv4 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x456 (_ bv1 32))) (select input.dst.llvm-mem ?x456))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x456 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x456 (_ bv2 32))) ?x337))))
 (let (($x57 (= (_ bv0 32) ?x288)))
 (let ((?x475 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x475 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x88 (= $x55 $x444)))
 (let (($x65 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x298 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (and $x298 $x65)))
 (let (($x442 (=> $x156 $x88)))
 (let (($x228 (= ?x475 (_ bv0 32))))
 (let (($x52 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x52 $x228)))
 (let (($x416 (=> $x156 $x201)))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x379 (_ bv1 32))) (select input.dst.llvm-mem ?x379))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x379 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x379 (_ bv2 32))) ?x355))))
 (let (($x343 (= input.spec-%var-l-1.2.1.2.0 ?x321)))
 (let (($x223 (=> $x156 $x343)))
 (let (($x336 (= (_ bv0 32) ?x379)))
 (let ((?x243 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x243 (_ bv1 32))))
 (let (($x256 (= $x65 $x286)))
 (let (($x221 (=> $x298 $x256)))
 (let (($x323 (= ?x243 (_ bv0 32))))
 (let (($x231 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x332 (= $x231 $x323)))
 (let (($x441 (=> $x298 $x332)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x339 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x293 (concat (select input.dst.llvm-mem ?x59) (concat ?x377 (concat ?x339 ?x145)))))
 (let (($x146 (= input.spec-%var-l-1.2.0 ?x293)))
 (let (($x250 (=> $x298 $x146)))
 (let (($x44 (= $x298 $x40)))
 (let (($x220 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x34 (= $x220 $x136)))
 (let (($x263 (and (and (and (=> $x220 $x109) (=> (and $x298 $x231) $x109)) $x34) $x44)))
 (let (($x167 (and (and (and (and (and (and $x263 $x250) $x441) $x221) $x223) $x416) $x442)))
 (let (($x374 (= $x167 true)))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x72 (concat ?x361 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x153 (concat ?x260 (concat ?x111 ?x72))))
 (let ((?x160 (bvadd ?x153 (_ bv4 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x26))))
 (let (($x143 (= (_ bv0 32) ?x5)))
 (let ((?x271 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x271 (_ bv1 32))))
 (let (($x58 (= $x55 $x213)))
 (let (($x520 (=> $x156 $x58)))
 (let (($x304 (= ?x271 (_ bv0 32))))
 (let (($x341 (= $x52 $x304)))
 (let (($x447 (=> $x156 $x341)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x89))))
 (let (($x86 (= input.spec-%var-l-1.2.1.2.0 ?x67)))
 (let (($x179 (=> $x156 $x86)))
 (let (($x325 (= (_ bv0 32) ?x153)))
 (let ((?x168 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x373 (bvuge ?x168 (_ bv1 32))))
 (let (($x61 (= $x65 $x373)))
 (let (($x69 (=> $x298 $x61)))
 (let (($x439 (and $x298 $x231)))
 (let (($x77 (=> $x439 $x109)))
 (let (($x21 (= ?x168 (_ bv0 32))))
 (let (($x315 (= $x231 $x21)))
 (let (($x92 (=> $x298 $x315)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x176)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x216 (= input.spec-%var-l-1.2.0 ?x120)))
 (let (($x356 (=> $x298 $x216)))
 (let (($x312 (and (and (and (and (= $x220 $x329) (= $x298 $x402)) (=> $x220 $x109)) $x356) $x92)))
 (let (($x236 (and (and (and (and (and $x312 $x77) $x69) $x179) $x447) $x520)))
 (let (($x280 (= $x236 true)))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x257 (= $x283 $x213)))
 (let (($x173 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x267 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x108 (and $x267 $x173)))
 (let (($x352 (=> $x108 $x257)))
 (let (($x225 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x335 (= $x225 $x304)))
 (let (($x93 (=> $x108 $x335)))
 (let (($x306 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x67)))
 (let (($x261 (=> $x108 $x306)))
 (let (($x278 (= $x173 $x373)))
 (let (($x133 (=> $x267 $x278)))
 (let (($x187 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x13 (and $x267 $x187)))
 (let (($x342 (=> $x13 $x109)))
 (let (($x75 (= $x187 $x21)))
 (let (($x85 (=> $x267 $x75)))
 (let (($x227 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x120)))
 (let (($x90 (=> $x267 $x227)))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x237 (=> $x188 $x109)))
 (let (($x171 (and (and (and (and (and (= $x188 $x329) (= $x267 $x402)) $x237) $x90) $x85) $x342)))
 (let (($x186 (and (and (and (and $x171 $x133) $x261) $x93) $x352)))
 (let (($x141 (= $x186 true)))
 (let ((?x131 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x446 (= (_ bv0 3) ?x131)))
 (let (($x268 (= $x446 true)))
 (let (($x202 (= $x268 true)))
 (let (($x7 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x177 (= $x7 true)))
 (let (($x155 (= $x177 true)))
 (let (($x81 (= $x155 true)))
 (let (($x37 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x301 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x301) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x301))))
 (let (($x215 (and true $x166)))
 (let (($x294 (and $x166 $x215)))
 (let (($x79 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x318 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x240 (and $x318 $x79)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x152 (and (and (and (and (and $x215 $x71) $x318) $x240) $x294) $x37)))
 (let (($x366 (= true $x152)))
 (let (($x105 (not $x14)))
 (let (($x211 (=> $x105 $x366)))
 (let (($x28 (= $x211 true)))
 (let (($x103 (= $x28 true)))
 (let (($x249 (= $x103 true)))
 (let (($x184 (= $x105 true)))
 (let (($x291 (= $x184 true)))
 (let (($x200 (= $x291 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x82)))
 (let ((?x375 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x375)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x112 $x74)))
 (let (($x305 (and $x23 $x22)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x54 $x305)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x64)))))))
 (let (($x78 (and $x36 $x295)))
 (let (($x265 (= $x78 true)))
 (let (($x317 (= $x265 true)))
 (let (($x198 (= $x317 true)))
 (let (($x190 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x66 (= $x190 true)))
 (let (($x162 (= $x66 true)))
 (let (($x209 (and $x162 $x198)))
 (let (($x255 (and $x209 $x200)))
 (let (($x128 (and $x255 $x249)))
 (let (($x42 (and $x128 $x81)))
 (let (($x523 (and $x42 $x202)))
 (let (($x27 (and $x523 $x141)))
 (let (($x327 (and $x27 $x280)))
 (let (($x363 (and $x327 $x374)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x438 (and $x292 $x363)))
 (let (($x247 (bvugt ?x122 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x309 (bvadd ?x122 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x309)))
 (let (($x270 (=> (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x247)))))))
 (let (($x199 (=> (and $x105 (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x110 $x247)))))))
 (let (($x258 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x6 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x126 (_ bv1 32))) (or false (or false (and true (or $x230 $x258)))))))
 (let (($x229 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x126 (_ bv1 32)))) (or false (or false (and true (or $x230 $x258)))))))
 (let (($x239 (and $x229 $x199)))
 (let (($x483 (and $x239 $x438)))
 (let (($x489 (=> $x483 $x382)))
 (not $x489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3201X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3196X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 117
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x627 (concat ?x597 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x611 (concat ?x621 (concat ?x600 ?x627))))
 (let (($x115 (= ?x611 ?x611)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x369 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x409 (bvuge ?x369 (_ bv1 32))))
 (let (($x612 (=> $x409 $x115)))
 (let ((?x596 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x596)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x631)))
 (let (($x626 (= ?x20 ?x20)))
 (let (($x617 (=> $x409 $x626)))
 (let ((?x214 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x189))))
 (let (($x575 (= (_ bv0 32) ?x43)))
 (let ((?x586 (ite $x575 (_ bv0 32) (_ bv1 32))))
 (let (($x567 (bvuge ?x586 (_ bv1 32))))
 (let (($x594 (= $x409 $x567)))
 (let (($x50 (= false false)))
 (let (($x364 (= ?x369 (_ bv0 32))))
 (let (($x615 (=> $x364 $x50)))
 (let (($x546 (= ?x586 (_ bv0 32))))
 (let (($x593 (= $x364 $x546)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43)))
 (let (($x607 (and (and (and (and (and $x592 $x593) $x615) $x594) $x617) $x612)))
 (let ((?x564 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x558 (concat ?x564 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x566 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x568 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x554 (concat ?x568 (concat ?x566 ?x558))))
 (let (($x580 (= ?x554 ?x554)))
 (let (($x150 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x267 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x267 (_ bv1 32))))
 (let (($x587 (=> $x109 $x580)))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x565)))
 (let ((?x563 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x584)))
 (let (($x551 (= ?x563 ?x563)))
 (let (($x552 (=> $x109 $x551)))
 (let (($x547 (= $x109 $x567)))
 (let (($x402 (= ?x267 (_ bv0 32))))
 (let (($x576 (= $x402 $x546)))
 (let (($x569 (and (and (and (=> $x402 $x50) (= input.dst.llvm-%l ?x43)) $x576) $x547)))
 (let (($x623 (and (and $x569 $x552) $x587)))
 (let (($x574 (not true)))
 (let (($x604 (or (or $x574 $x623) $x607)))
 (let (($x590 (= true true)))
 (let (($x610 (and $x590 $x604)))
 (let (($x618 (= $x610 true)))
 (let ((?x204 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x484 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x500))))
 (let ((?x407 (bvadd ?x484 (_ bv4 32))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x397))))
 (let ((?x467 (bvadd ?x411 (_ bv4 32))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x467 (_ bv1 32))) (select input.dst.llvm-mem ?x467))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x467 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x467 (_ bv2 32))) ?x430))))
 (let ((?x530 (bvadd ?x499 (_ bv4 32))))
 (let ((?x515 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv1 32))) (select input.dst.llvm-mem ?x530))))
 (let ((?x517 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv2 32))) ?x515))))
 (let (($x495 (= (_ bv0 32) ?x517)))
 (let ((?x543 (ite $x495 (_ bv0 32) (_ bv1 32))))
 (let (($x512 (bvuge ?x543 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x501 (= $x140 $x512)))
 (let (($x350 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x438 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x475 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x456 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x416 (and $x456 $x475)))
 (let (($x357 (and $x416 $x438)))
 (let (($x457 (and $x357 $x350)))
 (let (($x158 (=> $x457 $x501)))
 (let (($x531 (= ?x543 (_ bv0 32))))
 (let (($x359 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x518 (= $x359 $x531)))
 (let (($x496 (=> $x457 $x518)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x499 (_ bv1 32))) (select input.dst.llvm-mem ?x499))))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd ?x499 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x499 (_ bv2 32))) ?x473))))
 (let (($x488 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x485)))
 (let (($x12 (=> $x457 $x488)))
 (let (($x471 (= (_ bv0 32) ?x499)))
 (let ((?x479 (ite $x471 (_ bv0 32) (_ bv1 32))))
 (let (($x521 (bvuge ?x479 (_ bv1 32))))
 (let (($x486 (= $x350 $x521)))
 (let (($x524 (=> $x357 $x486)))
 (let (($x506 (= ?x479 (_ bv0 32))))
 (let (($x302 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x525 (= $x302 $x506)))
 (let (($x480 (=> $x357 $x525)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x505 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x429))))
 (let (($x469 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x505)))
 (let (($x470 (=> $x357 $x469)))
 (let (($x391 (= (_ bv0 32) ?x411)))
 (let ((?x180 (ite $x391 (_ bv0 32) (_ bv1 32))))
 (let (($x433 (bvuge ?x180 (_ bv1 32))))
 (let (($x121 (= $x438 $x433)))
 (let (($x454 (=> $x416 $x121)))
 (let (($x31 (= ?x180 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x424 (= $x167 $x31)))
 (let (($x399 (=> $x416 $x424)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv1 32))) (select input.dst.llvm-mem ?x484))))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv2 32))) ?x94))))
 (let (($x393 (= input.spec-%var-l-1.2.1.2.0 ?x435)))
 (let (($x436 (=> $x416 $x393)))
 (let (($x463 (= (_ bv0 32) ?x484)))
 (let ((?x403 (ite $x463 (_ bv0 32) (_ bv1 32))))
 (let (($x489 (bvuge ?x403 (_ bv1 32))))
 (let (($x406 (= $x475 $x489)))
 (let (($x116 (=> $x456 $x406)))
 (let (($x392 (= ?x403 (_ bv0 32))))
 (let (($x9 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x390 (= $x9 $x392)))
 (let (($x382 (=> $x456 $x390)))
 (let ((?x368 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x417 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x70 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem ?x70) (concat ?x417 (concat ?x376 ?x368)))))
 (let (($x164 (= input.spec-%var-l-1.2.0 ?x412)))
 (let (($x310 (=> $x456 $x164)))
 (let (($x400 (= $x456 $x409)))
 (let (($x223 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x462 (= $x223 $x364)))
 (let (($x372 (and $x457 $x359)))
 (let (($x365 (=> $x372 $x50)))
 (let (($x139 (and $x357 $x302)))
 (let (($x460 (=> $x139 $x50)))
 (let (($x490 (and $x416 $x167)))
 (let (($x334 (=> $x490 $x50)))
 (let (($x541 (and (and (and (=> $x223 $x50) (=> (and $x456 $x9) $x50)) $x334) $x460)))
 (let (($x532 (and (and (and (and (and (and $x541 $x365) $x462) $x400) $x310) $x382) $x116)))
 (let (($x509 (and (and (and (and (and (and $x532 $x436) $x399) $x454) $x470) $x480) $x524)))
 (let (($x557 (and (and (and $x509 $x12) $x496) $x158)))
 (let (($x559 (= $x557 true)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x111 (concat ?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x153 (concat ?x45 (concat ?x361 ?x111))))
 (let ((?x261 (bvadd ?x153 (_ bv4 32))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x160))))
 (let ((?x77 (bvadd ?x277 (_ bv4 32))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x69))))
 (let ((?x377 (bvadd ?x218 (_ bv4 32))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x344))))
 (let (($x73 (= (_ bv0 32) ?x25)))
 (let ((?x311 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x328 (bvuge ?x311 (_ bv1 32))))
 (let (($x459 (= $x140 $x328)))
 (let (($x134 (=> $x457 $x459)))
 (let (($x440 (= ?x311 (_ bv0 32))))
 (let (($x482 (= $x359 $x440)))
 (let (($x383 (=> $x457 $x482)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x316))))
 (let (($x353 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x263)))
 (let (($x354 (=> $x457 $x353)))
 (let (($x62 (= (_ bv0 32) ?x218)))
 (let ((?x52 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x52 (_ bv1 32))))
 (let (($x413 (= $x350 $x55)))
 (let (($x174 (=> $x357 $x413)))
 (let (($x341 (= ?x52 (_ bv0 32))))
 (let (($x362 (= $x302 $x341)))
 (let (($x144 (=> $x357 $x362)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x216))))
 (let (($x56 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x92)))
 (let (($x465 (=> $x357 $x56)))
 (let (($x51 (= (_ bv0 32) ?x277)))
 (let ((?x26 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x26 (_ bv1 32))))
 (let (($x483 (= $x438 $x304)))
 (let (($x415 (=> $x416 $x483)))
 (let (($x19 (= ?x26 (_ bv0 32))))
 (let (($x374 (= $x167 $x19)))
 (let (($x363 (=> $x416 $x374)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x172))))
 (let (($x444 (= input.spec-%var-l-1.2.1.2.0 ?x308)))
 (let (($x88 (=> $x416 $x444)))
 (let (($x325 (= (_ bv0 32) ?x153)))
 (let ((?x168 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x168 (_ bv1 32))))
 (let (($x228 (= $x475 $x171)))
 (let (($x201 (=> $x456 $x228)))
 (let (($x288 (and $x456 $x9)))
 (let (($x57 (=> $x288 $x50)))
 (let (($x21 (= ?x168 (_ bv0 32))))
 (let (($x337 (= $x9 $x21)))
 (let (($x290 (=> $x456 $x337)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x161)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x176)))
 (let (($x348 (= input.spec-%var-l-1.2.0 ?x227)))
 (let (($x493 (=> $x456 $x348)))
 (let (($x360 (and (and (and (and (= $x223 $x402) (= $x456 $x109)) (=> $x223 $x50)) $x493) $x290)))
 (let (($x461 (and (and (and (and (and (and $x360 $x57) $x201) $x88) $x363) $x415) $x334)))
 (let (($x41 (and (and (and (and (and (and $x461 $x465) $x144) $x460) $x174) $x354) $x383)))
 (let (($x418 (and (and $x41 $x365) $x134)))
 (let (($x349 (= $x418 true)))
 (let (($x46 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x248 (= $x46 $x328)))
 (let (($x27 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x271 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x342 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x278 (and $x135 $x342)))
 (let (($x352 (and $x278 $x271)))
 (let (($x119 (and $x352 $x27)))
 (let (($x379 (=> $x119 $x248)))
 (let (($x220 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x224 (= $x220 $x440)))
 (let (($x217 (=> $x119 $x224)))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x263)))
 (let (($x246 (=> $x119 $x330)))
 (let (($x58 (= $x27 $x55)))
 (let (($x520 (=> $x352 $x58)))
 (let (($x257 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x447 (= $x257 $x341)))
 (let (($x307 (=> $x352 $x447)))
 (let (($x312 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x92)))
 (let (($x439 (=> $x352 $x312)))
 (let (($x298 (and $x119 $x220)))
 (let (($x273 (=> $x298 $x50)))
 (let (($x186 (and $x352 $x257)))
 (let (($x141 (=> $x186 $x50)))
 (let (($x306 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x278 $x306)))
 (let (($x283 (=> $x212 $x50)))
 (let (($x335 (= $x271 $x304)))
 (let (($x93 (=> $x278 $x335)))
 (let (($x5 (= $x306 $x19)))
 (let (($x143 (=> $x278 $x5)))
 (let (($x89 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x308)))
 (let (($x17 (=> $x278 $x89)))
 (let (($x173 (= $x342 $x171)))
 (let (($x373 (=> $x135 $x173)))
 (let (($x187 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x340 (and $x135 $x187)))
 (let (($x13 (=> $x340 $x50)))
 (let (($x75 (= $x187 $x21)))
 (let (($x85 (=> $x135 $x75)))
 (let (($x90 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x227)))
 (let (($x297 (=> $x135 $x90)))
 (let (($x129 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x80 (=> $x129 $x50)))
 (let (($x441 (and (and (and (and (and (= $x129 $x402) (= $x135 $x109)) $x80) $x297) $x85) $x13)))
 (let (($x346 (and (and (and (and (and (and $x441 $x373) $x17) $x143) $x93) $x283) $x141)))
 (let (($x264 (and (and (and (and (and (and $x346 $x273) $x439) $x307) $x520) $x246) $x217)))
 (let (($x355 (and $x264 $x379)))
 (let (($x285 (= $x355 true)))
 (let ((?x202 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x523 (= (_ bv0 3) ?x202)))
 (let (($x226 (= $x523 true)))
 (let (($x188 (= $x226 true)))
 (let (($x81 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x81 true)))
 (let (($x106 (= $x42 true)))
 (let (($x131 (= $x106 true)))
 (let (($x163 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195))))
 (let (($x296 (and true $x102)))
 (let (($x294 (and $x102 $x296)))
 (let (($x240 (= (bvand ?x43 (_ bv4294967288 32)) ?x43)))
 (let (($x137 (= (bvand ?x214 (_ bv4294967292 32)) ?x214)))
 (let (($x18 (and $x137 $x240)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x214 (bvsub ?x214 (_ bv4 32))) (bvult ?x214 (bvsub ?x214 (_ bv4 32))))))
 (let (($x28 (and (and (and (and (and $x296 $x118) $x137) $x18) $x294) $x163)))
 (let (($x103 (= true $x28)))
 (let (($x105 (not $x14)))
 (let (($x249 (=> $x105 $x103)))
 (let (($x128 (= $x249 true)))
 (let (($x30 (= $x128 true)))
 (let (($x7 (= $x30 true)))
 (let (($x255 (= $x105 true)))
 (let (($x245 (= $x255 true)))
 (let (($x301 (= $x245 true)))
 (let ((?x295 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x295)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x305 (and $x23 $x22)))
 (let (($x265 (and $x305 $x78)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x68 $x265)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x242)))))))
 (let (($x198 (and $x74 $x317)))
 (let (($x209 (= $x198 true)))
 (let (($x184 (= $x209 true)))
 (let (($x291 (= $x184 true)))
 (let (($x162 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x47 (= $x162 true)))
 (let (($x269 (= $x47 true)))
 (let (($x200 (and $x269 $x291)))
 (let (($x208 (and $x200 $x301)))
 (let (($x177 (and $x208 $x7)))
 (let (($x446 (and $x177 $x131)))
 (let (($x60 (and $x446 $x188)))
 (let (($x321 (and $x60 $x285)))
 (let (($x395 (and $x321 $x349)))
 (let (($x560 (and $x395 $x559)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x583 (and $x190 $x560)))
 (let (($x95 (bvugt ?x214 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x214 (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x292 (=> (bvule ?x214 (bvsub (bvadd ?x214 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x95)))))))
 (let (($x272 (=> (and $x105 (bvule ?x214 (bvsub (bvadd ?x214 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x95)))))))
 (let (($x185 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x169 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32))) (or false (or false (and true (or $x11 $x185)))))))
 (let (($x206 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32)))) (or false (or false (and true (or $x11 $x185)))))))
 (let (($x309 (and $x206 $x272)))
 (let (($x573 (and $x309 $x583)))
 (let (($x624 (=> $x573 $x618)))
 (not $x624))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3201X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3196X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x627 (concat ?x597 (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv4 32))))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3201X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x611 (concat ?x621 (concat ?x600 ?x627))))
 (let (($x115 (= ?x611 ?x611)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x369 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x409 (bvuge ?x369 (_ bv1 32))))
 (let (($x612 (=> $x409 $x115)))
 (let ((?x596 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3201X))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv2 32))) ?x596)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3201X (_ bv3 32))) ?x631)))
 (let (($x626 (= ?x20 ?x20)))
 (let (($x617 (=> $x409 $x626)))
 (let ((?x214 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x189))))
 (let (($x575 (= (_ bv0 32) ?x43)))
 (let ((?x586 (ite $x575 (_ bv0 32) (_ bv1 32))))
 (let (($x567 (bvuge ?x586 (_ bv1 32))))
 (let (($x594 (= $x409 $x567)))
 (let (($x50 (= false false)))
 (let (($x364 (= ?x369 (_ bv0 32))))
 (let (($x615 (=> $x364 $x50)))
 (let (($x546 (= ?x586 (_ bv0 32))))
 (let (($x593 (= $x364 $x546)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43)))
 (let (($x607 (and (and (and (and (and $x592 $x593) $x615) $x594) $x617) $x612)))
 (let ((?x564 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x558 (concat ?x564 (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv4 32))))))
 (let ((?x566 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x568 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3196X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x554 (concat ?x568 (concat ?x566 ?x558))))
 (let (($x580 (= ?x554 ?x554)))
 (let (($x150 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x267 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x109 (bvuge ?x267 (_ bv1 32))))
 (let (($x587 (=> $x109 $x580)))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3196X))))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv2 32))) ?x565)))
 (let ((?x563 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3196X (_ bv3 32))) ?x584)))
 (let (($x551 (= ?x563 ?x563)))
 (let (($x552 (=> $x109 $x551)))
 (let (($x547 (= $x109 $x567)))
 (let (($x402 (= ?x267 (_ bv0 32))))
 (let (($x576 (= $x402 $x546)))
 (let (($x569 (and (and (and (=> $x402 $x50) (= input.dst.llvm-%l ?x43)) $x576) $x547)))
 (let (($x623 (and (and $x569 $x552) $x587)))
 (let (($x574 (not true)))
 (let (($x604 (or (or $x574 $x623) $x607)))
 (let (($x590 (= true true)))
 (let (($x610 (and $x590 $x604)))
 (let (($x618 (= $x610 true)))
 (let ((?x204 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x484 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x500))))
 (let ((?x407 (bvadd ?x484 (_ bv4 32))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x397))))
 (let ((?x467 (bvadd ?x411 (_ bv4 32))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x467 (_ bv1 32))) (select input.dst.llvm-mem ?x467))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x467 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x467 (_ bv2 32))) ?x430))))
 (let ((?x530 (bvadd ?x499 (_ bv4 32))))
 (let ((?x515 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv1 32))) (select input.dst.llvm-mem ?x530))))
 (let ((?x517 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv2 32))) ?x515))))
 (let (($x495 (= (_ bv0 32) ?x517)))
 (let ((?x543 (ite $x495 (_ bv0 32) (_ bv1 32))))
 (let (($x512 (bvuge ?x543 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x501 (= $x140 $x512)))
 (let (($x350 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x438 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x475 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x456 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x416 (and $x456 $x475)))
 (let (($x357 (and $x416 $x438)))
 (let (($x457 (and $x357 $x350)))
 (let (($x158 (=> $x457 $x501)))
 (let (($x531 (= ?x543 (_ bv0 32))))
 (let (($x359 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x518 (= $x359 $x531)))
 (let (($x496 (=> $x457 $x518)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x499 (_ bv1 32))) (select input.dst.llvm-mem ?x499))))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd ?x499 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x499 (_ bv2 32))) ?x473))))
 (let (($x488 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x485)))
 (let (($x12 (=> $x457 $x488)))
 (let (($x471 (= (_ bv0 32) ?x499)))
 (let ((?x479 (ite $x471 (_ bv0 32) (_ bv1 32))))
 (let (($x521 (bvuge ?x479 (_ bv1 32))))
 (let (($x486 (= $x350 $x521)))
 (let (($x524 (=> $x357 $x486)))
 (let (($x506 (= ?x479 (_ bv0 32))))
 (let (($x302 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x525 (= $x302 $x506)))
 (let (($x480 (=> $x357 $x525)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x505 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x429))))
 (let (($x469 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x505)))
 (let (($x470 (=> $x357 $x469)))
 (let (($x391 (= (_ bv0 32) ?x411)))
 (let ((?x180 (ite $x391 (_ bv0 32) (_ bv1 32))))
 (let (($x433 (bvuge ?x180 (_ bv1 32))))
 (let (($x121 (= $x438 $x433)))
 (let (($x454 (=> $x416 $x121)))
 (let (($x31 (= ?x180 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x424 (= $x167 $x31)))
 (let (($x399 (=> $x416 $x424)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv1 32))) (select input.dst.llvm-mem ?x484))))
 (let ((?x435 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv2 32))) ?x94))))
 (let (($x393 (= input.spec-%var-l-1.2.1.2.0 ?x435)))
 (let (($x436 (=> $x416 $x393)))
 (let (($x463 (= (_ bv0 32) ?x484)))
 (let ((?x403 (ite $x463 (_ bv0 32) (_ bv1 32))))
 (let (($x489 (bvuge ?x403 (_ bv1 32))))
 (let (($x406 (= $x475 $x489)))
 (let (($x116 (=> $x456 $x406)))
 (let (($x392 (= ?x403 (_ bv0 32))))
 (let (($x9 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x390 (= $x9 $x392)))
 (let (($x382 (=> $x456 $x390)))
 (let ((?x368 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x417 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x70 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem ?x70) (concat ?x417 (concat ?x376 ?x368)))))
 (let (($x164 (= input.spec-%var-l-1.2.0 ?x412)))
 (let (($x310 (=> $x456 $x164)))
 (let (($x400 (= $x456 $x409)))
 (let (($x223 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x462 (= $x223 $x364)))
 (let (($x372 (and $x457 $x359)))
 (let (($x365 (=> $x372 $x50)))
 (let (($x139 (and $x357 $x302)))
 (let (($x460 (=> $x139 $x50)))
 (let (($x490 (and $x416 $x167)))
 (let (($x334 (=> $x490 $x50)))
 (let (($x541 (and (and (and (=> $x223 $x50) (=> (and $x456 $x9) $x50)) $x334) $x460)))
 (let (($x532 (and (and (and (and (and (and $x541 $x365) $x462) $x400) $x310) $x382) $x116)))
 (let (($x509 (and (and (and (and (and (and $x532 $x436) $x399) $x454) $x470) $x480) $x524)))
 (let (($x557 (and (and (and $x509 $x12) $x496) $x158)))
 (let (($x559 (= $x557 true)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x111 (concat ?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x153 (concat ?x45 (concat ?x361 ?x111))))
 (let ((?x261 (bvadd ?x153 (_ bv4 32))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x160))))
 (let ((?x77 (bvadd ?x277 (_ bv4 32))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x69))))
 (let ((?x377 (bvadd ?x218 (_ bv4 32))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x344))))
 (let (($x73 (= (_ bv0 32) ?x25)))
 (let ((?x311 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x328 (bvuge ?x311 (_ bv1 32))))
 (let (($x459 (= $x140 $x328)))
 (let (($x134 (=> $x457 $x459)))
 (let (($x440 (= ?x311 (_ bv0 32))))
 (let (($x482 (= $x359 $x440)))
 (let (($x383 (=> $x457 $x482)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x316))))
 (let (($x353 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x263)))
 (let (($x354 (=> $x457 $x353)))
 (let (($x62 (= (_ bv0 32) ?x218)))
 (let ((?x52 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x52 (_ bv1 32))))
 (let (($x413 (= $x350 $x55)))
 (let (($x174 (=> $x357 $x413)))
 (let (($x341 (= ?x52 (_ bv0 32))))
 (let (($x362 (= $x302 $x341)))
 (let (($x144 (=> $x357 $x362)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x216))))
 (let (($x56 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x92)))
 (let (($x465 (=> $x357 $x56)))
 (let (($x51 (= (_ bv0 32) ?x277)))
 (let ((?x26 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x304 (bvuge ?x26 (_ bv1 32))))
 (let (($x483 (= $x438 $x304)))
 (let (($x415 (=> $x416 $x483)))
 (let (($x19 (= ?x26 (_ bv0 32))))
 (let (($x374 (= $x167 $x19)))
 (let (($x363 (=> $x416 $x374)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x172))))
 (let (($x444 (= input.spec-%var-l-1.2.1.2.0 ?x308)))
 (let (($x88 (=> $x416 $x444)))
 (let (($x325 (= (_ bv0 32) ?x153)))
 (let ((?x168 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x168 (_ bv1 32))))
 (let (($x228 (= $x475 $x171)))
 (let (($x201 (=> $x456 $x228)))
 (let (($x288 (and $x456 $x9)))
 (let (($x57 (=> $x288 $x50)))
 (let (($x21 (= ?x168 (_ bv0 32))))
 (let (($x337 (= $x9 $x21)))
 (let (($x290 (=> $x456 $x337)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x161)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x176)))
 (let (($x348 (= input.spec-%var-l-1.2.0 ?x227)))
 (let (($x493 (=> $x456 $x348)))
 (let (($x360 (and (and (and (and (= $x223 $x402) (= $x456 $x109)) (=> $x223 $x50)) $x493) $x290)))
 (let (($x461 (and (and (and (and (and (and $x360 $x57) $x201) $x88) $x363) $x415) $x334)))
 (let (($x41 (and (and (and (and (and (and $x461 $x465) $x144) $x460) $x174) $x354) $x383)))
 (let (($x418 (and (and $x41 $x365) $x134)))
 (let (($x349 (= $x418 true)))
 (let (($x46 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x248 (= $x46 $x328)))
 (let (($x27 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x271 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x342 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x278 (and $x135 $x342)))
 (let (($x352 (and $x278 $x271)))
 (let (($x119 (and $x352 $x27)))
 (let (($x379 (=> $x119 $x248)))
 (let (($x220 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x224 (= $x220 $x440)))
 (let (($x217 (=> $x119 $x224)))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x263)))
 (let (($x246 (=> $x119 $x330)))
 (let (($x58 (= $x27 $x55)))
 (let (($x520 (=> $x352 $x58)))
 (let (($x257 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x447 (= $x257 $x341)))
 (let (($x307 (=> $x352 $x447)))
 (let (($x312 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x92)))
 (let (($x439 (=> $x352 $x312)))
 (let (($x298 (and $x119 $x220)))
 (let (($x273 (=> $x298 $x50)))
 (let (($x186 (and $x352 $x257)))
 (let (($x141 (=> $x186 $x50)))
 (let (($x306 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x278 $x306)))
 (let (($x283 (=> $x212 $x50)))
 (let (($x335 (= $x271 $x304)))
 (let (($x93 (=> $x278 $x335)))
 (let (($x5 (= $x306 $x19)))
 (let (($x143 (=> $x278 $x5)))
 (let (($x89 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x308)))
 (let (($x17 (=> $x278 $x89)))
 (let (($x173 (= $x342 $x171)))
 (let (($x373 (=> $x135 $x173)))
 (let (($x187 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x340 (and $x135 $x187)))
 (let (($x13 (=> $x340 $x50)))
 (let (($x75 (= $x187 $x21)))
 (let (($x85 (=> $x135 $x75)))
 (let (($x90 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x227)))
 (let (($x297 (=> $x135 $x90)))
 (let (($x129 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x80 (=> $x129 $x50)))
 (let (($x441 (and (and (and (and (and (= $x129 $x402) (= $x135 $x109)) $x80) $x297) $x85) $x13)))
 (let (($x346 (and (and (and (and (and (and $x441 $x373) $x17) $x143) $x93) $x283) $x141)))
 (let (($x264 (and (and (and (and (and (and $x346 $x273) $x439) $x307) $x520) $x246) $x217)))
 (let (($x355 (and $x264 $x379)))
 (let (($x285 (= $x355 true)))
 (let ((?x202 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x523 (= (_ bv0 3) ?x202)))
 (let (($x226 (= $x523 true)))
 (let (($x188 (= $x226 true)))
 (let (($x81 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x81 true)))
 (let (($x106 (= $x42 true)))
 (let (($x131 (= $x106 true)))
 (let (($x163 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195))))
 (let (($x296 (and true $x102)))
 (let (($x294 (and $x102 $x296)))
 (let (($x240 (= (bvand ?x43 (_ bv4294967288 32)) ?x43)))
 (let (($x137 (= (bvand ?x214 (_ bv4294967292 32)) ?x214)))
 (let (($x18 (and $x137 $x240)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x214 (bvsub ?x214 (_ bv4 32))) (bvult ?x214 (bvsub ?x214 (_ bv4 32))))))
 (let (($x28 (and (and (and (and (and $x296 $x118) $x137) $x18) $x294) $x163)))
 (let (($x103 (= true $x28)))
 (let (($x105 (not $x14)))
 (let (($x249 (=> $x105 $x103)))
 (let (($x128 (= $x249 true)))
 (let (($x30 (= $x128 true)))
 (let (($x7 (= $x30 true)))
 (let (($x255 (= $x105 true)))
 (let (($x245 (= $x255 true)))
 (let (($x301 (= $x245 true)))
 (let ((?x295 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x295)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x305 (and $x23 $x22)))
 (let (($x265 (and $x305 $x78)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x68 $x265)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x242)))))))
 (let (($x198 (and $x74 $x317)))
 (let (($x209 (= $x198 true)))
 (let (($x184 (= $x209 true)))
 (let (($x291 (= $x184 true)))
 (let (($x162 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x47 (= $x162 true)))
 (let (($x269 (= $x47 true)))
 (let (($x200 (and $x269 $x291)))
 (let (($x208 (and $x200 $x301)))
 (let (($x177 (and $x208 $x7)))
 (let (($x446 (and $x177 $x131)))
 (let (($x60 (and $x446 $x188)))
 (let (($x321 (and $x60 $x285)))
 (let (($x395 (and $x321 $x349)))
 (let (($x560 (and $x395 $x559)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x583 (and $x190 $x560)))
 (let (($x95 (bvugt ?x214 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x214 (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x292 (=> (bvule ?x214 (bvsub (bvadd ?x214 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x95)))))))
 (let (($x272 (=> (and $x105 (bvule ?x214 (bvsub (bvadd ?x214 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x95)))))))
 (let (($x185 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x169 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32))) (or false (or false (and true (or $x11 $x185)))))))
 (let (($x206 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32)))) (or false (or false (and true (or $x11 $x185)))))))
 (let (($x309 (and $x206 $x272)))
 (let (($x573 (and $x309 $x583)))
 (let (($x624 (=> $x573 $x618)))
 (not $x624))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xfffff7ff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00fffffd)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00fffffd)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.ind-%var3196X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3201X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00400001) #xff
    (ite (= x!0 #x00000008) #x08
    (ite (= x!0 #x80000008) #x00
    (ite (= x!0 #x8000000f) #x00
    (ite (= x!0 #x8000000e) #x00
    (ite (= x!0 #x01000000) #x00
    (ite (= x!0 #x00400006) #x01
    (ite (= x!0 #x01000002) #x00
    (ite (= x!0 #x00400003) #x00
    (ite (= x!0 #x01010109) #x00
    (ite (= x!0 #x00400002) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x80000009) #x00
    (ite (= x!0 #x00400004) #x08
    (ite (= x!0 #x0101010b) #x00
    (ite (= x!0 #x0101010f) #x00
    (ite (= x!0 #x01000001) #x00
    (ite (= x!0 #x8000000a) #x00
    (ite (= x!0 #x8000000c) #x00
    (ite (= x!0 #x00000004) #xfd
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x01010108) #x00
    (ite (= x!0 #x0101010d) #x00
    (ite (= x!0 #x0101010a) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x00ffffff) #x00
    (ite (= x!0 #x0101010c) #x00
    (ite (= x!0 #x00fffffe) #x00
    (ite (= x!0 #x00fffffd) #x00
    (ite (= x!0 #x01000003) #x00
    (ite (= x!0 #x0000000b) #x80
    (ite (= x!0 #x00000001) #x08
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00400000) #xfd
    (ite (= x!0 #x8000000b) #x00
    (ite (= x!0 #x00400005) #x01
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00400007) #x01
    (ite (= x!0 #x8000000d) #x00
    (ite (= x!0 #x0101010e) #x00
    (ite (= x!0 #x01000004) #x02
      #x00)))))))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3196X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3201X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff7) #xff
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xfffffff2) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffff6) #xff
    (ite (= x!0 #xfffffff3) #x00
    (ite (= x!0 #xfffffff0) #x00
    (ite (= x!0 #xfffffff4) #xf8
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffff5) #xff
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #xf0
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xfffffff1) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 118
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x326))))
 (let ((?x297 ((_ extract 2 0) ?x194)))
 (let (($x323 (= (_ bv0 3) ?x297)))
 (let (($x192 (= $x323 true)))
 (let (($x197 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x197 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x135 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (= $x53 $x50)))
 (let (($x109 (= ?x135 (_ bv0 32))))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (= $x443 $x109)))
 (let (($x282 (and $x262 $x244)))
 (let (($x161 (= $x282 true)))
 (let (($x336 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x80 (= $x336 $x50)))
 (let (($x267 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x237 (= $x267 $x109)))
 (let (($x243 (and $x237 $x80)))
 (let (($x319 (= $x243 true)))
 (let ((?x188 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x60 (= (_ bv0 3) ?x188)))
 (let (($x345 (= $x60 true)))
 (let (($x129 (= $x345 true)))
 (let (($x131 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x446 (= $x131 true)))
 (let (($x268 (= $x446 true)))
 (let (($x202 (= $x268 true)))
 (let (($x287 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x165 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x205 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x165) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x165))))
 (let (($x284 (and true $x205)))
 (let (($x294 (and $x205 $x284)))
 (let (($x18 (= (bvand ?x194 (_ bv4294967288 32)) ?x194)))
 (let (($x114 (= (bvand ?x123 (_ bv4294967292 32)) ?x123)))
 (let (($x366 (and $x114 $x18)))
 (let (($x193 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x123 (bvsub ?x123 (_ bv4 32))) (bvult ?x123 (bvsub ?x123 (_ bv4 32))))))
 (let (($x128 (and (and (and (and (and $x284 $x193) $x114) $x366) $x294) $x287)))
 (let (($x30 (= true $x128)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (not $x14)))
 (let (($x7 (=> $x105 $x30)))
 (let (($x177 (= $x7 true)))
 (let (($x155 (= $x177 true)))
 (let (($x81 (= $x155 true)))
 (let (($x208 (= $x105 true)))
 (let (($x166 (= $x208 true)))
 (let (($x195 (= $x166 true)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x317)))
 (let ((?x295 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (and $x305 $x78)))
 (let (($x209 (and $x265 $x198)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x203 $x209)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x112)))))))
 (let (($x291 (and $x22 $x184)))
 (let (($x200 (= $x291 true)))
 (let (($x255 (= $x200 true)))
 (let (($x245 (= $x255 true)))
 (let (($x269 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x64 (= $x269 true)))
 (let (($x138 (= $x64 true)))
 (let (($x301 (and $x138 $x245)))
 (let (($x215 (and $x301 $x195)))
 (let (($x42 (and $x215 $x81)))
 (let (($x523 (and $x42 $x202)))
 (let (($x329 (and $x523 $x129)))
 (let (($x233 (and $x329 $x319)))
 (let (($x176 (and $x233 $x161)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x227 (and $x162 $x176)))
 (let (($x199 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x123 (_ bv3 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x190 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x270 $x199)))))))
 (let (($x300 (=> (and $x105 (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x270 $x199)))))))
 (let (($x229 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x110 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x247 (=> $x110 (or false (or false (and true (or $x6 $x229)))))))
 (let (($x59 (=> (and $x105 $x110) (or false (or false (and true (or $x6 $x229)))))))
 (let (($x266 (and $x59 $x300)))
 (let (($x90 (and $x266 $x227)))
 (let (($x187 (=> $x90 $x192)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x326))))
 (let ((?x297 ((_ extract 2 0) ?x194)))
 (let (($x323 (= (_ bv0 3) ?x297)))
 (let (($x192 (= $x323 true)))
 (let (($x197 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x197 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x135 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (= $x53 $x50)))
 (let (($x109 (= ?x135 (_ bv0 32))))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (= $x443 $x109)))
 (let (($x282 (and $x262 $x244)))
 (let (($x161 (= $x282 true)))
 (let (($x336 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x80 (= $x336 $x50)))
 (let (($x267 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x237 (= $x267 $x109)))
 (let (($x243 (and $x237 $x80)))
 (let (($x319 (= $x243 true)))
 (let ((?x188 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x60 (= (_ bv0 3) ?x188)))
 (let (($x345 (= $x60 true)))
 (let (($x129 (= $x345 true)))
 (let (($x131 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x446 (= $x131 true)))
 (let (($x268 (= $x446 true)))
 (let (($x202 (= $x268 true)))
 (let (($x287 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x165 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x205 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x165) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x165))))
 (let (($x284 (and true $x205)))
 (let (($x294 (and $x205 $x284)))
 (let (($x18 (= (bvand ?x194 (_ bv4294967288 32)) ?x194)))
 (let (($x114 (= (bvand ?x123 (_ bv4294967292 32)) ?x123)))
 (let (($x366 (and $x114 $x18)))
 (let (($x193 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x123 (bvsub ?x123 (_ bv4 32))) (bvult ?x123 (bvsub ?x123 (_ bv4 32))))))
 (let (($x128 (and (and (and (and (and $x284 $x193) $x114) $x366) $x294) $x287)))
 (let (($x30 (= true $x128)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (not $x14)))
 (let (($x7 (=> $x105 $x30)))
 (let (($x177 (= $x7 true)))
 (let (($x155 (= $x177 true)))
 (let (($x81 (= $x155 true)))
 (let (($x208 (= $x105 true)))
 (let (($x166 (= $x208 true)))
 (let (($x195 (= $x166 true)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x317)))
 (let ((?x295 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (and $x305 $x78)))
 (let (($x209 (and $x265 $x198)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x203 $x209)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x112)))))))
 (let (($x291 (and $x22 $x184)))
 (let (($x200 (= $x291 true)))
 (let (($x255 (= $x200 true)))
 (let (($x245 (= $x255 true)))
 (let (($x269 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x64 (= $x269 true)))
 (let (($x138 (= $x64 true)))
 (let (($x301 (and $x138 $x245)))
 (let (($x215 (and $x301 $x195)))
 (let (($x42 (and $x215 $x81)))
 (let (($x523 (and $x42 $x202)))
 (let (($x329 (and $x523 $x129)))
 (let (($x233 (and $x329 $x319)))
 (let (($x176 (and $x233 $x161)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x227 (and $x162 $x176)))
 (let (($x199 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x123 (_ bv3 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x190 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x270 $x199)))))))
 (let (($x300 (=> (and $x105 (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x270 $x199)))))))
 (let (($x229 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x110 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x247 (=> $x110 (or false (or false (and true (or $x6 $x229)))))))
 (let (($x59 (=> (and $x105 $x110) (or false (or false (and true (or $x6 $x229)))))))
 (let (($x266 (and $x59 $x300)))
 (let (($x90 (and $x266 $x227)))
 (let (($x187 (=> $x90 $x192)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 119
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x99))))
 (let (($x187 (bvule ?x79 (_ bv4294967294 32))))
 (let (($x16 (= $x187 true)))
 (let (($x126 (= $x16 true)))
 (let (($x237 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x336 (ite $x237 (_ bv0 32) (_ bv1 32))))
 (let (($x319 (bvuge ?x336 (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x176 (= $x161 $x319)))
 (let (($x50 (= ?x336 (_ bv0 32))))
 (let (($x244 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x282 (= $x244 $x50)))
 (let (($x227 (and $x282 $x176)))
 (let (($x90 (= $x227 true)))
 (let (($x243 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x233 (= $x243 $x319)))
 (let (($x135 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x80 (= $x135 $x50)))
 (let (($x120 (and $x80 $x233)))
 (let (($x443 (= $x120 true)))
 (let ((?x129 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x329 (= (_ bv0 3) ?x129)))
 (let (($x150 (= $x329 true)))
 (let (($x267 (= $x150 true)))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x523 (= $x202 true)))
 (let (($x226 (= $x523 true)))
 (let (($x188 (= $x226 true)))
 (let (($x211 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x71 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71))))
 (let (($x37 (and true $x97)))
 (let (($x294 (and $x97 $x37)))
 (let (($x366 (= (bvand ?x79 (_ bv4294967288 32)) ?x79)))
 (let (($x117 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x103 (and $x117 $x366)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x177 (and (and (and (and (and $x37 $x152) $x117) $x103) $x294) $x211)))
 (let (($x155 (= true $x177)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (not $x14)))
 (let (($x81 (=> $x105 $x155)))
 (let (($x42 (= $x81 true)))
 (let (($x106 (= $x42 true)))
 (let (($x131 (= $x106 true)))
 (let (($x215 (= $x105 true)))
 (let (($x102 (= $x215 true)))
 (let (($x165 (= $x102 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x291 (= (_ bv0 32) ?x184)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x265 $x198)))
 (let (($x200 (and $x209 $x291)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x54 $x200)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x23)))))))
 (let (($x245 (and $x78 $x255)))
 (let (($x301 (= $x245 true)))
 (let (($x208 (= $x301 true)))
 (let (($x166 (= $x208 true)))
 (let (($x138 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x242 (= $x138 true)))
 (let (($x36 (= $x242 true)))
 (let (($x195 (and $x36 $x166)))
 (let (($x296 (and $x195 $x165)))
 (let (($x446 (and $x296 $x131)))
 (let (($x60 (and $x446 $x188)))
 (let (($x402 (and $x60 $x267)))
 (let (($x262 (and $x402 $x443)))
 (let (($x297 (and $x262 $x90)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x323 (and $x269 $x297)))
 (let (($x272 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd ?x110 (_ bv3 32))))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x162 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x292 $x272)))))))
 (let (($x178 (=> (and $x105 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x292 $x272)))))))
 (let (($x206 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x95 (=> $x35 (or false (or false (and true (or $x169 $x206)))))))
 (let (($x70 (=> (and $x105 $x35) (or false (or false (and true (or $x169 $x206)))))))
 (let (($x148 (and $x70 $x178)))
 (let (($x192 (and $x148 $x323)))
 (let (($x375 (=> $x192 $x126)))
 (not $x375)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x99))))
 (let (($x187 (bvule ?x79 (_ bv4294967294 32))))
 (let (($x16 (= $x187 true)))
 (let (($x126 (= $x16 true)))
 (let (($x237 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x336 (ite $x237 (_ bv0 32) (_ bv1 32))))
 (let (($x319 (bvuge ?x336 (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x176 (= $x161 $x319)))
 (let (($x50 (= ?x336 (_ bv0 32))))
 (let (($x244 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x282 (= $x244 $x50)))
 (let (($x227 (and $x282 $x176)))
 (let (($x90 (= $x227 true)))
 (let (($x243 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x233 (= $x243 $x319)))
 (let (($x135 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x80 (= $x135 $x50)))
 (let (($x120 (and $x80 $x233)))
 (let (($x443 (= $x120 true)))
 (let ((?x129 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x329 (= (_ bv0 3) ?x129)))
 (let (($x150 (= $x329 true)))
 (let (($x267 (= $x150 true)))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x523 (= $x202 true)))
 (let (($x226 (= $x523 true)))
 (let (($x188 (= $x226 true)))
 (let (($x211 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x71 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71))))
 (let (($x37 (and true $x97)))
 (let (($x294 (and $x97 $x37)))
 (let (($x366 (= (bvand ?x79 (_ bv4294967288 32)) ?x79)))
 (let (($x117 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x103 (and $x117 $x366)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x177 (and (and (and (and (and $x37 $x152) $x117) $x103) $x294) $x211)))
 (let (($x155 (= true $x177)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (not $x14)))
 (let (($x81 (=> $x105 $x155)))
 (let (($x42 (= $x81 true)))
 (let (($x106 (= $x42 true)))
 (let (($x131 (= $x106 true)))
 (let (($x215 (= $x105 true)))
 (let (($x102 (= $x215 true)))
 (let (($x165 (= $x102 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x291 (= (_ bv0 32) ?x184)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x265 $x198)))
 (let (($x200 (and $x209 $x291)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x54 $x200)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x23)))))))
 (let (($x245 (and $x78 $x255)))
 (let (($x301 (= $x245 true)))
 (let (($x208 (= $x301 true)))
 (let (($x166 (= $x208 true)))
 (let (($x138 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x242 (= $x138 true)))
 (let (($x36 (= $x242 true)))
 (let (($x195 (and $x36 $x166)))
 (let (($x296 (and $x195 $x165)))
 (let (($x446 (and $x296 $x131)))
 (let (($x60 (and $x446 $x188)))
 (let (($x402 (and $x60 $x267)))
 (let (($x262 (and $x402 $x443)))
 (let (($x297 (and $x262 $x90)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x323 (and $x269 $x297)))
 (let (($x272 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd ?x110 (_ bv3 32))))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x162 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x292 $x272)))))))
 (let (($x178 (=> (and $x105 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x292 $x272)))))))
 (let (($x206 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x95 (=> $x35 (or false (or false (and true (or $x169 $x206)))))))
 (let (($x70 (=> (and $x105 $x35) (or false (or false (and true (or $x169 $x206)))))))
 (let (($x148 (and $x70 $x178)))
 (let (($x192 (and $x148 $x323)))
 (let (($x375 (=> $x192 $x126)))
 (not $x375)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 120
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (not $x14)))
 (let (($x192 (=> $x105 true)))
 (let (($x103 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x296 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x296) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x296))))
 (let (($x97 (and true $x118)))
 (let (($x18 (and $x118 $x97)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x194))))
 (let (($x79 (= (bvand ?x107 (_ bv4294967288 32)) ?x107)))
 (let (($x114 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x240 (and $x114 $x79)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x211 (and (and (and (and (and $x97 $x137) $x114) $x240) $x18) $x103)))
 (let (($x177 (= true $x211)))
 (let (($x155 (=> $x105 $x177)))
 (let (($x187 (=> (and $x155 $x105) true)))
 (let (($x16 (= $x187 true)))
 (let (($x126 (= $x16 true)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x237 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x243 (bvuge ?x237 (_ bv1 32))))
 (let (($x282 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x282 $x243)))
 (let (($x336 (= ?x237 (_ bv0 32))))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x244 (= $x53 $x336)))
 (let (($x176 (and $x244 $x161)))
 (let (($x227 (= $x176 true)))
 (let (($x80 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x319 (= $x80 $x243)))
 (let (($x197 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x50 (= $x197 $x336)))
 (let (($x233 (and $x50 $x319)))
 (let (($x120 (= $x233 true)))
 (let ((?x345 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x129 (= (_ bv0 3) ?x345)))
 (let (($x329 (= $x129 true)))
 (let (($x150 (= $x329 true)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x202 (= $x268 true)))
 (let (($x523 (= $x202 true)))
 (let (($x226 (= $x523 true)))
 (let (($x81 (= $x155 true)))
 (let (($x42 (= $x81 true)))
 (let (($x106 (= $x42 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x255)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x291 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x209 $x291)))
 (let (($x301 (and $x200 $x245)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x68 $x301)))
 (let (($x305 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x198 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x305)))))))
 (let (($x166 (and $x198 $x208)))
 (let (($x195 (= $x166 true)))
 (let (($x215 (= $x195 true)))
 (let (($x102 (= $x215 true)))
 (let (($x36 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x112 (= $x36 true)))
 (let (($x74 (= $x112 true)))
 (let (($x165 (and $x74 $x102)))
 (let (($x131 (and $x165 $x106)))
 (let (($x188 (and $x131 $x226)))
 (let (($x267 (and $x188 $x150)))
 (let (($x443 (and $x267 $x120)))
 (let (($x90 (and $x443 $x227)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x297 (and $x138 $x90)))
 (let (($x300 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x309 (bvadd ?x35 (_ bv3 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x309)))
 (let (($x269 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x190 $x300)))))))
 (let (($x66 (=> (and $x105 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x190 $x300)))))))
 (let (($x59 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x270 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x199 (=> $x270 (or false (or false (and true (or $x247 $x59)))))))
 (let (($x113 (=> (and $x105 $x270) (or false (or false (and true (or $x247 $x59)))))))
 (let (($x239 (and $x113 $x66)))
 (let (($x323 (and $x239 $x297)))
 (let (($x375 (=> $x323 $x126)))
 (not $x375))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (not $x14)))
 (let (($x192 (=> $x105 true)))
 (let (($x103 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x296 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x296) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x296))))
 (let (($x97 (and true $x118)))
 (let (($x18 (and $x118 $x97)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x194))))
 (let (($x79 (= (bvand ?x107 (_ bv4294967288 32)) ?x107)))
 (let (($x114 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x240 (and $x114 $x79)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x211 (and (and (and (and (and $x97 $x137) $x114) $x240) $x18) $x103)))
 (let (($x177 (= true $x211)))
 (let (($x155 (=> $x105 $x177)))
 (let (($x187 (=> (and $x155 $x105) true)))
 (let (($x16 (= $x187 true)))
 (let (($x126 (= $x16 true)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x237 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x243 (bvuge ?x237 (_ bv1 32))))
 (let (($x282 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x282 $x243)))
 (let (($x336 (= ?x237 (_ bv0 32))))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x244 (= $x53 $x336)))
 (let (($x176 (and $x244 $x161)))
 (let (($x227 (= $x176 true)))
 (let (($x80 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x319 (= $x80 $x243)))
 (let (($x197 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x50 (= $x197 $x336)))
 (let (($x233 (and $x50 $x319)))
 (let (($x120 (= $x233 true)))
 (let ((?x345 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x129 (= (_ bv0 3) ?x345)))
 (let (($x329 (= $x129 true)))
 (let (($x150 (= $x329 true)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x202 (= $x268 true)))
 (let (($x523 (= $x202 true)))
 (let (($x226 (= $x523 true)))
 (let (($x81 (= $x155 true)))
 (let (($x42 (= $x81 true)))
 (let (($x106 (= $x42 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x255)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x291 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x209 $x291)))
 (let (($x301 (and $x200 $x245)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x68 $x301)))
 (let (($x305 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x198 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x305)))))))
 (let (($x166 (and $x198 $x208)))
 (let (($x195 (= $x166 true)))
 (let (($x215 (= $x195 true)))
 (let (($x102 (= $x215 true)))
 (let (($x36 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x112 (= $x36 true)))
 (let (($x74 (= $x112 true)))
 (let (($x165 (and $x74 $x102)))
 (let (($x131 (and $x165 $x106)))
 (let (($x188 (and $x131 $x226)))
 (let (($x267 (and $x188 $x150)))
 (let (($x443 (and $x267 $x120)))
 (let (($x90 (and $x443 $x227)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x297 (and $x138 $x90)))
 (let (($x300 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x309 (bvadd ?x35 (_ bv3 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x309)))
 (let (($x269 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x190 $x300)))))))
 (let (($x66 (=> (and $x105 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x190 $x300)))))))
 (let (($x59 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x270 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x199 (=> $x270 (or false (or false (and true (or $x247 $x59)))))))
 (let (($x113 (=> (and $x105 $x270) (or false (or false (and true (or $x247 $x59)))))))
 (let (($x239 (and $x113 $x66)))
 (let (($x323 (and $x239 $x297)))
 (let (($x375 (=> $x323 $x126)))
 (not $x375))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 121
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3482X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x437 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3482X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x324 (concat ?x437 (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3482X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3482X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x277 (concat ?x289 (concat ?x225 ?x324))))
 (let (($x51 (= ?x277 ?x277)))
 (let ((?x169 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x235))))
 (let (($x340 (= (_ bv0 32) ?x85)))
 (let ((?x13 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x13 (_ bv1 32))))
 (let (($x26 (=> $x133 $x51)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3482X))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv2 32))) ?x191)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv3 32))) ?x308)))
 (let (($x67 (= ?x286 ?x286)))
 (let (($x306 (=> $x133 $x67)))
 (let ((?x270 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x7))))
 (let (($x342 (= (_ bv0 32) ?x177)))
 (let ((?x171 (ite $x342 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x171 (_ bv1 32))))
 (let (($x83 (= $x133 $x196)))
 (let (($x338 (= false false)))
 (let (($x441 (= ?x13 (_ bv0 32))))
 (let (($x278 (=> $x441 $x338)))
 (let (($x256 (and (and (and (and (= ?x85 ?x177) (= $x441 (= ?x171 (_ bv0 32)))) $x278) $x83) $x306)))
 (let (($x271 (and $x256 $x26)))
 (let (($x260 (not true)))
 (let (($x304 (or $x260 $x271)))
 (let (($x361 (= true true)))
 (let (($x335 (and $x361 $x304)))
 (let (($x93 (= $x335 true)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x126 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x126 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x185 (= $x230 $x295)))
 (let (($x375 (= ?x126 (_ bv0 32))))
 (let (($x192 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x210 (= $x192 $x375)))
 (let (($x204 (and $x210 $x185)))
 (let (($x82 (= $x204 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x53 (_ bv1 32))))
 (let (($x74 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x176 (= $x74 $x161)))
 (let (($x244 (= ?x53 (_ bv0 32))))
 (let (($x262 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x282 (= $x262 $x244)))
 (let (($x227 (and $x282 $x176)))
 (let (($x90 (= $x227 true)))
 (let ((?x243 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x319 (= (_ bv0 3) ?x243)))
 (let (($x233 (= $x319 true)))
 (let (($x120 (= $x233 true)))
 (let (($x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x135 true)))
 (let (($x237 (= $x109 true)))
 (let (($x336 (= $x237 true)))
 (let (($x268 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x287 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x287) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x287))))
 (let (($x274 (and true $x189)))
 (let (($x131 (and $x189 $x274)))
 (let (($x42 (= (bvand ?x177 (_ bv4294967288 32)) ?x177)))
 (let (($x107 (= (bvand ?x270 (_ bv4294967292 32)) ?x270)))
 (let (($x106 (and $x107 $x42)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x270 (bvsub ?x270 (_ bv4 32))) (bvult ?x270 (bvsub ?x270 (_ bv4 32))))))
 (let (($x60 (and (and (and (and (and $x274 $x117) $x107) $x106) $x131) $x268)))
 (let (($x345 (= true $x60)))
 (let (($x105 (not $x14)))
 (let (($x129 (=> $x105 $x345)))
 (let (($x329 (= $x129 true)))
 (let (($x150 (= $x329 true)))
 (let (($x267 (= $x150 true)))
 (let (($x163 (= $x105 true)))
 (let (($x137 (= $x163 true)))
 (let (($x30 (= $x137 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x205)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x195 $x102)))
 (let (($x71 (and $x165 $x296)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x198 $x71)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x291)))))))
 (let (($x118 (and $x166 $x284)))
 (let (($x97 (= $x118 true)))
 (let (($x193 (= $x97 true)))
 (let (($x37 (= $x193 true)))
 (let ((?x317 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x317)))
 (let (($x305 (= ?x149 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= $x305 true)))
 (let (($x238 (= $x78 true)))
 (let (($x318 (and $x238 $x37)))
 (let (($x152 (and $x318 $x30)))
 (let (($x402 (and $x152 $x267)))
 (let (($x50 (and $x402 $x336)))
 (let (($x443 (and $x50 $x120)))
 (let (($x297 (and $x443 $x90)))
 (let (($x258 (and $x297 $x82)))
 (let (($x72 (and $x74 $x258)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x45 (and $x36 $x72)))
 (let (($x178 (bvugt ?x270 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x270 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x138 (=> (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x178)))))))
 (let (($x47 (=> (and $x105 (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x162 $x178)))))))
 (let (($x70 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x272 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x169 (_ bv1 32))) (or false (or false (and true (or $x95 $x70)))))))
 (let (($x122 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x169 (_ bv1 32)))) (or false (or false (and true (or $x95 $x70)))))))
 (let (($x309 (and $x122 $x47)))
 (let (($x76 (and $x309 $x45)))
 (let (($x221 (=> $x76 $x93)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3482X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x437 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3482X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x324 (concat ?x437 (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3482X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3482X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x277 (concat ?x289 (concat ?x225 ?x324))))
 (let (($x51 (= ?x277 ?x277)))
 (let ((?x169 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x235))))
 (let (($x340 (= (_ bv0 32) ?x85)))
 (let ((?x13 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x13 (_ bv1 32))))
 (let (($x26 (=> $x133 $x51)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3482X))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv2 32))) ?x191)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3482X (_ bv3 32))) ?x308)))
 (let (($x67 (= ?x286 ?x286)))
 (let (($x306 (=> $x133 $x67)))
 (let ((?x270 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x7))))
 (let (($x342 (= (_ bv0 32) ?x177)))
 (let ((?x171 (ite $x342 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x171 (_ bv1 32))))
 (let (($x83 (= $x133 $x196)))
 (let (($x338 (= false false)))
 (let (($x441 (= ?x13 (_ bv0 32))))
 (let (($x278 (=> $x441 $x338)))
 (let (($x256 (and (and (and (and (= ?x85 ?x177) (= $x441 (= ?x171 (_ bv0 32)))) $x278) $x83) $x306)))
 (let (($x271 (and $x256 $x26)))
 (let (($x260 (not true)))
 (let (($x304 (or $x260 $x271)))
 (let (($x361 (= true true)))
 (let (($x335 (and $x361 $x304)))
 (let (($x93 (= $x335 true)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x126 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x126 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x185 (= $x230 $x295)))
 (let (($x375 (= ?x126 (_ bv0 32))))
 (let (($x192 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x210 (= $x192 $x375)))
 (let (($x204 (and $x210 $x185)))
 (let (($x82 (= $x204 true)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x53 (_ bv1 32))))
 (let (($x74 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x176 (= $x74 $x161)))
 (let (($x244 (= ?x53 (_ bv0 32))))
 (let (($x262 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x282 (= $x262 $x244)))
 (let (($x227 (and $x282 $x176)))
 (let (($x90 (= $x227 true)))
 (let ((?x243 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x319 (= (_ bv0 3) ?x243)))
 (let (($x233 (= $x319 true)))
 (let (($x120 (= $x233 true)))
 (let (($x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x135 true)))
 (let (($x237 (= $x109 true)))
 (let (($x336 (= $x237 true)))
 (let (($x268 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x287 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x287) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x287))))
 (let (($x274 (and true $x189)))
 (let (($x131 (and $x189 $x274)))
 (let (($x42 (= (bvand ?x177 (_ bv4294967288 32)) ?x177)))
 (let (($x107 (= (bvand ?x270 (_ bv4294967292 32)) ?x270)))
 (let (($x106 (and $x107 $x42)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x270 (bvsub ?x270 (_ bv4 32))) (bvult ?x270 (bvsub ?x270 (_ bv4 32))))))
 (let (($x60 (and (and (and (and (and $x274 $x117) $x107) $x106) $x131) $x268)))
 (let (($x345 (= true $x60)))
 (let (($x105 (not $x14)))
 (let (($x129 (=> $x105 $x345)))
 (let (($x329 (= $x129 true)))
 (let (($x150 (= $x329 true)))
 (let (($x267 (= $x150 true)))
 (let (($x163 (= $x105 true)))
 (let (($x137 (= $x163 true)))
 (let (($x30 (= $x137 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x205)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x195 $x102)))
 (let (($x71 (and $x165 $x296)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x198 $x71)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x291)))))))
 (let (($x118 (and $x166 $x284)))
 (let (($x97 (= $x118 true)))
 (let (($x193 (= $x97 true)))
 (let (($x37 (= $x193 true)))
 (let ((?x317 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x317)))
 (let (($x305 (= ?x149 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= $x305 true)))
 (let (($x238 (= $x78 true)))
 (let (($x318 (and $x238 $x37)))
 (let (($x152 (and $x318 $x30)))
 (let (($x402 (and $x152 $x267)))
 (let (($x50 (and $x402 $x336)))
 (let (($x443 (and $x50 $x120)))
 (let (($x297 (and $x443 $x90)))
 (let (($x258 (and $x297 $x82)))
 (let (($x72 (and $x74 $x258)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x45 (and $x36 $x72)))
 (let (($x178 (bvugt ?x270 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x270 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x138 (=> (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x178)))))))
 (let (($x47 (=> (and $x105 (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x162 $x178)))))))
 (let (($x70 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x272 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x169 (_ bv1 32))) (or false (or false (and true (or $x95 $x70)))))))
 (let (($x122 (=> (and $x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x169 (_ bv1 32)))) (or false (or false (and true (or $x95 $x70)))))))
 (let (($x309 (and $x122 $x47)))
 (let (($x76 (and $x309 $x45)))
 (let (($x221 (=> $x76 $x93)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 122
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x345 (= $x14 false)))
 (let (($x129 (= $x345 true)))
 (let ((?x177 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x177 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x226 (= $x42 $x106)))
 (let (($x155 (= ?x177 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x81 (= $x103 $x155)))
 (let (($x131 (and $x81 $x226)))
 (let (($x188 (= $x131 true)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x523 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x523 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x366 (= $x18 $x249)))
 (let (($x99 (= ?x523 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (= $x194 $x99)))
 (let (($x79 (and $x211 $x366)))
 (let (($x240 (= $x79 true)))
 (let ((?x326 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x326)))
 (let (($x128 (= $x183 true)))
 (let (($x43 (= $x128 true)))
 (let (($x114 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x287 (= $x114 true)))
 (let (($x294 (= $x287 true)))
 (let (($x28 (= $x294 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x284)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x165 $x296)))
 (let (($x97 (and $x71 $x118)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x184 $x97)))
 (let (($x301 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x301)))))))
 (let (($x37 (and $x102 $x193)))
 (let (($x318 (= $x37 true)))
 (let (($x163 (= $x318 true)))
 (let (($x137 (= $x163 true)))
 (let ((?x203 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x203)))
 (let (($x238 (= ?x305 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x275 (= $x238 true)))
 (let (($x68 (= $x275 true)))
 (let (($x30 (and $x68 $x137)))
 (let (($x189 (and $x30 $x28)))
 (let (($x117 (and $x189 $x43)))
 (let (($x207 (and $x117 $x240)))
 (let (($x446 (and $x207 $x188)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x22 $x446)))
 (let ((?x292 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x66 (bvugt ?x292 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x292 (_ bv3 32)))))
 (let (($x36 (=> (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x269 $x66)))))))
 (let (($x105 (not $x14)))
 (let (($x64 (=> (and $x105 (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x269 $x66)))))))
 (let (($x113 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x190 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x300 (=> $x190 (or false (or false (and true (or $x199 $x113)))))))
 (let (($x214 (=> (and $x105 $x190) (or false (or false (and true (or $x199 $x113)))))))
 (let (($x266 (and $x214 $x64)))
 (let (($x60 (and $x266 $x268)))
 (let (($x329 (=> $x60 $x129)))
 (not $x329))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x345 (= $x14 false)))
 (let (($x129 (= $x345 true)))
 (let ((?x177 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x177 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x226 (= $x42 $x106)))
 (let (($x155 (= ?x177 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x81 (= $x103 $x155)))
 (let (($x131 (and $x81 $x226)))
 (let (($x188 (= $x131 true)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x523 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x523 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x366 (= $x18 $x249)))
 (let (($x99 (= ?x523 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (= $x194 $x99)))
 (let (($x79 (and $x211 $x366)))
 (let (($x240 (= $x79 true)))
 (let ((?x326 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x326)))
 (let (($x128 (= $x183 true)))
 (let (($x43 (= $x128 true)))
 (let (($x114 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x287 (= $x114 true)))
 (let (($x294 (= $x287 true)))
 (let (($x28 (= $x294 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x284)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x165 $x296)))
 (let (($x97 (and $x71 $x118)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x184 $x97)))
 (let (($x301 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x301)))))))
 (let (($x37 (and $x102 $x193)))
 (let (($x318 (= $x37 true)))
 (let (($x163 (= $x318 true)))
 (let (($x137 (= $x163 true)))
 (let ((?x203 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x203)))
 (let (($x238 (= ?x305 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x275 (= $x238 true)))
 (let (($x68 (= $x275 true)))
 (let (($x30 (and $x68 $x137)))
 (let (($x189 (and $x30 $x28)))
 (let (($x117 (and $x189 $x43)))
 (let (($x207 (and $x117 $x240)))
 (let (($x446 (and $x207 $x188)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x22 $x446)))
 (let ((?x292 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x66 (bvugt ?x292 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x292 (_ bv3 32)))))
 (let (($x36 (=> (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x269 $x66)))))))
 (let (($x105 (not $x14)))
 (let (($x64 (=> (and $x105 (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x269 $x66)))))))
 (let (($x113 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x190 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x300 (=> $x190 (or false (or false (and true (or $x199 $x113)))))))
 (let (($x214 (=> (and $x105 $x190) (or false (or false (and true (or $x199 $x113)))))))
 (let (($x266 (and $x214 $x64)))
 (let (($x60 (and $x266 $x268)))
 (let (($x329 (=> $x60 $x129)))
 (not $x329))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 123
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x109 (= $x14 false)))
 (let (($x237 (= $x109 true)))
 (let (($x60 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x150 (not $x60)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x329 (not $x131)))
 (let ((?x188 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (bvuge ?x188 (_ bv1 32))))
 (let (($x129 (= $x60 $x345)))
 (let (($x446 (= ?x188 (_ bv0 32))))
 (let (($x268 (= $x131 $x446)))
 (let (($x206 (and (and (and $x268 $x129) $x329) $x150)))
 (let (($x267 (= $x206 true)))
 (let (($x79 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x103 (not $x79)))
 (let (($x523 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (not $x523)))
 (let (($x211 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x18 (ite $x211 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x18 (_ bv1 32))))
 (let (($x207 (= $x79 $x240)))
 (let (($x249 (= ?x18 (_ bv0 32))))
 (let (($x366 (= $x523 $x249)))
 (let (($x81 (and (and (and $x366 $x207) $x7) $x103)))
 (let (($x42 (= $x81 true)))
 (let ((?x43 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= (_ bv0 3) ?x43)))
 (let (($x202 (= $x117 true)))
 (let (($x194 (= $x202 true)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x189 (= $x28 true)))
 (let (($x274 (= $x189 true)))
 (let (($x326 (= $x274 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x193)))
 (let ((?x284 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x284)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x71 $x118)))
 (let (($x318 (and $x97 $x37)))
 (let (($x245 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x245 $x318)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x296 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x195)))))))
 (let (($x137 (and $x296 $x163)))
 (let (($x30 (= $x137 true)))
 (let (($x152 (= $x30 true)))
 (let (($x114 (= $x152 true)))
 (let ((?x78 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x78)))
 (let (($x68 (= ?x238 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x291 (= $x68 true)))
 (let (($x200 (= $x291 true)))
 (let (($x287 (and $x200 $x114)))
 (let (($x183 (and $x287 $x326)))
 (let (($x15 (and $x183 $x194)))
 (let (($x106 (and $x15 $x42)))
 (let (($x402 (and $x106 $x267)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x149 $x402)))
 (let ((?x190 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (bvugt ?x190 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x190 (_ bv3 32)))))
 (let (($x22 (=> (bvule ?x190 (bvsub (bvadd ?x190 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x47)))))))
 (let (($x105 (not $x14)))
 (let (($x242 (=> (and $x105 (bvule ?x190 (bvsub (bvadd ?x190 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x138 $x47)))))))
 (let (($x122 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x178 (=> $x162 (or false (or false (and true (or $x272 $x122)))))))
 (let (($x123 (=> (and $x105 $x162) (or false (or false (and true (or $x272 $x122)))))))
 (let (($x148 (and $x123 $x242)))
 (let (($x135 (and $x148 $x197)))
 (let (($x336 (=> $x135 $x237)))
 (not $x336))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x109 (= $x14 false)))
 (let (($x237 (= $x109 true)))
 (let (($x60 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x150 (not $x60)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x329 (not $x131)))
 (let ((?x188 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (bvuge ?x188 (_ bv1 32))))
 (let (($x129 (= $x60 $x345)))
 (let (($x446 (= ?x188 (_ bv0 32))))
 (let (($x268 (= $x131 $x446)))
 (let (($x206 (and (and (and $x268 $x129) $x329) $x150)))
 (let (($x267 (= $x206 true)))
 (let (($x79 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x103 (not $x79)))
 (let (($x523 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (not $x523)))
 (let (($x211 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x18 (ite $x211 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x18 (_ bv1 32))))
 (let (($x207 (= $x79 $x240)))
 (let (($x249 (= ?x18 (_ bv0 32))))
 (let (($x366 (= $x523 $x249)))
 (let (($x81 (and (and (and $x366 $x207) $x7) $x103)))
 (let (($x42 (= $x81 true)))
 (let ((?x43 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= (_ bv0 3) ?x43)))
 (let (($x202 (= $x117 true)))
 (let (($x194 (= $x202 true)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x189 (= $x28 true)))
 (let (($x274 (= $x189 true)))
 (let (($x326 (= $x274 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x193)))
 (let ((?x284 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x284)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x71 $x118)))
 (let (($x318 (and $x97 $x37)))
 (let (($x245 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x245 $x318)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x296 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x195)))))))
 (let (($x137 (and $x296 $x163)))
 (let (($x30 (= $x137 true)))
 (let (($x152 (= $x30 true)))
 (let (($x114 (= $x152 true)))
 (let ((?x78 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x78)))
 (let (($x68 (= ?x238 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x291 (= $x68 true)))
 (let (($x200 (= $x291 true)))
 (let (($x287 (and $x200 $x114)))
 (let (($x183 (and $x287 $x326)))
 (let (($x15 (and $x183 $x194)))
 (let (($x106 (and $x15 $x42)))
 (let (($x402 (and $x106 $x267)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x149 $x402)))
 (let ((?x190 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (bvugt ?x190 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x190 (_ bv3 32)))))
 (let (($x22 (=> (bvule ?x190 (bvsub (bvadd ?x190 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x47)))))))
 (let (($x105 (not $x14)))
 (let (($x242 (=> (and $x105 (bvule ?x190 (bvsub (bvadd ?x190 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x138 $x47)))))))
 (let (($x122 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x178 (=> $x162 (or false (or false (and true (or $x272 $x122)))))))
 (let (($x123 (=> (and $x105 $x162) (or false (or false (and true (or $x272 $x122)))))))
 (let (($x148 (and $x123 $x242)))
 (let (($x135 (and $x148 $x197)))
 (let (($x336 (=> $x135 $x237)))
 (not $x336))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 124
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x109 (= $x14 false)))
 (let (($x237 (= $x109 true)))
 (let (($x103 (= false false)))
 (let (($x446 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x208 (=> $x446 $x103)))
 (let ((?x268 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x268 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x329 (= $x129 $x6)))
 (let (($x60 (= ?x268 (_ bv0 32))))
 (let (($x345 (= $x446 $x60)))
 (let (($x206 (and (and $x345 $x329) $x208)))
 (let (($x267 (= $x206 true)))
 (let (($x18 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x18 $x103)))
 (let (($x366 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x366 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x79 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x155 (= $x177 $x7)))
 (let (($x240 (= ?x79 (_ bv0 32))))
 (let (($x207 (= $x18 $x240)))
 (let (($x106 (and (and $x207 $x155) $x81)))
 (let (($x226 (= $x106 true)))
 (let ((?x194 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x15 (= (_ bv0 3) ?x194)))
 (let (($x107 (= $x15 true)))
 (let (($x523 (= $x107 true)))
 (let (($x326 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x183 (= $x326 true)))
 (let (($x128 (= $x183 true)))
 (let (($x43 (= $x128 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x163)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (and $x97 $x37)))
 (let (($x30 (and $x318 $x137)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x198 $x30)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x165)))))))
 (let (($x114 (and $x118 $x152)))
 (let (($x287 (= $x114 true)))
 (let (($x294 (= $x287 true)))
 (let (($x28 (= $x294 true)))
 (let ((?x275 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x275)))
 (let (($x200 (= ?x68 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (= $x200 true)))
 (let (($x166 (= $x301 true)))
 (let (($x189 (and $x166 $x28)))
 (let (($x117 (and $x189 $x43)))
 (let (($x99 (and $x117 $x523)))
 (let (($x131 (and $x99 $x226)))
 (let (($x402 (and $x131 $x267)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x305 $x402)))
 (let ((?x162 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x64 (bvugt ?x162 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x162 (_ bv3 32)))))
 (let (($x149 (=> (bvule ?x162 (bvsub (bvadd ?x162 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x64)))))))
 (let (($x105 (not $x14)))
 (let (($x23 (=> (and $x105 (bvule ?x162 (bvsub (bvadd ?x162 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x36 $x64)))))))
 (let (($x214 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x269 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x269 (or false (or false (and true (or $x300 $x214)))))))
 (let (($x110 (=> (and $x105 $x269) (or false (or false (and true (or $x300 $x214)))))))
 (let (($x239 (and $x110 $x23)))
 (let (($x135 (and $x239 $x197)))
 (let (($x336 (=> $x135 $x237)))
 (not $x336)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x109 (= $x14 false)))
 (let (($x237 (= $x109 true)))
 (let (($x103 (= false false)))
 (let (($x446 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x208 (=> $x446 $x103)))
 (let ((?x268 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x268 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x329 (= $x129 $x6)))
 (let (($x60 (= ?x268 (_ bv0 32))))
 (let (($x345 (= $x446 $x60)))
 (let (($x206 (and (and $x345 $x329) $x208)))
 (let (($x267 (= $x206 true)))
 (let (($x18 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x18 $x103)))
 (let (($x366 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x366 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x79 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x155 (= $x177 $x7)))
 (let (($x240 (= ?x79 (_ bv0 32))))
 (let (($x207 (= $x18 $x240)))
 (let (($x106 (and (and $x207 $x155) $x81)))
 (let (($x226 (= $x106 true)))
 (let ((?x194 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x15 (= (_ bv0 3) ?x194)))
 (let (($x107 (= $x15 true)))
 (let (($x523 (= $x107 true)))
 (let (($x326 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x183 (= $x326 true)))
 (let (($x128 (= $x183 true)))
 (let (($x43 (= $x128 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x163)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (and $x97 $x37)))
 (let (($x30 (and $x318 $x137)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x198 $x30)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x165)))))))
 (let (($x114 (and $x118 $x152)))
 (let (($x287 (= $x114 true)))
 (let (($x294 (= $x287 true)))
 (let (($x28 (= $x294 true)))
 (let ((?x275 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x275)))
 (let (($x200 (= ?x68 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (= $x200 true)))
 (let (($x166 (= $x301 true)))
 (let (($x189 (and $x166 $x28)))
 (let (($x117 (and $x189 $x43)))
 (let (($x99 (and $x117 $x523)))
 (let (($x131 (and $x99 $x226)))
 (let (($x402 (and $x131 $x267)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x197 (and $x305 $x402)))
 (let ((?x162 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x64 (bvugt ?x162 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x162 (_ bv3 32)))))
 (let (($x149 (=> (bvule ?x162 (bvsub (bvadd ?x162 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x64)))))))
 (let (($x105 (not $x14)))
 (let (($x23 (=> (and $x105 (bvule ?x162 (bvsub (bvadd ?x162 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x36 $x64)))))))
 (let (($x214 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x269 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x269 (or false (or false (and true (or $x300 $x214)))))))
 (let (($x110 (=> (and $x105 $x269) (or false (or false (and true (or $x300 $x214)))))))
 (let (($x239 (and $x110 $x23)))
 (let (($x135 (and $x239 $x197)))
 (let (($x336 (=> $x135 $x237)))
 (not $x336)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 125
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x169 (= $x14 false)))
 (let (($x215 (= $x169 true)))
 (let (($x226 (= false false)))
 (let (($x6 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x6 $x226)))
 (let (($x206 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x197 (not $x206)))
 (let ((?x329 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x329 (_ bv1 32))))
 (let (($x402 (= $x206 $x267)))
 (let (($x150 (= ?x329 (_ bv0 32))))
 (let (($x208 (= $x6 $x150)))
 (let (($x336 (and (and (and $x208 $x402) $x197) $x135)))
 (let (($x50 (= $x336 true)))
 (let (($x79 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (=> $x79 $x226)))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (not $x42)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x177 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x177 (_ bv1 32))))
 (let (($x81 (= $x42 $x103)))
 (let (($x7 (= ?x177 (_ bv0 32))))
 (let (($x155 (= $x79 $x7)))
 (let (($x268 (and (and (and $x155 $x81) $x106) $x131)))
 (let (($x60 (= $x268 true)))
 (let ((?x523 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= (_ bv0 3) ?x523)))
 (let (($x211 (= $x99 true)))
 (let (($x18 (= $x211 true)))
 (let (($x43 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x43 true)))
 (let (($x202 (= $x117 true)))
 (let (($x194 (= $x202 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x152)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x318 $x137)))
 (let (($x287 (and $x30 $x114)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x184 $x287)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x71)))))))
 (let (($x28 (and $x37 $x294)))
 (let (($x189 (= $x28 true)))
 (let (($x274 (= $x189 true)))
 (let (($x326 (= $x274 true)))
 (let ((?x291 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x291)))
 (let (($x166 (= ?x200 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x195 (= $x166 true)))
 (let (($x102 (= $x195 true)))
 (let (($x183 (and $x102 $x326)))
 (let (($x15 (and $x183 $x194)))
 (let (($x249 (and $x15 $x18)))
 (let (($x345 (and $x249 $x60)))
 (let (($x247 (and $x345 $x50)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x205 (and $x238 $x247)))
 (let ((?x269 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (bvugt ?x269 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x269 (_ bv3 32)))))
 (let (($x305 (=> (bvule ?x269 (bvsub (bvadd ?x269 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x242)))))))
 (let (($x105 (not $x14)))
 (let (($x317 (=> (and $x105 (bvule ?x269 (bvsub (bvadd ?x269 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x242)))))))
 (let (($x123 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x138 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x47 (=> $x138 (or false (or false (and true (or $x178 $x123)))))))
 (let (($x35 (=> (and $x105 $x138) (or false (or false (and true (or $x178 $x123)))))))
 (let (($x309 (and $x35 $x317)))
 (let (($x70 (and $x309 $x205)))
 (let (($x59 (=> $x70 $x215)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x169 (= $x14 false)))
 (let (($x215 (= $x169 true)))
 (let (($x226 (= false false)))
 (let (($x6 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x6 $x226)))
 (let (($x206 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x197 (not $x206)))
 (let ((?x329 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x329 (_ bv1 32))))
 (let (($x402 (= $x206 $x267)))
 (let (($x150 (= ?x329 (_ bv0 32))))
 (let (($x208 (= $x6 $x150)))
 (let (($x336 (and (and (and $x208 $x402) $x197) $x135)))
 (let (($x50 (= $x336 true)))
 (let (($x79 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (=> $x79 $x226)))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (not $x42)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x177 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x177 (_ bv1 32))))
 (let (($x81 (= $x42 $x103)))
 (let (($x7 (= ?x177 (_ bv0 32))))
 (let (($x155 (= $x79 $x7)))
 (let (($x268 (and (and (and $x155 $x81) $x106) $x131)))
 (let (($x60 (= $x268 true)))
 (let ((?x523 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x99 (= (_ bv0 3) ?x523)))
 (let (($x211 (= $x99 true)))
 (let (($x18 (= $x211 true)))
 (let (($x43 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x43 true)))
 (let (($x202 (= $x117 true)))
 (let (($x194 (= $x202 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x152)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x318 $x137)))
 (let (($x287 (and $x30 $x114)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x184 $x287)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x71)))))))
 (let (($x28 (and $x37 $x294)))
 (let (($x189 (= $x28 true)))
 (let (($x274 (= $x189 true)))
 (let (($x326 (= $x274 true)))
 (let ((?x291 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x291)))
 (let (($x166 (= ?x200 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x195 (= $x166 true)))
 (let (($x102 (= $x195 true)))
 (let (($x183 (and $x102 $x326)))
 (let (($x15 (and $x183 $x194)))
 (let (($x249 (and $x15 $x18)))
 (let (($x345 (and $x249 $x60)))
 (let (($x247 (and $x345 $x50)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x205 (and $x238 $x247)))
 (let ((?x269 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (bvugt ?x269 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x269 (_ bv3 32)))))
 (let (($x305 (=> (bvule ?x269 (bvsub (bvadd ?x269 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x242)))))))
 (let (($x105 (not $x14)))
 (let (($x317 (=> (and $x105 (bvule ?x269 (bvsub (bvadd ?x269 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x242)))))))
 (let (($x123 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x138 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x47 (=> $x138 (or false (or false (and true (or $x178 $x123)))))))
 (let (($x35 (=> (and $x105 $x138) (or false (or false (and true (or $x178 $x123)))))))
 (let (($x309 (and $x35 $x317)))
 (let (($x70 (and $x309 $x205)))
 (let (($x59 (=> $x70 $x215)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2097152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2097152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2097155 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 126
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (=> $x98 $x60)))
 (let (($x135 (= $x237 true)))
 (let (($x336 (= $x135 true)))
 (let ((?x345 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x345 (_ bv1 32))))
 (let (($x329 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x208 (= $x329 $x150)))
 (let (($x129 (= ?x345 (_ bv0 32))))
 (let (($x6 (= $x60 $x129)))
 (let (($x206 (and $x6 $x208)))
 (let (($x267 (= $x206 true)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x155 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x155 (_ bv1 32))))
 (let (($x81 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (= $x81 $x188)))
 (let (($x42 (= ?x155 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (= $x207 $x42)))
 (let (($x446 (and $x103 $x106)))
 (let (($x226 (= $x446 true)))
 (let ((?x211 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x18 (= (_ bv0 3) ?x211)))
 (let (($x249 (= $x18 true)))
 (let (($x366 (= $x249 true)))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x202 true)))
 (let (($x15 (= $x194 true)))
 (let (($x107 (= $x15 true)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x287)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x137 $x152)))
 (let (($x28 (and $x114 $x294)))
 (let (($x255 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x255 $x28)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x198)))))))
 (let (($x274 (and $x163 $x189)))
 (let (($x326 (= $x274 true)))
 (let (($x183 (= $x326 true)))
 (let (($x128 (= $x183 true)))
 (let ((?x200 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x200)))
 (let (($x195 (= ?x301 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= $x195 true)))
 (let (($x165 (= $x102 true)))
 (let (($x43 (and $x165 $x128)))
 (let (($x523 (and $x43 $x107)))
 (let (($x79 (and $x523 $x366)))
 (let (($x131 (and $x79 $x226)))
 (let (($x402 (and $x131 $x267)))
 (let (($x275 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x109 (and $x275 $x402)))
 (let ((?x270 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x149 (bvugt ?x270 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x270 (_ bv3 32)))))
 (let (($x78 (=> (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x149)))))))
 (let (($x14 (not $x98)))
 (let (($x64 (=> (and $x14 (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x148 $x149)))))))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x269 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x269 (or false (or false (and true (or $x190 $x66)))))))
 (let (($x122 (=> (and $x14 $x269) (or false (or false (and true (or $x190 $x66)))))))
 (let (($x203 (and $x122 $x64)))
 (let (($x197 (and $x203 $x109)))
 (let (($x50 (=> $x197 $x336)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (=> $x98 $x60)))
 (let (($x135 (= $x237 true)))
 (let (($x336 (= $x135 true)))
 (let ((?x345 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x345 (_ bv1 32))))
 (let (($x329 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x208 (= $x329 $x150)))
 (let (($x129 (= ?x345 (_ bv0 32))))
 (let (($x6 (= $x60 $x129)))
 (let (($x206 (and $x6 $x208)))
 (let (($x267 (= $x206 true)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x155 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x155 (_ bv1 32))))
 (let (($x81 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (= $x81 $x188)))
 (let (($x42 (= ?x155 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (= $x207 $x42)))
 (let (($x446 (and $x103 $x106)))
 (let (($x226 (= $x446 true)))
 (let ((?x211 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x18 (= (_ bv0 3) ?x211)))
 (let (($x249 (= $x18 true)))
 (let (($x366 (= $x249 true)))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x202 true)))
 (let (($x15 (= $x194 true)))
 (let (($x107 (= $x15 true)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x287)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x137 $x152)))
 (let (($x28 (and $x114 $x294)))
 (let (($x255 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x255 $x28)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x198)))))))
 (let (($x274 (and $x163 $x189)))
 (let (($x326 (= $x274 true)))
 (let (($x183 (= $x326 true)))
 (let (($x128 (= $x183 true)))
 (let ((?x200 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x200)))
 (let (($x195 (= ?x301 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= $x195 true)))
 (let (($x165 (= $x102 true)))
 (let (($x43 (and $x165 $x128)))
 (let (($x523 (and $x43 $x107)))
 (let (($x79 (and $x523 $x366)))
 (let (($x131 (and $x79 $x226)))
 (let (($x402 (and $x131 $x267)))
 (let (($x275 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x109 (and $x275 $x402)))
 (let ((?x270 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x149 (bvugt ?x270 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x270 (_ bv3 32)))))
 (let (($x78 (=> (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x149)))))))
 (let (($x14 (not $x98)))
 (let (($x64 (=> (and $x14 (bvule ?x270 (bvsub (bvadd ?x270 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x148 $x149)))))))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x269 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x269 (or false (or false (and true (or $x190 $x66)))))))
 (let (($x122 (=> (and $x14 $x269) (or false (or false (and true (or $x190 $x66)))))))
 (let (($x203 (and $x122 $x64)))
 (let (($x197 (and $x203 $x109)))
 (let (($x50 (=> $x197 $x336)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 127
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x155 (= input.spec-%var-sum-0.L3%5%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x42 (= $x155 true)))
 (let (($x103 (= $x42 true)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x523 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x523 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x366 (= $x18 $x249)))
 (let (($x99 (= ?x523 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (= $x194 $x99)))
 (let (($x79 (and $x211 $x366)))
 (let (($x240 (= $x79 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x294 (ite $x138 (_ bv0 32) (_ bv1 32))))
 (let (($x326 (bvuge ?x294 (_ bv1 32))))
 (let (($x274 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x183 (= $x274 $x326)))
 (let (($x28 (= ?x294 (_ bv0 32))))
 (let (($x175 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x189 (= $x175 $x28)))
 (let (($x128 (and $x189 $x183)))
 (let (($x43 (= $x128 true)))
 (let ((?x193 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x193)))
 (let (($x30 (= ?x255 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= $x30 true)))
 (let (($x114 (= $x152 true)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x245)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x301 $x102)))
 (let (($x318 (and $x165 $x71)))
 (let (($x242 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x242 $x318)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x317 $x78)))))))
 (let (($x265 (and $x200 $x118)))
 (let (($x198 (= $x265 true)))
 (let (($x97 (= $x198 true)))
 (let (($x37 (= $x97 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x162 true)))
 (let (($x35 (= $x47 true)))
 (let (($x36 (= $x35 true)))
 (let ((?x32 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x32)))
 (let (($x190 (= $x123 true)))
 (let (($x178 (= $x190 true)))
 (let (($x300 (= $x138 true)))
 (let (($x214 (= $x300 true)))
 (let (($x269 (= $x214 true)))
 (let (($x66 (and $x269 $x178)))
 (let (($x122 (and $x66 $x36)))
 (let (($x209 (and $x122 $x37)))
 (let (($x287 (and $x209 $x114)))
 (let (($x117 (and $x287 $x43)))
 (let (($x207 (and $x117 $x240)))
 (let (($x177 (and $x175 $x207)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x7 (and $x199 $x177)))
 (let (($x81 (=> $x7 $x103)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x155 (= input.spec-%var-sum-0.L3%5%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x42 (= $x155 true)))
 (let (($x103 (= $x42 true)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x523 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x523 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x366 (= $x18 $x249)))
 (let (($x99 (= ?x523 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (= $x194 $x99)))
 (let (($x79 (and $x211 $x366)))
 (let (($x240 (= $x79 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x294 (ite $x138 (_ bv0 32) (_ bv1 32))))
 (let (($x326 (bvuge ?x294 (_ bv1 32))))
 (let (($x274 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x183 (= $x274 $x326)))
 (let (($x28 (= ?x294 (_ bv0 32))))
 (let (($x175 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x189 (= $x175 $x28)))
 (let (($x128 (and $x189 $x183)))
 (let (($x43 (= $x128 true)))
 (let ((?x193 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x193)))
 (let (($x30 (= ?x255 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= $x30 true)))
 (let (($x114 (= $x152 true)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x245)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x301 $x102)))
 (let (($x318 (and $x165 $x71)))
 (let (($x242 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x242 $x318)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x317 $x78)))))))
 (let (($x265 (and $x200 $x118)))
 (let (($x198 (= $x265 true)))
 (let (($x97 (= $x198 true)))
 (let (($x37 (= $x97 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x162 true)))
 (let (($x35 (= $x47 true)))
 (let (($x36 (= $x35 true)))
 (let ((?x32 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x32)))
 (let (($x190 (= $x123 true)))
 (let (($x178 (= $x190 true)))
 (let (($x300 (= $x138 true)))
 (let (($x214 (= $x300 true)))
 (let (($x269 (= $x214 true)))
 (let (($x66 (and $x269 $x178)))
 (let (($x122 (and $x66 $x36)))
 (let (($x209 (and $x122 $x37)))
 (let (($x287 (and $x209 $x114)))
 (let (($x117 (and $x287 $x43)))
 (let (($x207 (and $x117 $x240)))
 (let (($x177 (and $x175 $x207)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x7 (and $x199 $x177)))
 (let (($x81 (=> $x7 $x103)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 128
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x95 (not $x199)))
 (let (($x50 (or $x199 $x95)))
 (let (($x247 (= $x50 true)))
 (let (($x105 (= $x247 true)))
 (let ((?x329 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x329 (_ bv1 32))))
 (let (($x206 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x402 (= $x206 $x267)))
 (let (($x150 (= ?x329 (_ bv0 32))))
 (let (($x6 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x208 (= $x6 $x150)))
 (let (($x109 (and $x208 $x402)))
 (let (($x197 (= $x109 true)))
 (let (($x188 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x270 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x270 (_ bv1 32))))
 (let (($x446 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x131 (= $x446 $x226)))
 (let (($x22 (= ?x270 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x106 (= $x103 $x22)))
 (let (($x268 (and $x106 $x131)))
 (let (($x60 (= $x268 true)))
 (let ((?x240 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x207 (= (_ bv0 3) ?x240)))
 (let (($x177 (= $x207 true)))
 (let (($x7 (= $x177 true)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x99 true)))
 (let (($x18 (= $x211 true)))
 (let (($x249 (= $x18 true)))
 (let ((?x326 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x326)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (and $x294 $x189)))
 (let (($x128 (and $x274 $x183)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x209 $x128)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x137)))))))
 (let (($x117 (and $x175 $x43)))
 (let (($x202 (= $x117 true)))
 (let (($x194 (= $x202 true)))
 (let (($x15 (= $x194 true)))
 (let ((?x245 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x245)))
 (let (($x118 (= ?x71 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x265 (= $x118 true)))
 (let (($x198 (= $x265 true)))
 (let (($x107 (and $x198 $x15)))
 (let (($x366 (and $x107 $x249)))
 (let (($x155 (and $x366 $x7)))
 (let (($x345 (and $x155 $x60)))
 (let (($x237 (and $x345 $x197)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x135 (and $x195 $x237)))
 (let ((?x292 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (bvugt ?x292 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x292 (_ bv3 32)))))
 (let (($x301 (=> (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x203)))))))
 (let (($x23 (=> (and $x95 (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x203)))))))
 (let (($x35 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x149 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x291 (=> $x149 (or false (or false (and true (or $x47 $x35)))))))
 (let (($x269 (=> (and $x95 $x149) (or false (or false (and true (or $x47 $x35)))))))
 (let (($x305 (and $x269 $x23)))
 (let (($x336 (and $x305 $x135)))
 (let (($x296 (=> $x336 $x105)))
 (not $x296)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x95 (not $x199)))
 (let (($x50 (or $x199 $x95)))
 (let (($x247 (= $x50 true)))
 (let (($x105 (= $x247 true)))
 (let ((?x329 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x329 (_ bv1 32))))
 (let (($x206 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x402 (= $x206 $x267)))
 (let (($x150 (= ?x329 (_ bv0 32))))
 (let (($x6 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x208 (= $x6 $x150)))
 (let (($x109 (and $x208 $x402)))
 (let (($x197 (= $x109 true)))
 (let (($x188 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x270 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x270 (_ bv1 32))))
 (let (($x446 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x131 (= $x446 $x226)))
 (let (($x22 (= ?x270 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x106 (= $x103 $x22)))
 (let (($x268 (and $x106 $x131)))
 (let (($x60 (= $x268 true)))
 (let ((?x240 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x207 (= (_ bv0 3) ?x240)))
 (let (($x177 (= $x207 true)))
 (let (($x7 (= $x177 true)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x99 true)))
 (let (($x18 (= $x211 true)))
 (let (($x249 (= $x18 true)))
 (let ((?x326 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x326)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (and $x294 $x189)))
 (let (($x128 (and $x274 $x183)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x209 $x128)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x137)))))))
 (let (($x117 (and $x175 $x43)))
 (let (($x202 (= $x117 true)))
 (let (($x194 (= $x202 true)))
 (let (($x15 (= $x194 true)))
 (let ((?x245 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x245)))
 (let (($x118 (= ?x71 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x265 (= $x118 true)))
 (let (($x198 (= $x265 true)))
 (let (($x107 (and $x198 $x15)))
 (let (($x366 (and $x107 $x249)))
 (let (($x155 (and $x366 $x7)))
 (let (($x345 (and $x155 $x60)))
 (let (($x237 (and $x345 $x197)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x135 (and $x195 $x237)))
 (let ((?x292 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (bvugt ?x292 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x292 (_ bv3 32)))))
 (let (($x301 (=> (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x203)))))))
 (let (($x23 (=> (and $x95 (bvule ?x292 (bvsub (bvadd ?x292 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x203)))))))
 (let (($x35 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x149 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x291 (=> $x149 (or false (or false (and true (or $x47 $x35)))))))
 (let (($x269 (=> (and $x95 $x149) (or false (or false (and true (or $x47 $x35)))))))
 (let (($x305 (and $x269 $x23)))
 (let (($x336 (and $x305 $x135)))
 (let (($x296 (=> $x336 $x105)))
 (not $x296)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
==query_number: 129
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3818X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x289 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3818X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x276 (concat ?x289 (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv4 32))))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3818X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3818X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x385 (concat ?x324 (concat ?x299 ?x276))))
 (let (($x277 (= ?x385 ?x385)))
 (let ((?x178 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x147))))
 (let (($x342 (= (_ bv0 32) ?x13)))
 (let ((?x171 (ite $x342 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x171 (_ bv1 32))))
 (let (($x51 (=> $x196 $x277)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3818X))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv2 32))) ?x63)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv3 32))) ?x48)))
 (let (($x67 (= ?x286 ?x286)))
 (let (($x306 (=> $x196 $x67)))
 (let ((?x149 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x329))))
 (let (($x373 (= (_ bv0 32) ?x109)))
 (let ((?x19 (ite $x373 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x19 (_ bv1 32))))
 (let (($x143 (= $x196 $x83)))
 (let (($x5 (= false false)))
 (let (($x173 (= ?x171 (_ bv0 32))))
 (let (($x133 (=> $x173 $x5)))
 (let (($x335 (and (and (and (and (= ?x13 ?x109) (= $x173 (= ?x19 (_ bv0 32)))) $x133) $x143) $x306)))
 (let (($x93 (and $x335 $x51)))
 (let (($x153 (not true)))
 (let (($x221 (or $x153 $x93)))
 (let (($x75 (= true true)))
 (let (($x212 (and $x75 $x221)))
 (let (($x229 (= $x212 true)))
 (let (($x210 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x230 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x230 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x258 (= $x204 $x82)))
 (let (($x295 (= ?x230 (_ bv0 32))))
 (let (($x126 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x185 (= $x126 $x295)))
 (let (($x72 (and $x185 $x258)))
 (let (($x45 (= $x72 true)))
 (let (($x199 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x161 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x161 (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x297 (= $x71 $x90)))
 (let (($x176 (= ?x161 (_ bv0 32))))
 (let (($x74 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x227 (= $x74 $x176)))
 (let (($x323 (and $x227 $x297)))
 (let (($x192 (= $x323 true)))
 (let ((?x112 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x262 (= (_ bv0 3) ?x112)))
 (let (($x53 (= $x262 true)))
 (let (($x244 (= $x53 true)))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x243 (= $x113 true)))
 (let (($x319 (= $x243 true)))
 (let (($x233 (= $x319 true)))
 (let (($x105 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x177) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x177))))
 (let (($x81 (and true $x103)))
 (let (($x50 (and $x103 $x81)))
 (let (($x135 (= (bvand ?x109 (_ bv4294967288 32)) ?x109)))
 (let (($x268 (= (bvand ?x149 (_ bv4294967292 32)) ?x149)))
 (let (($x336 (and $x268 $x135)))
 (let (($x446 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x149 (bvsub ?x149 (_ bv4 32))) (bvult ?x149 (bvsub ?x149 (_ bv4 32))))))
 (let (($x214 (and (and (and (and (and $x81 $x446) $x268) $x336) $x50) $x105)))
 (let (($x205 (= true $x214)))
 (let (($x95 (not $x199)))
 (let (($x70 (=> $x95 $x205)))
 (let (($x169 (= $x70 true)))
 (let (($x215 (= $x169 true)))
 (let (($x59 (= $x215 true)))
 (let (($x366 (= $x95 true)))
 (let (($x79 (= $x366 true)))
 (let (($x240 (= $x79 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x202)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x183 $x43)))
 (let (($x15 (and $x117 $x194)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x30 $x15)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x326 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x37)))))))
 (let (($x523 (and $x326 $x107)))
 (let (($x99 (= $x523 true)))
 (let (($x211 (= $x99 true)))
 (let (($x18 (= $x211 true)))
 (let ((?x265 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x265)))
 (let (($x163 (= ?x198 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= $x163 true)))
 (let (($x193 (= $x14 true)))
 (let (($x249 (and $x193 $x18)))
 (let (($x207 (and $x249 $x240)))
 (let (($x80 (and $x207 $x59)))
 (let (($x120 (and $x80 $x233)))
 (let (($x282 (and $x120 $x244)))
 (let (($x187 (and $x282 $x192)))
 (let (($x76 (and $x187 $x45)))
 (let (($x361 (and $x71 $x76)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x260 (and $x165 $x361)))
 (let (($x200 (bvugt ?x149 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd ?x149 (_ bv3 32))))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x195 (=> (bvule ?x149 (bvsub (bvadd ?x149 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x275 $x200)))))))
 (let (($x242 (=> (and $x95 (bvule ?x149 (bvsub (bvadd ?x149 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x275 $x200)))))))
 (let (($x266 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x239 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x178 (_ bv1 32))) (or false (or false (and true (or $x122 $x266)))))))
 (let (($x190 (=> (and $x95 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x178 (_ bv1 32)))) (or false (or false (and true (or $x122 $x266)))))))
 (let (($x78 (and $x190 $x242)))
 (let (($x21 (and $x78 $x260)))
 (let (($x11 (=> $x21 $x229)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3818X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x289 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3818X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x276 (concat ?x289 (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv4 32))))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3818X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3818X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x385 (concat ?x324 (concat ?x299 ?x276))))
 (let (($x277 (= ?x385 ?x385)))
 (let ((?x178 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x147))))
 (let (($x342 (= (_ bv0 32) ?x13)))
 (let ((?x171 (ite $x342 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x171 (_ bv1 32))))
 (let (($x51 (=> $x196 $x277)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3818X))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv2 32))) ?x63)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3818X (_ bv3 32))) ?x48)))
 (let (($x67 (= ?x286 ?x286)))
 (let (($x306 (=> $x196 $x67)))
 (let ((?x149 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x329))))
 (let (($x373 (= (_ bv0 32) ?x109)))
 (let ((?x19 (ite $x373 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x19 (_ bv1 32))))
 (let (($x143 (= $x196 $x83)))
 (let (($x5 (= false false)))
 (let (($x173 (= ?x171 (_ bv0 32))))
 (let (($x133 (=> $x173 $x5)))
 (let (($x335 (and (and (and (and (= ?x13 ?x109) (= $x173 (= ?x19 (_ bv0 32)))) $x133) $x143) $x306)))
 (let (($x93 (and $x335 $x51)))
 (let (($x153 (not true)))
 (let (($x221 (or $x153 $x93)))
 (let (($x75 (= true true)))
 (let (($x212 (and $x75 $x221)))
 (let (($x229 (= $x212 true)))
 (let (($x210 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x230 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x230 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x258 (= $x204 $x82)))
 (let (($x295 (= ?x230 (_ bv0 32))))
 (let (($x126 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x185 (= $x126 $x295)))
 (let (($x72 (and $x185 $x258)))
 (let (($x45 (= $x72 true)))
 (let (($x199 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x161 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x161 (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x297 (= $x71 $x90)))
 (let (($x176 (= ?x161 (_ bv0 32))))
 (let (($x74 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x227 (= $x74 $x176)))
 (let (($x323 (and $x227 $x297)))
 (let (($x192 (= $x323 true)))
 (let ((?x112 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x262 (= (_ bv0 3) ?x112)))
 (let (($x53 (= $x262 true)))
 (let (($x244 (= $x53 true)))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x243 (= $x113 true)))
 (let (($x319 (= $x243 true)))
 (let (($x233 (= $x319 true)))
 (let (($x105 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x177) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x177))))
 (let (($x81 (and true $x103)))
 (let (($x50 (and $x103 $x81)))
 (let (($x135 (= (bvand ?x109 (_ bv4294967288 32)) ?x109)))
 (let (($x268 (= (bvand ?x149 (_ bv4294967292 32)) ?x149)))
 (let (($x336 (and $x268 $x135)))
 (let (($x446 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x149 (bvsub ?x149 (_ bv4 32))) (bvult ?x149 (bvsub ?x149 (_ bv4 32))))))
 (let (($x214 (and (and (and (and (and $x81 $x446) $x268) $x336) $x50) $x105)))
 (let (($x205 (= true $x214)))
 (let (($x95 (not $x199)))
 (let (($x70 (=> $x95 $x205)))
 (let (($x169 (= $x70 true)))
 (let (($x215 (= $x169 true)))
 (let (($x59 (= $x215 true)))
 (let (($x366 (= $x95 true)))
 (let (($x79 (= $x366 true)))
 (let (($x240 (= $x79 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x202)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x183 $x43)))
 (let (($x15 (and $x117 $x194)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x30 $x15)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x326 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x37)))))))
 (let (($x523 (and $x326 $x107)))
 (let (($x99 (= $x523 true)))
 (let (($x211 (= $x99 true)))
 (let (($x18 (= $x211 true)))
 (let ((?x265 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x265)))
 (let (($x163 (= ?x198 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= $x163 true)))
 (let (($x193 (= $x14 true)))
 (let (($x249 (and $x193 $x18)))
 (let (($x207 (and $x249 $x240)))
 (let (($x80 (and $x207 $x59)))
 (let (($x120 (and $x80 $x233)))
 (let (($x282 (and $x120 $x244)))
 (let (($x187 (and $x282 $x192)))
 (let (($x76 (and $x187 $x45)))
 (let (($x361 (and $x71 $x76)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x260 (and $x165 $x361)))
 (let (($x200 (bvugt ?x149 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd ?x149 (_ bv3 32))))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x195 (=> (bvule ?x149 (bvsub (bvadd ?x149 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x275 $x200)))))))
 (let (($x242 (=> (and $x95 (bvule ?x149 (bvsub (bvadd ?x149 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x275 $x200)))))))
 (let (($x266 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x239 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x178 (_ bv1 32))) (or false (or false (and true (or $x122 $x266)))))))
 (let (($x190 (=> (and $x95 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x178 (_ bv1 32)))) (or false (or false (and true (or $x122 $x266)))))))
 (let (($x78 (and $x190 $x242)))
 (let (($x21 (and $x78 $x260)))
 (let (($x11 (=> $x21 $x229)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506577/query
