argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=loop4.proof
argv[9] = --spec-iospecs=loop4.iospecs
argv[10] = loop4.spec
argv[11] = loop4.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.1495885
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/loop4.c
argv[10] = -o
argv[11] = par_tmpdir/loop4.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/loop4.spec.etfg
argv[11] = par_tmpdir/loop4.c.bc
argv[12] = -o
argv[13] = par_tmpdir/loop4.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 68 time spent: 0:0:0 [0.000111s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 121 time spent: 0:0:0 [0.000211s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 645 time spent: 0:0:0 [0.002478s total; 0.000004 per start]
expr_simplify_solver: num_starts 58 time spent: 0:0:0 [0.005997s total; 0.000103 per start]
expr_simplify_syntactic: num_starts 58 time spent: 0:0:0 [0.001949s total; 0.000034 per start]
expr_simplify_using_lhs_set_helper: num_starts 76 time spent: 0:0:0 [0.023002s total; 0.000303 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 172 time spent: 0:0:0 [0.022804s total; 0.000133 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 48 time spent: 0:0:0 [0.000228s total; 0.000005 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
canonicalize_expr_tree: num_starts 40 time spent: 0:0:0 [0.000557s total; 0.000014 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
get_arithmetic_addsub_atoms: num_starts 44 time spent: 0:0:0 [0.000040s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 60 time spent: 0:0:0 [0.000693s total; 0.000012 per start]
expr_is_consts_struct_constant: num_starts 131 time spent: 0:0:0 [0.000125s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1469 time spent: 0:0:0 [0.024409s total; 0.000017 per start]
expr_do_simplify_helper_cache: num_starts 1469 time spent: 0:0:0 [0.000936s total; 0.000001 per start]
array_constant_equals: num_starts 3 time spent: 0:0:0 [0.000010s total; 0.000003 per start]
sort_dfa_canonical: num_starts 142558 time spent: 0:0:1 [1.175068s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 30 time spent: 0:0:0 [0.013385s total; 0.000446 per start]
combo_dfa_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.045334s total; 0.000697 per start]
alias_val_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.014168s total; 0.000218 per start]
get_sprel_map_from_avail_exprs: num_starts 86 time spent: 0:0:0 [0.005545s total; 0.000064 per start]
update_memlabels_for_memslot_locs: num_starts 20 time spent: 0:0:0 [0.000088s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 130 time spent: 0:0:0 [0.005224s total; 0.000040 per start]
compute_simplified_loc_exprs_for_edge: num_starts 384 time spent: 0:0:0 [0.031837s total; 0.000083 per start]
compute_locs_definitely_written_on_edge: num_starts 130 time spent: 0:0:0 [0.000043s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 28 time spent: 0:0:0 [0.005051s total; 0.000180 per start]
edge_update_memlabel_map_for_mlvars: num_starts 65 time spent: 0:0:0 [0.000394s total; 0.000006 per start]
add_new_locs_based_on_edge: num_starts 65 time spent: 0:0:0 [0.008748s total; 0.000135 per start]
expand_locset_to_include_slots_for_memmask: num_starts 45 time spent: 0:0:0 [0.000085s total; 0.000002 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 3e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 6e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 9e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 1.6e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 1.9e-05s (num_starts 31; 0.0000s/start)
add_assumes_to_start_edge.: 2e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 2e-05s (num_starts 22; 0.0000s/start)
add_extra_node_at_start_pc.: 2.9e-05s (num_starts 1; 0.0000s/start)
expr_is_callee_save_const.: 3.1e-05s (num_starts 26; 0.0000s/start)
context_constructor.solver.: 4.1e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5.4e-05s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.7e-05s (num_starts 2; 0.0000s/start)
main.3.: 7.7e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_indvars.: 8e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 8.6e-05s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 9.4e-05s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000101s (num_starts 1; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000104s (num_starts 33; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000105s (num_starts 5; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000108s (num_starts 10; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000127s (num_starts 1; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000146s (num_starts 33; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000172s (num_starts 1; 0.0002s/start)
expr_represents_llvm_undef.: 0.000175s (num_starts 28; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000176s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000182s (num_starts 234; 0.0000s/start)
populate_locid2expr_map.: 0.000216s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000241s (num_starts 1; 0.0002s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000314s (num_starts 65; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000314s (num_starts 65; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000335s (num_starts 1; 0.0003s/start)
canonicalize_llvm_nextpcs.: 0.000348s (num_starts 1; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.00039s (num_starts 1; 0.0004s/start)
def_analysis::xfer_and_meet.: 0.000399s (num_starts 66; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000433s (num_starts 759; 0.0000s/start)
compute_z3_expr.: 0.000435s (num_starts 27; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000452s (num_starts 1; 0.0005s/start)
expr_substitute_using_available_exprs_submap.: 0.000455s (num_starts 45; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.000534s (num_starts 28; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000625s (num_starts 65; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.000898s (num_starts 1; 0.0009s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.001088s (num_starts 552; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001128s (num_starts 51; 0.0000s/start)
populate_simplified_to_state.: 0.001141s (num_starts 3; 0.0004s/start)
create_closure_matrix.: 0.001301s (num_starts 85; 0.0000s/start)
query:convert_from_z3.: 0.001412s (num_starts 27; 0.0001s/start)
graph_visit_exprs.: 0.00142s (num_starts 4; 0.0004s/start)
compute_lr_status_for_expr.: 0.001448s (num_starts 36; 0.0000s/start)
query:convert_to_z3.: 0.001473s (num_starts 27; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.001518s (num_starts 31; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.001579s (num_starts 31; 0.0001s/start)
tfg::collect_assumes_around_edge.: 0.001641s (num_starts 121; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001961s (num_starts 1; 0.0020s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002311s (num_starts 1; 0.0023s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.003455s (num_starts 65; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.003777s (num_starts 1; 0.0038s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.003914s (num_starts 1; 0.0039s/start)
tfg::populate_loc_definedness.before_solve.: 0.004009s (num_starts 2; 0.0020s/start)
query:simplify-z3.: 0.004024s (num_starts 65; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.004049s (num_starts 1; 0.0040s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004194s (num_starts 68; 0.0001s/start)
graph_to_stream.: 0.00428s (num_starts 1; 0.0043s/start)
compute_new_lr_status_on_locs.: 0.004339s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.004366s (num_starts 2; 0.0022s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.004569s (num_starts 1; 0.0046s/start)
tfg::populate_loc_definedness.: 0.004589s (num_starts 2; 0.0023s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004664s (num_starts 65; 0.0001s/start)
populate_transitive_closure.: 0.005591s (num_starts 1; 0.0056s/start)
populate_simplified_assets.: 0.005603s (num_starts 6; 0.0009s/start)
populate_dominator_and_postdominator_relations.: 0.005611s (num_starts 2; 0.0028s/start)
populate_branch_affecting_locs.: 0.005806s (num_starts 2; 0.0029s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.005958s (num_starts 65; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.006622s (num_starts 85; 0.0001s/start)
graph_identify_back_edges.: 0.006666s (num_starts 6; 0.0011s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.006768s (num_starts 1; 0.0068s/start)
graph_identify_natural_loops.: 0.006916s (num_starts 6; 0.0012s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.007631s (num_starts 1; 0.0076s/start)
avail_exprs_create_submap.: 0.008173s (num_starts 195; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.008276s (num_starts 1; 0.0083s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.009679s (num_starts 645; 0.0000s/start)
compute_regions.: 0.010815s (num_starts 6; 0.0018s/start)
find_dominators.: 0.011541s (num_starts 10; 0.0012s/start)
tfg_preprocess.dst.llvm.foo.: 0.011855s (num_starts 1; 0.0119s/start)
tfg::tfg_preprocess.: 0.011858s (num_starts 1; 0.0119s/start)
main.2.: 0.012584s (num_starts 1; 0.0126s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.012818s (num_starts 65; 0.0002s/start)
populate_loc_liveness.: 0.012956s (num_starts 2; 0.0065s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.01428s (num_starts 65; 0.0002s/start)
get_tfg.: 0.015951s (num_starts 1; 0.0160s/start)
get_function_tfg_map.foo.: 0.015986s (num_starts 1; 0.0160s/start)
get_function_tfg_map.: 0.015989s (num_starts 1; 0.0160s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.023076s (num_starts 76; 0.0003s/start)
populate_locs_potentially_modified_on_edge.: 0.023443s (num_starts 3; 0.0078s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.024082s (num_starts 1; 0.0241s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.024087s (num_starts 1; 0.0241s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.024092s (num_starts 1; 0.0241s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.024097s (num_starts 1; 0.0241s/start)
tfg_constructor.src.spec.foo.: 0.024102s (num_starts 1; 0.0241s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.026765s (num_starts 645; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.027717s (num_starts 645; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.029059s (num_starts 3; 0.0097s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.031138s (num_starts 645; 0.0000s/start)
tfg_postprocess_after_pointsto_analysis.: 0.036233s (num_starts 1; 0.0362s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.044568s (num_starts 1; 0.0446s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.045431s (num_starts 65; 0.0007s/start)
ftmap_run_pointsto_analysis.: 0.101445s (num_starts 1; 0.1014s/start)
parse_consts_db.: 7.21087s (num_starts 1; 7.2109s/start)
main.: 7.42089s (num_starts 1; 7.4209s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file loop4.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:22 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:22 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:22 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:22 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L3%30%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L3%30%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L3%33%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L0%0%d=>L3%33%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L3%33%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L0%0%d --> L3%30%bbentry ending at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Computing loop hoisting select expressions at toPC L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Adding node L3%30%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:22 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : foo.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : foo.A2: Added the 2 propagated CEs at PC L3%30%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:22 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    3 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      2.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    3 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      2.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:22 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial4-prove3...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial2-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A2 (d:0, s:0, sp: 1): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:23 : Chosen product-TFG foo.A2 will be explored later...</MSG>
<MSG>0:23 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%33%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A3...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A3...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%33%bbentry ending at L3%33%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%33%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Computing loop hoisting select expressions at toPC L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Computing loop hoisting non-linear expressions at toPC L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Adding node L3%33%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Adding edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%33%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140281 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140273 : input.spec-%var-n-1 : BV:32               : 0
140529 : bvsgt(140281, 140273) : BOOL              : true
141903 : not(140529) : BOOL                        : false

ce =
=counter_example_begin z3v487.ce4 8d1c3a7abbe6ac21a12382866715e788
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda108 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda111 : BV:32
11 : Lambda109 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda110 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda101 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda102 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2166810999
=counter_example_end


failcond-expr = not(bvsgt(1, input.spec-%var-n-1)):
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-n-1 : BV:32
3 : bvsgt(1, 2) : BOOL
4 : not(3) : BOOL
</MSG>
<MSG>0:23 : foo.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%33%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Failed correlation of src pathset L0%0%d=>L3%33%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%33%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140281 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140273 : input.spec-%var-n-1 : BV:32               : 0
140529 : bvsgt(140281, 140273) : BOOL              : true
141903 : not(140529) : BOOL                        : false

ce =
=counter_example_begin z3v487.ce4 8d1c3a7abbe6ac21a12382866715e788
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda108 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda111 : BV:32
11 : Lambda109 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda110 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda101 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda102 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2166810999
=counter_example_end


</MSG>
<MSG>0:23 : Discovered that the correlation was useless for the product-TFG foo.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 3 at column 21))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce122
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce140
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce140
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce122


<MSG>0:23 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:23 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce122
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce140
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce140
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce122


<MSG>0:23 : foo.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:23 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A1 created 1 possibilities in group foo.A1.B...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 3 at column 21))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A1.B1: Propagated 3 out of 5 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A1.B1: Added the 3 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce198      3.:z3.ce173
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce140
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce122      2.:z3.ce140
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce198
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce122


<MSG>0:23 : Added correlation to the product-TFG foo.A1.B1 (d:2, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 1) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 3 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2 (d:0, s:0, sp: 1): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A2 (d:0, s:0, sp: 1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Considering 2 paths to src pc L3%30%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%30%bbentry=>L3%30%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%30%bbentry=>L3%30%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Found 2 feasible correlations for paths to src pc L3%30%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 1) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>L3%30%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L3%30%bbentry --> L3%30%bbentry ending at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Getting alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Found no alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Adding edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A2.B2: Propagated 3 out of 5 counter-examples across edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : foo.A2.B2: Added the 3 propagated CEs at PC L3%30%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:24 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A2.B2: Computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce292
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce292
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce292
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:24 : Added correlation to the product-TFG foo.A2.B2 (d:0, s:0, sp: 1) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 1) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>L3%30%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce292
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce292
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce292
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:24 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%30%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:25 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:25 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%30%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:25 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:25 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:25 : foo.A2.B2 (d:0, s:0, sp: 1): checked newly added edge and inferred invariants...</MSG>
<MSG>0:25 : foo.A2.B2 (d:0, s:0, sp: 1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:25 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L3%30%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:25 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 1) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:25 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:25 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:25 : Creating ssa-path for the src-tfg path L3%30%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:25 : Adding a CG edge composition using the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:25 : Identifying common alloc-deallocs in the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:25 : Identified no common alloc-deallocs in the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:25 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Adding edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:25 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Propagated 5 out of 18 counter-examples across edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:25 : foo.A2.B2.C1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:25 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:25 : Done adding a CG edge composition using the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:25 : Added correlation to the product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 1) and created a correlation entry...</MSG>
<MSG>0:25 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 1) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%30%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:25 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:25 : Constructed infer_invariants_dfa with initial worklist L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:25 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%30%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:26 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:26 : foo.A2.B2.C1 (d:0, s:0, sp: 1): checked newly added edge and inferred invariants...</MSG>
<MSG>0:26 : foo.A2.B2.C1 (d:0, s:0, sp: 1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:26 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:26 : Checking equivalence proof...</MSG>
<MSG>0:26 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 1)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce261      3.:z3.ce292
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce407
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce292      2.:z3.ce352      3.:z3.ce462
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(input.spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%30%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 4.31s, query:smt.: 0.953646s (num_starts 37; 0.0258s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 3.48525s (num_starts 105; 0.0332s/start)ftmap_run_pointsto_analysis.: 0.109346s (num_starts 2; 0.0547s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 7e-06s (num_starts 4; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 7e-06s (num_starts 6; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.1e-05s (num_starts 6; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.2e-05s (num_starts 3; 0.0000s/start)
prune_dst_memslots.: 1.2e-05s (num_starts 3; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 1.4e-05s (num_starts 6; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 1.4e-05s (num_starts 17; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1.9e-05s (num_starts 24; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.9e-05s (num_starts 6; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 2.1e-05s (num_starts 4; 0.0000s/start)
ce_perform_memory_fuzzing.: 2.8e-05s (num_starts 24; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 3.1e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 3.4e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 3.5e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 3.6e-05s (num_starts 3; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 3.9e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 4.1e-05s (num_starts 3; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 4.4e-05s (num_starts 2; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 4.6e-05s (num_starts 50; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 4.9e-05s (num_starts 11; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 5.1e-05s (num_starts 1; 0.0001s/start)
remove_complex_bv_exprs.: 5.3e-05s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 5.3e-05s (num_starts 3; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.9e-05s (num_starts 3; 0.0000s/start)
determinize_value_expr_map.: 6e-05s (num_starts 28; 0.0000s/start)
prove_trivial.: 7e-05s (num_starts 69; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.6e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 9e-05s (num_starts 107; 0.0000s/start)
lr_status_meet.: 0.000101s (num_starts 160; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000116s (num_starts 26; 0.0000s/start)
expr_is_callee_save_const.: 0.000124s (num_starts 119; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000127s (num_starts 3; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000148s (num_starts 3; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000162s (num_starts 107; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000168s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000176s (num_starts 22; 0.0000s/start)
populate_locid2expr_map.: 0.000184s (num_starts 2; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.00019s (num_starts 105; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000191s (num_starts 2; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry.: 0.0002s (num_starts 3; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000206s (num_starts 38; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.000207s (num_starts 36; 0.0000s/start)
compute_sprel_relations.: 0.000209s (num_starts 2; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000224s (num_starts 16; 0.0000s/start)
propagate_sprels.: 0.000224s (num_starts 2; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000226s (num_starts 57; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000232s (num_starts 57; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000236s (num_starts 463; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000245s (num_starts 7; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000246s (num_starts 36; 0.0000s/start)
proof_query_is_trivial_helper.: 0.000248s (num_starts 109; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000254s (num_starts 22; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000269s (num_starts 9; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.000271s (num_starts 2; 0.0001s/start)
graph_locs_add_all_local_vars.: 0.000274s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000289s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000297s (num_starts 32; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000315s (num_starts 1; 0.0003s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000359s (num_starts 37; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000394s (num_starts 46; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000415s (num_starts 30; 0.0000s/start)
identify_address_taken_local_variables.: 0.000429s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000437s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000437s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000437s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00044s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.000441s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000442s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000443s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000443s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000445s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000445s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.000446s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000448s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.00045s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.000453s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-unsigned;-trivial.: 0.000454s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.000454s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.000455s (num_starts 1; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.000455s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned.: 0.000457s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000458s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-unsigned.: 0.000461s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000463s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned.: 0.000467s (num_starts 1; 0.0005s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.000504s (num_starts 1; 0.0005s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000533s (num_starts 3; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000559s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.00056s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000561s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.000562s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.000566s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.000573s (num_starts 1; 0.0006s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000579s (num_starts 1; 0.0006s/start)
compute_bv_bool_eqclass.: 0.000584s (num_starts 3; 0.0002s/start)
set_result_and_counter_example.: 0.0006s (num_starts 37; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000619s (num_starts 50; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.00062s (num_starts 140; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000637s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000637s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000639s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00064s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.000643s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.000651s (num_starts 1; 0.0007s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000657s (num_starts 140; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000664s (num_starts 1; 0.0007s/start)
parse_yices_model.: 0.00067s (num_starts 1; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000695s (num_starts 1; 0.0007s/start)
graph_ec_apply_trans_funs_helper.1.: 0.00071s (num_starts 5; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.000725s (num_starts 2; 0.0004s/start)
collect_assumes_around_edge.: 0.000744s (num_starts 6; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.00078s (num_starts 57; 0.0000s/start)
expr_represents_llvm_undef.: 0.000781s (num_starts 123; 0.0000s/start)
create_closure_matrix.: 0.00079s (num_starts 77; 0.0000s/start)
populate_simplified_to_state.: 0.000809s (num_starts 3; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000821s (num_starts 59; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.000837s (num_starts 66; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000844s (num_starts 5; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000866s (num_starts 5; 0.0002s/start)
proof_query_is_trivial.: 0.000882s (num_starts 107; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000897s (num_starts 10; 0.0001s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000898s (num_starts 3; 0.0003s/start)
construct_linear_combination_exprs.: 0.00091s (num_starts 41; 0.0000s/start)
tfg_edge_composition_get_assumes.: 0.000935s (num_starts 66; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.000946s (num_starts 2; 0.0005s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.000948s (num_starts 32; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000949s (num_starts 519; 0.0000s/start)
ldr_decomposition.: 0.000951s (num_starts 26; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.000953s (num_starts 2; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.000956s (num_starts 2; 0.0005s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.000966s (num_starts 5; 0.0002s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.000994s (num_starts 4; 0.0002s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001s (num_starts 2; 0.0005s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001008s (num_starts 59; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001043s (num_starts 3; 0.0003s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.001138s (num_starts 36; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.001225s (num_starts 105; 0.0000s/start)
parse_cvc4_model.: 0.001225s (num_starts 1; 0.0012s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.001303s (num_starts 276; 0.0000s/start)
graph_locs_add_all_specvars.: 0.001358s (num_starts 2; 0.0007s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001378s (num_starts 30; 0.0000s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.001399s (num_starts 26; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001415s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.001417s (num_starts 1; 0.0014s/start)
tfg::populate_loc_definedness.before_solve.: 0.001425s (num_starts 3; 0.0005s/start)
corr_graph_enumerate_correlations.: 0.001559s (num_starts 6; 0.0003s/start)
removeMostPromising.: 0.001608s (num_starts 17; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001758s (num_starts 3; 0.0006s/start)
populate_simplified_assets.: 0.001796s (num_starts 6; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001803s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001818s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.001821s (num_starts 2; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.001827s (num_starts 2; 0.0009s/start)
bv_const_ref_map2expr_map.: 0.001828s (num_starts 41; 0.0000s/start)
tfg::populate_loc_definedness.: 0.001862s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001964s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.001967s (num_starts 1; 0.0020s/start)
graph_visit_exprs.: 0.002221s (num_starts 3; 0.0007s/start)
generate_aliasing_constraints_from_expr.: 0.002261s (num_starts 712; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002371s (num_starts 123; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.002644s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.002733s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.002741s (num_starts 2; 0.0014s/start)
pth_collect_simplified_preds_using_atom_func.: 0.002764s (num_starts 109; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown;-trivial.: 0.002889s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.002895s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.0029s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown.: 0.00291s (num_starts 4; 0.0007s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.002917s (num_starts 175; 0.0000s/start)
graph_visit_exprs_and_keys.: 0.002997s (num_starts 2; 0.0015s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.003089s (num_starts 3; 0.0010s/start)
populate_branch_affecting_locs.: 0.003103s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003211s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.003255s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.003258s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003276s (num_starts 3; 0.0011s/start)
populate_locs_potentially_modified_on_edge.: 0.003319s (num_starts 3; 0.0011s/start)
get_unrolled_loop_paths_from.: 0.003334s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003381s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.003402s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.003466s (num_starts 7; 0.0005s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.003534s (num_starts 30; 0.0001s/start)
graph_identify_back_edges.: 0.003689s (num_starts 27; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.003691s (num_starts 158; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.003781s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.003791s (num_starts 2; 0.0019s/start)
find_dominators.: 0.003859s (num_starts 31; 0.0001s/start)
get_sprel_map_pair_at_pc.: 0.003864s (num_starts 38; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.00387s (num_starts 66; 0.0001s/start)
graph_identify_natural_loops.: 0.003909s (num_starts 27; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.004274s (num_starts 77; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.004296s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned;-trivial.: 0.004312s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.004319s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.004329s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned.: 0.004343s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.004375s (num_starts 4; 0.0011s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.004416s (num_starts 5; 0.0009s/start)
compute_vars_reaching_definitions.: 0.004585s (num_starts 2; 0.0023s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.004616s (num_starts 4; 0.0012s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004618s (num_starts 29; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.004754s (num_starts 5; 0.0010s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.004922s (num_starts 69; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.005127s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.00555s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.005572s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.005581s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.005594s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.005613s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.005623s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.005638s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.005643s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.005651s (num_starts 6; 0.0009s/start)
tfg_suffixpath_get_expr_helper.: 0.005968s (num_starts 20; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.006007s (num_starts 7; 0.0009s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.006067s (num_starts 7; 0.0009s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.006087s (num_starts 7; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006219s (num_starts 6; 0.0010s/start)
collect_assumes_around_path_helper.: 0.006234s (num_starts 140; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.006236s (num_starts 6; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006243s (num_starts 6; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.006256s (num_starts 6; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.00628s (num_starts 6; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006294s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006296s (num_starts 3; 0.0021s/start)
tfg::get_aliasing_constraints_for_edge.: 0.006306s (num_starts 199; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006307s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.006323s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.00633s (num_starts 3; 0.0021s/start)
check_node_stability_after_CE_addition.: 0.006363s (num_starts 47; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.006497s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-trivial.: 0.006507s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.00664s (num_starts 6; 0.0011s/start)
ldr_decompose_and_linear_solve.: 0.00664s (num_starts 26; 0.0003s/start)
graph_with_paths::collect_assumes_around_path.: 0.006721s (num_starts 140; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.006763s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.006789s (num_starts 7; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 0.006874s (num_starts 7; 0.0010s/start)
bv_linear_solve.: 0.007031s (num_starts 26; 0.0003s/start)
predicate_canonicalized.: 0.007184s (num_starts 41; 0.0002s/start)
query:bv_solve.: 0.007185s (num_starts 26; 0.0003s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.007189s (num_starts 3; 0.0024s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.007336s (num_starts 22; 0.0003s/start)
compute_lr_status_for_expr.: 0.007373s (num_starts 176; 0.0000s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.007399s (num_starts 22; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;pred-type-unknown;-trivial.: 0.007571s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.007581s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.0076s (num_starts 6; 0.0013s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.007602s (num_starts 36; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;pred-type-unknown.: 0.007618s (num_starts 6; 0.0013s/start)
counter_example_falsifies_preds.: 0.00767s (num_starts 73; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.007943s (num_starts 160; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.00821s (num_starts 160; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008251s (num_starts 4; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.008279s (num_starts 8; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.00829s (num_starts 8; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008344s (num_starts 4; 0.0021s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.008376s (num_starts 3; 0.0028s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.00841s (num_starts 3; 0.0028s/start)
populate_transitive_closure.: 0.008463s (num_starts 37; 0.0002s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.008546s (num_starts 36; 0.0002s/start)
bv_solve_returning_intermediate_structures.: 0.008593s (num_starts 26; 0.0003s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.008931s (num_starts 59; 0.0002s/start)
compute_regions.: 0.008964s (num_starts 27; 0.0003s/start)
collect_aliasing_constraints_around_path_helper.: 0.009219s (num_starts 120; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.009441s (num_starts 59; 0.0002s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.009468s (num_starts 181; 0.0001s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.009637s (num_starts 21; 0.0005s/start)
bvsolve_cache_query.miss1.: 0.00992s (num_starts 26; 0.0004s/start)
collect_aliasing_constraints_around_path.: 0.009921s (num_starts 76; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.010082s (num_starts 41; 0.0002s/start)
lhs_set_sort.: 0.010085s (num_starts 38; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.010109s (num_starts 6; 0.0017s/start)
bvsolve_cache_query.: 0.010116s (num_starts 26; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.010132s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.010268s (num_starts 8; 0.0013s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.010269s (num_starts 59; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.010407s (num_starts 8; 0.0013s/start)
populate_loc_liveness.: 0.010511s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.011482s (num_starts 10; 0.0011s/start)
counter_example_satisfies_preds.: 0.011578s (num_starts 380; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012104s (num_starts 8; 0.0015s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.01224s (num_starts 8; 0.0015s/start)
solve_for_bv_points.: 0.012422s (num_starts 26; 0.0005s/start)
get_next_potential_correlations.: 0.013278s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.013308s (num_starts 8; 0.0017s/start)
do_ssa_transformation.: 0.013944s (num_starts 2; 0.0070s/start)
avail_exprs_create_submap.: 0.013955s (num_starts 177; 0.0001s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.014244s (num_starts 6; 0.0024s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.014601s (num_starts 1; 0.0146s/start)
propagate_nodece_across_edge.: 0.015035s (num_starts 11; 0.0014s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.015065s (num_starts 26; 0.0006s/start)
compute_new_lr_status_on_locs.: 0.015596s (num_starts 59; 0.0003s/start)
collect_inductive_preds_around_path.: 0.016619s (num_starts 105; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.016932s (num_starts 14; 0.0012s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.017792s (num_starts 904; 0.0000s/start)
counter_example_evaluate_preds.: 0.018169s (num_starts 453; 0.0000s/start)
compute_expr_eqclasses_at_pc.: 0.019127s (num_starts 3; 0.0064s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.020248s (num_starts 5; 0.0040s/start)
cg_add_node.: 0.020468s (num_starts 5; 0.0041s/start)
gen_pred_from_coeff_row.: 0.021429s (num_starts 41; 0.0005s/start)
compute_preds_for_bv_points.: 0.021823s (num_starts 10; 0.0022s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.021894s (num_starts 16; 0.0014s/start)
tfg_postprocess_after_pointsto_analysis.: 0.022507s (num_starts 2; 0.0113s/start)
graph_to_stream.: 0.024061s (num_starts 4; 0.0060s/start)
create_new_corr_graph_edge.new_node.: 0.025128s (num_starts 4; 0.0063s/start)
create_new_corr_graph_edge.: 0.025489s (num_starts 6; 0.0042s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.025494s (num_starts 207; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.025787s (num_starts 20; 0.0013s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.026899s (num_starts 77; 0.0003s/start)
tfg_relax_pointsto_vals_on_edge.: 0.026944s (num_starts 22; 0.0012s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.02747s (num_starts 59; 0.0005s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.029531s (num_starts 128; 0.0002s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.030889s (num_starts 38; 0.0008s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.031048s (num_starts 24; 0.0013s/start)
get_unrolled_paths_from.: 0.031433s (num_starts 20; 0.0016s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.031776s (num_starts 20; 0.0016s/start)
apply_mask_and_overlay_array_constant.: 0.032668s (num_starts 24; 0.0014s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.032874s (num_starts 12; 0.0027s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.033294s (num_starts 38; 0.0009s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%30%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.035544s (num_starts 10; 0.0036s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.03628s (num_starts 126; 0.0003s/start)
put_smtlib_string_in_file.: 0.038554s (num_starts 74; 0.0005s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.039723s (num_starts 961; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.041019s (num_starts 904; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.042941s (num_starts 41; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.04689s (num_starts 37; 0.0013s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.04819s (num_starts 904; 0.0001s/start)
compute_z3_expr.: 0.058976s (num_starts 2142; 0.0000s/start)
graph_ec_apply_trans_funs_helper.0.: 0.061356s (num_starts 254; 0.0002s/start)
graph_ec_apply_trans_funs_helper.: 0.063047s (num_starts 259; 0.0002s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.063723s (num_starts 259; 0.0002s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.064631s (num_starts 259; 0.0002s/start)
computeWP_for_pred_across_ec.: 0.065506s (num_starts 259; 0.0003s/start)
query:convert_from_z3.: 0.067943s (num_starts 2105; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.06886s (num_starts 24; 0.0029s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.069207s (num_starts 82; 0.0008s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.070466s (num_starts 600; 0.0001s/start)
query:convert_to_z3.: 0.075025s (num_starts 2105; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.076755s (num_starts 37; 0.0021s/start)
decide_hoare_triple_helper;-trivial.: 0.082157s (num_starts 69; 0.0012s/start)
edge_composition_apply_trans_funs_on_pred.: 0.083396s (num_starts 105; 0.0008s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.084284s (num_starts 126; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096958s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09696s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096964s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096968s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.096976s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate.: 0.096979s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.096982s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.096986s (num_starts 1; 0.0970s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097799s (num_starts 1; 0.0978s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097803s (num_starts 1; 0.0978s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097809s (num_starts 1; 0.0978s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097812s (num_starts 1; 0.0978s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.09782s (num_starts 1; 0.0978s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.097834s (num_starts 1; 0.0978s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.09828s (num_starts 2; 0.0491s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.09829s (num_starts 2; 0.0491s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101263s (num_starts 1; 0.1013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101266s (num_starts 1; 0.1013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101266s (num_starts 1; 0.1013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.101716s (num_starts 2; 0.0509s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.101724s (num_starts 2; 0.0509s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.10174s (num_starts 2; 0.0509s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.102292s (num_starts 1; 0.1023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.102301s (num_starts 1; 0.1023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.102306s (num_starts 1; 0.1023s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 0.107221s (num_starts 2; 0.0536s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.107969s (num_starts 7; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.107993s (num_starts 7; 0.0154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.108038s (num_starts 7; 0.0154s/start)
ftmap_run_pointsto_analysis.: 0.109346s (num_starts 2; 0.0547s/start)
tfg_run_pointsto_analysis.: 0.109654s (num_starts 2; 0.0548s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111649s (num_starts 1; 0.1116s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111651s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111657s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111662s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.111672s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.111676s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.111681s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.111684s (num_starts 1; 0.1117s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116534s (num_starts 1; 0.1165s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116536s (num_starts 1; 0.1165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116537s (num_starts 1; 0.1165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116537s (num_starts 1; 0.1165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.116545s (num_starts 1; 0.1165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.116549s (num_starts 1; 0.1165s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.116557s (num_starts 1; 0.1166s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.11703s (num_starts 2; 0.0585s/start)
tfg_populate_structs_after_ssa_construction.: 0.124218s (num_starts 2; 0.0621s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.129278s (num_starts 2; 0.0646s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.132559s (num_starts 4; 0.0331s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.14107s (num_starts 2; 0.0705s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.145196s (num_starts 3; 0.0484s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15314s (num_starts 1; 0.1531s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153143s (num_starts 1; 0.1531s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.153159s (num_starts 1; 0.1532s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.153162s (num_starts 1; 0.1532s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153479s (num_starts 2; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153503s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153514s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153956s (num_starts 2; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153965s (num_starts 2; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.153982s (num_starts 2; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.153992s (num_starts 2; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.154485s (num_starts 4; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 0.154497s (num_starts 4; 0.0386s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.154518s (num_starts 4; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157814s (num_starts 2; 0.0789s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159269s (num_starts 1; 0.1593s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15927s (num_starts 1; 0.1593s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.159281s (num_starts 1; 0.1593s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.159287s (num_starts 1; 0.1593s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.161089s (num_starts 4; 0.0403s/start)
query:simplify-z3.: 0.20068s (num_starts 4224; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.220475s (num_starts 33; 0.0067s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.220791s (num_starts 44; 0.0050s/start)
parse_z3_model.: 0.227539s (num_starts 25; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228778s (num_starts 3; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228792s (num_starts 3; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.228812s (num_starts 3; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.228827s (num_starts 3; 0.0763s/start)
ce_reconcile_sorts_and_values.: 0.230073s (num_starts 27; 0.0085s/start)
read_counter_examples_from_channel.: 0.231466s (num_starts 13; 0.0178s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.231827s (num_starts 2; 0.1159s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.231838s (num_starts 2; 0.1159s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.231848s (num_starts 2; 0.1159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23186s (num_starts 2; 0.1159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.231881s (num_starts 2; 0.1159s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned.: 0.231891s (num_starts 2; 0.1159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.231907s (num_starts 2; 0.1160s/start)
check_wfconds_on_edge.L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry.: 0.232917s (num_starts 3; 0.0776s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.23503s (num_starts 7; 0.0336s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.23672s (num_starts 7; 0.0338s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249359s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24937s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24938s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249394s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249406s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.249424s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.249464s (num_starts 2; 0.1247s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.249477s (num_starts 2; 0.1247s/start)
counter_example_translate_on_edge_composition_helper.: 0.251848s (num_starts 369; 0.0007s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254732s (num_starts 3; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.255999s (num_starts 6; 0.0427s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 0.258447s (num_starts 10; 0.0258s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 0.26658s (num_starts 16; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287057s (num_starts 4; 0.0718s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292008s (num_starts 2; 0.1460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292017s (num_starts 2; 0.1460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292021s (num_starts 2; 0.1460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.292045s (num_starts 2; 0.1460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.292054s (num_starts 2; 0.1460s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.292071s (num_starts 2; 0.1460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.293688s (num_starts 8; 0.0367s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.312398s (num_starts 2; 0.1562s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.312467s (num_starts 2; 0.1562s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.334044s (num_starts 5; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.33407s (num_starts 5; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.342401s (num_starts 13; 0.0263s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 0.342436s (num_starts 13; 0.0263s/start)
corr_graph::add_edge().: 0.345545s (num_starts 6; 0.0576s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.372673s (num_starts 6; 0.0621s/start)
corr_graph_add_correlation.: 0.372913s (num_starts 6; 0.0622s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.377474s (num_starts 6; 0.0629s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.382682s (num_starts 5; 0.0765s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.382705s (num_starts 5; 0.0765s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.382842s (num_starts 5; 0.0766s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.382859s (num_starts 5; 0.0766s/start)
check_wfconds_on_edge.L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.407289s (num_starts 2; 0.2036s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.413328s (num_starts 9; 0.0459s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.463208s (num_starts 7; 0.0662s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.475126s (num_starts 17; 0.0279s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.495576s (num_starts 4; 0.1239s/start)
guarded_predicate_set_and.: 0.498752s (num_starts 36; 0.0139s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.501813s (num_starts 11; 0.0456s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.515094s (num_starts 3; 0.1717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.528492s (num_starts 6; 0.0881s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.528519s (num_starts 6; 0.0881s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.538717s (num_starts 12; 0.0449s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.538754s (num_starts 12; 0.0449s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.540594s (num_starts 4; 0.1351s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.540657s (num_starts 3; 0.1802s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.540694s (num_starts 4; 0.1352s/start)
dst_edge_composition_proves_false.: 0.558899s (num_starts 4; 0.1397s/start)
get_next_dst_edge_composition_to_correlate.: 0.574159s (num_starts 5; 0.1148s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.599021s (num_starts 435; 0.0014s/start)
check_wfconds_on_edge.: 0.640561s (num_starts 9; 0.0712s/start)
decide_hoare_triple.: 0.644003s (num_starts 6; 0.1073s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.662403s (num_starts 9; 0.0736s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.686218s (num_starts 8; 0.0858s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.699956s (num_starts 16; 0.0437s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry).: 0.70672s (num_starts 50; 0.0141s/start)
check_equivalence_proof.: 0.71416s (num_starts 1; 0.7142s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.792841s (num_starts 8; 0.0991s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.793197s (num_starts 8; 0.0991s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.939533s (num_starts 21; 0.0447s/start)
check_preds_on_edge_compositions.: 0.952093s (num_starts 12; 0.0793s/start)
query:smt.: 0.953646s (num_starts 37; 0.0258s/start)
spawn_smt_query.: 1.18555s (num_starts 37; 0.0320s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.21s (num_starts 12; 0.1008s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry).: 1.24281s (num_starts 32; 0.0388s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.30299s (num_starts 17; 0.0766s/start)
decide_hoare_triple_helper;per-query-type;linear.: 1.32949s (num_starts 37; 0.0359s/start)
update_invariant_state_for_edges.: 2.35322s (num_starts 5; 0.4706s/start)
cg_check_new_cg_ec.: 2.35872s (num_starts 5; 0.4717s/start)
correl_entry_apply.: 2.359s (num_starts 5; 0.4718s/start)
solver_provable.: 2.38992s (num_starts 36; 0.0664s/start)
expr_is_provable.: 2.40689s (num_starts 36; 0.0669s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 2.40772s (num_starts 36; 0.0669s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 2.40995s (num_starts 36; 0.0669s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 2.41106s (num_starts 36; 0.0670s/start)
solver_satisfiable-cache-miss.: 2.41307s (num_starts 37; 0.0652s/start)
solver_satisfiable.: 2.41332s (num_starts 37; 0.0652s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 2.91752s (num_starts 36; 0.0810s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 2.92717s (num_starts 38; 0.0770s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 2.92799s (num_starts 38; 0.0771s/start)
expandProductCFG.: 2.94727s (num_starts 6; 0.4912s/start)
is_expr_equal_using_lhs_set_and_precond.: 3.28042s (num_starts 38; 0.0863s/start)
prove.: 3.28079s (num_starts 38; 0.0863s/start)
prove_spawn_and_join_helper.: 3.28108s (num_starts 38; 0.0863s/start)
prove_spawn_and_join.: 3.33063s (num_starts 38; 0.0876s/start)
prove_wrapper.proof_query_not_trivial.: 3.33768s (num_starts 38; 0.0878s/start)
prove_wrapper.: 3.35325s (num_starts 107; 0.0313s/start)
bestFirstSearch.: 3.36074s (num_starts 1; 3.3607s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.39911s (num_starts 36; 0.0944s/start)
decide_hoare_triple_check_ub.: 3.44434s (num_starts 105; 0.0328s/start)
decide_hoare_triple_helper.: 3.48525s (num_starts 105; 0.0332s/start)
decide_hoare_triple_with_alias_cons.: 3.55524s (num_starts 105; 0.0339s/start)
Time taken for equivalence check.: 4.07768s (num_starts 1; 4.0777s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 1
# of paths enumerated.: 16
# of paths expanded.: 5
# of queries to linear solver.: 26
# of smt-solver-queries.: 37
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 2
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 25
total-correlation-possibilities.: 8
total-correlation-possibilities-mod-lsprels.: 8
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%30%bbentry_Lfor.cond%1%bbentry.: 8
final-CG-counterexamples-total-at-L3%30%bbentry_Lfor.cond%1%bbentry.: 18
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 7
final-CG-super-edges.: 0
src-edges.: 16
src-nodes.: 14
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 2.41
final-CG-time-to-total-time-ratio.: 0.72
query-time-to-total-time-ratio.: 0.23

Context stats:
exprs: count: 150802
sorts: count: 153
num_proof_queries: 38
num_proof_queries_answered_by_syntactic_check: 2
cache_stats:
m_simplify:
	----------- total:	5404
	        hit ratio:	0.933568
m_simplify_solver:
	----------- total:	2953
	        hit ratio:	0.28107
m_z3_solver_substitution:
	----------- total:	2119
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	2123
	        hit ratio:	0
m_expr_size:
	----------- total:	10133
	        hit ratio:	0.774203
m_expr_evaluates_to_constant_visitor:
	----------- total:	16888
	        hit ratio:	0.483775
m_sort_dfa_canonicalize:
	----------- total:	172894
	        hit ratio:	0.999896
m_expr_convert_to_iexpr:
	----------- total:	589
	        hit ratio:	0.736842

z3_solver expr_query_cache entry size: 37
	----------- total:	37
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[10.8650, 12.4350) (avg. 11.6487)        : 4
[12.4350, 14.2318) (avg. 13.3605)        : 2
[14.2318, 16.2883) (avg. 15.5084)        : 5
[16.2883, 18.6419) (avg. 17.9960)        : 2
[18.6419, 21.3357) (avg. 19.0580)        : 1
[21.3357, 24.4186) (avg. 21.6580)        : 1
[24.4186, 27.9471) (avg. 25.3850)        : 2
[27.9471, 31.9854) (avg. 30.1627)        : 9
[31.9854, 36.6073) (avg. 34.8250)        : 6
[36.6073, 41.8970) (avg. 38.8914)        : 5
histogram (number of quantifiers in query)
[ 0,  3) (avg.  0)                       : 1
[ 3,  5) (avg.  0)                       : 0
[ 5,  8) (avg.  5)                       : 14
[ 8, 10) (avg.  0)                       : 0
[10, 13) (avg.  0)                       : 0
[13, 15) (avg.  0)                       : 0
[15, 18) (avg. 15)                       : 22
[18, 20) (avg.  0)                       : 0
[20, 23) (avg.  0)                       : 0
[23, 25) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 40,  59) (avg.  40)                    : 1
[ 59,  77) (avg.   0)                    : 0
[ 77,  95) (avg.   0)                    : 0
[ 95, 113) (avg.   0)                    : 0
[113, 131) (avg. 120)                    : 13
[131, 150) (avg. 135)                    : 1
[150, 168) (avg. 161)                    : 14
[168, 186) (avg. 177)                    : 3
[186, 204) (avg. 188)                    : 4
[204, 222) (avg. 212)                    : 1
Top 10 highest time taking queries:
1. [0.041s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%30%bbentry_Lfor.cond%1%bbentry.dstToPC.E0%0%d.from_pcL3%30%bbentry_Lfor.con.0
2. [0.039s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
3. [0.039s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_Lfor.cond%1%bbentry.dstToPC.Lfor.cond%1%bbentry.from_pcL0%0%d_Lfor.cond.0
4. [0.038s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
5. [0.038s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1
6. [0.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.Lfor.cond%1%bbentry.from_pcL0%0%d_L0%0%d.cond_apply_set_.0
7. [0.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.3.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
8. [0.035s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%30%bbentry_Lfor.cond%1%bbentry.dstToPC.Lfor.cond%1%bbentry.from_pcL3%30%bbe.0
9. [0.035s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-unsigned.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.cond.0
10. [0.034s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.3

<MSG>0:26 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 132 time spent: 0:0:0 [0.003112s total; 0.000024 per start]
tfg_computeWP: num_starts 355 time spent: 0:0:0 [0.053915s total; 0.000152 per start]
tfg_get_simplified_to_state_for_edge: num_starts 1266 time spent: 0:0:0 [0.002566s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1367 time spent: 0:0:0 [0.002792s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 589 time spent: 0:0:0 [0.001160s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 29 time spent: 0:0:0 [0.105405s total; 0.003635 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 12 time spent: 0:0:0 [0.301778s total; 0.025148 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 333 time spent: 0:0:0 [0.237762s total; 0.000714 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 82 time spent: 0:0:0 [0.129820s total; 0.001583 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 280 time spent: 0:0:0 [0.197980s total; 0.000707 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1242 time spent: 0:0:0 [0.217294s total; 0.000175 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 280 time spent: 0:0:0 [0.009047s total; 0.000032 per start]
tfg_graph_get_vars_written_on_edge: num_starts 280 time spent: 0:0:0 [0.007218s total; 0.000026 per start]
cg_with_rank_add_CE_at_pc: num_starts 47 time spent: 0:0:0 [0.090045s total; 0.001916 per start]
graph_with_ce_add_CE_at_pc: num_starts 31 time spent: 0:0:0 [0.000593s total; 0.000019 per start]
graph_with_guessing_add_CE_at_pc: num_starts 47 time spent: 0:0:0 [0.089084s total; 0.001895 per start]
point_set_add_point_using_CE: num_starts 190 time spent: 0:0:0 [0.028005s total; 0.000147 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 190 time spent: 0:0:0 [0.028519s total; 0.000150 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 29 time spent: 0:0:0 [0.081837s total; 0.002822 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 29 time spent: 0:0:0 [0.052493s total; 0.001810 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2533 time spent: 0:0:0 [0.026841s total; 0.000011 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 389 time spent: 0:0:0 [0.013370s total; 0.000034 per start]
expr_simplify_solver: num_starts 2998 time spent: 0:0:0 [0.402526s total; 0.000134 per start]
expr_simplify_syntactic: num_starts 2998 time spent: 0:0:0 [0.036845s total; 0.000012 per start]
expr_simplify_select_on_store: num_starts 2 time spent: 0:0:0 [0.006257s total; 0.003129 per start]
expr_simplify_using_lhs_set_helper: num_starts 501 time spent: 0:0:0 [0.629589s total; 0.001257 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 4644 time spent: 0:0:0 [0.624330s total; 0.000134 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 3681 time spent: 0:0:0 [0.017248s total; 0.000005 per start]
expr_simplify_eq: num_starts 936 time spent: 0:0:0 [0.009081s total; 0.000010 per start]
expr_simplify_or: num_starts 13 time spent: 0:0:0 [0.000016s total; 0.000001 per start]
expr_simplify_and: num_starts 272 time spent: 0:0:0 [0.001536s total; 0.000006 per start]
expr_simplify_not: num_starts 18 time spent: 0:0:0 [0.000085s total; 0.000005 per start]
expr_simplify_implies: num_starts 248 time spent: 0:0:0 [0.002508s total; 0.000010 per start]
canonicalize_expr_tree: num_starts 2156 time spent: 0:0:0 [0.059886s total; 0.000028 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 2 time spent: 0:0:0 [0.006209s total; 0.003105 per start]
get_arithmetic_addsub_atoms: num_starts 3056 time spent: 0:0:0 [0.001600s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 304 time spent: 0:0:0 [0.003205s total; 0.000011 per start]
expr_is_consts_struct_constant: num_starts 659 time spent: 0:0:0 [0.000453s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5758 time spent: 0:0:0 [0.634375s total; 0.000110 per start]
expr_do_simplify_helper_cache: num_starts 5758 time spent: 0:0:0 [0.005597s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 1088 time spent: 0:0:0 [0.230421s total; 0.000212 per start]
array_constant_equals: num_starts 530 time spent: 0:0:0 [0.000931s total; 0.000002 per start]
sort_dfa_canonical: num_starts 315426 time spent: 0:0:1 [1.272272s total; 0.000004 per start]
expr_convert_to_iexpr: num_starts 619 time spent: 0:0:1 [1.082111s total; 0.001748 per start]
combo_dfa_xfer_and_meet: num_starts 37 time spent: 0:0:0 [0.076709s total; 0.002073 per start]
alias_val_xfer_and_meet: num_starts 37 time spent: 0:0:0 [0.046818s total; 0.001265 per start]
get_sprel_map_from_avail_exprs: num_starts 57 time spent: 0:0:0 [0.004840s total; 0.000085 per start]
update_memlabels_for_memslot_locs: num_starts 18 time spent: 0:0:0 [0.000083s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 118 time spent: 0:0:0 [0.014408s total; 0.000122 per start]
compute_simplified_loc_exprs_for_edge: num_starts 322 time spent: 0:0:0 [0.064282s total; 0.000200 per start]
compute_locs_definitely_written_on_edge: num_starts 118 time spent: 0:0:0 [0.000191s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 33 time spent: 0:0:0 [0.005792s total; 0.000176 per start]
edge_update_memlabel_map_for_mlvars: num_starts 59 time spent: 0:0:0 [0.001101s total; 0.000019 per start]
add_new_locs_based_on_edge: num_starts 37 time spent: 0:0:0 [0.037139s total; 0.001004 per start]
expand_locset_to_include_slots_for_memmask: num_starts 66 time spent: 0:0:0 [0.000144s total; 0.000002 per start]
total: num_starts 1 time spent: 0:0:33 [33.519825s total; 33.519825 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 4.32s.
ftmap_run_pointsto_analysis.: 0.109346s (num_starts 2; 0.0547s/start)s.
EQ Time after pointsto analysis: 4.20872s.
EQ Time after pointsto analysis and smt_query: 0.855476s.
EQ Time after pointsto analysis and smt_query and bv-solve: 0.84536s.
Equivalence proof found. The programs are equivalent.
