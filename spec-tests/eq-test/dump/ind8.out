argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=ind8.proof
argv[9] = --spec-iospecs=ind8.iospecs
argv[10] = ind8.spec
argv[11] = ind8.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.1507325
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/ind8.c
argv[10] = -o
argv[11] = par_tmpdir/ind8.c.bc.tmp
argv[12] = -m32

/home/indrajit/scratch/tests/eq-test/ind8.c:9:18: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned int)' [-Wimplicit-function-declaration]
    list* node = malloc(sizeof(list));
                 ^
/home/indrajit/scratch/tests/eq-test/ind8.c:9:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
1 warning generated.
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/ind8.spec.etfg
argv[11] = par_tmpdir/ind8.c.bc
argv[12] = -o
argv[13] = par_tmpdir/ind8.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function make_list</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 100 time spent: 0:0:0 [0.000187s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 123 time spent: 0:0:0 [0.000225s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1446 time spent: 0:0:0 [0.015322s total; 0.000011 per start]
expr_simplify_solver: num_starts 612 time spent: 0:0:0 [0.033345s total; 0.000054 per start]
expr_simplify_syntactic: num_starts 612 time spent: 0:0:0 [0.243192s total; 0.000397 per start]
expr_simplify_select_on_store: num_starts 5 time spent: 0:0:0 [0.019104s total; 0.003821 per start]
expr_simplify_store_on_store: num_starts 52 time spent: 0:0:0 [0.005402s total; 0.000104 per start]
expr_simplify_using_lhs_set_helper: num_starts 228 time spent: 0:0:0 [0.295353s total; 0.001295 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1659 time spent: 0:0:0 [0.293843s total; 0.000177 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 217 time spent: 0:0:0 [0.001021s total; 0.000005 per start]
expr_simplify_eq: num_starts 72 time spent: 0:0:0 [0.000971s total; 0.000013 per start]
expr_simplify_or: num_starts 8 time spent: 0:0:0 [0.000014s total; 0.000002 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000008s total; 0.000004 per start]
expr_simplify_ite: num_starts 81 time spent: 0:0:0 [0.003522s total; 0.000043 per start]
canonicalize_expr_tree: num_starts 169 time spent: 0:0:0 [0.004157s total; 0.000025 per start]
expr_simplify_memalloc_using_memlabel: num_starts 121 time spent: 0:0:0 [0.000326s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 15 time spent: 0:0:0 [0.019012s total; 0.001267 per start]
memlabels_are_independent: num_starts 57 time spent: 0:0:0 [0.000115s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 366 time spent: 0:0:0 [0.000171s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 347 time spent: 0:0:0 [0.005173s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 712 time spent: 0:0:0 [0.000533s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 3714 time spent: 0:0:0 [0.299907s total; 0.000081 per start]
expr_do_simplify_helper_cache: num_starts 3714 time spent: 0:0:0 [0.002968s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 125 time spent: 0:0:0 [0.000096s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 125 time spent: 0:0:0 [0.000400s total; 0.000003 per start]
array_constant_equals: num_starts 321 time spent: 0:0:0 [0.000676s total; 0.000002 per start]
sort_dfa_canonical: num_starts 150622 time spent: 0:0:1 [1.204853s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 48 time spent: 0:0:0 [0.005370s total; 0.000112 per start]
combo_dfa_xfer_and_meet: num_starts 95 time spent: 0:0:0 [0.331384s total; 0.003488 per start]
alias_val_xfer_and_meet: num_starts 95 time spent: 0:0:0 [0.241572s total; 0.002543 per start]
get_sprel_map_from_avail_exprs: num_starts 122 time spent: 0:0:0 [0.013748s total; 0.000113 per start]
update_memlabels_for_memslot_locs: num_starts 26 time spent: 0:0:0 [0.000145s total; 0.000006 per start]
populate_gen_and_kill_sets_for_edge: num_starts 190 time spent: 0:0:0 [0.020216s total; 0.000106 per start]
compute_simplified_loc_exprs_for_edge: num_starts 630 time spent: 0:0:0 [0.233764s total; 0.000371 per start]
compute_locs_definitely_written_on_edge: num_starts 190 time spent: 0:0:0 [0.000154s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 175 time spent: 0:0:0 [0.187147s total; 0.001069 per start]
edge_update_memlabel_map_for_mlvars: num_starts 95 time spent: 0:0:0 [0.002943s total; 0.000031 per start]
add_new_locs_based_on_edge: num_starts 95 time spent: 0:0:0 [0.039337s total; 0.000414 per start]
expand_locset_to_include_slots_for_memmask: num_starts 198 time spent: 0:0:0 [0.001082s total; 0.000005 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.make_list.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.make_list.: 3e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.make_list.: 8e-06s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 2.4e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 2.5e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.9e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.7e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.6e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 5.1e-05s (num_starts 13; 0.0000s/start)
main.3.: 9.9e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000112s (num_starts 131; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000112s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.000146s (num_starts 135; 0.0000s/start)
compute_sprel_relations.: 0.000172s (num_starts 1; 0.0002s/start)
determinize_value_expr_map.: 0.000174s (num_starts 177; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000177s (num_starts 10; 0.0000s/start)
propagate_sprels.: 0.000183s (num_starts 1; 0.0002s/start)
populate_memlabel_map.visit2.calling.compute_lr_status_for_expr.: 0.000195s (num_starts 6; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000223s (num_starts 22; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000225s (num_starts 4; 0.0001s/start)
graph_locs_add_all_indvars.: 0.000266s (num_starts 1; 0.0003s/start)
populate_locid2expr_map.: 0.00027s (num_starts 2; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000279s (num_starts 1; 0.0003s/start)
graph_locs_add_exvregs_for_edge.: 0.000293s (num_starts 49; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000324s (num_starts 1; 0.0003s/start)
tfg::populate_loc_definedness.post_dfa.: 0.00034s (num_starts 2; 0.0002s/start)
graph_locs_add_local_vars_for_edge.: 0.00038s (num_starts 49; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000416s (num_starts 1; 0.0004s/start)
lr_status_meet.: 0.000447s (num_starts 109; 0.0000s/start)
expr_represents_llvm_undef.: 0.000545s (num_starts 137; 0.0000s/start)
compute_reachable_memlabels_map.: 0.000617s (num_starts 3; 0.0002s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000685s (num_starts 95; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000746s (num_starts 1; 0.0007s/start)
sp_version_relations_val_t::meet.: 0.000785s (num_starts 1379; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000895s (num_starts 98; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.00093s (num_starts 1; 0.0009s/start)
populate_memlabel_map.visit2.update_callee_memlabels.: 0.001009s (num_starts 6; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.001143s (num_starts 1; 0.0011s/start)
canonicalize_llvm_nextpcs.: 0.001199s (num_starts 1; 0.0012s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001221s (num_starts 1; 0.0012s/start)
populate_transitive_closure.: 0.001278s (num_starts 1; 0.0013s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001379s (num_starts 95; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.001452s (num_starts 1; 0.0015s/start)
graph_with_locs_constructor.src.spec.make_list.: 0.0016s (num_starts 1; 0.0016s/start)
tfg::collect_assumes_around_edge.: 0.001747s (num_starts 123; 0.0000s/start)
compute_z3_expr.: 0.001871s (num_starts 166; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.002139s (num_starts 96; 0.0000s/start)
create_closure_matrix.: 0.002366s (num_starts 121; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.002816s (num_starts 95; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002885s (num_starts 140; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.003362s (num_starts 1611; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.004211s (num_starts 83; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.00438s (num_starts 2; 0.0022s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.004574s (num_starts 1; 0.0046s/start)
graph_with_predicates_constructor.src.spec.make_list.: 0.004737s (num_starts 1; 0.0047s/start)
graph_with_aliasing_constructor.src.spec.make_list.: 0.005291s (num_starts 1; 0.0053s/start)
graph_visit_exprs.: 0.005303s (num_starts 4; 0.0013s/start)
query:convert_from_z3.: 0.005754s (num_starts 166; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.make_list.: 0.007526s (num_starts 1; 0.0075s/start)
graph_with_edge_structures_constructor.src.spec.make_list.: 0.007681s (num_starts 1; 0.0077s/start)
tfg_constructor.src.spec.make_list.after_transitive_closure.: 0.008187s (num_starts 1; 0.0082s/start)
tfg_constructor.src.spec.make_list.post_parsing.: 0.008192s (num_starts 1; 0.0082s/start)
tfg_constructor.src.spec.make_list.after_string_contents.: 0.008198s (num_starts 1; 0.0082s/start)
tfg_constructor.src.spec.make_list.after_compute_max_memlabel_varnum.: 0.008204s (num_starts 1; 0.0082s/start)
tfg_constructor.src.spec.make_list.: 0.008208s (num_starts 1; 0.0082s/start)
query:convert_to_z3.: 0.008309s (num_starts 166; 0.0001s/start)
graph_identify_back_edges.: 0.008742s (num_starts 6; 0.0015s/start)
graph_identify_natural_loops.: 0.009178s (num_starts 6; 0.0015s/start)
tfg::populate_loc_definedness.before_solve.: 0.009972s (num_starts 2; 0.0050s/start)
create_sp_version_relations_lattice_at_pc.: 0.010333s (num_starts 121; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.010479s (num_starts 2; 0.0052s/start)
tfg::populate_loc_definedness.: 0.010851s (num_starts 2; 0.0054s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.011594s (num_starts 1; 0.0116s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.011843s (num_starts 1; 0.0118s/start)
find_dominators.: 0.012222s (num_starts 10; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.012265s (num_starts 1; 0.0123s/start)
populate_branch_affecting_locs.: 0.012553s (num_starts 2; 0.0063s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.013651s (num_starts 95; 0.0001s/start)
graph_to_stream.: 0.013781s (num_starts 1; 0.0138s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.013922s (num_starts 95; 0.0001s/start)
compute_regions.: 0.014208s (num_starts 6; 0.0024s/start)
query:simplify-z3.: 0.018569s (num_starts 334; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.023536s (num_starts 95; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.023845s (num_starts 1446; 0.0000s/start)
populate_simplified_to_state.: 0.025854s (num_starts 3; 0.0086s/start)
avail_exprs_create_submap.: 0.032459s (num_starts 285; 0.0001s/start)
tfg_preprocess.dst.llvm.make_list.: 0.034077s (num_starts 1; 0.0341s/start)
tfg::tfg_preprocess.: 0.03408s (num_starts 1; 0.0341s/start)
populate_simplified_assets.: 0.034396s (num_starts 6; 0.0057s/start)
main.2.: 0.038696s (num_starts 1; 0.0387s/start)
get_tfg.: 0.04368s (num_starts 1; 0.0437s/start)
get_function_tfg_map.make_list.: 0.04374s (num_starts 1; 0.0437s/start)
get_function_tfg_map.: 0.043742s (num_starts 1; 0.0437s/start)
populate_locs_potentially_modified_on_edge.: 0.047347s (num_starts 3; 0.0158s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.049042s (num_starts 95; 0.0005s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.073638s (num_starts 1446; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.075915s (num_starts 1446; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.081758s (num_starts 3; 0.0273s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.093579s (num_starts 1446; 0.0001s/start)
compute_lr_status_for_expr.: 0.122465s (num_starts 120; 0.0010s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.122917s (num_starts 100; 0.0012s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.123101s (num_starts 100; 0.0012s/start)
compute_new_lr_status_on_locs.: 0.198218s (num_starts 95; 0.0021s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.241806s (num_starts 95; 0.0025s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.283974s (num_starts 222; 0.0013s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.295655s (num_starts 228; 0.0013s/start)
populate_loc_liveness.: 0.307063s (num_starts 2; 0.1535s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.331554s (num_starts 95; 0.0035s/start)
tfg_postprocess_after_pointsto_analysis.: 0.420333s (num_starts 1; 0.4203s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.44246s (num_starts 1; 0.4425s/start)
ftmap_run_pointsto_analysis.: 0.80148s (num_starts 1; 0.8015s/start)
parse_consts_db.: 7.04943s (num_starts 1; 7.0494s/start)
main.: 7.98063s (num_starts 1; 7.9806s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file ind8.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: make_list...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:23 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:23 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG make_list (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : product-TFG make_list: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG make_list: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG make_list created 3 possibilities in group make_list.A...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:24 : make_list.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : make_list.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : make_list.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : make_list.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : make_list.A2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:24 : make_list.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : make_list.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : make_list.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    9 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      8.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:24 : Added correlation to the product-TFG make_list.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    9 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      8.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:24 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial3-prove3...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial2-prove7...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:28 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:28 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:28 : make_list.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:28 : make_list.A2 (d:0, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:28 : Chosen product-TFG make_list.A2 will be explored later...</MSG>
<MSG>0:28 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:28 : Chose (for CE propagation) product-TFG make_list.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:28 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A3...</MSG>
<MSG>0:28 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A3...</MSG>
<MSG>0:28 : Creating ssa-path for the src-tfg path L0%0%d --> L3%9%bbentry ending at L3%9%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Adding a CG edge composition using the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:28 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:28 : Adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%9%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: Computing loop hoisting select expressions at toPC L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: Computing loop hoisting non-linear expressions at toPC L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: Adding node L3%9%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:28 : make_list.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: Adding edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:28 : make_list.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:28 : make_list.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:28 : make_list.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%9%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 0
140419 : bvuge(140276, 140273) : BOOL              : true
142749 : not(140419) : BOOL                        : false

ce =
=counter_example_begin z3.ce8 dcbceebe31ade02929bc5a37f53cdf
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform21 : BV:32
4 : Lambda60 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda61 : BV:32
7 : unit : UNIT
8 : 1573078159 { 0x5dc3448f +1.52552974e60 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4055809063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4055809064; 4055809067 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4055809068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4055809067 { 0xf1bebc2b -239158229 -1.49011743e100 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
52945785
=counter_example_end


failcond-expr = not(bvuge(0, input.spec-%var-n-1)):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.spec-%var-n-1 : BV:32
3 : bvuge(1, 2) : BOOL
4 : not(3) : BOOL
</MSG>
<MSG>0:28 : make_list.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:28 : make_list.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:28 : make_list.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : Done adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%9%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : Done adding a CG edge composition using the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:28 : Failed correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%9%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 0
140419 : bvuge(140276, 140273) : BOOL              : true
142749 : not(140419) : BOOL                        : false

ce =
=counter_example_begin z3.ce8 dcbceebe31ade02929bc5a37f53cdf
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform21 : BV:32
4 : Lambda60 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda61 : BV:32
7 : unit : UNIT
8 : 1573078159 { 0x5dc3448f +1.52552974e60 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4055809063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4055809064; 4055809067 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4055809068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4055809067 { 0xf1bebc2b -239158229 -1.49011743e100 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
52945785
=counter_example_end


</MSG>
<MSG>0:28 : Discovered that the correlation was useless for the product-TFG make_list.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:28 : Chose (for CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:28 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1...</MSG>
<MSG>0:28 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1...</MSG>
<MSG>0:28 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:28 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:28 : Adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:28 : make_list.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:28 : make_list.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:28 : make_list.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:28 : make_list.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:28 : make_list.A1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:28 : make_list.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:28 : make_list.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:28 : make_list.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : Done adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:28 : Added correlation to the product-TFG make_list.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:28 : Chose (after CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:28 : make_list.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:28 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:28 : make_list.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:28 : make_list.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:28 : make_list.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 3 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:28 : make_list.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:28 : make_list.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:28 : make_list.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:28 : make_list.A1 (d:0, s:0, sp: 4): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:28 : product-TFG make_list.A1: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : product-TFG make_list.A1: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:28 : product-TFG make_list.A1 created 1 possibilities in group make_list.A1.B...</MSG>
<MSG>0:28 : Chose (for CE propagation) product-TFG make_list.A1.B1 (d:0, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:28 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:28 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:28 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:28 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:28 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:28 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:28 : Adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:28 : make_list.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:28 : make_list.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:28 : make_list.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:28 : make_list.A1.B1: Propagated 3 out of 6 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:28 : make_list.A1.B1: Added the 3 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:28 : make_list.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:28 : make_list.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:28 : make_list.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : Done adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:28 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:28 : Added correlation to the product-TFG make_list.A1.B1 (d:0, s:0, sp: 4) and created a correlation entry...</MSG>
<MSG>0:28 : Chose (after CE propagation) product-TFG make_list.A1.B1 (d:0, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:28 : make_list.A1.B1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:28 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:28 : make_list.A1.B1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:28 : make_list.A1.B1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:28 : make_list.A1.B1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:29 : make_list.A1.B1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:29 : make_list.A1.B1 (d:0, s:0, sp: 4): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : make_list.A1.B1 (d:0, s:0, sp: 4): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:29 : product-TFG make_list.A1.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : product-TFG make_list.A1.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : product-TFG make_list.A1.B1 created 1 possibilities in group make_list.A1.B1.C...</MSG>
<MSG>0:29 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:29 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:29 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:29 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:29 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:29 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:29 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:29 : Adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Adding node L0%0%d_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Propagated 5 out of 8 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Added the 5 propagated CEs at PC L0%0%d_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:29 : make_list.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : Done adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-1, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-1, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-1, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:29 : Added correlation to the product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 4) and created a correlation entry...</MSG>
<MSG>0:29 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 4 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-1, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-1, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-1, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:29 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:29 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:30 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:30 : make_list.A1.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:31 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 3 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:35 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:35 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:35 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:35 : make_list.A1.B1.C1 (d:0, s:0, sp: 4): checked newly added edge and inferred invariants...</MSG>
<MSG>0:35 : make_list.A1.B1.C1 (d:0, s:0, sp: 8): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:35 : Chosen product-TFG make_list.A1.B1.C1 will be explored later...</MSG>
<MSG>0:35 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:35 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 4 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:35 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:35 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:35 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:35 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:35 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:35 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:35 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7


<MSG>0:35 : make_list.A2 (d:0, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:35 : make_list.A2 (d:0, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:35 : product-TFG make_list.A2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:35 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:35 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:35 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:35 : product-TFG make_list.A2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:35 : product-TFG make_list.A2 created 1 possibilities in group make_list.A2.B...</MSG>
<MSG>0:35 : Chose (for CE propagation) product-TFG make_list.A2.B1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:35 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:35 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:35 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:35 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:35 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:35 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:35 : Adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:35 : make_list.A2.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:35 : make_list.A2.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:35 : make_list.A2.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:35 : make_list.A2.B1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:35 : make_list.A2.B1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:35 : make_list.A2.B1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:35 : make_list.A2.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:35 : make_list.A2.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:35 : make_list.A2.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:36 : make_list.A2.B1: Propagated 3 out of 6 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:36 : make_list.A2.B1: Added the 3 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:36 : make_list.A2.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:36 : make_list.A2.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:36 : make_list.A2.B1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:36 : make_list.A2.B1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:36 : Done adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:36 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : Added correlation to the product-TFG make_list.A2.B1 (d:0, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:36 : Chose (after CE propagation) product-TFG make_list.A2.B1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : make_list.A2.B1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:36 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:36 : make_list.A2.B1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:36 : make_list.A2.B1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:36 : make_list.A2.B1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:36 : make_list.A2.B1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : make_list.A2.B1 (d:0, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:36 : make_list.A2.B1 (d:0, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:36 : product-TFG make_list.A2.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:36 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:36 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:36 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:36 : product-TFG make_list.A2.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:36 : product-TFG make_list.A2.B1 created 1 possibilities in group make_list.A2.B1.C...</MSG>
<MSG>0:36 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:36 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:36 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:36 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:36 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:36 : Adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Updating dst fcall edge using src fcall edge for toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Adding node L3%6%bbentry_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Propagated 5 out of 8 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Added the 5 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:36 : make_list.A2.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : Done adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 4294967295            ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      6.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    13 preds:
      0.: eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      7.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      9.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      10.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      11.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      12.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : Added correlation to the product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:36 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 4 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 4294967295            ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      6.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    13 preds:
      0.: eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      7.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      9.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      10.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      11.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      12.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:36 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:37 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>0:37 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:37 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:39 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht13-prove_trivial4-prove9...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A2.B1.C1 (d:0, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : make_list.A2.B1.C1 (d:0, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:49 : Chosen product-TFG make_list.A2.B1.C1 will be explored later...</MSG>
<MSG>0:49 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 3 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>0:49 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A1.B1.C1 (d:0, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : make_list.A1.B1.C1 (d:0, s:0, sp: 8): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:49 : product-TFG make_list.A1.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:49 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:49 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:49 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:49 : product-TFG make_list.A1.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:49 : product-TFG make_list.A1.B1.C1 created 1 possibilities in group make_list.A1.B1.C1.D...</MSG>
<MSG>0:49 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:0, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:49 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>0:49 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>0:49 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:49 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:49 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>0:49 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:49 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Adding node L0%0%d_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Adding edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Propagated 10 out of 10 counter-examples across edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Added the 10 propagated CEs at PC L0%0%d_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : make_list.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:49 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 18-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce957      1.:z3.ce987      2.:z3v487.ce992      3.:z3v487.ce997
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce992      1.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    5 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : Added correlation to the product-TFG make_list.A1.B1.C1.D1 (d:1, s:0, sp: 8) and created a correlation entry...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:49 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:49 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht6-prove_trivial5-prove1...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:50 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>0:50 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:50 : make_list.A2.B1.C1 (d:0, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:50 : make_list.A2.B1.C1 (d:0, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:51 : product-TFG make_list.A2.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:51 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:51 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:51 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:51 : product-TFG make_list.A2.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:51 : product-TFG make_list.A2.B1.C1 created 1 possibilities in group make_list.A2.B1.C1.D...</MSG>
<MSG>0:51 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:0, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:51 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>0:51 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>0:51 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:51 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:51 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>0:51 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:51 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Adding node L3%6%bbentry_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Adding edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Propagated 10 out of 10 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Added the 10 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    15 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: false                 ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      6.: eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      7.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      9.: eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))  ==  true
      10.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      11.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      12.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      14.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:51 : Added correlation to the product-TFG make_list.A2.B1.C1.D1 (d:1, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:51 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:1, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 18-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce957      1.:z3.ce987      2.:z3v487.ce992      3.:z3v487.ce997
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce992      1.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    5 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:51 : make_list.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:51 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallStart ...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:51 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 4 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:56 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 18-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce957      1.:z3.ce987      2.:z3v487.ce992      3.:z3v487.ce997
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce992      1.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:56 : make_list.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>0:56 : make_list.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 18-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce957      1.:z3.ce987      2.:z3v487.ce992      3.:z3v487.ce997
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce992      1.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:56 : make_list.A1.B1.C1.D1 (d:1, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>0:56 : make_list.A1.B1.C1.D1 (d:1, s:0, sp: 13): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:57 : product-TFG make_list.A1.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:57 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:57 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:57 : product-TFG make_list.A1.B1.C1.D1: Found 1 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:57 : product-TFG make_list.A1.B1.C1.D1 created 1 possibilities in group make_list.A1.B1.C1.D1.E...</MSG>
<MSG>0:57 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:1, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:57 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>0:57 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>0:57 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:57 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:57 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Adding edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Propagated 2 out of 12 counter-examples across edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    3 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1339015180)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce467      1.:z3.ce420      2.:z3v487.ce1291
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce420      1.:z3v487.ce1291
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 5)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 18-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1073741824)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce957      1.:z3.ce987      2.:z3v487.ce992      3.:z3v487.ce997      4.:z3v487.ce1346
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1346
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce992      1.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1073741824)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192      2.:z3v487.ce1215
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce1215
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:57 : Added correlation to the product-TFG make_list.A1.B1.C1.D1.E1 (d:1, s:0, sp: 13) and created a correlation entry...</MSG>
<MSG>0:57 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:1, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 14 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 17-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    3 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1339015180)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce467      1.:z3.ce420      2.:z3v487.ce1291
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce420      1.:z3v487.ce1291
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce467      1.:z3.ce496      2.:z3v487.ce495      3.:z3.ce420      4.:z3v487.ce523
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce467      1.:z3.ce420
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce420

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 5)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 18-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1073741824)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce957      1.:z3.ce987      2.:z3v487.ce992      3.:z3v487.ce997      4.:z3v487.ce1346
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1346
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce987      1.:z3v487.ce992      2.:z3v487.ce997      3.:z3v487.ce1123
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce992      1.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 4)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1073741824)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce192      2.:z3v487.ce1215
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce1215
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192      3.:z3.ce236
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce214      2.:z3v487.ce192
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [3]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 15-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:57 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: marking unstable at E0%0%d_E0%0%d due to failing condition:
140627 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140639 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140661 : bvult(140627, 140639) : BOOL              : false
141067 : not(140661) : BOOL                        : true
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 1
140419 : bvuge(140276, 140273) : BOOL              : false
144070 : implies(141067, 140419) : BOOL            : false

ce =
=counter_example_begin z3v487.ce1365 6b5e951c37aff94db0d11dafc601273
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1023 : BV:32
4 : Lambda2906 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda2907 : BV:32
7 : unit : UNIT
8 : 109013621 { 0x67f6a75 +1.99543631e141 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
514666402
=counter_example_end


failcond-expr = implies(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)), bvuge(0, input.spec-%var-n-1)):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.spec-%var-n-1 : BV:32
7 : bvuge(5, 6) : BOOL
8 : implies(4, 7) : BOOL
</MSG>
<MSG>0:57 : make_list.A1.B1.C1.D1.E1: edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry) became unstable after invariant inference</MSG>
<MSG>0:57 : Chosen product-TFG make_list.A1.B1.C1.D1.E1 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry))
</MSG>
<MSG>0:57 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:1, s:0, sp: 14) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 8 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    15 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: false                 ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      6.: eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      7.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      9.: eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))  ==  true
      10.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      11.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      12.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      14.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:57 : make_list.A2.B1.C1.D1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:57 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:57 : make_list.A2.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:57 : make_list.A2.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>0:57 : make_list.A2.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht5-prove_trivial5-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht15-prove_trivial4-prove11...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:11 : make_list.A2.B1.C1.D1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:11 : make_list.A2.B1.C1.D1 (d:1, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1 (d:1, s:0, sp: 25): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:11 : product-TFG make_list.A2.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : product-TFG make_list.A2.B1.C1.D1: Found 2 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>1:11 : product-TFG make_list.A2.B1.C1.D1 created 2 possibilities in group make_list.A2.B1.C1.D1.E...</MSG>
<MSG>1:11 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:1, s:0, sp: 25) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:11 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>1:11 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>1:11 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:11 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:11 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:11 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:11 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1.E2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1.E2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1.E2: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:11 : make_list.A2.B1.C1.D1.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Propagated 2 out of 11 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Finished executing CG's add edge function...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4, bvextract(input.spec-%var-i-0.L3%6%bbentry, 2, 0)))  ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4, bvextract(input.spec-%var-i-0.L3%6%bbentry, 2, 0)))  ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:12 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E2 (d:3, s:0, sp: 25) and created a correlation entry...</MSG>
<MSG>1:12 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E1 (d:1, s:0, sp: 25) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:12 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>1:12 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>1:12 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:12 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:12 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:12 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:12 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Propagated 2 out of 11 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvadd(bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0), bvmul(4, bvextract(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 2, 0)))
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1816      4.:z3.ce1767
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1767
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvadd(bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0), bvmul(4, bvextract(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 2, 0)))
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1711      3.:z3.ce1718
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1718
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:12 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E1 (d:5, s:0, sp: 25) and created a correlation entry...</MSG>
<MSG>1:12 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:3, s:0, sp: 25) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 12 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 13 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4, bvextract(input.spec-%var-i-0.L3%6%bbentry, 2, 0)))  ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4, bvextract(input.spec-%var-i-0.L3%6%bbentry, 2, 0)))  ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:12 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4, bvextract(input.spec-%var-i-0.L3%6%bbentry, 2, 0)))  ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4, bvextract(input.spec-%var-i-0.L3%6%bbentry, 2, 0)))  ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 2, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial1-prove4...</MSG>
<MSG>1:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:24 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:25 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:26 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:26 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht7-prove_trivial4-prove3...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:32 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 9)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:34 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:44 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 12 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>1:48 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:51 : make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 31): checked newly added edge and inferred invariants...</MSG>
<MSG>1:51 : make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 31): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:51 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>1:51 : Checking equivalence proof...</MSG>
<MSG>1:54 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 11)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 24-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce762      2.:z3v487.ce1942      3.:z3.ce1943      4.:z3v487.ce2032
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce713      1.:z3v487.ce1942      2.:z3v487.ce2615      3.:z3v487.ce2691
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce713      1.:z3v487.ce793      2.:z3.ce792      3.:z3v487.ce762      4.:z3v487.ce822
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce713      1.:z3v487.ce762
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [12]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce713

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 13)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 29-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3.ce1611      4.:z3v487.ce1660      5.:z3v487.ce1880
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1083      1.:z3.ce1611      2.:z3.ce2156      3.:z3v487.ce2244      4.:z3v487.ce2309      5.:z3.ce2398      6.:z3.ce2487      7.:z3v487.ce2575
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1073      1.:z3v487.ce1078      2.:z3v487.ce1083      3.:z3v487.ce1379
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce1078      1.:z3v487.ce1083
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 25-->eq(input.spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))) ; 26-->eq(input.spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 27-->eq(input.spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 35-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1083

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 7)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce1552      3.:z3.ce1562      4.:z3v487.ce1835
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce7      1.:z3.ce1562      2.:z3.ce2111      3.:z3v487.ce2200      4.:z3v487.ce2264      5.:z3.ce2353      6.:z3.ce2442      7.:z3v487.ce2531      8.:z3.ce2638
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59      3.:z3.ce85
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7      1.:z3v487.ce33      2.:z3v487.ce59
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 16-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 22-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(1, 1, input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce7

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 24 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 25 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function make_list. 91.64s, query:smt.: 36.032s (num_starts 386; 0.0933s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 86.7359s (num_starts 500; 0.1735s/start)ftmap_run_pointsto_analysis.: 16.4376s (num_starts 336; 0.0489s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 9e-06s (num_starts 9; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.7e-05s (num_starts 12; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.8e-05s (num_starts 7; 0.0000s/start)
prune_dst_memslots.: 2e-05s (num_starts 7; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.6e-05s (num_starts 12; 0.0000s/start)
get_paths_with_matching_to_pc.: 3e-05s (num_starts 11; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 3.2e-05s (num_starts 45; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 3.5e-05s (num_starts 3; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 6.5e-05s (num_starts 1; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.0001s (num_starts 6; 0.0000s/start)
remove_complex_bv_exprs.: 0.000111s (num_starts 7; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000138s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000183s (num_starts 3; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00026s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.00026s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000261s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000263s (num_starts 1; 0.0003s/start)
prove_trivial.: 0.000267s (num_starts 281; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000268s (num_starts 12; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000276s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000302s (num_starts 1; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallEnd.inductive-invariants.: 0.000342s (num_starts 2; 0.0002s/start)
alias_val_t::constructor_with_map_arg.: 0.000353s (num_starts 404; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000364s (num_starts 106; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000395s (num_starts 97; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000475s (num_starts 69; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000476s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed;-trivial.: 0.000477s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000479s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.00048s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed.: 0.000483s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000489s (num_starts 1; 0.0005s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.00058s (num_starts 7; 0.0001s/start)
ce_perform_memory_fuzzing.: 0.000664s (num_starts 545; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000673s (num_starts 104; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000689s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000691s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned;-trivial.: 0.000691s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000696s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned.: 0.0007s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000706s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000715s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000716s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000718s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00072s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess.: 0.000723s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000724s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed;-trivial.: 0.000725s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000727s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.000729s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000732s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed.: 0.000735s (num_starts 1; 0.0007s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000738s (num_starts 500; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000742s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000759s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed;-trivial.: 0.000761s (num_starts 1; 0.0008s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000762s (num_starts 7; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000763s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000768s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed.: 0.000771s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000778s (num_starts 1; 0.0008s/start)
compute_bv_bool_eqclass.: 0.000817s (num_starts 7; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.000822s (num_starts 1; 0.0008s/start)
get_sprel_map_pair.: 0.000889s (num_starts 66; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.000913s (num_starts 500; 0.0000s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.000956s (num_starts 8; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001047s (num_starts 15; 0.0001s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.001147s (num_starts 2; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001187s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00119s (num_starts 1; 0.0012s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001265s (num_starts 8; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001341s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.001348s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.00135s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.00136s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess.: 0.001365s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001375s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.001401s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-trivial.: 0.001405s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.001409s (num_starts 2; 0.0007s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.001409s (num_starts 219; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00141s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001415s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00142s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001423s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001432s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001474s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001475s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001478s (num_starts 1; 0.0015s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001481s (num_starts 8; 0.0002s/start)
removeMostPromising.: 0.001489s (num_starts 38; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001491s (num_starts 1; 0.0015s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001514s (num_starts 8; 0.0002s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001558s (num_starts 1; 0.0016s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001569s (num_starts 1; 0.0016s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.00181s (num_starts 1; 0.0018s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.00185s (num_starts 7; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001901s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001901s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001908s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001909s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00191s (num_starts 2; 0.0010s/start)
proof_query_is_trivial_helper.: 0.00191s (num_starts 502; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001915s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001922s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.001931s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001936s (num_starts 2; 0.0010s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.001941s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001943s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.001945s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001958s (num_starts 2; 0.0010s/start)
tfg_suffixpath_get_expr_helper.: 0.001989s (num_starts 33; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002017s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.002169s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-trivial.: 0.002178s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.002182s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002189s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00219s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002193s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess.: 0.002201s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.002206s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed;-trivial.: 0.002214s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.002218s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.002234s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed.: 0.002244s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.002261s (num_starts 2; 0.0011s/start)
get_intersected_lr_status.: 0.002315s (num_starts 336; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.: 0.002409s (num_starts 1; 0.0024s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.: 0.002456s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.002465s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-trivial.: 0.002475s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.002479s (num_starts 2; 0.0012s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.002491s (num_starts 16; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.002496s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned.: 0.002508s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.002526s (num_starts 2; 0.0013s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002566s (num_starts 7; 0.0004s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.00257s (num_starts 1; 0.0026s/start)
pth_collect_preds_using_atom_func.: 0.002826s (num_starts 59; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.002864s (num_starts 9; 0.0003s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.002876s (num_starts 113; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.003153s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-trivial.: 0.003155s (num_starts 3; 0.0011s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.003166s (num_starts 599; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.003283s (num_starts 13; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003369s (num_starts 3; 0.0011s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.003403s (num_starts 29; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003422s (num_starts 3; 0.0011s/start)
tfg_edge_composition_get_assumes.: 0.003569s (num_starts 59; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.003614s (num_starts 3; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.003681s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess;-trivial.: 0.003685s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.003688s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.00369s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess.: 0.003693s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.003699s (num_starts 1; 0.0037s/start)
parse_yices_model.: 0.003723s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003729s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed;-trivial.: 0.003743s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003747s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003756s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003764s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed.: 0.003771s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-trivial.: 0.003774s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003781s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003794s (num_starts 4; 0.0009s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.003801s (num_starts 337; 0.0000s/start)
ldr_decomposition.: 0.003817s (num_starts 97; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.003825s (num_starts 11; 0.0003s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.004003s (num_starts 78; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004006s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-trivial.: 0.004019s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004024s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.004181s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.004183s (num_starts 1; 0.0042s/start)
parse_cvc4_model.: 0.004229s (num_starts 1; 0.0042s/start)
construct_linear_combination_exprs.: 0.004247s (num_starts 167; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.004265s (num_starts 460; 0.0000s/start)
expr_is_hidden_reg.: 0.004485s (num_starts 5061; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004553s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004555s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.004566s (num_starts 1; 0.0046s/start)
collect_assumes_around_edge.: 0.004571s (num_starts 12; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.004573s (num_starts 1; 0.0046s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004595s (num_starts 121; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.004598s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-trivial.: 0.004613s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.004622s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.004655s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear.: 0.004671s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.004702s (num_starts 3; 0.0016s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.004706s (num_starts 244; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.004857s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.004861s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.004872s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess.: 0.004877s (num_starts 2; 0.0024s/start)
proof_query_is_trivial.: 0.004917s (num_starts 500; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed;-trivial.: 0.004967s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.00497s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned;-trivial.: 0.004976s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.004982s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed.: 0.004989s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.004994s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.005008s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned.: 0.005016s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-trivial.: 0.005021s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.005025s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed;-trivial.: 0.005139s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.005141s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.005152s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed.: 0.005158s (num_starts 2; 0.0026s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.: 0.00527s (num_starts 1; 0.0053s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.005282s (num_starts 487; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.005291s (num_starts 7; 0.0008s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.005479s (num_starts 4; 0.0014s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.0055s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.005503s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.005507s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.005509s (num_starts 1; 0.0055s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.00584s (num_starts 599; 0.0000s/start)
expr_is_callee_save_const.: 0.005984s (num_starts 5093; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-trivial.: 0.0061s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.006102s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-trivial.: 0.006236s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate;-trivial.: 0.006239s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.006239s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-trivial.: 0.006242s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.006245s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate.: 0.006248s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.006256s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.006268s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.006289s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.006373s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.006403s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.006415s (num_starts 4; 0.0016s/start)
generate_aliasing_constraints_from_expr.: 0.006444s (num_starts 1530; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.006458s (num_starts 4; 0.0016s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006468s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess.: 0.006483s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.006526s (num_starts 4; 0.0016s/start)
identify_address_taken_local_variables.: 0.006629s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.006662s (num_starts 4; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.006683s (num_starts 4; 0.0017s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.006761s (num_starts 121; 0.0001s/start)
bv_const_ref_map2expr_map.: 0.00679s (num_starts 167; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006798s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-trivial.: 0.006799s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006802s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.006808s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned.: 0.006812s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.006824s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.006882s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed;-trivial.: 0.006886s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.006889s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.006895s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed.: 0.006899s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.006909s (num_starts 2; 0.0035s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.006996s (num_starts 409; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 0.007507s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.007617s (num_starts 4; 0.0019s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.00782s (num_starts 3; 0.0026s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.007872s (num_starts 519; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.008238s (num_starts 52; 0.0002s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.008263s (num_starts 9; 0.0009s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.008275s (num_starts 2; 0.0041s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.008404s (num_starts 52; 0.0002s/start)
set_result_and_counter_example.: 0.008771s (num_starts 386; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.008816s (num_starts 7; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-trivial.: 0.008841s (num_starts 7; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.008852s (num_starts 7; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.009132s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown;-trivial.: 0.009133s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.009138s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown.: 0.009145s (num_starts 1; 0.0091s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.009445s (num_starts 52; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009532s (num_starts 2; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009537s (num_starts 2; 0.0048s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.009556s (num_starts 519; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.00956s (num_starts 2; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.009572s (num_starts 2; 0.0048s/start)
graph_with_guessing_sync_preds.: 0.009575s (num_starts 500; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.009998s (num_starts 5; 0.0020s/start)
compute_sprel_relations.: 0.01017s (num_starts 336; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.010269s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-trivial.: 0.010376s (num_starts 4; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.010383s (num_starts 4; 0.0026s/start)
aliasing_constraints.convert_to_expr.: 0.010904s (num_starts 460; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.011214s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.011323s (num_starts 6; 0.0019s/start)
tfg::populate_loc_definedness.post_dfa.: 0.011372s (num_starts 337; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-trivial.: 0.011383s (num_starts 11; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.011775s (num_starts 6; 0.0020s/start)
propagate_sprels.: 0.011798s (num_starts 336; 0.0000s/start)
cg_src_dst_tfg_copy.: 0.011806s (num_starts 2; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed;-trivial.: 0.011815s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.011822s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.01185s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed.: 0.011865s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.011883s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-trivial.: 0.011965s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.011977s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.012011s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned.: 0.012025s (num_starts 4; 0.0030s/start)
get_next_potential_correlations.: 0.012068s (num_starts 9; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.012103s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-trivial.: 0.012115s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.012121s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.012139s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear.: 0.01215s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.012168s (num_starts 4; 0.0030s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.012351s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.012478s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.012487s (num_starts 4; 0.0031s/start)
determinize_value_expr_map.: 0.013059s (num_starts 11331; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-trivial.: 0.013443s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.013456s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.013608s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.013612s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.013643s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess.: 0.013659s (num_starts 4; 0.0034s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.013782s (num_starts 2142; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013973s (num_starts 5; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.014016s (num_starts 5; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear;-trivial.: 0.015781s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.015792s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.015829s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear.: 0.015844s (num_starts 5; 0.0032s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.015994s (num_starts 460; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.016305s (num_starts 10; 0.0016s/start)
graph_locs_add_all_specvars.: 0.016343s (num_starts 336; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.016357s (num_starts 10; 0.0016s/start)
predicate_canonicalized.: 0.016623s (num_starts 167; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.016686s (num_starts 10; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.016737s (num_starts 10; 0.0017s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.017212s (num_starts 2637; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.017226s (num_starts 10; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.017279s (num_starts 10; 0.0017s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.017418s (num_starts 4030; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.01742s (num_starts 2918; 0.0000s/start)
tfg::get_aliasing_constraints_for_edge.: 0.017508s (num_starts 351; 0.0000s/start)
gen_pred_from_coeff_row.simplify.: 0.01756s (num_starts 167; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-trivial.: 0.018409s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.018426s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018481s (num_starts 6; 0.0031s/start)
lr_status_meet.: 0.018621s (num_starts 3828; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.018665s (num_starts 6; 0.0031s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.018737s (num_starts 5; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.018917s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.018961s (num_starts 6; 0.0032s/start)
sp_version_relations_val_t::meet.: 0.018973s (num_starts 31755; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.018982s (num_starts 2918; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.019235s (num_starts 1138; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.019391s (num_starts 5; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.019397s (num_starts 8; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.019432s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.019474s (num_starts 6; 0.0032s/start)
def_analysis::xfer_and_meet.: 0.020392s (num_starts 2927; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.020499s (num_starts 336; 0.0001s/start)
get_sprel_map_pair_at_pc.: 0.020573s (num_starts 219; 0.0001s/start)
expr_represents_llvm_undef.: 0.02123s (num_starts 5106; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.021277s (num_starts 12; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.021323s (num_starts 3; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.021337s (num_starts 3; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.021438s (num_starts 10; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.021472s (num_starts 12; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.021697s (num_starts 12; 0.0018s/start)
graph_locs_add_all_local_vars.: 0.021855s (num_starts 336; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.022101s (num_starts 5; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.022145s (num_starts 12; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.022382s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-trivial.: 0.023735s (num_starts 8; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.023754s (num_starts 8; 0.0030s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-trivial.: 0.023877s (num_starts 19; 0.0013s/start)
ldr_decompose_and_linear_solve.: 0.024324s (num_starts 97; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.025271s (num_starts 336; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-trivial.: 0.025573s (num_starts 10; 0.0026s/start)
bv_linear_solve.: 0.025951s (num_starts 97; 0.0003s/start)
query:bv_solve.: 0.026521s (num_starts 97; 0.0003s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.028207s (num_starts 4844; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.028919s (num_starts 8; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.02916s (num_starts 8; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.029265s (num_starts 10; 0.0029s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.030321s (num_starts 7; 0.0043s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.030459s (num_starts 4; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.030463s (num_starts 4; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.030547s (num_starts 4; 0.0076s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.030573s (num_starts 4; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.030818s (num_starts 12; 0.0026s/start)
graph_to_stream.: 0.0311s (num_starts 4; 0.0078s/start)
bv_solve_returning_intermediate_structures.: 0.03214s (num_starts 97; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.032355s (num_starts 12; 0.0027s/start)
create_closure_matrix.: 0.033052s (num_starts 5559; 0.0000s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.034039s (num_starts 2927; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.034808s (num_starts 14; 0.0025s/start)
populate_locid2expr_map.: 0.035968s (num_starts 336; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.036077s (num_starts 12; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.036158s (num_starts 12; 0.0030s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.036874s (num_starts 12; 0.0031s/start)
bvsolve_cache_query.miss1.: 0.03703s (num_starts 97; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.037438s (num_starts 14; 0.0027s/start)
bvsolve_cache_query.: 0.03813s (num_starts 97; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039942s (num_starts 1; 0.0399s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039957s (num_starts 1; 0.0400s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039964s (num_starts 1; 0.0400s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.040328s (num_starts 20; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.040448s (num_starts 20; 0.0020s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.041298s (num_starts 647; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.041486s (num_starts 2142; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallStart.inductive-invariants.: 0.042412s (num_starts 6; 0.0071s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.043343s (num_starts 699; 0.0001s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.044557s (num_starts 11; 0.0041s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.045992s (num_starts 18; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.046074s (num_starts 2; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess.: 0.046083s (num_starts 2; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.047147s (num_starts 1; 0.0471s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.047154s (num_starts 1; 0.0472s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.047162s (num_starts 1; 0.0472s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond.: 0.047168s (num_starts 1; 0.0472s/start)
solve_for_bv_points.: 0.048908s (num_starts 97; 0.0005s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.049554s (num_starts 7; 0.0071s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.049581s (num_starts 16; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.049996s (num_starts 16; 0.0031s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.050235s (num_starts 3; 0.0167s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.050294s (num_starts 3; 0.0168s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.050372s (num_starts 1060; 0.0000s/start)
gen_pred_from_coeff_row.: 0.050544s (num_starts 167; 0.0003s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.051203s (num_starts 73; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.051203s (num_starts 7; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.051329s (num_starts 7; 0.0073s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.051462s (num_starts 73; 0.0007s/start)
compute_preds_for_bv_points.: 0.051517s (num_starts 38; 0.0014s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.051773s (num_starts 62; 0.0008s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.05247s (num_starts 5; 0.0105s/start)
pth_collect_simplified_preds_using_atom_func.: 0.052535s (num_starts 1001; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallStart.inductive-invariants.: 0.052658s (num_starts 6; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053451s (num_starts 1; 0.0535s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053456s (num_starts 1; 0.0535s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.054602s (num_starts 25; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.05597s (num_starts 25; 0.0022s/start)
check_node_stability_after_CE_addition.: 0.056152s (num_starts 158; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.056496s (num_starts 25; 0.0023s/start)
get_unrolled_paths_from.: 0.056533s (num_starts 55; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057024s (num_starts 1; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057038s (num_starts 1; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057044s (num_starts 1; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.057055s (num_starts 1; 0.0571s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;-dst-edgecond-implies-src-edgecond.: 0.057061s (num_starts 1; 0.0571s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.05707s (num_starts 1; 0.0571s/start)
check_wfconds_on_edge.L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd.: 0.05791s (num_starts 1; 0.0579s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.057996s (num_starts 67; 0.0009s/start)
populate_simplified_to_state.: 0.058375s (num_starts 337; 0.0002s/start)
tfg::collect_assumes_around_edge.: 0.058663s (num_starts 5845; 0.0000s/start)
counter_example_satisfies_preds.: 0.058856s (num_starts 936; 0.0001s/start)
simplify_bv_add_atomic.: 0.058899s (num_starts 2700; 0.0000s/start)
graph_locs_add_all_indvars.: 0.058911s (num_starts 336; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.058977s (num_starts 2; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.058984s (num_starts 2; 0.0295s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.060355s (num_starts 97; 0.0006s/start)
collect_aliasing_constraints_around_path_helper.: 0.060703s (num_starts 391; 0.0002s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart.: 0.060713s (num_starts 2; 0.0304s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.060876s (num_starts 5; 0.0122s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.061056s (num_starts 22; 0.0028s/start)
collect_aliasing_constraints_around_path.: 0.063275s (num_starts 245; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.072791s (num_starts 9; 0.0081s/start)
create_sp_version_relations_lattice_at_pc.: 0.080253s (num_starts 5559; 0.0000s/start)
collect_assumes_around_path_helper.: 0.082324s (num_starts 599; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.083483s (num_starts 336; 0.0002s/start)
graph_with_paths::collect_assumes_around_path.: 0.084441s (num_starts 599; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.087924s (num_starts 460; 0.0002s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.098135s (num_starts 3879; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.100891s (num_starts 1; 0.1009s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1009s (num_starts 1; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.100911s (num_starts 1; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.100919s (num_starts 1; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.100928s (num_starts 1; 0.1009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.100942s (num_starts 1; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities..: 0.104115s (num_starts 4; 0.0260s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.104129s (num_starts 4; 0.0260s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.105302s (num_starts 744; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.107389s (num_starts 1; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.107394s (num_starts 1; 0.1074s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.109694s (num_starts 460; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.111052s (num_starts 2; 0.0555s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.111071s (num_starts 2; 0.0555s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.111909s (num_starts 2; 0.0560s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-trivial.: 0.112456s (num_starts 3; 0.0375s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.114245s (num_starts 1; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.114249s (num_starts 1; 0.1142s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.114278s (num_starts 2; 0.0571s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.116014s (num_starts 1; 0.1160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.116018s (num_starts 1; 0.1160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.116978s (num_starts 2; 0.0585s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.116983s (num_starts 2; 0.0585s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.11822s (num_starts 2142; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.118715s (num_starts 573; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.121996s (num_starts 2; 0.0610s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.122001s (num_starts 2; 0.0610s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.122775s (num_starts 2; 0.0614s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.122791s (num_starts 2; 0.0614s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-trivial.: 0.123466s (num_starts 3; 0.0412s/start)
tfg::populate_loc_definedness.before_solve.: 0.124273s (num_starts 337; 0.0004s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.128355s (num_starts 1321; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-trivial.: 0.129893s (num_starts 9; 0.0144s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.131088s (num_starts 3962; 0.0000s/start)
counter_example_falsifies_preds.: 0.138236s (num_starts 287; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-trivial.: 0.139397s (num_starts 11; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.139418s (num_starts 11; 0.0127s/start)
expr_linear_relation_holds::visit.var.: 0.139483s (num_starts 5138; 0.0000s/start)
lhs_set_sort.: 0.142998s (num_starts 219; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144346s (num_starts 1; 0.1443s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144354s (num_starts 1; 0.1444s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.144366s (num_starts 1; 0.1444s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond.: 0.14437s (num_starts 1; 0.1444s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.149186s (num_starts 8595; 0.0000s/start)
compute_expr_eqclasses_at_pc.: 0.150527s (num_starts 7; 0.0215s/start)
expr_substitute_using_available_exprs_submap.: 0.150872s (num_starts 1934; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.151977s (num_starts 337; 0.0005s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.152855s (num_starts 10; 0.0153s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.153819s (num_starts 23; 0.0067s/start)
cg_add_node.: 0.155081s (num_starts 10; 0.0155s/start)
compute_ssa_vars_renaming_map.: 0.155282s (num_starts 336; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.155908s (num_starts 1; 0.1559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.155912s (num_starts 1; 0.1559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.155922s (num_starts 1; 0.1559s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;-dst-edgecond-implies-src-edgecond.: 0.155927s (num_starts 1; 0.1559s/start)
query:convert_from_z3.: 0.156994s (num_starts 4256; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.157356s (num_starts 14; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158074s (num_starts 1; 0.1581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158082s (num_starts 1; 0.1581s/start)
tfg::populate_loc_definedness.: 0.163114s (num_starts 337; 0.0005s/start)
populate_transitive_closure.: 0.170489s (num_starts 1042; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.171941s (num_starts 24; 0.0072s/start)
populate_simplified_assets.: 0.17448s (num_starts 674; 0.0003s/start)
create_new_corr_graph_edge.new_node.: 0.175858s (num_starts 9; 0.0195s/start)
create_new_corr_graph_edge.: 0.176537s (num_starts 12; 0.0147s/start)
graph_visit_exprs_and_keys.: 0.17725s (num_starts 336; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.178107s (num_starts 23; 0.0077s/start)
query:convert_to_z3.: 0.180708s (num_starts 4256; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-trivial.: 0.185456s (num_starts 16; 0.0116s/start)
populate_locs_potentially_modified_on_edge.: 0.187251s (num_starts 337; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187828s (num_starts 1; 0.1878s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187831s (num_starts 1; 0.1878s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187833s (num_starts 1; 0.1878s/start)
graph_visit_exprs.: 0.187973s (num_starts 671; 0.0003s/start)
counter_example_evaluate_preds.: 0.194074s (num_starts 1223; 0.0002s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195742s (num_starts 1; 0.1957s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195747s (num_starts 1; 0.1957s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195758s (num_starts 1; 0.1958s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195761s (num_starts 1; 0.1958s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.19577s (num_starts 1; 0.1958s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown.: 0.195779s (num_starts 1; 0.1958s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.195793s (num_starts 1; 0.1958s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.195803s (num_starts 1; 0.1958s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-trivial.: 0.196932s (num_starts 93; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned;-trivial.: 0.211699s (num_starts 2; 0.1058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-trivial.: 0.211706s (num_starts 2; 0.1059s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.215818s (num_starts 18; 0.0120s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.216316s (num_starts 31; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220766s (num_starts 2; 0.1104s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.226129s (num_starts 3; 0.0754s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.226139s (num_starts 3; 0.0754s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-trivial.: 0.228086s (num_starts 4; 0.0570s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.23586s (num_starts 4030; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.238317s (num_starts 3; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.23834s (num_starts 3; 0.0794s/start)
evaluate_function_call.: 0.241274s (num_starts 46; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-trivial.: 0.244361s (num_starts 14; 0.0175s/start)
compute_vars_reaching_definitions.: 0.245424s (num_starts 336; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-trivial.: 0.248415s (num_starts 36; 0.0069s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.260681s (num_starts 573; 0.0005s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.267628s (num_starts 4030; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.272355s (num_starts 2; 0.1362s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.272364s (num_starts 2; 0.1362s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.27395s (num_starts 1; 0.2740s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.293281s (num_starts 43; 0.0068s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.294664s (num_starts 149; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-trivial.: 0.295219s (num_starts 26; 0.0114s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.296871s (num_starts 24; 0.0124s/start)
avail_exprs_create_submap.: 0.308211s (num_starts 12090; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.311116s (num_starts 35; 0.0089s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 0.320942s (num_starts 3; 0.1070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.320952s (num_starts 3; 0.1070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.320969s (num_starts 3; 0.1070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-all-proof-path-optimizations.: 0.320971s (num_starts 3; 0.1070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.32098s (num_starts 3; 0.1070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown.: 0.321002s (num_starts 3; 0.1070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.321019s (num_starts 3; 0.1070s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.32476s (num_starts 4030; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.331113s (num_starts 40; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.331883s (num_starts 4; 0.0830s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.332302s (num_starts 1; 0.3323s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.33231s (num_starts 1; 0.3323s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.332314s (num_starts 1; 0.3323s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.336109s (num_starts 5; 0.0672s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed.: 0.336124s (num_starts 5; 0.0672s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.336156s (num_starts 5; 0.0672s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340646s (num_starts 1; 0.3406s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340652s (num_starts 1; 0.3407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340656s (num_starts 1; 0.3407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.340661s (num_starts 1; 0.3407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate.: 0.340665s (num_starts 1; 0.3407s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.340673s (num_starts 1; 0.3407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.344964s (num_starts 6; 0.0575s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.350192s (num_starts 4030; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.352396s (num_starts 1; 0.3524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.352397s (num_starts 1; 0.3524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.352404s (num_starts 1; 0.3524s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.352408s (num_starts 1; 0.3524s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 0.358144s (num_starts 15; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.359405s (num_starts 1; 0.3594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.359408s (num_starts 1; 0.3594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.359415s (num_starts 1; 0.3594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false.: 0.35942s (num_starts 1; 0.3594s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.363065s (num_starts 337; 0.0011s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36317s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363171s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363175s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363176s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.36318s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false.: 0.363183s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.363187s (num_starts 1; 0.3632s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.363471s (num_starts 2; 0.1817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.369689s (num_starts 1; 0.3697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.369692s (num_starts 1; 0.3697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.3697s (num_starts 1; 0.3697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false.: 0.369704s (num_starts 1; 0.3697s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372937s (num_starts 1; 0.3729s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372943s (num_starts 1; 0.3729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372945s (num_starts 1; 0.3729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.372954s (num_starts 1; 0.3730s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false.: 0.372957s (num_starts 1; 0.3730s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.372965s (num_starts 1; 0.3730s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375323s (num_starts 1; 0.3753s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.37533s (num_starts 1; 0.3753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375334s (num_starts 1; 0.3753s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376629s (num_starts 3; 0.1255s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.379373s (num_starts 5; 0.0759s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned.: 0.379389s (num_starts 5; 0.0759s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.379421s (num_starts 5; 0.0759s/start)
graph_identify_back_edges.: 0.385528s (num_starts 3050; 0.0001s/start)
graph_ec_apply_trans_funs_helper.0.: 0.385693s (num_starts 1326; 0.0003s/start)
graph_ec_apply_trans_funs_helper.: 0.391641s (num_starts 1334; 0.0003s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.395352s (num_starts 1334; 0.0003s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.397593s (num_starts 1318; 0.0003s/start)
computeWP_for_pred_across_ec.: 0.401737s (num_starts 1318; 0.0003s/start)
graph_identify_natural_loops.: 0.413042s (num_starts 3050; 0.0001s/start)
find_dominators.: 0.42337s (num_starts 3722; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.429948s (num_starts 2; 0.2150s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon).: 0.430044s (num_starts 2; 0.2150s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.431467s (num_starts 12; 0.0360s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.431577s (num_starts 12; 0.0360s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.438375s (num_starts 3; 0.1461s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.438429s (num_starts 3; 0.1461s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-trivial.: 0.439731s (num_starts 6; 0.0733s/start)
tfg_relax_pointsto_vals_on_edge.: 0.4439s (num_starts 68; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447686s (num_starts 3; 0.1492s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447709s (num_starts 3; 0.1492s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447718s (num_starts 3; 0.1492s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452962s (num_starts 3; 0.1510s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.458593s (num_starts 4; 0.1146s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.462433s (num_starts 20; 0.0231s/start)
compute_z3_expr.: 0.464588s (num_starts 4642; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.464701s (num_starts 8; 0.0581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.466175s (num_starts 11; 0.0424s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear.: 0.466206s (num_starts 11; 0.0424s/start)
populate_branch_affecting_locs.: 0.471268s (num_starts 337; 0.0014s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.472466s (num_starts 573; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-trivial.: 0.472474s (num_starts 7; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.472492s (num_starts 7; 0.0675s/start)
edge_composition_apply_trans_funs_on_pred.: 0.477267s (num_starts 500; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.478794s (num_starts 15; 0.0319s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.487077s (num_starts 4; 0.1218s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.487875s (num_starts 5; 0.0976s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.492094s (num_starts 5; 0.0984s/start)
propagate_nodece_across_edge.: 0.495243s (num_starts 68; 0.0073s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.496166s (num_starts 3; 0.1654s/start)
query:simplify-z3.: 0.497036s (num_starts 8569; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.504896s (num_starts 1; 0.5049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.504899s (num_starts 1; 0.5049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.50491s (num_starts 1; 0.5049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false.: 0.504914s (num_starts 1; 0.5049s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.530963s (num_starts 7; 0.0759s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.532506s (num_starts 1; 0.5325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.532512s (num_starts 1; 0.5325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.532516s (num_starts 1; 0.5325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.532528s (num_starts 1; 0.5325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false.: 0.532532s (num_starts 1; 0.5325s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.53254s (num_starts 1; 0.5325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.533284s (num_starts 1; 0.5333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.533287s (num_starts 1; 0.5333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.533299s (num_starts 1; 0.5333s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false.: 0.533303s (num_starts 1; 0.5333s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.538631s (num_starts 3; 0.1795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.538695s (num_starts 3; 0.1796s/start)
put_smtlib_string_in_file.: 0.558578s (num_starts 772; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.560507s (num_starts 5; 0.1121s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.560583s (num_starts 5; 0.1121s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.560845s (num_starts 4; 0.1402s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.560897s (num_starts 4; 0.1402s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.560927s (num_starts 4; 0.1402s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.583254s (num_starts 5; 0.1167s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.5894s (num_starts 9; 0.0655s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.592322s (num_starts 1; 0.5923s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.592331s (num_starts 1; 0.5923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.592337s (num_starts 1; 0.5923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.592353s (num_starts 1; 0.5924s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate.: 0.592358s (num_starts 1; 0.5924s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.592366s (num_starts 1; 0.5924s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.600815s (num_starts 5; 0.1202s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.601727s (num_starts 2; 0.3009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.621664s (num_starts 5; 0.1243s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.625785s (num_starts 2; 0.3129s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.625809s (num_starts 2; 0.3129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.625821s (num_starts 2; 0.3129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 0.634734s (num_starts 9; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear.: 0.634761s (num_starts 9; 0.0705s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 0.63481s (num_starts 9; 0.0705s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.: 0.64375s (num_starts 2; 0.3219s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.645247s (num_starts 38; 0.0170s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.654774s (num_starts 4; 0.1637s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.654829s (num_starts 4; 0.1637s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.656017s (num_starts 1; 0.6560s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.656027s (num_starts 1; 0.6560s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.656033s (num_starts 1; 0.6560s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.656053s (num_starts 1; 0.6561s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate.: 0.656059s (num_starts 1; 0.6561s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.656069s (num_starts 1; 0.6561s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-trivial.: 0.656175s (num_starts 60; 0.0109s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.658241s (num_starts 1; 0.6582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.658244s (num_starts 1; 0.6582s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.658245s (num_starts 1; 0.6582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.659674s (num_starts 3; 0.2199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned.: 0.659688s (num_starts 3; 0.2199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.65971s (num_starts 3; 0.2199s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.661648s (num_starts 6; 0.1103s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.665169s (num_starts 219; 0.0030s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.679427s (num_starts 1; 0.6794s/start)
tfg_preprocess.dst.ind.make_list.: 0.686802s (num_starts 334; 0.0021s/start)
tfg::tfg_preprocess.: 0.687955s (num_starts 334; 0.0021s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart.: 0.713154s (num_starts 6; 0.1189s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.729083s (num_starts 2; 0.3645s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.72914s (num_starts 2; 0.3646s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.732685s (num_starts 1; 0.7327s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.732693s (num_starts 1; 0.7327s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.732697s (num_starts 1; 0.7327s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.733656s (num_starts 7; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.737746s (num_starts 3; 0.2459s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned.: 0.737755s (num_starts 3; 0.2459s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.742302s (num_starts 1; 0.7423s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.742308s (num_starts 1; 0.7423s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.742312s (num_starts 1; 0.7423s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.742325s (num_starts 1; 0.7423s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate.: 0.742329s (num_starts 1; 0.7423s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.742338s (num_starts 1; 0.7423s/start)
guarded_predicate_set_and.: 0.747174s (num_starts 460; 0.0016s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.749615s (num_starts 5; 0.1499s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.754213s (num_starts 13; 0.0580s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.760613s (num_starts 7; 0.1087s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.765956s (num_starts 4030; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.767053s (num_starts 56; 0.0137s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.787356s (num_starts 10; 0.0787s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.790646s (num_starts 1; 0.7906s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.790655s (num_starts 1; 0.7907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.790659s (num_starts 1; 0.7907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.790676s (num_starts 1; 0.7907s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate.: 0.790682s (num_starts 1; 0.7907s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.790689s (num_starts 1; 0.7907s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.794091s (num_starts 1; 0.7941s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.794097s (num_starts 1; 0.7941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.794099s (num_starts 1; 0.7941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.794113s (num_starts 1; 0.7941s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false.: 0.794119s (num_starts 1; 0.7941s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.794128s (num_starts 1; 0.7941s/start)
collect_inductive_preds_around_path.: 0.797673s (num_starts 500; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.799363s (num_starts 7; 0.1142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.799475s (num_starts 7; 0.1142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.811909s (num_starts 1; 0.8119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.811912s (num_starts 1; 0.8119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.811914s (num_starts 1; 0.8119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.814129s (num_starts 3; 0.2714s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed.: 0.814145s (num_starts 3; 0.2714s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.814176s (num_starts 3; 0.2714s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.819613s (num_starts 219; 0.0037s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.855083s (num_starts 98; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess.: 0.856574s (num_starts 30; 0.0286s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.860667s (num_starts 7; 0.1230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.86081s (num_starts 7; 0.1230s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.877359s (num_starts 5; 0.1755s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.877426s (num_starts 5; 0.1755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.877462s (num_starts 5; 0.1755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.877533s (num_starts 5; 0.1755s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned.: 0.877554s (num_starts 5; 0.1755s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.877594s (num_starts 5; 0.1755s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896271s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896274s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896278s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896281s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.896291s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.896295s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.896304s (num_starts 1; 0.8963s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon).: 0.896308s (num_starts 1; 0.8963s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.900799s (num_starts 6; 0.1501s/start)
do_ssa_transformation.: 0.900857s (num_starts 336; 0.0027s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.909111s (num_starts 4; 0.2273s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.911712s (num_starts 2; 0.4559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.911726s (num_starts 2; 0.4559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.921816s (num_starts 12; 0.0768s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.922314s (num_starts 3; 0.3074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.922368s (num_starts 3; 0.3075s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.923946s (num_starts 7; 0.1320s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.925143s (num_starts 1; 0.9251s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.925148s (num_starts 1; 0.9251s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.925152s (num_starts 1; 0.9252s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.930058s (num_starts 7; 0.1329s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 0.932903s (num_starts 45; 0.0207s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.934047s (num_starts 16; 0.0584s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.935578s (num_starts 5; 0.1871s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed.: 0.935595s (num_starts 5; 0.1871s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.942038s (num_starts 11; 0.0856s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.946963s (num_starts 5; 0.1894s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.946997s (num_starts 5; 0.1894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.947049s (num_starts 5; 0.1894s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.947083s (num_starts 5; 0.1894s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.954696s (num_starts 11; 0.0868s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallEnd.inductive-invariants.: 0.956218s (num_starts 15; 0.0637s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.966303s (num_starts 8; 0.1208s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.966367s (num_starts 8; 0.1208s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-trivial.: 1.0116s (num_starts 114; 0.0089s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon).: 1.02188s (num_starts 7; 0.1460s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03817s (num_starts 2; 0.5191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.03823s (num_starts 2; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 1.05127s (num_starts 13; 0.0809s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear.: 1.0513s (num_starts 13; 0.0809s/start)
compute_regions.: 1.06288s (num_starts 3050; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 1.06704s (num_starts 26; 0.0410s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 1.06999s (num_starts 7; 0.1529s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 1.07011s (num_starts 7; 0.1529s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08022s (num_starts 3; 0.3601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08024s (num_starts 3; 0.3601s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess.: 1.10478s (num_starts 19; 0.0581s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 1.12587s (num_starts 28; 0.0402s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 1.15052s (num_starts 10; 0.1151s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.18202s (num_starts 5; 0.2364s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 1.18776s (num_starts 6; 0.1980s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.1946s (num_starts 12; 0.0996s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned.: 1.21105s (num_starts 22; 0.0550s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.23245s (num_starts 4; 0.3081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2808s (num_starts 10; 0.1281s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.29202s (num_starts 5; 0.2584s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned.: 1.29203s (num_starts 5; 0.2584s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31425s (num_starts 2; 0.6571s/start)
corr_graph::add_edge().: 1.3292s (num_starts 12; 0.1108s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 1.33043s (num_starts 2429; 0.0005s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 1.33565s (num_starts 2429; 0.0005s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 1.34321s (num_starts 1035; 0.0013s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.34636s (num_starts 77; 0.0175s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.34845s (num_starts 423; 0.0032s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon).: 1.35625s (num_starts 7; 0.1938s/start)
compute_lr_status_for_expr.: 1.42266s (num_starts 4403; 0.0003s/start)
apply_mask_and_overlay_array_constant.: 1.43004s (num_starts 1035; 0.0014s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46098s (num_starts 6; 0.2435s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46102s (num_starts 6; 0.2435s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 1.50949s (num_starts 12; 0.1258s/start)
corr_graph_add_correlation.: 1.5099s (num_starts 12; 0.1258s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.52333s (num_starts 2; 0.7617s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 1.55462s (num_starts 12; 0.1296s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed.: 1.59119s (num_starts 15; 0.1061s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 1.59168s (num_starts 2; 0.7958s/start)
compute_new_lr_status_on_locs.: 1.60944s (num_starts 4030; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 1.61541s (num_starts 29; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond.: 1.62613s (num_starts 16; 0.1016s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.72368s (num_starts 8; 0.2155s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 1.80441s (num_starts 269; 0.0067s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 1.81958s (num_starts 4; 0.4549s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 1.8196s (num_starts 4; 0.4549s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-all-proof-path-optimizations.: 1.81963s (num_starts 4; 0.4549s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 1.81964s (num_starts 4; 0.4549s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.04637s (num_starts 11; 0.1860s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.06293s (num_starts 10; 0.2063s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 2.08227s (num_starts 6; 0.3470s/start)
counter_example_translate_on_edge_composition_helper.: 2.13076s (num_starts 1385; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16978s (num_starts 5; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16983s (num_starts 5; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16986s (num_starts 5; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 2.16995s (num_starts 5; 0.4340s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 2.17003s (num_starts 5; 0.4340s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 2.18455s (num_starts 2; 1.0923s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed.: 2.19568s (num_starts 15; 0.1464s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 2.20607s (num_starts 12; 0.1838s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.24903s (num_starts 17; 0.1323s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 2.28976s (num_starts 13; 0.1761s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 2.30623s (num_starts 2; 1.1531s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 2.34376s (num_starts 16; 0.1465s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 2.48s (num_starts 12; 0.2067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown.: 2.48004s (num_starts 12; 0.2067s/start)
check_equivalence_proof.: 2.48646s (num_starts 1; 2.4865s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 2.48685s (num_starts 17; 0.1463s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 2.59712s (num_starts 14; 0.1855s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 2.59736s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 2.59737s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 2.59738s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 2.59738s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 2.59741s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown.: 2.59743s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 2.59746s (num_starts 3; 0.8658s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.71454s (num_starts 25; 0.1086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.86717s (num_starts 9; 0.3186s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.90731s (num_starts 9; 0.3230s/start)
check_wfconds_on_edge.: 2.99653s (num_starts 29; 0.1033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 3.0394s (num_starts 33; 0.0921s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.12195s (num_starts 5; 0.6244s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 3.12837s (num_starts 6; 0.5214s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.17481s (num_starts 3; 1.0583s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.: 3.20324s (num_starts 2; 1.6016s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 3.32871s (num_starts 29415; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.42407s (num_starts 17; 0.2014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.42443s (num_starts 17; 0.2014s/start)
decide_hoare_triple_helper;-trivial.: 3.50877s (num_starts 328; 0.0107s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 3.51425s (num_starts 4; 0.8786s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 3.51427s (num_starts 4; 0.8786s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 3.5143s (num_starts 4; 0.8786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 3.51431s (num_starts 4; 0.8786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 3.51435s (num_starts 4; 0.8786s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown.: 3.51437s (num_starts 4; 0.8786s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 3.51439s (num_starts 4; 0.8786s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.63514s (num_starts 6; 0.6059s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 3.67287s (num_starts 14; 0.2623s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.77865s (num_starts 11; 0.3435s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 3.8564s (num_starts 29; 0.1330s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 3.85682s (num_starts 29; 0.1330s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 4.09114s (num_starts 46; 0.0889s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 4.13706s (num_starts 7; 0.5910s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 4.18983s (num_starts 50; 0.0838s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.: 4.20753s (num_starts 1; 4.2075s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.23915s (num_starts 8; 0.5299s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 4.29446s (num_starts 33; 0.1301s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.31475s (num_starts 18; 0.2397s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 4.70716s (num_starts 2; 2.3536s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 4.70717s (num_starts 2; 2.3536s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 4.7072s (num_starts 2; 2.3536s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.72625s (num_starts 9; 0.5251s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 4.72647s (num_starts 9; 0.5252s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 4.77823s (num_starts 38; 0.1257s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd).: 4.84049s (num_starts 17; 0.2847s/start)
decide_hoare_triple.: 4.84267s (num_starts 13; 0.3725s/start)
dst_edge_composition_proves_false.: 4.89378s (num_starts 9; 0.5438s/start)
get_next_dst_edge_composition_to_correlate.: 4.93389s (num_starts 10; 0.4934s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 5.05664s (num_starts 73; 0.0693s/start)
check_preds_on_edge_compositions.: 5.10594s (num_starts 34; 0.1502s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart).: 5.52982s (num_starts 31; 0.1784s/start)
liveness_analysis_conservative::xfer_and_meet.: 5.54785s (num_starts 2561; 0.0022s/start)
populate_loc_liveness.: 5.7054s (num_starts 337; 0.0169s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.2229s (num_starts 7; 0.8890s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.223s (num_starts 7; 0.8890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.22308s (num_starts 7; 0.8890s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.29141s (num_starts 26; 0.2420s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.60652s (num_starts 9; 0.7341s/start)
tfg_postprocess_after_pointsto_analysis.: 6.77768s (num_starts 336; 0.0202s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear.: 6.94909s (num_starts 86; 0.0808s/start)
ce_reconcile_sorts_and_values.: 7.11335s (num_starts 492; 0.0145s/start)
parse_z3_model.: 7.7603s (num_starts 490; 0.0158s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.81385s (num_starts 10; 0.7814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.81398s (num_starts 10; 0.7814s/start)
read_counter_examples_from_channel.: 7.83864s (num_starts 250; 0.0314s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 7.91563s (num_starts 3962; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 7.92154s (num_starts 11; 0.7201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 7.9217s (num_starts 11; 0.7202s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.27637s (num_starts 33; 0.2508s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 8.63938s (num_starts 8; 1.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 8.63941s (num_starts 8; 1.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 8.66333s (num_starts 16; 0.5415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown.: 8.66337s (num_starts 16; 0.5415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.67469s (num_starts 17; 0.5103s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned.: 8.86077s (num_starts 33; 0.2685s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.04991s (num_starts 18; 0.5028s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 9.09159s (num_starts 3962; 0.0023s/start)
decide_hoare_triple_helper;per-query-type;linear.: 9.13449s (num_starts 131; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-all-proof-path-optimizations.: 9.19795s (num_starts 6; 1.5330s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 9.26743s (num_starts 49; 0.1891s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.27524s (num_starts 34; 0.2728s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 9.48845s (num_starts 12; 0.7907s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 9.72157s (num_starts 31557; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 9.76514s (num_starts 29415; 0.0003s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 10.2887s (num_starts 6; 1.7148s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 10.335s (num_starts 29415; 0.0004s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 10.9455s (num_starts 10; 1.0945s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 10.9455s (num_starts 10; 1.0946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 10.9818s (num_starts 16; 0.6864s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 10.9821s (num_starts 16; 0.6864s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 11.0074s (num_starts 32; 0.3440s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 11.4124s (num_starts 10; 1.1412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 11.4124s (num_starts 10; 1.1412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 11.426s (num_starts 14; 0.8161s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown.: 11.4261s (num_starts 14; 0.8161s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 11.7673s (num_starts 7; 1.6810s/start)
expr_do_simplify_using_lhs_set_and_precond.: 12.4485s (num_starts 5995; 0.0021s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 13.5968s (num_starts 12; 1.1331s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 13.5968s (num_starts 12; 1.1331s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 13.6323s (num_starts 26; 0.5243s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 14.4559s (num_starts 5; 2.8912s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd).: 15.32s (num_starts 107; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown.: 15.6702s (num_starts 49; 0.3198s/start)
ftmap_run_pointsto_analysis.: 16.4376s (num_starts 336; 0.0489s/start)
tfg_run_pointsto_analysis.: 16.4731s (num_starts 336; 0.0490s/start)
tfg_populate_structs_after_ssa_construction.: 17.1723s (num_starts 336; 0.0511s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 18.3721s (num_starts 336; 0.0547s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart).: 21.2382s (num_starts 158; 0.1344s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 21.6767s (num_starts 51; 0.4250s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry).: 27.4555s (num_starts 79; 0.3475s/start)
query:smt.: 36.032s (num_starts 386; 0.0933s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-all-proof-path-optimizations.: 37.5018s (num_starts 38; 0.9869s/start)
decide_hoare_triple_helper;-all-proof-path-optimizations.: 37.5038s (num_starts 38; 0.9869s/start)
spawn_smt_query.: 43.8765s (num_starts 386; 0.1137s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 44.8778s (num_starts 103; 0.4357s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 45.7002s (num_starts 134; 0.3410s/start)
solver_provable.: 60.3584s (num_starts 460; 0.1312s/start)
solver_satisfiable-cache-miss.: 60.4058s (num_starts 386; 0.1565s/start)
solver_satisfiable.: 60.4106s (num_starts 461; 0.1310s/start)
expr_is_provable.: 60.5683s (num_starts 460; 0.1317s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 60.5801s (num_starts 460; 0.1317s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 60.6098s (num_starts 460; 0.1318s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 60.6325s (num_starts 460; 0.1318s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 61.4173s (num_starts 460; 0.1335s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 61.4662s (num_starts 460; 0.1336s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 61.4755s (num_starts 460; 0.1336s/start)
update_invariant_state_for_edges.: 81.5429s (num_starts 13; 6.2725s/start)
cg_check_new_cg_ec.: 81.5845s (num_starts 13; 6.2757s/start)
correl_entry_apply.: 81.5851s (num_starts 13; 6.2758s/start)
is_expr_equal_using_lhs_set_and_precond.: 83.5966s (num_starts 219; 0.3817s/start)
prove.: 83.5995s (num_starts 219; 0.3817s/start)
prove_spawn_and_join_helper.: 83.6009s (num_starts 219; 0.3817s/start)
prove_spawn_and_join.: 84.9864s (num_starts 219; 0.3881s/start)
prove_wrapper.proof_query_not_trivial.: 85.026s (num_starts 219; 0.3882s/start)
prove_wrapper.: 85.2451s (num_starts 500; 0.1705s/start)
decide_hoare_triple_check_ub.: 85.7574s (num_starts 500; 0.1715s/start)
expandProductCFG.: 86.5322s (num_starts 18; 4.8073s/start)
decide_hoare_triple_helper.: 86.7359s (num_starts 500; 0.1735s/start)
decide_hoare_triple_with_alias_cons.: 88.088s (num_starts 500; 0.1762s/start)
bestFirstSearch.: 88.2073s (num_starts 1; 88.2073s/start)
Time taken for equivalence check.: 90.7062s (num_starts 1; 90.7062s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of assume sat failures for undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d.: 8
# of assume sat failures for undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry.: 35
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 2
# of paths enumerated.: 24
# of paths expanded.: 13
# of queries to linear solver.: 97
# of smt-solver-queries.: 386
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_ecs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_to_pcs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_ecs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_to_pcs.: 1
num-backtrackings.: 6
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 19
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 13
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 13
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 18
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 13
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 13
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 17
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 14
smt-queries-cache-hits.: 75
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 490
total-correlation-possibilities.: 13
total-correlation-possibilities-mod-lsprels.: 13
total-correlations-explored.: 14

flags:
dst-aloc.: 0
dst-edges.: 9
dst-nodes.: 9
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 1
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 8
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 12
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 25
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 24
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 19
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 35
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 70.53
final-CG-time-to-total-time-ratio.: 0.80
query-time-to-total-time-ratio.: 0.40

Context stats:
exprs: count: 190334
sorts: count: 32062
num_proof_queries: 219
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	102938
	        hit ratio:	0.946016
m_simplify_solver:
	----------- total:	19925
	        hit ratio:	0.783338
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	22930
	        hit ratio:	0.843262
m_z3_solver_substitution:
	----------- total:	4313
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	4317
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	428
	        hit ratio:	0.997664
m_expr_size:
	----------- total:	42898
	        hit ratio:	0.895846
m_contains_only_constants_or_sp_versions:
	----------- total:	2762
	        hit ratio:	0.737147
m_expr_evaluates_to_constant_visitor:
	----------- total:	124599
	        hit ratio:	0.764725
m_sort_dfa_canonicalize:
	----------- total:	1643099
	        hit ratio:	0.990277
m_expr_convert_to_iexpr:
	----------- total:	12883
	        hit ratio:	0.634557

z3_solver expr_query_cache entry size: 386
	----------- total:	461
	             hits:	75
	        hit ratio:	0.16269
histogram (time taken by solver in ms):
[ 19.6720,  26.6780) (avg.  24.7602)     : 15
[ 26.6780,  36.1791) (avg.  31.9631)     : 90
[ 36.1791,  49.0640) (avg.  42.1324)     : 53
[ 49.0640,  66.5378) (avg.  50.8552)     : 15
[ 66.5378,  90.2346) (avg.  82.0616)     : 42
[ 90.2346, 122.3708) (avg. 103.6205)     : 91
[122.3708, 165.9521) (avg. 136.6888)     : 37
[165.9521, 225.0545) (avg. 199.4085)     : 13
[225.0545, 305.2057) (avg. 268.8809)     : 16
[305.2057, 413.9020) (avg. 353.9049)     : 14
histogram (number of quantifiers in query)
[0, 2) (avg. 1)                          : 379
[2, 3) (avg. 2)                          : 7
[3, 4) (avg. 0)                          : 0
[4, 5) (avg. 0)                          : 0
[5, 6) (avg. 0)                          : 0
[6, 8) (avg. 0)                          : 0
[8, 9) (avg. 0)                          : 0
[9, 10) (avg. 0)                         : 0
[10, 11) (avg. 0)                        : 0
[11, 12) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 33, 121) (avg.  98)                    : 46
[121, 208) (avg. 177)                    : 96
[208, 295) (avg. 242)                    : 116
[295, 382) (avg. 316)                    : 74
[382, 469) (avg. 434)                    : 21
[469, 557) (avg. 502)                    : 12
[557, 644) (avg. 642)                    : 3
[644, 731) (avg. 675)                    : 14
[731, 818) (avg. 753)                    : 3
[818, 905) (avg. 895)                    : 1
Top 10 highest time taking queries:
1. [0.413s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.4
2. [0.401s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
3. [0.399s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond.2
4. [0.387s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
5. [0.369s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
6. [0.365s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
7. [0.358s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
8. [0.345s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
9. [0.333s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
10. [0.327s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.3

<MSG>1:54 : Successfully computed equivalence for function: make_list.</MSG>

tfg_edge_expr_wp_fn: num_starts 125 time spent: 0:0:0 [0.003203s total; 0.000026 per start]
tfg_computeWP: num_starts 1310 time spent: 0:0:0 [0.353007s total; 0.000269 per start]
tfg_get_simplified_to_state_for_edge: num_starts 3918 time spent: 0:0:0 [0.008102s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 6605 time spent: 0:0:0 [0.012068s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 7839 time spent: 0:0:0 [0.011951s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 88 time spent: 0:0:0 [0.839731s total; 0.009542 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 24 time spent: 0:0:1 [1.300904s total; 0.054204 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 659 time spent: 0:0:2 [2.078070s total; 0.003153 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 298 time spent: 0:0:0 [0.184299s total; 0.000618 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 539 time spent: 0:0:1 [1.996499s total; 0.003704 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 4245 time spent: 0:0:2 [2.135352s total; 0.000503 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 582 time spent: 0:0:0 [0.049029s total; 0.000084 per start]
tfg_graph_get_vars_written_on_edge: num_starts 539 time spent: 0:0:0 [0.021541s total; 0.000040 per start]
cg_with_rank_add_CE_at_pc: num_starts 158 time spent: 0:0:0 [0.342657s total; 0.002169 per start]
graph_with_ce_add_CE_at_pc: num_starts 112 time spent: 0:0:0 [0.005254s total; 0.000047 per start]
graph_with_guessing_add_CE_at_pc: num_starts 158 time spent: 0:0:0 [0.338873s total; 0.002145 per start]
point_set_add_point_using_CE: num_starts 647 time spent: 0:0:0 [0.097597s total; 0.000151 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 647 time spent: 0:0:0 [0.099494s total; 0.000154 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 104 time spent: 0:0:0 [0.276428s total; 0.002658 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 104 time spent: 0:0:0 [0.173813s total; 0.001671 per start]
expr_label_memlabels_using_memlabel_map: num_starts 47209 time spent: 0:0:1 [1.447071s total; 0.000031 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 1449 time spent: 0:0:0 [0.046135s total; 0.000032 per start]
expr_simplify_solver: num_starts 20190 time spent: 0:0:1 [1.033460s total; 0.000051 per start]
expr_simplify_syntactic: num_starts 20312 time spent: 0:0:10 [10.851326s total; 0.000534 per start]
expr_simplify_select_on_store: num_starts 3002 time spent: 0:0:10 [10.164271s total; 0.003386 per start]
expr_simplify_store_on_store: num_starts 798 time spent: 0:0:0 [0.031082s total; 0.000039 per start]
expr_simplify_using_lhs_set_helper: num_starts 6117 time spent: 0:0:12 [12.536108s total; 0.002049 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 49300 time spent: 0:0:12 [12.486232s total; 0.000253 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 15616 time spent: 0:0:0 [0.070145s total; 0.000004 per start]
expr_simplify_eq: num_starts 3742 time spent: 0:0:0 [0.045711s total; 0.000012 per start]
expr_simplify_or: num_starts 117 time spent: 0:0:0 [0.000133s total; 0.000001 per start]
expr_simplify_and: num_starts 279 time spent: 0:0:0 [0.001164s total; 0.000004 per start]
expr_simplify_not: num_starts 44 time spent: 0:0:0 [0.000166s total; 0.000004 per start]
expr_simplify_implies: num_starts 218 time spent: 0:0:0 [0.001913s total; 0.000009 per start]
expr_simplify_ite: num_starts 3344 time spent: 0:0:0 [0.160903s total; 0.000048 per start]
canonicalize_expr_tree: num_starts 4389 time spent: 0:0:0 [0.189550s total; 0.000043 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1202 time spent: 0:0:0 [0.006888s total; 0.000006 per start]
expr_simplify_select_on_store_visit_function: num_starts 4955 time spent: 0:0:10 [10.038361s total; 0.002026 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 776 time spent: 0:0:1 [1.213613s total; 0.001564 per start]
memlabels_are_independent: num_starts 1995 time spent: 0:0:0 [0.013386s total; 0.000007 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 672 time spent: 0:0:0 [0.367872s total; 0.000547 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 672 time spent: 0:0:0 [0.361830s total; 0.000538 per start]
is_overlapping_atoms_pair_syntactic: num_starts 672 time spent: 0:0:0 [0.336586s total; 0.000501 per start]
is_overlapping_considering_type_constraints: num_starts 672 time spent: 0:0:0 [0.005918s total; 0.000009 per start]
find_offset_wrt_typed_variable_pointer: num_starts 672 time spent: 0:0:0 [0.005847s total; 0.000009 per start]
is_gep_inbounds_offset: num_starts 672 time spent: 0:0:0 [0.002065s total; 0.000003 per start]
get_arithmetic_addsub_atoms: num_starts 63097 time spent: 0:0:0 [0.047689s total; 0.000001 per start]
expr_is_variable_start: num_starts 1044 time spent: 0:0:0 [0.000141s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 14974 time spent: 0:0:0 [0.207060s total; 0.000014 per start]
expr_is_consts_struct_constant: num_starts 7137 time spent: 0:0:0 [0.008954s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 103371 time spent: 0:0:12 [12.285420s total; 0.000119 per start]
expr_do_simplify_helper_cache: num_starts 103371 time spent: 0:0:0 [0.116926s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 11948 time spent: 0:0:0 [0.014440s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 11948 time spent: 0:0:0 [0.035222s total; 0.000003 per start]
evaluate_expr_and_check_bounds: num_starts 3687 time spent: 0:0:2 [2.180661s total; 0.000591 per start]
array_constant_equals: num_starts 64242 time spent: 0:0:0 [0.083405s total; 0.000001 per start]
sort_dfa_canonical: num_starts 1788149 time spent: 0:0:3 [3.842450s total; 0.000002 per start]
expr_convert_to_iexpr: num_starts 12934 time spent: 0:0:8 [8.531841s total; 0.000660 per start]
combo_dfa_xfer_and_meet: num_starts 3962 time spent: 0:0:9 [9.084977s total; 0.002293 per start]
alias_val_xfer_and_meet: num_starts 3962 time spent: 0:0:7 [7.906984s total; 0.001996 per start]
get_sprel_map_from_avail_exprs: num_starts 5827 time spent: 0:0:0 [0.116650s total; 0.000020 per start]
update_memlabels_for_memslot_locs: num_starts 1529 time spent: 0:0:0 [0.005496s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 8060 time spent: 0:0:0 [0.430791s total; 0.000053 per start]
compute_simplified_loc_exprs_for_edge: num_starts 17652 time spent: 0:0:4 [4.879798s total; 0.000276 per start]
compute_locs_definitely_written_on_edge: num_starts 8060 time spent: 0:0:0 [0.004125s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 2351 time spent: 0:0:1 [1.468385s total; 0.000625 per start]
edge_update_memlabel_map_for_mlvars: num_starts 4030 time spent: 0:0:0 [0.356600s total; 0.000088 per start]
add_new_locs_based_on_edge: num_starts 3962 time spent: 0:0:6 [6.132767s total; 0.001548 per start]
expand_locset_to_include_slots_for_memmask: num_starts 4890 time spent: 0:0:0 [0.032778s total; 0.000007 per start]
total: num_starts 1 time spent: 0:2:1 [121.786282s total; 121.786282 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 91.68s.
ftmap_run_pointsto_analysis.: 16.4376s (num_starts 336; 0.0489s/start)s.
EQ Time after pointsto analysis: 75.2389s.
EQ Time after pointsto analysis and smt_query: -10.0062s.
EQ Time after pointsto analysis and smt_query and bv-solve: -10.0443s.
Equivalence proof found. The programs are equivalent.
