=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%1%d L2%2%bbentry L2%4%bbentry L2%8%d L2%9%bbentry L2%11%bbentry L2%13%bbentry L2%15%bbentry E0%0%d
=Edges:
L0%0%d => L2%1%d
L2%1%d => L2%4%bbentry
L2%1%d => L2%2%bbentry
L2%2%bbentry => L2%15%bbentry
L2%4%bbentry => L2%8%d
L2%8%d => L2%11%bbentry
L2%8%d => L2%9%bbentry
L2%9%bbentry => L2%13%bbentry
L2%11%bbentry => L2%13%bbentry
L2%13%bbentry => L2%15%bbentry
L2%15%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%1%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%2%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%4%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%8%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%11%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%13%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%15%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:func_head
tfg_edge_comment end

=Edge: L2%1%d => L2%4%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%1%d => L2%2%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%2%bbentry => L2%15%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L2%15%bbentry
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-u-0.L2%15%bbentry
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%4%bbentry => L2%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-right-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 2 { 0x2 +1.0e1025 } : INT
5 : prod_get(3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-node-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=spec-%var-left-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-val-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_1)*match_prod_0)*match_prod_1)*match_prod_2)
tfg_edge_comment end

=Edge: L2%8%d => L2%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%8%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:10:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%9%bbentry => L2%13%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%13%bbentry
1 : input.spec-%var-right-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-u2-0.L2%13%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%11%bbentry => L2%13%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%13%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-node2-0.L2%13%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%13%bbentry => L2%15%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L2%15%bbentry
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%tmpvar-1.L2%15%bbentry
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_prod_final)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%15%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-2.L2%15%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-t-0
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Loc 13 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 14 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 15 in src.spec.foo.
REGMEM
spec-%var-left-0.L2%8%d
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Loc 16 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%15%bbentry
1 : input.spec-%tmpvar-2.L2%15%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Loc 17 in src.spec.foo.
REGMEM
spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Loc 18 in src.spec.foo.
REGMEM
spec-%var-node-0.L2%8%d
1 : input.spec-%var-node-0.L2%8%d : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=Loc 19 in src.spec.foo.
REGMEM
spec-%var-right-0.L2%8%d
1 : input.spec-%var-right-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Loc 20 in src.spec.foo.
REGMEM
spec-%var-val-0.L2%8%d
1 : input.spec-%var-val-0.L2%8%d : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%13%bbentry
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-u2-0.L2%13%bbentry
1 : input.spec-%var-u2-0.L2%13%bbentry : UNIT
=Loc 23 in src.spec.foo.
REGMEM
spec-%var-node2-0.L2%13%bbentry
1 : input.spec-%var-node2-0.L2%13%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=Loc 24 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%15%bbentry
1 : input.spec-%var-u-0.L2%15%bbentry : UNIT
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%15%bbentry
1 : input.spec-%tmpvar-1.L2%15%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%1%d
1, 
=live locs at L2%2%bbentry
1, 
=live locs at L2%4%bbentry
1, 
=live locs at L2%8%d
15, 19, 
=live locs at L2%9%bbentry
19, 
=live locs at L2%11%bbentry
15, 
=live locs at L2%13%bbentry
21, 
=live locs at L2%15%bbentry
16, 
=live locs at E0%0%d
17, 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 13, 14
=loc definedness at L2%1%d
1, 13, 14
=loc definedness at L2%2%bbentry
1, 13, 14
=loc definedness at L2%4%bbentry
1, 13, 14
=loc definedness at L2%8%d
1, 13, 14, 15, 18, 19, 20
=loc definedness at L2%9%bbentry
1, 13, 14, 15, 18, 19, 20
=loc definedness at L2%11%bbentry
1, 13, 14, 15, 18, 19, 20
=loc definedness at L2%13%bbentry
1, 13, 14, 15, 18, 19, 20, 21
=loc definedness at L2%15%bbentry
1, 13, 14, 16
=loc definedness at E0%0%d
1, 13, 14, 16, 17

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%1%d
1
=branch affecting variable locs at L2%2%bbentry

=branch affecting variable locs at L2%4%bbentry
1
=branch affecting variable locs at L2%8%d
15
=branch affecting variable locs at L2%9%bbentry

=branch affecting variable locs at L2%11%bbentry

=branch affecting variable locs at L2%13%bbentry

=branch affecting variable locs at L2%15%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%1%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%1%d done
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%2%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%2%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%4%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%4%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%15%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%15%bbentry for loc_id 16 {input.spec-%tmpvar-2.L2%15%bbentry }
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%15%bbentry for loc_id 24 {input.spec-%var-u-0.L2%15%bbentry }
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%15%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%8%d
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%8%d for loc_id 15 {input.spec-%var-left-0.L2%8%d }
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%8%d for loc_id 18 {input.spec-%var-node-0.L2%8%d }
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%8%d for loc_id 19 {input.spec-%var-right-0.L2%8%d }
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 2 { 0x2 +1.0e1025 } : INT
5 : prod_get(3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%8%d for loc_id 20 {input.spec-%var-val-0.L2%8%d }
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%8%d done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%13%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%13%bbentry for loc_id 21 {input.spec-%tmpvar-0.L2%13%bbentry }
1 : input.spec-%var-right-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%13%bbentry for loc_id 22 {input.spec-%var-u2-0.L2%13%bbentry }
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%13%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%bbentry for loc_id 21 {input.spec-%tmpvar-0.L2%13%bbentry }
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%bbentry for loc_id 23 {input.spec-%var-node2-0.L2%13%bbentry }
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%15%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%15%bbentry for loc_id 16 {input.spec-%tmpvar-2.L2%15%bbentry }
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%15%bbentry for loc_id 25 {input.spec-%tmpvar-1.L2%15%bbentry }
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%15%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>E0%0%d for loc_id 17 {input.spec-%tmpvar-3.E0%0%d }
1 : input.spec-%tmpvar-2.L2%15%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%1%d:
vacuous mls at L2%2%bbentry:
vacuous mls at L2%4%bbentry:
vacuous mls at L2%8%d:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%11%bbentry:
vacuous mls at L2%13%bbentry:
vacuous mls at L2%15%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%1%d:
non-vacuous mls at L2%2%bbentry:
non-vacuous mls at L2%4%bbentry:
non-vacuous mls at L2%8%d:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%11%bbentry:
non-vacuous mls at L2%13%bbentry:
non-vacuous mls at L2%15%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 15
=loc_expr
140314 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=avail_exprs_val.end
=loc 18
=loc_expr
140347 : input.spec-%var-node-0.L2%8%d : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.end
=loc 19
=loc_expr
140342 : input.spec-%var-right-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 2 { 0x2 +1.0e1025 } : INT
5 : prod_get(3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=avail_exprs_val.end
=loc 20
=loc_expr
140348 : input.spec-%var-val-0.L2%8%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 22
=loc_expr
140376 : input.spec-%var-u2-0.L2%13%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : sum_get(4, 5) : UNIT
=avail_exprs_val.end
=loc 23
=loc_expr
140377 : input.spec-%var-node2-0.L2%13%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
5 : sum_get(4, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.end
=loc 24
=loc_expr
140378 : input.spec-%var-u-0.L2%15%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 13 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 14 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%1%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%1%d=>L2%2%bbentry
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%1%d=>L2%4%bbentry
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%2%bbentry=>L2%15%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%4%bbentry=>L2%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%9%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%11%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>L2%13%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%11%bbentry=>L2%13%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%bbentry=>L2%15%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%15%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%1%d=>L2%2%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%1%d=>L2%4%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%2%bbentry=>L2%15%bbentry
=spec-%tmpvar-2.L2%15%bbentry
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-u-0.L2%15%bbentry
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%4%bbentry=>L2%8%d
=spec-%var-right-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 2 { 0x2 +1.0e1025 } : INT
5 : prod_get(3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-node-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=spec-%var-left-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-val-0.L2%8%d
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>L2%13%bbentry
=spec-%tmpvar-0.L2%13%bbentry
1 : input.spec-%var-right-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-u2-0.L2%13%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%11%bbentry=>L2%13%bbentry
=spec-%tmpvar-0.L2%13%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%var-node2-0.L2%13%bbentry
1 : input.spec-%var-left-0.L2%8%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%bbentry=>L2%15%bbentry
=spec-%tmpvar-2.L2%15%bbentry
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=spec-%tmpvar-1.L2%15%bbentry
1 : input.spec-%tmpvar-0.L2%13%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%15%bbentry=>E0%0%d
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-2.L2%15%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%1%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%1%d done
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%2%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%2%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%4%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%4%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%2%bbentry=>L2%15%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%2%bbentry=>L2%15%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%8%d
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%8%d done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%13%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%13%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%13%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%13%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%13%bbentry=>L2%15%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%bbentry=>L2%15%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%15%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%15%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%1%d for src.spec.foo
=suffixpath_at_L2%1%d.graph_edge_composition
(L0%0%d=>L2%1%d)
=suffixpath_at_L2%2%bbentry for src.spec.foo
=suffixpath_at_L2%2%bbentry.graph_edge_composition
((L0%0%d=>L2%1%d)*(L2%1%d=>L2%2%bbentry))
=suffixpath_at_L2%4%bbentry for src.spec.foo
=suffixpath_at_L2%4%bbentry.graph_edge_composition
((L0%0%d=>L2%1%d)*(L2%1%d=>L2%4%bbentry))
=suffixpath_at_L2%8%d for src.spec.foo
=suffixpath_at_L2%8%d.graph_edge_composition
((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%8%d)))
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*(L2%8%d=>L2%9%bbentry))))
=suffixpath_at_L2%11%bbentry for src.spec.foo
=suffixpath_at_L2%11%bbentry.graph_edge_composition
((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*(L2%8%d=>L2%11%bbentry))))
=suffixpath_at_L2%13%bbentry for src.spec.foo
=suffixpath_at_L2%13%bbentry.graph_edge_composition
(((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%13%bbentry)))))+((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%13%bbentry))))))
=suffixpath_at_L2%15%bbentry for src.spec.foo
=suffixpath_at_L2%15%bbentry.graph_edge_composition
(((L0%0%d=>L2%1%d)*((L2%1%d=>L2%2%bbentry)*(L2%2%bbentry=>L2%15%bbentry)))+((((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%13%bbentry)))))+((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%13%bbentry))))))*(L2%13%bbentry=>L2%15%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L2%1%d)*((L2%1%d=>L2%2%bbentry)*(L2%2%bbentry=>L2%15%bbentry)))+((((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%13%bbentry)))))+((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%13%bbentry))))))*(L2%13%bbentry=>L2%15%bbentry)))*(L2%15%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%1%d
tfg.assumes_around_edge at L0%0%d=>L2%1%d done
tfg.assumes_around_edge at L2%1%d=>L2%2%bbentry
tfg.assumes_around_edge at L2%1%d=>L2%2%bbentry done
tfg.assumes_around_edge at L2%1%d=>L2%4%bbentry
tfg.assumes_around_edge at L2%1%d=>L2%4%bbentry done
tfg.assumes_around_edge at L2%2%bbentry=>L2%15%bbentry
tfg.assumes_around_edge at L2%2%bbentry=>L2%15%bbentry done
tfg.assumes_around_edge at L2%4%bbentry=>L2%8%d
tfg.assumes_around_edge at L2%4%bbentry=>L2%8%d done
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>L2%13%bbentry
tfg.assumes_around_edge at L2%9%bbentry=>L2%13%bbentry done
tfg.assumes_around_edge at L2%11%bbentry=>L2%13%bbentry
tfg.assumes_around_edge at L2%11%bbentry=>L2%13%bbentry done
tfg.assumes_around_edge at L2%13%bbentry=>L2%15%bbentry
tfg.assumes_around_edge at L2%13%bbentry=>L2%15%bbentry done
tfg.assumes_around_edge at L2%15%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%15%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lcond.end%1%bbentry Lcond.end5%1%bbentry Lcond.false%1%d Lcond.false4%1%intermediateVal0 Lcond.true%1%d Lcond.true%4%d Lcond.true2%1%d Lentry%2%d E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lcond.true%1%d
Lentry%2%d => Lcond.false4%1%intermediateVal0
Lcond.true%1%d => Lcond.true%4%d
Lcond.true%4%d => Lcond.false%1%d
Lcond.true%4%d => Lcond.true2%1%d
Lcond.true2%1%d => Lcond.end%1%bbentry
Lcond.false%1%d => Lcond.end%1%bbentry
Lcond.end%1%bbentry => Lcond.end5%1%bbentry
Lcond.false4%1%intermediateVal0 => Lcond.end5%1%bbentry
Lcond.end5%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%t
1 : input.dst.llvm-%t : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.end5%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.false%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.false4%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.true%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.true%4%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.true2%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%t : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%t : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%t : BV:32
2 : 12 { 0xc +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %tobool = icmp ne %struct.tree* %t, null, !dbg !23)
tfg_edge_comment end

=Edge: Lentry%2%d => Lcond.true%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %cond.true, label %cond.false4, !dbg !23*  br i1 %tobool, label %cond.true, label %cond.false4, !dbg !23)*  br i1 %tobool, label %cond.true, label %cond.false4, !dbg !23)
tfg_edge_comment end

=Edge: Lentry%2%d => Lcond.false4%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %cond.true, label %cond.false4, !dbg !23*  br i1 %tobool, label %cond.true, label %cond.false4, !dbg !23)*(  br i1 %tobool, label %cond.true, label %cond.false4, !dbg !23*  br label %cond.end5, !dbg !23))
tfg_edge_comment end

=Edge: Lcond.true%1%d => Lcond.true%4%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%0.Lcond.true%4%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%left.Lcond.true%4%d
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%tobool1.Lcond.true%4%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
15 : eq(14, 5) : BOOL
16 : not(15) : BOOL
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 12 { 0xc +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%t : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : mlvar.dst.llvm.foo.0 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 8, 9, 14) : BV:32
16 : 12 { 0xc +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(17, 10) : BOOL
19 : and(10, 18) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %left = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !24*  %left = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !24)*(  %left = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !24*  %left = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !24))*((  %0 = load %struct.tree*, %struct.tree** %left, align 4, !dbg !24*  %0 = load %struct.tree*, %struct.tree** %left, align 4, !dbg !24)*  %tobool1 = icmp ne %struct.tree* %0, null, !dbg !25))
tfg_edge_comment end

=Edge: Lcond.true%4%d => Lcond.false%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:((  br i1 %tobool1, label %cond.true2, label %cond.false, !dbg !25*  br i1 %tobool1, label %cond.true2, label %cond.false, !dbg !25)*  br i1 %tobool1, label %cond.true2, label %cond.false, !dbg !25)
tfg_edge_comment end

=Edge: Lcond.true%4%d => Lcond.true2%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:((  br i1 %tobool1, label %cond.true2, label %cond.false, !dbg !25*  br i1 %tobool1, label %cond.true2, label %cond.false, !dbg !25)*  br i1 %tobool1, label %cond.true2, label %cond.false, !dbg !25)
tfg_edge_comment end

=Edge: Lcond.true2%1%d => Lcond.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%1.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%left3.Lcond.end%1%bbentry
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 12 { 0xc +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%t : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 8, 9, 14) : BV:32
16 : 12 { 0xc +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(17, 10) : BOOL
19 : and(10, 18) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %left3 = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !26*  %left3 = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !26)*(  %left3 = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !26*  %left3 = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 1, !dbg !26))*((((  %1 = load %struct.tree*, %struct.tree** %left3, align 4, !dbg !26*  %1 = load %struct.tree*, %struct.tree** %left3, align 4, !dbg !26)*  br label %cond.end, !dbg !25)*(  %cond = phi %struct.tree* [ %1, %cond.true2 ], [ %2, %cond.false ], !dbg !25*  br label %cond.end, !dbg !25))*(  br label %cond.end, !dbg !25*  br label %cond.end, !dbg !25)))
tfg_edge_comment end

=Edge: Lcond.false%1%d => Lcond.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%2.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 8 { 0x8 +1.95e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 8 { 0x8 +1.95e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%t : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 8 { 0x8 +1.95e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%right.Lcond.end%1%bbentry
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 12 { 0xc +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%t : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%t : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 12 { 0xc +1.143e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : mlvar.dst.llvm.foo.2 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 8, 9, 14) : BV:32
16 : 12 { 0xc +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(17, 10) : BOOL
19 : and(10, 18) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %right = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 2, !dbg !27*  %right = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 2, !dbg !27)*(  %right = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 2, !dbg !27*  %right = getelementptr inbounds %struct.tree, %struct.tree* %t, i32 0, i32 2, !dbg !27))*((((  %2 = load %struct.tree*, %struct.tree** %right, align 4, !dbg !27*  %2 = load %struct.tree*, %struct.tree** %right, align 4, !dbg !27)*  br label %cond.end, !dbg !25)*(  %cond = phi %struct.tree* [ %1, %cond.true2 ], [ %2, %cond.false ], !dbg !25*  br label %cond.end, !dbg !25))*(  br label %cond.end, !dbg !25*  br label %cond.end, !dbg !25)))
tfg_edge_comment end

=Edge: Lcond.end%1%bbentry => Lcond.end5%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond6.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*  br label %cond.end5, !dbg !23)*(  %cond6 = phi %struct.tree* [ %cond, %cond.end ], [ %t, %cond.false4 ], !dbg !23*  br label %cond.end5, !dbg !23))*(  br label %cond.end5, !dbg !23*  br label %cond.end5, !dbg !23))
tfg_edge_comment end

=Edge: Lcond.false4%1%intermediateVal0 => Lcond.end5%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond6.Lcond.end5%1%bbentry
1 : input.dst.llvm-%t : BV:32
=dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry
1 : input.dst.llvm-%t : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((  %cond6 = phi %struct.tree* [ %cond, %cond.end ], [ %t, %cond.false4 ], !dbg !23*  br label %cond.end5, !dbg !23)*(  br label %cond.end5, !dbg !23*  br label %cond.end5, !dbg !23))
tfg_edge_comment end

=Edge: Lcond.end5%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret %struct.tree* %cond6, !dbg !28)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%t : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100001 in dst.llvm.foo.
REGMEM
dst.llvm-%t
1 : input.dst.llvm-%t : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100042 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100043 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100044 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%tobool1.Lcond.true%4%d
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%cond6.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lcond.true%4%d
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%left.Lcond.true%4%d
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%2.Lcond.end%1%bbentry
1 : input.dst.llvm-%2.Lcond.end%1%bbentry : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.llvm-%right.Lcond.end%1%bbentry
1 : input.dst.llvm-%right.Lcond.end%1%bbentry : BV:32
=Loc 100067 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lcond.end%1%bbentry
1 : input.dst.llvm-%1.Lcond.end%1%bbentry : BV:32
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-%left3.Lcond.end%1%bbentry
1 : input.dst.llvm-%left3.Lcond.end%1%bbentry : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry : BV:32
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry : BV:32
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100001, 100043, 100044, 
=live locs at Lcond.end%1%bbentry
100044, 100064, 
=live locs at Lcond.end5%1%bbentry
100044, 100047[f], 
=live locs at Lcond.false%1%d
100001, 100043, 100044, 
=live locs at Lcond.false4%1%intermediateVal0
100001, 100044, 
=live locs at Lcond.true%1%d
100001, 100043, 100044, 
=live locs at Lcond.true%4%d
100001, 100043, 100044, 100045, 
=live locs at Lcond.true2%1%d
100001, 100043, 100044, 
=live locs at Lentry%2%d
100001, 100043, 100044, 100046, 
=live locs at E0%0%d
100044, 100047[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100001, 100040, 100042, 100043, 100044
=loc definedness at Lcond.end%1%bbentry
100001, 100040, 100042, 100043, 100044, 100045, 100046, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100064, 100077, 100078
=loc definedness at Lcond.end5%1%bbentry
100001, 100040, 100042, 100043, 100044, 100046, 100047, 100077, 100078
=loc definedness at Lcond.false%1%d
100001, 100040, 100042, 100043, 100044, 100045, 100046, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100077, 100078
=loc definedness at Lcond.false4%1%intermediateVal0
100001, 100040, 100042, 100043, 100044, 100046, 100077, 100078
=loc definedness at Lcond.true%1%d
100001, 100040, 100042, 100043, 100044, 100046, 100077, 100078
=loc definedness at Lcond.true%4%d
100001, 100040, 100042, 100043, 100044, 100045, 100046, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100077, 100078
=loc definedness at Lcond.true2%1%d
100001, 100040, 100042, 100043, 100044, 100045, 100046, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100077, 100078
=loc definedness at Lentry%2%d
100001, 100040, 100042, 100043, 100044, 100046, 100077, 100078
=loc definedness at E0%0%d
100001, 100040, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100077, 100078

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100001, 100044
=branch affecting variable locs at Lcond.end%1%bbentry

=branch affecting variable locs at Lcond.end5%1%bbentry

=branch affecting variable locs at Lcond.false%1%d

=branch affecting variable locs at Lcond.false4%1%intermediateVal0

=branch affecting variable locs at Lcond.true%1%d
100044
=branch affecting variable locs at Lcond.true%4%d
100045
=branch affecting variable locs at Lcond.true2%1%d

=branch affecting variable locs at Lentry%2%d
100044, 100046
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100046 {input.dst.llvm-%tobool.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100077 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100078 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry for loc_id 100047 {input.dst.llvm-%cond6.Lcond.end5%1%bbentry }
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry for loc_id 100075 {input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry }
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lcond.end5%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lcond.end5%1%bbentry=>E0%0%d for loc_id 100048 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end5%1%bbentry=>E0%0%d for loc_id 100049 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end5%1%bbentry=>E0%0%d for loc_id 100050 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end5%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100058 {input.dst.llvm-%2.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100059 {input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100060 {input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100061 {input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100062 {input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100063 {input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100064 {input.dst.llvm-%cond.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100065 {input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry for loc_id 100066 {input.dst.llvm-%right.Lcond.end%1%bbentry }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%d=>Lcond.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry for loc_id 100047 {input.dst.llvm-%cond6.Lcond.end5%1%bbentry }
1 : input.dst.llvm-%t : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry for loc_id 100076 {input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry }
1 : input.dst.llvm-%t : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100045 {input.dst.llvm-%tobool1.Lcond.true%4%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%t : BV:32
7 : bvadd(5, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : 0 { 0x0 } : BOOL
10 : select(2, 3, 4, 7, 8, 9) : BV:32
11 : eq(1, 10) : BOOL
12 : not(11) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100051 {input.dst.llvm-%0.Lcond.true%4%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100052 {input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100053 {input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100054 {input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100055 {input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100056 {input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d for loc_id 100057 {input.dst.llvm-%left.Lcond.true%4%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.true%4%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%4%d=>Lcond.false%1%d
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%4%d=>Lcond.false%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%4%d=>Lcond.true2%1%d
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%4%d=>Lcond.true2%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100064 {input.dst.llvm-%cond.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100067 {input.dst.llvm-%1.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100068 {input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100069 {input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100070 {input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100071 {input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100072 {input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100073 {input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry for loc_id 100074 {input.dst.llvm-%left3.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true2%1%d=>Lcond.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.false4%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.false4%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.true%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.true%1%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lcond.end%1%bbentry:
vacuous mls at Lcond.end5%1%bbentry:
vacuous mls at Lcond.false%1%d:
vacuous mls at Lcond.false4%1%intermediateVal0:
vacuous mls at Lcond.true%1%d:
vacuous mls at Lcond.true%4%d:
vacuous mls at Lcond.true2%1%d:
vacuous mls at Lentry%2%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lcond.end%1%bbentry:
non-vacuous mls at Lcond.end5%1%bbentry:
non-vacuous mls at Lcond.false%1%d:
non-vacuous mls at Lcond.false4%1%intermediateVal0:
non-vacuous mls at Lcond.true%1%d:
non-vacuous mls at Lcond.true%4%d:
non-vacuous mls at Lcond.true2%1%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100001
=loc_expr
140392 : input.dst.llvm-%t : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140466 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140467 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140469 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140471 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140473 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100039
=loc_expr
140400 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100040
=loc_expr
140395 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100045
=loc_expr
140563 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%t : BV:32
7 : bvadd(5, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : 0 { 0x0 } : BOOL
10 : select(2, 3, 4, 7, 8, 9) : BV:32
11 : eq(1, 10) : BOOL
12 : not(11) : BOOL
=avail_exprs_val.end
=loc 100046
=loc_expr
140565 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100048
=loc_expr
140569 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140570 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140571 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140572 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140573 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140574 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140575 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100055
=loc_expr
140576 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140577 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140578 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
140579 : input.dst.llvm-%2.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100059
=loc_expr
140580 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100060
=loc_expr
140581 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140582 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140583 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140584 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140585 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140586 : input.dst.llvm-%right.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100067
=loc_expr
140587 : input.dst.llvm-%1.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140588 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100069
=loc_expr
140589 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100070
=loc_expr
140590 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100071
=loc_expr
140591 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140592 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100073
=loc_expr
140593 : input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140594 : input.dst.llvm-%left3.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100075
=loc_expr
140595 : input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100076
=loc_expr
140596 : input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%t : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140597 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100078
=loc_expr
140598 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100050 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100050 spreled-expr
140267 : retaddr_const : BV:32
=loc 100052 expr
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=loc 100052 spreled-expr
140300 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=loc 100053 spreled-expr
140367 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100055 expr
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=loc 100055 spreled-expr
140300 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100056 expr
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=loc 100056 spreled-expr
140367 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100059 expr
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100059 spreled-expr
140300 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100060 expr
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100060 spreled-expr
140372 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100062 expr
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=loc 100062 spreled-expr
140300 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100063 expr
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=loc 100063 spreled-expr
140372 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100068 expr
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100068 spreled-expr
140300 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100069 expr
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100069 spreled-expr
140367 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100071 expr
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=loc 100071 spreled-expr
140300 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100072 expr
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=loc 100072 spreled-expr
140367 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100077 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100077 spreled-expr
140400 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100078 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100078 spreled-expr
140399 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100001 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100050 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.end5%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.false%1%d=>Lcond.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.true%1%d=>Lcond.true%4%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.true%4%d=>Lcond.false%1%d
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.true%4%d=>Lcond.true2%1%d
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.true2%1%d=>Lcond.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lcond.false4%1%intermediateVal0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lcond.true%1%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
=dst.llvm-%cond6.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.end5%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.false%1%d=>Lcond.end%1%bbentry
=dst.llvm-%2.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%right.Lcond.end%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=dst.llvm-%cond6.Lcond.end5%1%bbentry
1 : input.dst.llvm-%t : BV:32
=dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry
1 : input.dst.llvm-%t : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.true%1%d=>Lcond.true%4%d
=dst.llvm-%0.Lcond.true%4%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%left.Lcond.true%4%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%tobool1.Lcond.true%4%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%t : BV:32
7 : bvadd(5, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : 0 { 0x0 } : BOOL
10 : select(2, 3, 4, 7, 8, 9) : BV:32
11 : eq(1, 10) : BOOL
12 : not(11) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.true%4%d=>Lcond.false%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.true%4%d=>Lcond.true2%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.true2%1%d=>Lcond.end%1%bbentry
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%1.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%t : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%left3.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lcond.false4%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lcond.true%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d assume# 0
1 : input.dst.llvm-%t : BV:32
2 : 12 { 0xc +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lcond.end5%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lcond.end5%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%d=>Lcond.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%d=>Lcond.end%1%bbentry assume# 0
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
9 : 0 { 0x0 } : BOOL
10 : select(6, 7, 8, 3, 4, 9) : BV:32
11 : 12 { 0xc +1.0e1025 } : INT
12 : islangaligned(10, 11) : BOOL
13 : and(5, 12) : BOOL
14 : and(5, 13) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%d=>Lcond.end%1%bbentry assume# 1
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
4 : isgepoffset(3, 1) : BOOL
5 : 1 { 0x1 } : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : isgepoffset(2, 6) : BOOL
8 : and(5, 7) : BOOL
9 : and(4, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%d=>Lcond.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.true%4%d
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.true%4%d assume# 0
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
9 : 0 { 0x0 } : BOOL
10 : select(6, 7, 8, 3, 4, 9) : BV:32
11 : 12 { 0xc +1.0e1025 } : INT
12 : islangaligned(10, 11) : BOOL
13 : and(5, 12) : BOOL
14 : and(5, 13) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.true%4%d assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
4 : isgepoffset(3, 1) : BOOL
5 : 1 { 0x1 } : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : isgepoffset(2, 6) : BOOL
8 : and(5, 7) : BOOL
9 : and(4, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.true%4%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.true%4%d=>Lcond.false%1%d
=graph_with_simplified_assets.simplified_assumes at Lcond.true%4%d=>Lcond.false%1%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.true%4%d=>Lcond.true2%1%d
=graph_with_simplified_assets.simplified_assumes at Lcond.true%4%d=>Lcond.true2%1%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.true2%1%d=>Lcond.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.true2%1%d=>Lcond.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
9 : 0 { 0x0 } : BOOL
10 : select(6, 7, 8, 3, 4, 9) : BV:32
11 : 12 { 0xc +1.0e1025 } : INT
12 : islangaligned(10, 11) : BOOL
13 : and(5, 12) : BOOL
14 : and(5, 13) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true2%1%d=>Lcond.end%1%bbentry assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%t : BV:32
3 : bvadd(1, 2) : BV:32
4 : isgepoffset(3, 1) : BOOL
5 : 1 { 0x1 } : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : isgepoffset(2, 6) : BOOL
8 : and(5, 7) : BOOL
9 : and(4, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true2%1%d=>Lcond.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.false4%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.false4%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.true%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.true%1%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
3
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lcond.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lcond.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*((Lcond.true%4%d=>Lcond.true2%1%d)*(Lcond.true2%1%d=>Lcond.end%1%bbentry)))))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*((Lcond.true%4%d=>Lcond.false%1%d)*(Lcond.false%1%d=>Lcond.end%1%bbentry))))))
=suffixpath_at_Lcond.end5%1%bbentry for dst.llvm.foo
=suffixpath_at_Lcond.end5%1%bbentry.graph_edge_composition
(((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*((Lcond.true%4%d=>Lcond.true2%1%d)*(Lcond.true2%1%d=>Lcond.end%1%bbentry)))))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*((Lcond.true%4%d=>Lcond.false%1%d)*(Lcond.false%1%d=>Lcond.end%1%bbentry))))))*(Lcond.end%1%bbentry=>Lcond.end5%1%bbentry))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.false4%1%intermediateVal0)*(Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry))))
=suffixpath_at_Lcond.false%1%d for dst.llvm.foo
=suffixpath_at_Lcond.false%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*(Lcond.true%4%d=>Lcond.false%1%d))))
=suffixpath_at_Lcond.false4%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lcond.false4%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lcond.false4%1%intermediateVal0))
=suffixpath_at_Lcond.true%1%d for dst.llvm.foo
=suffixpath_at_Lcond.true%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lcond.true%1%d))
=suffixpath_at_Lcond.true%4%d for dst.llvm.foo
=suffixpath_at_Lcond.true%4%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*(Lcond.true%1%d=>Lcond.true%4%d)))
=suffixpath_at_Lcond.true2%1%d for dst.llvm.foo
=suffixpath_at_Lcond.true2%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*(Lcond.true%4%d=>Lcond.true2%1%d))))
=suffixpath_at_Lentry%2%d for dst.llvm.foo
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*((Lcond.true%4%d=>Lcond.true2%1%d)*(Lcond.true2%1%d=>Lcond.end%1%bbentry)))))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*((Lcond.true%1%d=>Lcond.true%4%d)*((Lcond.true%4%d=>Lcond.false%1%d)*(Lcond.false%1%d=>Lcond.end%1%bbentry))))))*(Lcond.end%1%bbentry=>Lcond.end5%1%bbentry))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.false4%1%intermediateVal0)*(Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry))))*(Lcond.end5%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140392 : input.dst.llvm-%t : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140402 : islangaligned(140392, 140401) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
tfg.assumes_around_edge at Lcond.end%1%bbentry=>Lcond.end5%1%bbentry done
tfg.assumes_around_edge at Lcond.end5%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lcond.end5%1%bbentry=>E0%0%d done
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #0
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lcond.false%1%d=>Lcond.end%1%bbentry
=LhsExpr
140372 : 8 { 0x8 +1.95e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140527 : bvadd(140372, 140392) : BV:32
140354 : 4 { 0x4 +1.0e1025 } : INT
140654 : islangaligned(140527, 140354) : BOOL
140393 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140394 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140500 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140355 : 0 { 0x0 } : BOOL
140645 : select(140393, 140394, 140500, 140527, 140354, 140355) : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140656 : islangaligned(140645, 140401) : BOOL
140659 : and(140654, 140656) : BOOL
140661 : and(140654, 140659) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #1
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lcond.false%1%d=>Lcond.end%1%bbentry
=LhsExpr
140372 : 8 { 0x8 +1.95e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140527 : bvadd(140372, 140392) : BV:32
140562 : isgepoffset(140527, 140372) : BOOL
140275 : 1 { 0x1 } : BOOL
140300 : 0 { 0x0 +1.0e129 } : BV:32
140512 : isgepoffset(140392, 140300) : BOOL
140625 : and(140275, 140512) : BOOL
140649 : and(140562, 140625) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.false%1%d=>Lcond.end%1%bbentry done
tfg.assumes_around_edge at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
tfg.assumes_around_edge at Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry done
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #0
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #0.ec
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #0.pred
=Comment
undef-behavioursome.edge.Lcond.true%1%d=>Lcond.true%4%d
=LhsExpr
140367 : 4 { 0x4 +1.47e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140519 : bvadd(140367, 140392) : BV:32
140354 : 4 { 0x4 +1.0e1025 } : INT
140634 : islangaligned(140519, 140354) : BOOL
140393 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140394 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140500 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140355 : 0 { 0x0 } : BOOL
140605 : select(140393, 140394, 140500, 140519, 140354, 140355) : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140636 : islangaligned(140605, 140401) : BOOL
140639 : and(140634, 140636) : BOOL
140641 : and(140634, 140639) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #1
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #1.ec
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d assume #1.pred
=Comment
undef-behavioursome.edge.Lcond.true%1%d=>Lcond.true%4%d
=LhsExpr
140367 : 4 { 0x4 +1.47e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140519 : bvadd(140367, 140392) : BV:32
140543 : isgepoffset(140519, 140367) : BOOL
140275 : 1 { 0x1 } : BOOL
140300 : 0 { 0x0 +1.0e129 } : BV:32
140512 : isgepoffset(140392, 140300) : BOOL
140625 : and(140275, 140512) : BOOL
140629 : and(140543, 140625) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.true%4%d done
tfg.assumes_around_edge at Lcond.true%4%d=>Lcond.false%1%d
tfg.assumes_around_edge at Lcond.true%4%d=>Lcond.false%1%d done
tfg.assumes_around_edge at Lcond.true%4%d=>Lcond.true2%1%d
tfg.assumes_around_edge at Lcond.true%4%d=>Lcond.true2%1%d done
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #0
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lcond.true2%1%d=>Lcond.end%1%bbentry
=LhsExpr
140367 : 4 { 0x4 +1.47e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140519 : bvadd(140367, 140392) : BV:32
140354 : 4 { 0x4 +1.0e1025 } : INT
140634 : islangaligned(140519, 140354) : BOOL
140393 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140394 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140500 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140355 : 0 { 0x0 } : BOOL
140605 : select(140393, 140394, 140500, 140519, 140354, 140355) : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140636 : islangaligned(140605, 140401) : BOOL
140639 : and(140634, 140636) : BOOL
140641 : and(140634, 140639) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #1
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lcond.true2%1%d=>Lcond.end%1%bbentry
=LhsExpr
140367 : 4 { 0x4 +1.47e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140519 : bvadd(140367, 140392) : BV:32
140543 : isgepoffset(140519, 140367) : BOOL
140275 : 1 { 0x1 } : BOOL
140300 : 0 { 0x0 +1.0e129 } : BV:32
140512 : isgepoffset(140392, 140300) : BOOL
140625 : and(140275, 140512) : BOOL
140629 : and(140543, 140625) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true2%1%d=>Lcond.end%1%bbentry done
tfg.assumes_around_edge at Lentry%2%d=>Lcond.false4%1%intermediateVal0
tfg.assumes_around_edge at Lentry%2%d=>Lcond.false4%1%intermediateVal0 done
tfg.assumes_around_edge at Lentry%2%d=>Lcond.true%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lcond.true%1%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lcond.end%1%d
=linename
line 7
=pc
Lcond.end5%1%d
=linename
line 7
=pc
Lcond.false%1%d
=linename
line 7
=pc
Lcond.false%2%d
=linename
line 7
=pc
Lcond.false%3%d
=linename
line 7
=pc
Lcond.false4%1%d
=linename
line 7
=pc
Lcond.true%1%d
=linename
line 7
=pc
Lcond.true%2%d
=linename
line 7
=pc
Lcond.true%3%d
=linename
line 7
=pc
Lcond.true%4%d
=linename
line 7
=pc
Lcond.true2%1%d
=linename
line 7
=pc
Lcond.true2%2%d
=linename
line 7
=pc
Lcond.true2%3%d
=linename
line 7
=pc
Lentry%1%d
=linename
line 7
=pc
Lentry%2%d
=linename
line 7
=PC_to_linename done
=PC_to_column_name:
=pc
Lcond.end%1%d
=column_name
 at column 10
=pc
Lcond.end5%1%d
=column_name
 at column 3
=pc
Lcond.false%1%d
=column_name
 at column 38
=pc
Lcond.false%2%d
=column_name
 at column 38
=pc
Lcond.false%3%d
=column_name
 at column 15
=pc
Lcond.false4%1%d
=column_name
 at column 10
=pc
Lcond.true%1%d
=column_name
 at column 18
=pc
Lcond.true%2%d
=column_name
 at column 18
=pc
Lcond.true%3%d
=column_name
 at column 15
=pc
Lcond.true%4%d
=column_name
 at column 15
=pc
Lcond.true2%1%d
=column_name
 at column 28
=pc
Lcond.true2%2%d
=column_name
 at column 28
=pc
Lcond.true2%3%d
=column_name
 at column 15
=pc
Lentry%1%d
=column_name
 at column 10
=pc
Lentry%2%d
=column_name
 at column 10
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lcond.end%1%d
=line_and_column
(line 7 at column 10)
=pc
Lcond.end5%1%d
=line_and_column
(line 7 at column 3)
=pc
Lcond.false%1%d
=line_and_column
(line 7 at column 38)
=pc
Lcond.false%2%d
=line_and_column
(line 7 at column 38)
=pc
Lcond.false%3%d
=line_and_column
(line 7 at column 15)
=pc
Lcond.false4%1%d
=line_and_column
(line 7 at column 10)
=pc
Lcond.true%1%d
=line_and_column
(line 7 at column 18)
=pc
Lcond.true%2%d
=line_and_column
(line 7 at column 18)
=pc
Lcond.true%3%d
=line_and_column
(line 7 at column 15)
=pc
Lcond.true%4%d
=line_and_column
(line 7 at column 15)
=pc
Lcond.true2%1%d
=line_and_column
(line 7 at column 28)
=pc
Lcond.true2%2%d
=line_and_column
(line 7 at column 28)
=pc
Lcond.true2%3%d
=line_and_column
(line 7 at column 15)
=pc
Lentry%1%d
=line_and_column
(line 7 at column 10)
=pc
Lentry%2%d
=line_and_column
(line 7 at column 10)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry : L0%0%d : DSTMEM[(4 + t'{L0%0%d})]_4
input.dst.llvm-%t : L0%0%d : t'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%tobool : L0%0%d : not(t' = 0)
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry : L0%0%d : (4 + t'{L0%0%d})
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset : L0%0%d : (t' + 4)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%left]_4
input.dst.llvm-%tobool1 : L0%0%d : not(input.dst.llvm-%0 = 0)
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset : L0%0%d : (t' + 4)
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%left3]_4
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset : L0%0%d : 8
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset : L0%0%d : (t' + 8)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%right]_4
input.dst.llvm-%cond6.phi.tmpvar.cond.end : L0%0%d : input.dst.llvm-%cond
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%left : L0%0%d : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%left3 : L0%0%d : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset
input.dst.llvm-%cond.phi.tmpvar.cond.true2 : L0%0%d : input.dst.llvm-%1
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset : L0%0%d : 8
input.dst.llvm-%right : L0%0%d : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset
input.dst.llvm-%cond.phi.tmpvar.cond.false : L0%0%d : input.dst.llvm-%2
input.dst.llvm-%cond6.phi.tmpvar.cond.false4 : L0%0%d : t'
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%cond6
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%tobool.Lentry%2%d : L0%0%d : not(t'{L0%0%d} = 0)
input.dst.llvm-%2.Lcond.end%1%bbentry : L0%0%d : DSTMEM[(8 + t'{L0%0%d})]_4
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%cond6.Lcond.end5%1%bbentry
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : L0%0%d : 8
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%tobool1.Lcond.true%4%d : L0%0%d : not(DSTMEM[(4 + t'{L0%0%d})]_4 = 0)
input.dst.llvm-%right.Lcond.end%1%bbentry : L0%0%d : (8 + t'{L0%0%d})
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : L0%0%d : (4 + t'{L0%0%d})
input.dst.llvm-%1.Lcond.end%1%bbentry : L0%0%d : DSTMEM[(4 + t'{L0%0%d})]_4
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : L0%0%d : 0
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : L0%0%d : 4
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%left.Lcond.true%4%d : L0%0%d : (4 + t'{L0%0%d})
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : L0%0%d : 4
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry : L0%0%d : (8 + t'{L0%0%d})
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%0.Lcond.true%4%d : L0%0%d : DSTMEM[(4 + t'{L0%0%d})]_4
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : L0%0%d : 0
input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : L0%0%d : 8
input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : L0%0%d : 4
input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : L0%0%d : DSTMEM[(8 + t'{L0%0%d})]_4
input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : L0%0%d : 4
input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry : L0%0%d : input.dst.llvm-%cond.Lcond.end%1%bbentry
input.dst.llvm-%left3.Lcond.end%1%bbentry : L0%0%d : (4 + t'{L0%0%d})
input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry : L0%0%d : t'{L0%0%d}
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%left
=dst.llvm-%left loop pc: L0%0%d
=dst.llvm-%left val_scevb
=dst.llvm-%left val_scevb scev
=dst.llvm-%left val_scevb scev loop: L0%0%d
=dst.llvm-%left val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%left val_scevb scev scev_expr
1 : 00000000000000000000000000000100b
2 : input.dst.llvm-%t : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : nsw
=dst.llvm-%left val_scevb scev scev_expr done
=dst.llvm-%left val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%left val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%left val_scevb signed lower bound: 32:2147483652
=dst.llvm-%left val_scevb signed upper bound: 32:2147483648
=dst.llvm-%left atuse_scevb
=dst.llvm-%left atuse_scevb scev
=dst.llvm-%left atuse_scevb scev loop: L0%0%d
=dst.llvm-%left atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%left atuse_scevb scev scev_expr
1 : 00000000000000000000000000000100b
2 : input.dst.llvm-%t : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : nsw
=dst.llvm-%left atuse_scevb scev scev_expr done
=dst.llvm-%left atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%left atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%left atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%left atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%left atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
4 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
4 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%left3
=dst.llvm-%left3 loop pc: L0%0%d
=dst.llvm-%left3 val_scevb
=dst.llvm-%left3 val_scevb scev
=dst.llvm-%left3 val_scevb scev loop: L0%0%d
=dst.llvm-%left3 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%left3 val_scevb scev scev_expr
1 : 00000000000000000000000000000100b
2 : input.dst.llvm-%t : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : nsw
=dst.llvm-%left3 val_scevb scev scev_expr done
=dst.llvm-%left3 val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%left3 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%left3 val_scevb signed lower bound: 32:2147483652
=dst.llvm-%left3 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%left3 atuse_scevb
=dst.llvm-%left3 atuse_scevb scev
=dst.llvm-%left3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%left3 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%left3 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000100b
2 : input.dst.llvm-%t : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : nsw
=dst.llvm-%left3 atuse_scevb scev scev_expr done
=dst.llvm-%left3 atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%left3 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%left3 atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%left3 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%left3 atexit_scev nullptr
=dst.llvm-%1
=dst.llvm-%1 loop pc: L0%0%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
5 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
5 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev nullptr
=dst.llvm-%cond
=dst.llvm-%cond loop pc: L0%0%d
=dst.llvm-%cond val_scevb
=dst.llvm-%cond val_scevb scev
=dst.llvm-%cond val_scevb scev loop: L0%0%d
=dst.llvm-%cond val_scevb scev scev_overflow_flag: 
=dst.llvm-%cond val_scevb scev scev_expr
6 : input.dst.llvm-%cond : BV32
=dst.llvm-%cond val_scevb scev scev_expr done
=dst.llvm-%cond val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond val_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond val_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond atuse_scevb
=dst.llvm-%cond atuse_scevb scev
=dst.llvm-%cond atuse_scevb scev loop: L0%0%d
=dst.llvm-%cond atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%cond atuse_scevb scev scev_expr
6 : input.dst.llvm-%cond : BV32
=dst.llvm-%cond atuse_scevb scev scev_expr done
=dst.llvm-%cond atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond atexit_scev nullptr
=dst.llvm-%right
=dst.llvm-%right loop pc: L0%0%d
=dst.llvm-%right val_scevb
=dst.llvm-%right val_scevb scev
=dst.llvm-%right val_scevb scev loop: L0%0%d
=dst.llvm-%right val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%right val_scevb scev scev_expr
7 : 00000000000000000000000000001000b
2 : input.dst.llvm-%t : BV32
8 : scev_op_add(7, 2) : loop L0%0%d : nsw
=dst.llvm-%right val_scevb scev scev_expr done
=dst.llvm-%right val_scevb unsigned lower bound: 32:2147483656
=dst.llvm-%right val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%right val_scevb signed lower bound: 32:2147483656
=dst.llvm-%right val_scevb signed upper bound: 32:2147483648
=dst.llvm-%right atuse_scevb
=dst.llvm-%right atuse_scevb scev
=dst.llvm-%right atuse_scevb scev loop: L0%0%d
=dst.llvm-%right atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%right atuse_scevb scev scev_expr
7 : 00000000000000000000000000001000b
2 : input.dst.llvm-%t : BV32
8 : scev_op_add(7, 2) : loop L0%0%d : nsw
=dst.llvm-%right atuse_scevb scev scev_expr done
=dst.llvm-%right atuse_scevb unsigned lower bound: 32:2147483656
=dst.llvm-%right atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%right atuse_scevb signed lower bound: 32:2147483656
=dst.llvm-%right atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%right atexit_scev nullptr
=dst.llvm-%2
=dst.llvm-%2 loop pc: L0%0%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
9 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
9 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev nullptr
=dst.llvm-%cond6
=dst.llvm-%cond6 loop pc: L0%0%d
=dst.llvm-%cond6 val_scevb
=dst.llvm-%cond6 val_scevb scev
=dst.llvm-%cond6 val_scevb scev loop: L0%0%d
=dst.llvm-%cond6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%cond6 val_scevb scev scev_expr
10 : input.dst.llvm-%cond6 : BV32
=dst.llvm-%cond6 val_scevb scev scev_expr done
=dst.llvm-%cond6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond6 atuse_scevb
=dst.llvm-%cond6 atuse_scevb scev
=dst.llvm-%cond6 atuse_scevb scev loop: L0%0%d
=dst.llvm-%cond6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%cond6 atuse_scevb scev scev_expr
10 : input.dst.llvm-%cond6 : BV32
=dst.llvm-%cond6 atuse_scevb scev scev_expr done
=dst.llvm-%cond6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond6 atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lcond.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=reaching defns for expr 4 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 5 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 6 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=reaching defns for expr 7 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 8 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 9 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%2.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%right.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%1.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%left3.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns done
=Reaching Definitions at Lcond.end5%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=reaching defns for expr 4 edges
  Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
  Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=reaching defns for expr 5 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=reaching defns for expr 8 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 9 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=reaching defns for expr 14 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%2.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%right.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%1.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%left3.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns done
=Reaching Definitions at Lcond.false%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=reaching defns for expr 4 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=reaching defns for expr 6 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 7 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 8 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 9 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 12 edges done
=reaching defns done
=Reaching Definitions at Lcond.false4%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lcond.true%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lcond.true%4%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=reaching defns for expr 4 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=reaching defns for expr 6 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 7 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 8 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 9 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 12 edges done
=reaching defns done
=Reaching Definitions at Lcond.true2%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=reaching defns for expr 4 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=reaching defns for expr 6 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 7 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 8 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 9 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 12 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%t : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 4 edges
  Lcond.end5%1%bbentry=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 5 edges
  Lcond.end5%1%bbentry=>E0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
  Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool1.Lcond.true%4%d : BOOL
=reaching defns for expr 7 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 9 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lcond.end5%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%0.Lcond.true%4%d : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d : BV:32
=reaching defns for expr 14 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 15 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d : BV:32
=reaching defns for expr 16 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%left.Lcond.true%4%d : BV:32
=reaching defns for expr 17 edges
  Lcond.true%1%d=>Lcond.true%4%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%2.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%right.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lcond.false%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%left3.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lcond.true2%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lcond.end%1%bbentry=>Lcond.end5%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lcond.false4%1%intermediateVal0=>Lcond.end5%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.phi.tmpvar.cond.true2.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%t
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.3.total_offset.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%tobool.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%2.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%cond6.Lcond.end5%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.1.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.2.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%tobool1.Lcond.true%4%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%right.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.3.total_offset.Lcond.true%4%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%1.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.1.offset.Lcond.true%4%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.intermediate.gepoffset.2.offset.Lcond.true%4%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.1.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%left.Lcond.true%4%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%308921ee99e6de7858b28885538a83d4.gepoffset.2.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.gepoffset.3.total_offset.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lcond.true%4%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.1.total_offset.Lcond.true%4%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%bd89eae6323cbdd41c65d352d644f123.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b9fb84d23279bd972961e42bedde6b4.gepoffset.2.total_offset.Lcond.true%4%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%308921ee99e6de7858b28885538a83d4.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond6.phi.tmpvar.cond.end.Lcond.end5%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%left3.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%cond6.phi.tmpvar.cond.false4.Lcond.end5%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-inductive-tree
=LhsExpr
1 : $spec-arg-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.0e1025 } : INT
4 : $llvm-arg-0 : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : $llvm-md : ARRAY[BV:32 -> BV:8]
8 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Indxform1 : BV:32
17 : Lambda2 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(17, 18) : BV:32
20 : select(7, 8, 9, 19, 12, 13) : BV:32
21 : lambda(17, 20) : FUNCTION[BV:32 -> BV:32]
22 : Lambda0 : BV:32
23 : 0 { 0x0 +1.0e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : ite(24, 23, 25) : BV:32
27 : unit : UNIT
28 : select(7, 8, 9, 22, 12, 13) : BV:32
29 : prod(28, 5, 16) : PROD[BV:32,BV:32,BV:32]
30 : sum(26, 27, 29) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
31 : lambda(22, 30) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
32 : ind(2, 3, 4, 5, 15, 16, 21, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
33 : eq(1, 32) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
pointer-implements-inductive-tree
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.0e1025 } : INT
4 : $llvm-ret : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : $llvm-md : ARRAY[BV:32 -> BV:8]
8 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Indxform1 : BV:32
17 : Lambda2 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(17, 18) : BV:32
20 : select(7, 8, 9, 19, 12, 13) : BV:32
21 : lambda(17, 20) : FUNCTION[BV:32 -> BV:32]
22 : Lambda0 : BV:32
23 : 0 { 0x0 +1.0e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : ite(24, 23, 25) : BV:32
27 : unit : UNIT
28 : select(7, 8, 9, 22, 12, 13) : BV:32
29 : prod(28, 5, 16) : PROD[BV:32,BV:32,BV:32]
30 : sum(26, 27, 29) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
31 : lambda(22, 30) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
32 : ind(2, 3, 4, 5, 15, 16, 21, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
33 : eq(1, 32) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%t : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%t : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%1%d#{0,0})*((((L2%1%d#{0,0}=>L2%2%bbentry#{0,0})*(L2%2%bbentry#{0,0}=>L2%15%bbentry#{0,0}))+((L2%1%d#{0,0}=>L2%4%bbentry#{0,0})*((L2%4%bbentry#{0,0}=>L2%8%d#{0,0})*((((L2%8%d#{0,0}=>L2%9%bbentry#{0,0})*(L2%9%bbentry#{0,0}=>L2%13%bbentry#{0,0}))+((L2%8%d#{0,0}=>L2%11%bbentry#{0,0})*(L2%11%bbentry#{0,0}=>L2%13%bbentry#{0,0})))*(L2%13%bbentry#{0,0}=>L2%15%bbentry#{0,0})))))*(L2%15%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>Lentry%2%d#{0,0})*((((Lentry%2%d#{0,0}=>Lcond.false4%1%intermediateVal0#{0,0})*(Lcond.false4%1%intermediateVal0#{0,0}=>Lcond.end5%1%bbentry#{0,0}))+((Lentry%2%d#{0,0}=>Lcond.true%1%d#{0,0})*((Lcond.true%1%d#{0,0}=>Lcond.true%4%d#{0,0})*((((Lcond.true%4%d#{0,0}=>Lcond.false%1%d#{0,0})*(Lcond.false%1%d#{0,0}=>Lcond.end%1%bbentry#{0,0}))+((Lcond.true%4%d#{0,0}=>Lcond.true2%1%d#{0,0})*(Lcond.true2%1%d#{0,0}=>Lcond.end%1%bbentry#{0,0})))*(Lcond.end%1%bbentry#{0,0}=>Lcond.end5%1%bbentry#{0,0})))))*(Lcond.end5%1%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-inductive-tree
=LhsExpr
1 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.0e1025 } : INT
4 : input.dst.llvm-%t : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Indxform1 : BV:32
17 : Lambda2 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(17, 18) : BV:32
20 : select(7, 8, 9, 19, 12, 13) : BV:32
21 : lambda(17, 20) : FUNCTION[BV:32 -> BV:32]
22 : Lambda0 : BV:32
23 : 0 { 0x0 +1.0e129 } : BV:32
24 : eq(23, 22) : BOOL
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : ite(24, 23, 25) : BV:32
27 : unit : UNIT
28 : select(7, 8, 9, 22, 12, 13) : BV:32
29 : prod(28, 5, 16) : PROD[BV:32,BV:32,BV:32]
30 : sum(26, 27, 29) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
31 : lambda(22, 30) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
32 : ind(2, 3, 4, 5, 15, 16, 21, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
33 : eq(1, 32) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%t : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce12.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce12 52b589b8829bd4765a955e72c1c1c73c
=input.spec-%var-t-0
1 : 849586 { 0xcf6b2 +1.10127854e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : 2 { 0x2 +1.0e1025 } : INT
7 : Indxform340 : BV:32
8 : Lambda546 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Indxform341 : BV:32
11 : Lambda547 : BV:32
12 : lambda(11, 11) : FUNCTION[BV:32 -> BV:32]
13 : Lambda548 : BV:32
14 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
15 : 1590712393 { 0x5ed05849 +1.62769424e62 } : BV:32
16 : prod(15, 7, 10) : PROD[BV:32,BV:32,BV:32]
17 : sum(14, 2, 16) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
18 : lambda(13, 17) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
19 : ind(5, 6, 3, 7, 9, 10, 12, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
20 : Indxform342 : BV:32
21 : Lambda549 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Indxform343 : BV:32
24 : Lambda550 : BV:32
25 : lambda(24, 24) : FUNCTION[BV:32 -> BV:32]
26 : Lambda551 : BV:32
27 : prod(15, 20, 23) : PROD[BV:32,BV:32,BV:32]
28 : sum(14, 2, 27) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
29 : lambda(26, 28) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
30 : ind(5, 6, 3, 20, 22, 23, 25, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
31 : prod(3, 19, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
32 : sum(3, 2, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
33 : Indxform344 : BV:32
34 : Lambda552 : BV:32
35 : lambda(34, 34) : FUNCTION[BV:32 -> BV:32]
36 : Indxform345 : BV:32
37 : Lambda553 : BV:32
38 : lambda(37, 37) : FUNCTION[BV:32 -> BV:32]
39 : Lambda554 : BV:32
40 : prod(15, 33, 36) : PROD[BV:32,BV:32,BV:32]
41 : sum(14, 2, 40) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
42 : lambda(39, 41) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
43 : ind(5, 6, 3, 33, 35, 36, 38, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
44 : Indxform346 : BV:32
45 : Lambda555 : BV:32
46 : lambda(45, 45) : FUNCTION[BV:32 -> BV:32]
47 : Indxform347 : BV:32
48 : Lambda556 : BV:32
49 : lambda(48, 48) : FUNCTION[BV:32 -> BV:32]
50 : Lambda557 : BV:32
51 : prod(15, 44, 47) : PROD[BV:32,BV:32,BV:32]
52 : sum(14, 2, 51) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
53 : lambda(50, 52) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
54 : ind(5, 6, 3, 44, 46, 47, 49, 53) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
55 : prod(3, 43, 54) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
56 : sum(3, 2, 55) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
57 : prod(4, 32, 56) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
58 : sum(3, 2, 57) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
59 : Indxform348 : BV:32
60 : Lambda558 : BV:32
61 : lambda(60, 60) : FUNCTION[BV:32 -> BV:32]
62 : Indxform349 : BV:32
63 : Lambda559 : BV:32
64 : lambda(63, 63) : FUNCTION[BV:32 -> BV:32]
65 : Lambda560 : BV:32
66 : prod(15, 59, 62) : PROD[BV:32,BV:32,BV:32]
67 : sum(14, 2, 66) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
68 : lambda(65, 67) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
69 : ind(5, 6, 3, 59, 61, 62, 64, 68) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
70 : Indxform350 : BV:32
71 : Lambda561 : BV:32
72 : lambda(71, 71) : FUNCTION[BV:32 -> BV:32]
73 : Indxform351 : BV:32
74 : Lambda562 : BV:32
75 : lambda(74, 74) : FUNCTION[BV:32 -> BV:32]
76 : Lambda563 : BV:32
77 : prod(15, 70, 73) : PROD[BV:32,BV:32,BV:32]
78 : sum(14, 2, 77) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
79 : lambda(76, 78) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
80 : ind(5, 6, 3, 70, 72, 73, 75, 79) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
81 : prod(4, 69, 80) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
82 : sum(14, 2, 81) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
83 : Indxform352 : BV:32
84 : Lambda564 : BV:32
85 : lambda(84, 84) : FUNCTION[BV:32 -> BV:32]
86 : Indxform353 : BV:32
87 : Lambda565 : BV:32
88 : lambda(87, 87) : FUNCTION[BV:32 -> BV:32]
89 : Lambda566 : BV:32
90 : prod(15, 83, 86) : PROD[BV:32,BV:32,BV:32]
91 : sum(14, 2, 90) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
92 : lambda(89, 91) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
93 : ind(5, 6, 3, 83, 85, 86, 88, 92) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
94 : Indxform354 : BV:32
95 : Lambda567 : BV:32
96 : lambda(95, 95) : FUNCTION[BV:32 -> BV:32]
97 : Indxform355 : BV:32
98 : Lambda568 : BV:32
99 : lambda(98, 98) : FUNCTION[BV:32 -> BV:32]
100 : Lambda569 : BV:32
101 : prod(15, 94, 97) : PROD[BV:32,BV:32,BV:32]
102 : sum(14, 2, 101) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
103 : lambda(100, 102) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
104 : ind(5, 6, 3, 94, 96, 97, 99, 103) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
105 : prod(4, 93, 104) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
106 : sum(14, 2, 105) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
107 : prod(4, 82, 106) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
108 : sum(3, 2, 107) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
109 : prod(3, 58, 108) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
110 : sum(1, 2, 109) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
111 : sym_const(110) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-node-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform374 : BV:32
4 : Lambda600 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda601 : BV:32
7 : unit : UNIT
8 : Indxform373 : BV:32
9 : Lambda598 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda599 : BV:32
12 : Indxform372 : BV:32
13 : Lambda594 : BV:32
14 : lambda(13, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda595 : BV:32
16 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
17 : 732654482 { 0x2bab6b92 +1.33922028e216 } : BV:32
18 : 1229985915 { 0x4950187b +1.62574708e19 } : BV:32
19 : sum(18, 7, 8) : SUM[UNIT,BV:32]
20 : prod(17, 12, 19) : PROD[BV:32,BV:32,SUM[UNIT,BV:32]]
21 : sum(16, 7, 20) : SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]
22 : lambda(15, 21) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]]
23 : ind(2, 2, 1, 12, 14, 22) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]]
24 : Indxform375 : BV:32
25 : Lambda596 : BV:32
26 : lambda(25, 25) : FUNCTION[BV:32 -> BV:32]
27 : Lambda597 : BV:32
28 : prod(17, 3, 24) : PROD[BV:32,BV:32,BV:32]
29 : sum(16, 7, 28) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
30 : lambda(27, 29) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
31 : ind(2, 2, 1, 24, 26, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type0]]]]
32 : prod(1, 23, 31) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]
33 : lambda(11, 32) : FUNCTION[BV:32 -> PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]]
34 : ind(2, 2, 1, 8, 10, 33) : IND[Type1,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,DECL[Type1]]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]
35 : sum(1, 7, 34) : IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]
36 : lambda(6, 35) : FUNCTION[BV:32 -> IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]]
37 : ind(2, 2, 1, 3, 5, 36) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
38 : Indxform377 : BV:32
39 : Lambda608 : BV:32
40 : lambda(39, 39) : FUNCTION[BV:32 -> BV:32]
41 : Lambda609 : BV:32
42 : Indxform376 : BV:32
43 : Lambda602 : BV:32
44 : lambda(43, 43) : FUNCTION[BV:32 -> BV:32]
45 : Lambda603 : BV:32
46 : prod(17, 42, 38) : PROD[BV:32,BV:32,BV:32]
47 : sum(1, 7, 46) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
48 : lambda(45, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
49 : ind(2, 2, 1, 42, 44, 48) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
50 : Indxform379 : BV:32
51 : Lambda606 : BV:32
52 : lambda(51, 51) : FUNCTION[BV:32 -> BV:32]
53 : Lambda607 : BV:32
54 : Indxform378 : BV:32
55 : Lambda604 : BV:32
56 : lambda(55, 55) : FUNCTION[BV:32 -> BV:32]
57 : Lambda605 : BV:32
58 : 1755031828 { 0x689ba914 +1.21609735e82 } : BV:32
59 : sum(58, 7, 54) : SUM[UNIT,BV:32]
60 : prod(17, 59, 50) : PROD[BV:32,SUM[UNIT,BV:32],BV:32]
61 : lambda(57, 60) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32],BV:32]]
62 : ind(2, 2, 1, 54, 56, 61) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],BV:32]]
63 : sum(1, 7, 62) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
64 : lambda(53, 63) : FUNCTION[BV:32 -> IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]]
65 : ind(2, 2, 1, 50, 52, 64) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
66 : prod(1, 49, 65) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]
67 : sum(1, 7, 66) : SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]
68 : lambda(41, 67) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]]
69 : ind(2, 2, 1, 38, 40, 68) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
70 : prod(1, 37, 69) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
71 : sym_const(70) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-right-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : 2 { 0x2 +1.0e1025 } : INT
5 : Indxform364 : BV:32
6 : Lambda582 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Indxform365 : BV:32
9 : Lambda583 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda584 : BV:32
12 : 900308045 { 0x35a99c4d +1.32508242e236 } : BV:32
13 : prod(12, 5, 8) : PROD[BV:32,BV:32,BV:32]
14 : sum(1, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
15 : lambda(11, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
16 : ind(3, 4, 1, 5, 7, 8, 10, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
17 : Indxform366 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 18) : FUNCTION[BV:32 -> BV:32]
20 : Indxform367 : BV:32
21 : Lambda586 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Lambda587 : BV:32
24 : prod(12, 17, 20) : PROD[BV:32,BV:32,BV:32]
25 : sum(1, 2, 24) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
26 : lambda(23, 25) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
27 : ind(3, 4, 1, 17, 19, 20, 22, 26) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
28 : prod(1, 16, 27) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
29 : sum(1, 2, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : Indxform368 : BV:32
31 : Lambda588 : BV:32
32 : lambda(31, 31) : FUNCTION[BV:32 -> BV:32]
33 : Indxform369 : BV:32
34 : Lambda589 : BV:32
35 : lambda(34, 34) : FUNCTION[BV:32 -> BV:32]
36 : Lambda590 : BV:32
37 : prod(12, 30, 33) : PROD[BV:32,BV:32,BV:32]
38 : sum(1, 2, 37) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
39 : lambda(36, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
40 : ind(3, 4, 1, 30, 32, 33, 35, 39) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
41 : Indxform370 : BV:32
42 : Lambda591 : BV:32
43 : lambda(42, 42) : FUNCTION[BV:32 -> BV:32]
44 : Indxform371 : BV:32
45 : Lambda592 : BV:32
46 : lambda(45, 45) : FUNCTION[BV:32 -> BV:32]
47 : Lambda593 : BV:32
48 : prod(12, 41, 44) : PROD[BV:32,BV:32,BV:32]
49 : sum(1, 2, 48) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
50 : lambda(47, 49) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
51 : ind(3, 4, 1, 41, 43, 44, 46, 50) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
52 : prod(1, 40, 51) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
53 : sum(1, 2, 52) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
54 : prod(1, 29, 53) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
55 : sum(1, 2, 54) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
56 : sym_const(55) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-left-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : 2 { 0x2 +1.0e1025 } : INT
7 : Indxform356 : BV:32
8 : Lambda570 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Indxform357 : BV:32
11 : Lambda571 : BV:32
12 : lambda(11, 11) : FUNCTION[BV:32 -> BV:32]
13 : Lambda572 : BV:32
14 : 690967696 { 0x292f5490 +1.36976814e211 } : BV:32
15 : prod(14, 7, 10) : PROD[BV:32,BV:32,BV:32]
16 : sum(1, 2, 15) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
17 : lambda(13, 16) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
18 : ind(5, 6, 1, 7, 9, 10, 12, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
19 : Indxform358 : BV:32
20 : Lambda573 : BV:32
21 : lambda(20, 20) : FUNCTION[BV:32 -> BV:32]
22 : Indxform359 : BV:32
23 : Lambda574 : BV:32
24 : lambda(23, 23) : FUNCTION[BV:32 -> BV:32]
25 : Lambda575 : BV:32
26 : prod(14, 19, 22) : PROD[BV:32,BV:32,BV:32]
27 : sum(1, 2, 26) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
28 : lambda(25, 27) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
29 : ind(5, 6, 1, 19, 21, 22, 24, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : prod(4, 18, 29) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
31 : sum(3, 2, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
32 : Indxform360 : BV:32
33 : Lambda576 : BV:32
34 : lambda(33, 33) : FUNCTION[BV:32 -> BV:32]
35 : Indxform361 : BV:32
36 : Lambda577 : BV:32
37 : lambda(36, 36) : FUNCTION[BV:32 -> BV:32]
38 : Lambda578 : BV:32
39 : prod(14, 32, 35) : PROD[BV:32,BV:32,BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
41 : lambda(38, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
42 : ind(5, 6, 1, 32, 34, 35, 37, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
43 : Indxform362 : BV:32
44 : Lambda579 : BV:32
45 : lambda(44, 44) : FUNCTION[BV:32 -> BV:32]
46 : Indxform363 : BV:32
47 : Lambda580 : BV:32
48 : lambda(47, 47) : FUNCTION[BV:32 -> BV:32]
49 : Lambda581 : BV:32
50 : prod(14, 43, 46) : PROD[BV:32,BV:32,BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
52 : lambda(49, 51) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
53 : ind(5, 6, 1, 43, 45, 46, 48, 52) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
54 : prod(4, 42, 53) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
55 : sum(3, 2, 54) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
56 : prod(1, 31, 55) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
57 : sum(1, 2, 56) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
58 : sym_const(57) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-val-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%t
1 : 2128293461 { 0x7edb2e55 +1.71235144e126 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 85, [ 4294967293; 4294967293 ] -> 46, [ 4294967294; 4294967294 ] -> 219, [ 4294967295; 4294967295 ] -> 126, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform382 : BV:32
5 : Lambda616 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda617 : BV:32
8 : unit : UNIT
9 : Indxform381 : BV:32
10 : Lambda614 : BV:32
11 : lambda(10, 10) : FUNCTION[BV:32 -> BV:32]
12 : Lambda615 : BV:32
13 : Indxform380 : BV:32
14 : Lambda610 : BV:32
15 : lambda(14, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda611 : BV:32
17 : 1877714038 { 0x6feba476 +1.84095644e96 } : BV:32
18 : 724264573 { 0x2b2b667d +1.33906519e215 } : BV:32
19 : sum(18, 8, 9) : SUM[UNIT,BV:32]
20 : prod(17, 13, 19) : PROD[BV:32,BV:32,SUM[UNIT,BV:32]]
21 : sum(3, 8, 20) : SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]
22 : lambda(16, 21) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]]
23 : ind(2, 2, 3, 13, 15, 22) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]]
24 : Indxform383 : BV:32
25 : Lambda612 : BV:32
26 : lambda(25, 25) : FUNCTION[BV:32 -> BV:32]
27 : Lambda613 : BV:32
28 : prod(17, 4, 24) : PROD[BV:32,BV:32,BV:32]
29 : sum(3, 8, 28) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
30 : lambda(27, 29) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
31 : ind(2, 2, 3, 24, 26, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type0]]]]
32 : prod(1, 23, 31) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]
33 : lambda(12, 32) : FUNCTION[BV:32 -> PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]]
34 : ind(2, 2, 3, 9, 11, 33) : IND[Type1,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,DECL[Type1]]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]
35 : sum(3, 8, 34) : IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]
36 : lambda(7, 35) : FUNCTION[BV:32 -> IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]]
37 : ind(2, 2, 3, 4, 6, 36) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
38 : Indxform385 : BV:32
39 : Lambda624 : BV:32
40 : lambda(39, 39) : FUNCTION[BV:32 -> BV:32]
41 : Lambda625 : BV:32
42 : Indxform384 : BV:32
43 : Lambda618 : BV:32
44 : lambda(43, 43) : FUNCTION[BV:32 -> BV:32]
45 : Lambda619 : BV:32
46 : prod(17, 42, 38) : PROD[BV:32,BV:32,BV:32]
47 : sum(3, 8, 46) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
48 : lambda(45, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
49 : ind(2, 2, 3, 42, 44, 48) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
50 : Indxform387 : BV:32
51 : Lambda622 : BV:32
52 : lambda(51, 51) : FUNCTION[BV:32 -> BV:32]
53 : Lambda623 : BV:32
54 : Indxform386 : BV:32
55 : Lambda620 : BV:32
56 : lambda(55, 55) : FUNCTION[BV:32 -> BV:32]
57 : Lambda621 : BV:32
58 : 2022280237 { 0x78898c2d +1.7459032e114 } : BV:32
59 : sum(58, 8, 54) : SUM[UNIT,BV:32]
60 : prod(17, 59, 50) : PROD[BV:32,SUM[UNIT,BV:32],BV:32]
61 : lambda(57, 60) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32],BV:32]]
62 : ind(2, 2, 3, 54, 56, 61) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],BV:32]]
63 : sum(3, 8, 62) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
64 : lambda(53, 63) : FUNCTION[BV:32 -> IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]]
65 : ind(2, 2, 3, 50, 52, 64) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
66 : prod(1, 49, 65) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]
67 : sum(3, 8, 66) : SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]
68 : lambda(41, 67) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]]
69 : ind(2, 2, 3, 38, 40, 68) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
70 : prod(1, 37, 69) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
71 : sym_const(70) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-t-0.0
1 : 849586 { 0xcf6b2 +1.10127854e129 } : BV:32
=input.spec-%var-t-0.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-t-0.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3463339090
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece cvc4.ce13.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin cvc4.ce13 d561a952cc7bacc5dba3bec315ab9971
=input.spec-%var-t-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : 2 { 0x2 +1.0e1025 } : INT
5 : Indxform398 : BV:32
6 : Lambda641 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Indxform399 : BV:32
9 : Lambda642 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda643 : BV:32
12 : 370774774 { 0x161992f6 +1.19979739e173 } : BV:32
13 : prod(12, 5, 8) : PROD[BV:32,BV:32,BV:32]
14 : sum(1, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
15 : lambda(11, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
16 : ind(3, 4, 1, 5, 7, 8, 10, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
17 : Indxform400 : BV:32
18 : Lambda644 : BV:32
19 : lambda(18, 18) : FUNCTION[BV:32 -> BV:32]
20 : Indxform401 : BV:32
21 : Lambda645 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Lambda646 : BV:32
24 : prod(12, 17, 20) : PROD[BV:32,BV:32,BV:32]
25 : sum(1, 2, 24) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
26 : lambda(23, 25) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
27 : ind(3, 4, 1, 17, 19, 20, 22, 26) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
28 : prod(1, 16, 27) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
29 : sum(1, 2, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : Indxform402 : BV:32
31 : Lambda647 : BV:32
32 : lambda(31, 31) : FUNCTION[BV:32 -> BV:32]
33 : Indxform403 : BV:32
34 : Lambda648 : BV:32
35 : lambda(34, 34) : FUNCTION[BV:32 -> BV:32]
36 : Lambda649 : BV:32
37 : prod(12, 30, 33) : PROD[BV:32,BV:32,BV:32]
38 : sum(1, 2, 37) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
39 : lambda(36, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
40 : ind(3, 4, 1, 30, 32, 33, 35, 39) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
41 : Indxform404 : BV:32
42 : Lambda650 : BV:32
43 : lambda(42, 42) : FUNCTION[BV:32 -> BV:32]
44 : Indxform405 : BV:32
45 : Lambda651 : BV:32
46 : lambda(45, 45) : FUNCTION[BV:32 -> BV:32]
47 : Lambda652 : BV:32
48 : prod(12, 41, 44) : PROD[BV:32,BV:32,BV:32]
49 : sum(1, 2, 48) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
50 : lambda(47, 49) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
51 : ind(3, 4, 1, 41, 43, 44, 46, 50) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
52 : prod(1, 40, 51) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
53 : sum(1, 2, 52) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
54 : prod(1, 29, 53) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
55 : sum(1, 2, 54) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
56 : Indxform406 : BV:32
57 : Lambda653 : BV:32
58 : lambda(57, 57) : FUNCTION[BV:32 -> BV:32]
59 : Indxform407 : BV:32
60 : Lambda654 : BV:32
61 : lambda(60, 60) : FUNCTION[BV:32 -> BV:32]
62 : Lambda655 : BV:32
63 : prod(12, 56, 59) : PROD[BV:32,BV:32,BV:32]
64 : sum(1, 2, 63) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
65 : lambda(62, 64) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
66 : ind(3, 4, 1, 56, 58, 59, 61, 65) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
67 : Indxform408 : BV:32
68 : Lambda656 : BV:32
69 : lambda(68, 68) : FUNCTION[BV:32 -> BV:32]
70 : Indxform409 : BV:32
71 : Lambda657 : BV:32
72 : lambda(71, 71) : FUNCTION[BV:32 -> BV:32]
73 : Lambda658 : BV:32
74 : prod(12, 67, 70) : PROD[BV:32,BV:32,BV:32]
75 : sum(1, 2, 74) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
76 : lambda(73, 75) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
77 : ind(3, 4, 1, 67, 69, 70, 72, 76) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
78 : prod(1, 66, 77) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
79 : sum(1, 2, 78) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
80 : Indxform410 : BV:32
81 : Lambda659 : BV:32
82 : lambda(81, 81) : FUNCTION[BV:32 -> BV:32]
83 : Indxform411 : BV:32
84 : Lambda660 : BV:32
85 : lambda(84, 84) : FUNCTION[BV:32 -> BV:32]
86 : Lambda661 : BV:32
87 : prod(12, 80, 83) : PROD[BV:32,BV:32,BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
89 : lambda(86, 88) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
90 : ind(3, 4, 1, 80, 82, 83, 85, 89) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
91 : Indxform412 : BV:32
92 : Lambda662 : BV:32
93 : lambda(92, 92) : FUNCTION[BV:32 -> BV:32]
94 : Indxform413 : BV:32
95 : Lambda663 : BV:32
96 : lambda(95, 95) : FUNCTION[BV:32 -> BV:32]
97 : Lambda664 : BV:32
98 : prod(12, 91, 94) : PROD[BV:32,BV:32,BV:32]
99 : sum(1, 2, 98) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
100 : lambda(97, 99) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
101 : ind(3, 4, 1, 91, 93, 94, 96, 100) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
102 : prod(1, 90, 101) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
103 : sum(1, 2, 102) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
104 : prod(1, 79, 103) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
105 : sum(1, 2, 104) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
106 : prod(1, 55, 105) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
107 : sum(1, 2, 106) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
108 : sym_const(107) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-node-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform432 : BV:32
4 : Lambda695 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda696 : BV:32
7 : unit : UNIT
8 : Indxform431 : BV:32
9 : Lambda693 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda694 : BV:32
12 : Indxform430 : BV:32
13 : Lambda689 : BV:32
14 : lambda(13, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda690 : BV:32
16 : 602577016 { 0x23ea9878 +1.83277797e200 } : BV:32
17 : 144028415 { 0x895b2ff +1.16952502e146 } : BV:32
18 : sum(17, 7, 8) : SUM[UNIT,BV:32]
19 : prod(16, 12, 18) : PROD[BV:32,BV:32,SUM[UNIT,BV:32]]
20 : sum(1, 7, 19) : SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]
21 : lambda(15, 20) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]]
22 : ind(2, 2, 1, 12, 14, 21) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]]
23 : Indxform433 : BV:32
24 : Lambda691 : BV:32
25 : lambda(24, 24) : FUNCTION[BV:32 -> BV:32]
26 : Lambda692 : BV:32
27 : prod(16, 3, 23) : PROD[BV:32,BV:32,BV:32]
28 : sum(1, 7, 27) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
29 : lambda(26, 28) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
30 : ind(2, 2, 1, 23, 25, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type0]]]]
31 : prod(1, 22, 30) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]
32 : lambda(11, 31) : FUNCTION[BV:32 -> PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]]
33 : ind(2, 2, 1, 8, 10, 32) : IND[Type1,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,DECL[Type1]]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]
34 : sum(1, 7, 33) : IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]
35 : lambda(6, 34) : FUNCTION[BV:32 -> IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]]
36 : ind(2, 2, 1, 3, 5, 35) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
37 : Indxform435 : BV:32
38 : Lambda703 : BV:32
39 : lambda(38, 38) : FUNCTION[BV:32 -> BV:32]
40 : Lambda704 : BV:32
41 : Indxform434 : BV:32
42 : Lambda697 : BV:32
43 : lambda(42, 42) : FUNCTION[BV:32 -> BV:32]
44 : Lambda698 : BV:32
45 : prod(16, 41, 37) : PROD[BV:32,BV:32,BV:32]
46 : sum(1, 7, 45) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
47 : lambda(44, 46) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
48 : ind(2, 2, 1, 41, 43, 47) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
49 : Indxform437 : BV:32
50 : Lambda701 : BV:32
51 : lambda(50, 50) : FUNCTION[BV:32 -> BV:32]
52 : Lambda702 : BV:32
53 : Indxform436 : BV:32
54 : Lambda699 : BV:32
55 : lambda(54, 54) : FUNCTION[BV:32 -> BV:32]
56 : Lambda700 : BV:32
57 : 1239459902 { 0x49e0a83e +1.75513434e20 } : BV:32
58 : sum(57, 7, 53) : SUM[UNIT,BV:32]
59 : prod(16, 58, 49) : PROD[BV:32,SUM[UNIT,BV:32],BV:32]
60 : lambda(56, 59) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32],BV:32]]
61 : ind(2, 2, 1, 53, 55, 60) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],BV:32]]
62 : sum(1, 7, 61) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
63 : lambda(52, 62) : FUNCTION[BV:32 -> IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]]
64 : ind(2, 2, 1, 49, 51, 63) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
65 : prod(1, 48, 64) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]
66 : sum(1, 7, 65) : SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]
67 : lambda(40, 66) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]]
68 : ind(2, 2, 1, 37, 39, 67) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
69 : prod(1, 36, 68) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
70 : sym_const(69) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-right-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : 2 { 0x2 +1.0e1025 } : INT
5 : Indxform422 : BV:32
6 : Lambda677 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Indxform423 : BV:32
9 : Lambda678 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda679 : BV:32
12 : 2096965068 { 0x7cfd25cc +1.97771596e122 } : BV:32
13 : prod(12, 5, 8) : PROD[BV:32,BV:32,BV:32]
14 : sum(1, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
15 : lambda(11, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
16 : ind(3, 4, 1, 5, 7, 8, 10, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
17 : Indxform424 : BV:32
18 : Lambda680 : BV:32
19 : lambda(18, 18) : FUNCTION[BV:32 -> BV:32]
20 : Indxform425 : BV:32
21 : Lambda681 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Lambda682 : BV:32
24 : prod(12, 17, 20) : PROD[BV:32,BV:32,BV:32]
25 : sum(1, 2, 24) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
26 : lambda(23, 25) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
27 : ind(3, 4, 1, 17, 19, 20, 22, 26) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
28 : prod(1, 16, 27) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
29 : sum(1, 2, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : Indxform426 : BV:32
31 : Lambda683 : BV:32
32 : lambda(31, 31) : FUNCTION[BV:32 -> BV:32]
33 : Indxform427 : BV:32
34 : Lambda684 : BV:32
35 : lambda(34, 34) : FUNCTION[BV:32 -> BV:32]
36 : Lambda685 : BV:32
37 : prod(12, 30, 33) : PROD[BV:32,BV:32,BV:32]
38 : sum(1, 2, 37) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
39 : lambda(36, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
40 : ind(3, 4, 1, 30, 32, 33, 35, 39) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
41 : Indxform428 : BV:32
42 : Lambda686 : BV:32
43 : lambda(42, 42) : FUNCTION[BV:32 -> BV:32]
44 : Indxform429 : BV:32
45 : Lambda687 : BV:32
46 : lambda(45, 45) : FUNCTION[BV:32 -> BV:32]
47 : Lambda688 : BV:32
48 : prod(12, 41, 44) : PROD[BV:32,BV:32,BV:32]
49 : sum(1, 2, 48) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
50 : lambda(47, 49) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
51 : ind(3, 4, 1, 41, 43, 44, 46, 50) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
52 : prod(1, 40, 51) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
53 : sum(1, 2, 52) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
54 : prod(1, 29, 53) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
55 : sum(1, 2, 54) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
56 : sym_const(55) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-left-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : 2 { 0x2 +1.0e1025 } : INT
5 : Indxform414 : BV:32
6 : Lambda665 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Indxform415 : BV:32
9 : Lambda666 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda667 : BV:32
12 : 74349727 { 0x46e7c9f +1.86317813e137 } : BV:32
13 : prod(12, 5, 8) : PROD[BV:32,BV:32,BV:32]
14 : sum(1, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
15 : lambda(11, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
16 : ind(3, 4, 1, 5, 7, 8, 10, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
17 : Indxform416 : BV:32
18 : Lambda668 : BV:32
19 : lambda(18, 18) : FUNCTION[BV:32 -> BV:32]
20 : Indxform417 : BV:32
21 : Lambda669 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Lambda670 : BV:32
24 : prod(12, 17, 20) : PROD[BV:32,BV:32,BV:32]
25 : sum(1, 2, 24) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
26 : lambda(23, 25) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
27 : ind(3, 4, 1, 17, 19, 20, 22, 26) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
28 : prod(1, 16, 27) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
29 : sum(1, 2, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : Indxform418 : BV:32
31 : Lambda671 : BV:32
32 : lambda(31, 31) : FUNCTION[BV:32 -> BV:32]
33 : Indxform419 : BV:32
34 : Lambda672 : BV:32
35 : lambda(34, 34) : FUNCTION[BV:32 -> BV:32]
36 : Lambda673 : BV:32
37 : prod(12, 30, 33) : PROD[BV:32,BV:32,BV:32]
38 : sum(1, 2, 37) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
39 : lambda(36, 38) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
40 : ind(3, 4, 1, 30, 32, 33, 35, 39) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
41 : Indxform420 : BV:32
42 : Lambda674 : BV:32
43 : lambda(42, 42) : FUNCTION[BV:32 -> BV:32]
44 : Indxform421 : BV:32
45 : Lambda675 : BV:32
46 : lambda(45, 45) : FUNCTION[BV:32 -> BV:32]
47 : Lambda676 : BV:32
48 : prod(12, 41, 44) : PROD[BV:32,BV:32,BV:32]
49 : sum(1, 2, 48) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
50 : lambda(47, 49) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
51 : ind(3, 4, 1, 41, 43, 44, 46, 50) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
52 : prod(1, 40, 51) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
53 : sum(1, 2, 52) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
54 : prod(1, 29, 53) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
55 : sum(1, 2, 54) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
56 : sym_const(55) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-val-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%t
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform440 : BV:32
4 : Lambda711 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda712 : BV:32
7 : unit : UNIT
8 : Indxform439 : BV:32
9 : Lambda709 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda710 : BV:32
12 : Indxform438 : BV:32
13 : Lambda705 : BV:32
14 : lambda(13, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda706 : BV:32
16 : 1946294655 { 0x7402197f +1.1640307e105 } : BV:32
17 : 185758567 { 0xb127367 +1.14414680e151 } : BV:32
18 : sum(17, 7, 8) : SUM[UNIT,BV:32]
19 : prod(16, 12, 18) : PROD[BV:32,BV:32,SUM[UNIT,BV:32]]
20 : sum(1, 7, 19) : SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]
21 : lambda(15, 20) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]]
22 : ind(2, 2, 1, 12, 14, 21) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]]
23 : Indxform441 : BV:32
24 : Lambda707 : BV:32
25 : lambda(24, 24) : FUNCTION[BV:32 -> BV:32]
26 : Lambda708 : BV:32
27 : prod(16, 3, 23) : PROD[BV:32,BV:32,BV:32]
28 : sum(1, 7, 27) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
29 : lambda(26, 28) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
30 : ind(2, 2, 1, 23, 25, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type0]]]]
31 : prod(1, 22, 30) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]
32 : lambda(11, 31) : FUNCTION[BV:32 -> PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]]
33 : ind(2, 2, 1, 8, 10, 32) : IND[Type1,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,DECL[Type1]]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]
34 : sum(1, 7, 33) : IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]
35 : lambda(6, 34) : FUNCTION[BV:32 -> IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]]
36 : ind(2, 2, 1, 3, 5, 35) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
37 : Indxform443 : BV:32
38 : Lambda719 : BV:32
39 : lambda(38, 38) : FUNCTION[BV:32 -> BV:32]
40 : Lambda720 : BV:32
41 : Indxform442 : BV:32
42 : Lambda713 : BV:32
43 : lambda(42, 42) : FUNCTION[BV:32 -> BV:32]
44 : Lambda714 : BV:32
45 : prod(16, 41, 37) : PROD[BV:32,BV:32,BV:32]
46 : sum(1, 7, 45) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
47 : lambda(44, 46) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
48 : ind(2, 2, 1, 41, 43, 47) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
49 : Indxform445 : BV:32
50 : Lambda717 : BV:32
51 : lambda(50, 50) : FUNCTION[BV:32 -> BV:32]
52 : Lambda718 : BV:32
53 : Indxform444 : BV:32
54 : Lambda715 : BV:32
55 : lambda(54, 54) : FUNCTION[BV:32 -> BV:32]
56 : Lambda716 : BV:32
57 : 1324356175 { 0x4ef0124f +1.87555873e30 } : BV:32
58 : sum(57, 7, 53) : SUM[UNIT,BV:32]
59 : prod(16, 58, 49) : PROD[BV:32,SUM[UNIT,BV:32],BV:32]
60 : lambda(56, 59) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32],BV:32]]
61 : ind(2, 2, 1, 53, 55, 60) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],BV:32]]
62 : sum(1, 7, 61) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
63 : lambda(52, 62) : FUNCTION[BV:32 -> IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]]
64 : ind(2, 2, 1, 49, 51, 63) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
65 : prod(1, 48, 64) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]
66 : sum(1, 7, 65) : SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]
67 : lambda(40, 66) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]]
68 : ind(2, 2, 1, 37, 39, 67) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
69 : prod(1, 36, 68) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
70 : sym_const(69) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-t-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2519741915
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce14.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce14 7985bd6dffff76e6bfa7e864bc8bff
=input.spec-%var-t-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : 2 { 0x2 +1.0e1025 } : INT
6 : Indxform456 : BV:32
7 : Lambda736 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Indxform457 : BV:32
10 : Lambda737 : BV:32
11 : lambda(10, 10) : FUNCTION[BV:32 -> BV:32]
12 : Lambda738 : BV:32
13 : 1901301930 { 0x715390aa +1.65285229e99 } : BV:32
14 : prod(13, 6, 9) : PROD[BV:32,BV:32,BV:32]
15 : sum(1, 2, 14) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
16 : lambda(12, 15) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
17 : ind(4, 5, 1, 6, 8, 9, 11, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
18 : Indxform458 : BV:32
19 : Lambda739 : BV:32
20 : lambda(19, 19) : FUNCTION[BV:32 -> BV:32]
21 : Indxform459 : BV:32
22 : Lambda740 : BV:32
23 : lambda(22, 22) : FUNCTION[BV:32 -> BV:32]
24 : Lambda741 : BV:32
25 : prod(13, 18, 21) : PROD[BV:32,BV:32,BV:32]
26 : sum(1, 2, 25) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
27 : lambda(24, 26) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
28 : ind(4, 5, 1, 18, 20, 21, 23, 27) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
29 : prod(3, 17, 28) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
30 : sum(1, 2, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
31 : Indxform460 : BV:32
32 : Lambda742 : BV:32
33 : lambda(32, 32) : FUNCTION[BV:32 -> BV:32]
34 : Indxform461 : BV:32
35 : Lambda743 : BV:32
36 : lambda(35, 35) : FUNCTION[BV:32 -> BV:32]
37 : Lambda744 : BV:32
38 : prod(13, 31, 34) : PROD[BV:32,BV:32,BV:32]
39 : sum(1, 2, 38) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
40 : lambda(37, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
41 : ind(4, 5, 1, 31, 33, 34, 36, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
42 : Indxform462 : BV:32
43 : Lambda745 : BV:32
44 : lambda(43, 43) : FUNCTION[BV:32 -> BV:32]
45 : Indxform463 : BV:32
46 : Lambda746 : BV:32
47 : lambda(46, 46) : FUNCTION[BV:32 -> BV:32]
48 : Lambda747 : BV:32
49 : prod(13, 42, 45) : PROD[BV:32,BV:32,BV:32]
50 : sum(1, 2, 49) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
51 : lambda(48, 50) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
52 : ind(4, 5, 1, 42, 44, 45, 47, 51) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
53 : prod(3, 41, 52) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
54 : sum(1, 2, 53) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
55 : prod(3, 30, 54) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
56 : sum(1, 2, 55) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
57 : Indxform464 : BV:32
58 : Lambda748 : BV:32
59 : lambda(58, 58) : FUNCTION[BV:32 -> BV:32]
60 : Indxform465 : BV:32
61 : Lambda749 : BV:32
62 : lambda(61, 61) : FUNCTION[BV:32 -> BV:32]
63 : Lambda750 : BV:32
64 : 398565687 { 0x17c1a137 +1.51273238e176 } : BV:32
65 : prod(13, 57, 60) : PROD[BV:32,BV:32,BV:32]
66 : sum(64, 2, 65) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
67 : lambda(63, 66) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
68 : ind(4, 5, 1, 57, 59, 60, 62, 67) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
69 : Indxform466 : BV:32
70 : Lambda751 : BV:32
71 : lambda(70, 70) : FUNCTION[BV:32 -> BV:32]
72 : Indxform467 : BV:32
73 : Lambda752 : BV:32
74 : lambda(73, 73) : FUNCTION[BV:32 -> BV:32]
75 : Lambda753 : BV:32
76 : prod(13, 69, 72) : PROD[BV:32,BV:32,BV:32]
77 : sum(64, 2, 76) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
78 : lambda(75, 77) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
79 : ind(4, 5, 1, 69, 71, 72, 74, 78) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
80 : prod(13, 68, 79) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
81 : sum(1, 2, 80) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
82 : Indxform468 : BV:32
83 : Lambda754 : BV:32
84 : lambda(83, 83) : FUNCTION[BV:32 -> BV:32]
85 : Indxform469 : BV:32
86 : Lambda755 : BV:32
87 : lambda(86, 86) : FUNCTION[BV:32 -> BV:32]
88 : Lambda756 : BV:32
89 : prod(13, 82, 85) : PROD[BV:32,BV:32,BV:32]
90 : sum(64, 2, 89) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
91 : lambda(88, 90) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
92 : ind(4, 5, 1, 82, 84, 85, 87, 91) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
93 : Indxform470 : BV:32
94 : Lambda757 : BV:32
95 : lambda(94, 94) : FUNCTION[BV:32 -> BV:32]
96 : Indxform471 : BV:32
97 : Lambda758 : BV:32
98 : lambda(97, 97) : FUNCTION[BV:32 -> BV:32]
99 : Lambda759 : BV:32
100 : prod(13, 93, 96) : PROD[BV:32,BV:32,BV:32]
101 : sum(64, 2, 100) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
102 : lambda(99, 101) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
103 : ind(4, 5, 1, 93, 95, 96, 98, 102) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
104 : prod(13, 92, 103) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
105 : sum(1, 2, 104) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
106 : prod(3, 81, 105) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
107 : sum(1, 2, 106) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
108 : prod(3, 56, 107) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
109 : sum(1, 2, 108) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
110 : sym_const(109) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-node-0.L2%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform482 : BV:32
5 : Lambda778 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda779 : BV:32
8 : unit : UNIT
9 : Indxform481 : BV:32
10 : Lambda776 : BV:32
11 : lambda(10, 10) : FUNCTION[BV:32 -> BV:32]
12 : Lambda777 : BV:32
13 : Indxform480 : BV:32
14 : Lambda772 : BV:32
15 : lambda(14, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda773 : BV:32
17 : 180486506 { 0xac2016a +1.51566815e150 } : BV:32
18 : 679485074 { 0x28801e92 +1.93293e210 } : BV:32
19 : sum(18, 8, 9) : SUM[UNIT,BV:32]
20 : prod(17, 13, 19) : PROD[BV:32,BV:32,SUM[UNIT,BV:32]]
21 : sum(3, 8, 20) : SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]
22 : lambda(16, 21) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]]
23 : ind(2, 2, 3, 13, 15, 22) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]]
24 : Indxform483 : BV:32
25 : Lambda774 : BV:32
26 : lambda(25, 25) : FUNCTION[BV:32 -> BV:32]
27 : Lambda775 : BV:32
28 : prod(17, 4, 24) : PROD[BV:32,BV:32,BV:32]
29 : sum(3, 8, 28) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
30 : lambda(27, 29) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
31 : ind(2, 2, 3, 24, 26, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type0]]]]
32 : prod(3, 23, 31) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]
33 : lambda(12, 32) : FUNCTION[BV:32 -> PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]]
34 : ind(2, 2, 3, 9, 11, 33) : IND[Type1,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,DECL[Type1]]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]
35 : sum(3, 8, 34) : IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]
36 : lambda(7, 35) : FUNCTION[BV:32 -> IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]]
37 : ind(2, 2, 3, 4, 6, 36) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
38 : Indxform485 : BV:32
39 : Lambda786 : BV:32
40 : lambda(39, 39) : FUNCTION[BV:32 -> BV:32]
41 : Lambda787 : BV:32
42 : Indxform484 : BV:32
43 : Lambda780 : BV:32
44 : lambda(43, 43) : FUNCTION[BV:32 -> BV:32]
45 : Lambda781 : BV:32
46 : prod(17, 42, 38) : PROD[BV:32,BV:32,BV:32]
47 : sum(3, 8, 46) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
48 : lambda(45, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
49 : ind(2, 2, 3, 42, 44, 48) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
50 : Indxform487 : BV:32
51 : Lambda784 : BV:32
52 : lambda(51, 51) : FUNCTION[BV:32 -> BV:32]
53 : Lambda785 : BV:32
54 : Indxform486 : BV:32
55 : Lambda782 : BV:32
56 : lambda(55, 55) : FUNCTION[BV:32 -> BV:32]
57 : Lambda783 : BV:32
58 : 115162584 { 0x6dd3dd8 +1.72844982e142 } : BV:32
59 : sum(58, 8, 54) : SUM[UNIT,BV:32]
60 : prod(17, 59, 50) : PROD[BV:32,SUM[UNIT,BV:32],BV:32]
61 : lambda(57, 60) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32],BV:32]]
62 : ind(2, 2, 3, 54, 56, 61) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],BV:32]]
63 : sum(3, 8, 62) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
64 : lambda(53, 63) : FUNCTION[BV:32 -> IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]]
65 : ind(2, 2, 3, 50, 52, 64) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
66 : prod(3, 49, 65) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]
67 : sum(3, 8, 66) : SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]
68 : lambda(41, 67) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]]
69 : ind(2, 2, 3, 38, 40, 68) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
70 : prod(1, 37, 69) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
71 : sym_const(70) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-right-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : 2 { 0x2 +1.0e1025 } : INT
5 : Indxform476 : BV:32
6 : Lambda766 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Indxform477 : BV:32
9 : Lambda767 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda768 : BV:32
12 : 621777074 { 0x250f90b2 +1.12160325e203 } : BV:32
13 : prod(12, 5, 8) : PROD[BV:32,BV:32,BV:32]
14 : sum(1, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
15 : lambda(11, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
16 : ind(3, 4, 1, 5, 7, 8, 10, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
17 : Indxform478 : BV:32
18 : Lambda769 : BV:32
19 : lambda(18, 18) : FUNCTION[BV:32 -> BV:32]
20 : Indxform479 : BV:32
21 : Lambda770 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Lambda771 : BV:32
24 : prod(12, 17, 20) : PROD[BV:32,BV:32,BV:32]
25 : sum(1, 2, 24) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
26 : lambda(23, 25) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
27 : ind(3, 4, 1, 17, 19, 20, 22, 26) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
28 : prod(1, 16, 27) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
29 : sum(1, 2, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : sym_const(29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-left-0.L2%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : 2 { 0x2 +1.0e1025 } : INT
5 : Indxform472 : BV:32
6 : Lambda760 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Indxform473 : BV:32
9 : Lambda761 : BV:32
10 : lambda(9, 9) : FUNCTION[BV:32 -> BV:32]
11 : Lambda762 : BV:32
12 : 1289292177 { 0x4cd90991 +1.69560444e26 } : BV:32
13 : prod(12, 5, 8) : PROD[BV:32,BV:32,BV:32]
14 : sum(1, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
15 : lambda(11, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
16 : ind(3, 4, 1, 5, 7, 8, 10, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
17 : Indxform474 : BV:32
18 : Lambda763 : BV:32
19 : lambda(18, 18) : FUNCTION[BV:32 -> BV:32]
20 : Indxform475 : BV:32
21 : Lambda764 : BV:32
22 : lambda(21, 21) : FUNCTION[BV:32 -> BV:32]
23 : Lambda765 : BV:32
24 : prod(12, 17, 20) : PROD[BV:32,BV:32,BV:32]
25 : sum(1, 2, 24) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
26 : lambda(23, 25) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
27 : ind(3, 4, 1, 17, 19, 20, 22, 26) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
28 : prod(1, 16, 27) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
29 : sum(1, 2, 28) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
30 : sym_const(29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
=input.spec-%var-val-0.L2%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%t
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform490 : BV:32
5 : Lambda794 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda795 : BV:32
8 : unit : UNIT
9 : Indxform489 : BV:32
10 : Lambda792 : BV:32
11 : lambda(10, 10) : FUNCTION[BV:32 -> BV:32]
12 : Lambda793 : BV:32
13 : Indxform488 : BV:32
14 : Lambda788 : BV:32
15 : lambda(14, 14) : FUNCTION[BV:32 -> BV:32]
16 : Lambda789 : BV:32
17 : 98569499 { 0x5e00d1b +1.75039994e140 } : BV:32
18 : 77066078 { 0x497ef5e +1.18699240e138 } : BV:32
19 : sum(18, 8, 9) : SUM[UNIT,BV:32]
20 : prod(17, 13, 19) : PROD[BV:32,BV:32,SUM[UNIT,BV:32]]
21 : sum(3, 8, 20) : SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]
22 : lambda(16, 21) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,SUM[UNIT,BV:32]]]]
23 : ind(2, 2, 3, 13, 15, 22) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]]
24 : Indxform491 : BV:32
25 : Lambda790 : BV:32
26 : lambda(25, 25) : FUNCTION[BV:32 -> BV:32]
27 : Lambda791 : BV:32
28 : prod(17, 4, 24) : PROD[BV:32,BV:32,BV:32]
29 : sum(3, 8, 28) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
30 : lambda(27, 29) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
31 : ind(2, 2, 3, 24, 26, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type0]]]]
32 : prod(3, 23, 31) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]
33 : lambda(12, 32) : FUNCTION[BV:32 -> PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,BV:32]]]],IND[Type1,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type1]]]]]]
34 : ind(2, 2, 3, 9, 11, 33) : IND[Type1,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],SUM[UNIT,DECL[Type1]]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]
35 : sum(3, 8, 34) : IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]
36 : lambda(7, 35) : FUNCTION[BV:32 -> IND[Type1,SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type1]]]],IND[Type2,SUM[UNIT,PROD[BV:32,BV:32,DECL[Type2]]]]]]]]
37 : ind(2, 2, 3, 4, 6, 36) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
38 : Indxform493 : BV:32
39 : Lambda802 : BV:32
40 : lambda(39, 39) : FUNCTION[BV:32 -> BV:32]
41 : Lambda803 : BV:32
42 : Indxform492 : BV:32
43 : Lambda796 : BV:32
44 : lambda(43, 43) : FUNCTION[BV:32 -> BV:32]
45 : Lambda797 : BV:32
46 : prod(17, 42, 38) : PROD[BV:32,BV:32,BV:32]
47 : sum(3, 8, 46) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
48 : lambda(45, 47) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
49 : ind(2, 2, 3, 42, 44, 48) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
50 : Indxform495 : BV:32
51 : Lambda800 : BV:32
52 : lambda(51, 51) : FUNCTION[BV:32 -> BV:32]
53 : Lambda801 : BV:32
54 : Indxform494 : BV:32
55 : Lambda798 : BV:32
56 : lambda(55, 55) : FUNCTION[BV:32 -> BV:32]
57 : Lambda799 : BV:32
58 : 1213657159 { 0x4856f047 +1.67920768e17 } : BV:32
59 : sum(58, 8, 54) : SUM[UNIT,BV:32]
60 : prod(17, 59, 50) : PROD[BV:32,SUM[UNIT,BV:32],BV:32]
61 : lambda(57, 60) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32],BV:32]]
62 : ind(2, 2, 3, 54, 56, 61) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],BV:32]]
63 : sum(3, 8, 62) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]
64 : lambda(53, 63) : FUNCTION[BV:32 -> IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]]]
65 : ind(2, 2, 3, 50, 52, 64) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
66 : prod(3, 49, 65) : PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]
67 : sum(3, 8, 66) : SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]
68 : lambda(41, 67) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],BV:32]]],IND[Type1,SUM[UNIT,PROD[BV:32,DECL[Type1],DECL[Type1]]]]]]]
69 : ind(2, 2, 3, 38, 40, 68) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
70 : prod(1, 37, 69) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
71 : sym_const(70) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-t-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-left-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-t-0.2.1.2.2.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L2%8%d.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-right-0.L2%8%d.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.1.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node2-0.L2%13%bbentry.2.2.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3083859139
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
pointer-implements-inductive-tree
=LhsExpr
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.0e1025 } : INT
4 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Indxform1 : BV:32
17 : Lambda2 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(17, 18) : BV:32
20 : select(7, 8, 9, 19, 12, 13) : BV:32
21 : lambda(17, 20) : FUNCTION[BV:32 -> BV:32]
22 : Lambda0 : BV:32
23 : 0 { 0x0 +1.0e129 } : BV:32
24 : eq(23, 22) : BOOL
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : ite(24, 23, 25) : BV:32
27 : unit : UNIT
28 : select(7, 8, 9, 22, 12, 13) : BV:32
29 : prod(28, 5, 16) : PROD[BV:32,BV:32,BV:32]
30 : sum(26, 27, 29) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
31 : lambda(22, 30) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
32 : ind(2, 3, 4, 5, 15, 16, 21, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
33 : eq(1, 32) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%t : BV:32
2 : 12 { 0xc +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(4, 1) : BOOL
6 : not(5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvadd(7, 1) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 8, 9, 14) : BV:32
16 : islangaligned(15, 2) : BOOL
17 : and(10, 16) : BOOL
18 : and(10, 17) : BOOL
19 : isgepoffset(8, 7) : BOOL
20 : 1 { 0x1 } : BOOL
21 : isgepoffset(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : and(19, 22) : BOOL
24 : and(18, 23) : BOOL
25 : eq(24, 20) : BOOL
26 : implies(6, 25) : BOOL
27 : eq(4, 15) : BOOL
28 : not(27) : BOOL
29 : or(27, 28) : BOOL
30 : andnot1(5, 29) : BOOL
31 : not(28) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvadd(32, 1) : BV:32
34 : islangaligned(33, 9) : BOOL
35 : select(11, 12, 13, 33, 9, 14) : BV:32
36 : islangaligned(35, 2) : BOOL
37 : and(34, 36) : BOOL
38 : and(34, 37) : BOOL
39 : isgepoffset(33, 32) : BOOL
40 : and(39, 22) : BOOL
41 : and(38, 40) : BOOL
42 : eq(41, 20) : BOOL
43 : implies(31, 42) : BOOL
44 : implies(28, 25) : BOOL
45 : and(43, 44) : BOOL
46 : eq(45, 20) : BOOL
47 : implies(30, 46) : BOOL
48 : and(3, 26, 47) : BOOL
49 : or(5, 30) : BOOL
50 : input.spec-%var-t-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
51 : 0 { 0x0 +1.0e1025 } : INT
52 : sum_is(50, 51) : BOOL
53 : 1 { 0x1 +1.0e1025 } : INT
54 : sum_is(50, 53) : BOOL
55 : sum_get(50, 53) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]],SUM[UNIT,DECL[Type0]]]]
56 : prod_get(55, 53) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
57 : sum_is(56, 51) : BOOL
58 : sum_is(56, 53) : BOOL
59 : or(57, 58) : BOOL
60 : and(54, 59) : BOOL
61 : or(52, 60) : BOOL
62 : implies(49, 61) : BOOL
63 : implies(48, 62) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
pointer-implements-inductive-tree
=LhsExpr
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 2 { 0x2 +1.0e1025 } : INT
4 : input.dst.llvm-%cond6.Lcond.end5%1%bbentry : BV:32
5 : Indxform0 : BV:32
6 : Lambda1 : BV:32
7 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
8 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
9 : memlabel-top : MEMLABEL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(6, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(7, 8, 9, 11, 12, 13) : BV:32
15 : lambda(6, 14) : FUNCTION[BV:32 -> BV:32]
16 : Indxform1 : BV:32
17 : Lambda2 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(17, 18) : BV:32
20 : select(7, 8, 9, 19, 12, 13) : BV:32
21 : lambda(17, 20) : FUNCTION[BV:32 -> BV:32]
22 : Lambda0 : BV:32
23 : 0 { 0x0 +1.0e129 } : BV:32
24 : eq(23, 22) : BOOL
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : ite(24, 23, 25) : BV:32
27 : unit : UNIT
28 : select(7, 8, 9, 22, 12, 13) : BV:32
29 : prod(28, 5, 16) : PROD[BV:32,BV:32,BV:32]
30 : sum(26, 27, 29) : SUM[UNIT,PROD[BV:32,BV:32,BV:32]]
31 : lambda(22, 30) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32,BV:32]]]
32 : ind(2, 3, 4, 5, 15, 16, 21, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0],DECL[Type0]]]]
33 : eq(1, 32) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140392 : input.dst.llvm-%t : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140402 : islangaligned(140392, 140401) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
merged-predicate
=LhsExpr
140300 : 0 { 0x0 +1.0e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140507 : eq(140300, 140392) : BOOL
140508 : not(140507) : BOOL
140367 : 4 { 0x4 +1.47e129 } : BV:32
140519 : bvadd(140367, 140392) : BV:32
140354 : 4 { 0x4 +1.0e1025 } : INT
140634 : islangaligned(140519, 140354) : BOOL
140393 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140394 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140500 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140355 : 0 { 0x0 } : BOOL
140605 : select(140393, 140394, 140500, 140519, 140354, 140355) : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140636 : islangaligned(140605, 140401) : BOOL
140639 : and(140634, 140636) : BOOL
140641 : and(140634, 140639) : BOOL
140543 : isgepoffset(140519, 140367) : BOOL
140275 : 1 { 0x1 } : BOOL
140512 : isgepoffset(140392, 140300) : BOOL
140625 : and(140275, 140512) : BOOL
140629 : and(140543, 140625) : BOOL
140870 : and(140641, 140629) : BOOL
140873 : eq(140870, 140275) : BOOL
140880 : implies(140508, 140873) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
fold-conjunct
=LhsExpr
140300 : 0 { 0x0 +1.0e129 } : BV:32
140392 : input.dst.llvm-%t : BV:32
140507 : eq(140300, 140392) : BOOL
140393 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140394 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140500 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140367 : 4 { 0x4 +1.47e129 } : BV:32
140519 : bvadd(140367, 140392) : BV:32
140354 : 4 { 0x4 +1.0e1025 } : INT
140355 : 0 { 0x0 } : BOOL
140605 : select(140393, 140394, 140500, 140519, 140354, 140355) : BV:32
140611 : eq(140300, 140605) : BOOL
140613 : not(140611) : BOOL
140767 : or(140611, 140613) : BOOL
140775 : andnot1(140507, 140767) : BOOL
140756 : not(140613) : BOOL
140372 : 8 { 0x8 +1.95e129 } : BV:32
140527 : bvadd(140372, 140392) : BV:32
140654 : islangaligned(140527, 140354) : BOOL
140645 : select(140393, 140394, 140500, 140527, 140354, 140355) : BV:32
140401 : 12 { 0xc +1.0e1025 } : INT
140656 : islangaligned(140645, 140401) : BOOL
140659 : and(140654, 140656) : BOOL
140661 : and(140654, 140659) : BOOL
140562 : isgepoffset(140527, 140372) : BOOL
140275 : 1 { 0x1 } : BOOL
140512 : isgepoffset(140392, 140300) : BOOL
140625 : and(140275, 140512) : BOOL
140649 : and(140562, 140625) : BOOL
140869 : and(140661, 140649) : BOOL
140871 : eq(140869, 140275) : BOOL
140894 : implies(140756, 140871) : BOOL
140634 : islangaligned(140519, 140354) : BOOL
140636 : islangaligned(140605, 140401) : BOOL
140639 : and(140634, 140636) : BOOL
140641 : and(140634, 140639) : BOOL
140543 : isgepoffset(140519, 140367) : BOOL
140629 : and(140543, 140625) : BOOL
140870 : and(140641, 140629) : BOOL
140873 : eq(140870, 140275) : BOOL
140895 : implies(140613, 140873) : BOOL
140896 : and(140894, 140895) : BOOL
140872 : eq(140896, 140275) : BOOL
140874 : implies(140775, 140872) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
