==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x11 $x12)))
 (let (($x19 (and $x5 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x30 (not $x23)))
 (let (($x109 (= $x30 false)))
 (let (($x110 (= $x109 true)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x93)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x96)))
 (let (($x99 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x87 $x99)))
 (let ((?x83 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x83 (_ bv1 32))))
 (let (($x89 (= $x87 $x88)))
 (let (($x45 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x86 (=> $x82 $x45)))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (let (($x85 (= $x82 $x84)))
 (let (($x103 (and (and (and $x85 $x86) $x89) $x100)))
 (let (($x104 (= $x103 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%opt)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x59 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x59 (or false (or false (and true (or $x53 $x54)))))))
 (let (($x29 (=> (and $x30 $x59) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x11 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x11)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x19 $x6)))
 (let (($x37 (and $x16 $x5)))
 (let (($x14 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x14 $x37)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x48)))))))
 (let (($x44 (and $x28 $x33)))
 (let (($x32 (= $x44 true)))
 (let (($x42 (= $x32 true)))
 (let (($x43 (= $x42 true)))
 (let (($x63 (and $x43 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x105 (and $x80 $x104)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x106 (and $x18 $x105)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x107 (and $x7 $x106)))
 (let (($x108 (and $x45 $x107)))
 (let (($x111 (=> $x108 $x110)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x30 (not $x23)))
 (let (($x109 (= $x30 false)))
 (let (($x110 (= $x109 true)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x93)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x96)))
 (let (($x99 (= input.spec-%var-opt-0.2 ?x98)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x100 (=> $x87 $x99)))
 (let ((?x83 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x83 (_ bv1 32))))
 (let (($x89 (= $x87 $x88)))
 (let (($x45 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x86 (=> $x82 $x45)))
 (let (($x84 (= ?x83 (_ bv0 32))))
 (let (($x85 (= $x82 $x84)))
 (let (($x103 (and (and (and $x85 $x86) $x89) $x100)))
 (let (($x104 (= $x103 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%opt)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x59 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x59 (or false (or false (and true (or $x53 $x54)))))))
 (let (($x29 (=> (and $x30 $x59) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x11 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x11)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x19 $x6)))
 (let (($x37 (and $x16 $x5)))
 (let (($x14 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x14 $x37)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x48)))))))
 (let (($x44 (and $x28 $x33)))
 (let (($x32 (= $x44 true)))
 (let (($x42 (= $x32 true)))
 (let (($x43 (= $x42 true)))
 (let (($x63 (and $x43 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x105 (and $x80 $x104)))
 (let (($x18 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x106 (and $x18 $x105)))
 (let (($x7 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x107 (and $x7 $x106)))
 (let (($x108 (and $x45 $x107)))
 (let (($x111 (=> $x108 $x110)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #x42f70005
                     #xff)
              #x42f70007
              #x32)
       #x42f70006
       #xde))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x32defffd)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42f70004)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42f70007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2158588 32) (_ bv253 8)) (_ bv2158589 32) (_ bv255 8)) (_ bv2158590 32) (_ bv255 8)) (_ bv2158591 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2158591 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2158588 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x34 (not $x9)))
 (let (($x121 (=> $x34 $x98)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x67 (= true $x74)))
 (let (($x68 (=> $x34 $x67)))
 (let (($x120 (and $x74 $x68)))
 (let (($x122 (=> (and $x120 $x34) $x98)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x111)))
 (let (($x24 (=> $x98 $x112)))
 (let ((?x92 (ite $x9 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x92 (_ bv1 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x39 (= false false)))
 (let (($x91 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x96 (=> $x91 $x39)))
 (let (($x90 (= ?x92 (_ bv0 32))))
 (let (($x93 (= $x91 $x90)))
 (let (($x113 (and (and (and $x93 $x96) $x100) $x24)))
 (let (($x114 (= $x113 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x45 (concat ?x82 ?x80)))))
 (let (($x89 (= ?x88 input.dst.llvm-%opt)))
 (let (($x102 (= $x89 true)))
 (let (($x97 (= $x102 true)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= $x75 true)))
 (let (($x71 (= $x70 true)))
 (let (($x66 (= $x68 true)))
 (let (($x69 (= $x66 true)))
 (let (($x73 (= $x69 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x58 (and $x55 $x57)))
 (let (($x33 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x58)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x27)))))))
 (let (($x29 (and $x59 $x60)))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (and $x62 $x71)))
 (let (($x76 (and $x72 $x73)))
 (let (($x77 (and $x76 $x71)))
 (let (($x94 (and $x77 $x97)))
 (let (($x115 (and $x94 $x114)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x11 $x115)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x117 (and $x6 $x116)))
 (let (($x118 (and $x39 $x117)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x14 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x19 (=> $x14 (or false (or false (and true (or $x22 $x25)))))))
 (let (($x13 (=> (and $x34 $x14) (or false (or false (and true (or $x22 $x25)))))))
 (let (($x119 (and $x13 $x118)))
 (let (($x125 (=> $x119 $x124)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x34 (not $x9)))
 (let (($x121 (=> $x34 $x98)))
 (let (($x74 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x67 (= true $x74)))
 (let (($x68 (=> $x34 $x67)))
 (let (($x120 (and $x74 $x68)))
 (let (($x122 (=> (and $x120 $x34) $x98)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x106)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x109)))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x111)))
 (let (($x24 (=> $x98 $x112)))
 (let ((?x92 (ite $x9 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x92 (_ bv1 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x39 (= false false)))
 (let (($x91 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x96 (=> $x91 $x39)))
 (let (($x90 (= ?x92 (_ bv0 32))))
 (let (($x93 (= $x91 $x90)))
 (let (($x113 (and (and (and $x93 $x96) $x100) $x24)))
 (let (($x114 (= $x113 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x45 (concat ?x82 ?x80)))))
 (let (($x89 (= ?x88 input.dst.llvm-%opt)))
 (let (($x102 (= $x89 true)))
 (let (($x97 (= $x102 true)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= $x75 true)))
 (let (($x71 (= $x70 true)))
 (let (($x66 (= $x68 true)))
 (let (($x69 (= $x66 true)))
 (let (($x73 (= $x69 true)))
 (let ((?x56 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x58 (and $x55 $x57)))
 (let (($x33 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x58)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x27)))))))
 (let (($x29 (and $x59 $x60)))
 (let (($x12 (= $x29 true)))
 (let (($x61 (= $x12 true)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (and $x62 $x71)))
 (let (($x76 (and $x72 $x73)))
 (let (($x77 (and $x76 $x71)))
 (let (($x94 (and $x77 $x97)))
 (let (($x115 (and $x94 $x114)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x116 (and $x11 $x115)))
 (let (($x6 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x117 (and $x6 $x116)))
 (let (($x118 (and $x39 $x117)))
 (let (($x25 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x14 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x19 (=> $x14 (or false (or false (and true (or $x22 $x25)))))))
 (let (($x13 (=> (and $x34 $x14) (or false (or false (and true (or $x22 $x25)))))))
 (let (($x119 (and $x13 $x118)))
 (let (($x125 (=> $x119 $x124)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x111)))
 (let (($x125 (= (_ bv0 32) ?x24)))
 (let (($x126 (= $x125 true)))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x24)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x43 $x113)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x98 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x110 (bvuge ?x98 (_ bv1 32))))
 (let (($x107 (= $x43 $x110)))
 (let (($x14 (= false false)))
 (let (($x31 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x31 $x14)))
 (let (($x99 (= ?x98 (_ bv0 32))))
 (let (($x100 (= $x31 $x99)))
 (let (($x117 (and (and (and $x100 $x65) $x107) $x114)))
 (let (($x118 (= $x117 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x97 (concat ?x86 ?x80)))))
 (let (($x90 (= ?x92 input.dst.llvm-%opt)))
 (let (($x93 (= $x90 true)))
 (let (($x39 (= $x93 true)))
 (let (($x76 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x77 (= true $x76)))
 (let (($x7 (not $x21)))
 (let (($x78 (=> $x7 $x77)))
 (let (($x101 (and $x76 $x78)))
 (let (($x87 (= $x101 true)))
 (let (($x84 (= $x87 true)))
 (let (($x85 (= $x84 true)))
 (let (($x72 (= $x7 true)))
 (let (($x67 (= $x72 true)))
 (let (($x68 (= $x67 true)))
 (let ((?x61 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x58 $x29)))
 (let (($x63 (and $x12 $x62)))
 (let (($x30 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x30 $x63)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x74 (and $x57 $x64)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= $x75 true)))
 (let (($x71 (= $x70 true)))
 (let (($x66 (and $x71 $x68)))
 (let (($x45 (and $x66 $x85)))
 (let (($x96 (and $x45 $x39)))
 (let (($x119 (and $x96 $x118)))
 (let (($x120 (and $x43 $x119)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x121 (and $x51 $x120)))
 (let (($x44 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x122 (and $x44 $x121)))
 (let (($x123 (and $x14 $x122)))
 (let (($x28 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x36 (or false (or false (and true (or $x41 $x28)))))))
 (let (($x34 (=> (and $x7 $x36) (or false (or false (and true (or $x41 $x28)))))))
 (let (($x124 (and $x34 $x123)))
 (let (($x17 (=> $x124 $x126)))
 (not $x17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x111)))
 (let (($x125 (= (_ bv0 32) ?x24)))
 (let (($x126 (= $x125 true)))
 (let (($x113 (= input.spec-%var-opt-0.2 ?x24)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x114 (=> $x43 $x113)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x98 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x110 (bvuge ?x98 (_ bv1 32))))
 (let (($x107 (= $x43 $x110)))
 (let (($x14 (= false false)))
 (let (($x31 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x31 $x14)))
 (let (($x99 (= ?x98 (_ bv0 32))))
 (let (($x100 (= $x31 $x99)))
 (let (($x117 (and (and (and $x100 $x65) $x107) $x114)))
 (let (($x118 (= $x117 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x97 (concat ?x86 ?x80)))))
 (let (($x90 (= ?x92 input.dst.llvm-%opt)))
 (let (($x93 (= $x90 true)))
 (let (($x39 (= $x93 true)))
 (let (($x76 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x77 (= true $x76)))
 (let (($x7 (not $x21)))
 (let (($x78 (=> $x7 $x77)))
 (let (($x101 (and $x76 $x78)))
 (let (($x87 (= $x101 true)))
 (let (($x84 (= $x87 true)))
 (let (($x85 (= $x84 true)))
 (let (($x72 (= $x7 true)))
 (let (($x67 (= $x72 true)))
 (let (($x68 (= $x67 true)))
 (let ((?x61 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x58 $x29)))
 (let (($x63 (and $x12 $x62)))
 (let (($x30 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x30 $x63)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x74 (and $x57 $x64)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= $x75 true)))
 (let (($x71 (= $x70 true)))
 (let (($x66 (and $x71 $x68)))
 (let (($x45 (and $x66 $x85)))
 (let (($x96 (and $x45 $x39)))
 (let (($x119 (and $x96 $x118)))
 (let (($x120 (and $x43 $x119)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x121 (and $x51 $x120)))
 (let (($x44 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x122 (and $x44 $x121)))
 (let (($x123 (and $x14 $x122)))
 (let (($x28 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x36 (or false (or false (and true (or $x41 $x28)))))))
 (let (($x34 (=> (and $x7 $x36) (or false (or false (and true (or $x41 $x28)))))))
 (let (($x124 (and $x34 $x123)))
 (let (($x17 (=> $x124 $x126)))
 (not $x17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x21a269b4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xc0)
                                #x21a269b6
                                #x8a)
                         #x898a14c3
                         #x89)
                  #x21a269b5
                  #x14)))
  (store (store (store (store a!1 #x898a14c2 #x8a) #x898a14c1 #x40)
                #x21a269b7
                #x89)
         #x898a14c0
         #x60)))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x898a4060)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x898a4060)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x898a4060)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x898a14c0)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x21a269b4)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x21a269b7)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1610575760 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147549164 32) (_ bv144 8)) (_ bv2147549165 32) (_ bv111 8)) (_ bv2147549166 32) (_ bv255 8)) (_ bv2147549167 32) (_ bv95 8)) (_ bv1610575760 32) (_ bv1 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147549164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147549164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147549167 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x24)))
 (let ((?x20 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x20)))
 (let (($x82 (= ?x27 ?x114)))
 (let (($x5 (= $x82 true)))
 (let (($x117 (= input.spec-%var-opt-0.2 ?x114)))
 (let (($x37 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x37 $x117)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x43 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x43 (_ bv1 32))))
 (let (($x106 (= $x37 $x112)))
 (let (($x8 (= false false)))
 (let (($x115 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x116 (=> $x115 $x8)))
 (let (($x110 (= ?x43 (_ bv0 32))))
 (let (($x107 (= $x115 $x110)))
 (let (($x121 (and (and (and $x107 $x116) $x106) $x118)))
 (let (($x122 (= $x121 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x31 (concat ?x39 (concat ?x94 ?x80)))))
 (let (($x99 (= ?x98 input.dst.llvm-%opt)))
 (let (($x100 (= $x99 true)))
 (let (($x14 (= $x100 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (= true $x85)))
 (let (($x36 (not $x22)))
 (let (($x81 (=> $x36 $x45)))
 (let (($x95 (and $x85 $x81)))
 (let (($x91 (= $x95 true)))
 (let (($x89 (= $x91 true)))
 (let (($x102 (= $x89 true)))
 (let (($x76 (= $x36 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x70)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x63 $x74)))
 (let (($x72 (and $x75 $x71)))
 (let (($x53 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x53 $x72)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x30)))))))
 (let (($x68 (and $x62 $x67)))
 (let (($x66 (= $x68 true)))
 (let (($x69 (= $x66 true)))
 (let (($x73 (= $x69 true)))
 (let (($x101 (and $x73 $x78)))
 (let (($x97 (and $x101 $x102)))
 (let (($x65 (and $x97 $x14)))
 (let (($x123 (and $x65 $x122)))
 (let (($x124 (and $x37 $x123)))
 (let (($x56 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x125 (and $x56 $x124)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x126 (and $x38 $x125)))
 (let (($x17 (and $x8 $x126)))
 (let (($x19 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x16 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x16 (or false (or false (and true (or $x15 $x19)))))))
 (let (($x32 (=> (and $x36 $x16) (or false (or false (and true (or $x15 $x19)))))))
 (let (($x18 (and $x32 $x17)))
 (let (($x79 (=> $x18 $x5)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x24)))
 (let ((?x20 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x20)))
 (let (($x82 (= ?x27 ?x114)))
 (let (($x5 (= $x82 true)))
 (let (($x117 (= input.spec-%var-opt-0.2 ?x114)))
 (let (($x37 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x37 $x117)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x43 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x43 (_ bv1 32))))
 (let (($x106 (= $x37 $x112)))
 (let (($x8 (= false false)))
 (let (($x115 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x116 (=> $x115 $x8)))
 (let (($x110 (= ?x43 (_ bv0 32))))
 (let (($x107 (= $x115 $x110)))
 (let (($x121 (and (and (and $x107 $x116) $x106) $x118)))
 (let (($x122 (= $x121 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x31 (concat ?x39 (concat ?x94 ?x80)))))
 (let (($x99 (= ?x98 input.dst.llvm-%opt)))
 (let (($x100 (= $x99 true)))
 (let (($x14 (= $x100 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x45 (= true $x85)))
 (let (($x36 (not $x22)))
 (let (($x81 (=> $x36 $x45)))
 (let (($x95 (and $x85 $x81)))
 (let (($x91 (= $x95 true)))
 (let (($x89 (= $x91 true)))
 (let (($x102 (= $x89 true)))
 (let (($x76 (= $x36 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x70)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x63 $x74)))
 (let (($x72 (and $x75 $x71)))
 (let (($x53 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x53 $x72)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x30)))))))
 (let (($x68 (and $x62 $x67)))
 (let (($x66 (= $x68 true)))
 (let (($x69 (= $x66 true)))
 (let (($x73 (= $x69 true)))
 (let (($x101 (and $x73 $x78)))
 (let (($x97 (and $x101 $x102)))
 (let (($x65 (and $x97 $x14)))
 (let (($x123 (and $x65 $x122)))
 (let (($x124 (and $x37 $x123)))
 (let (($x56 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x125 (and $x56 $x124)))
 (let (($x38 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x126 (and $x38 $x125)))
 (let (($x17 (and $x8 $x126)))
 (let (($x19 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x16 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x11 (=> $x16 (or false (or false (and true (or $x15 $x19)))))))
 (let (($x32 (=> (and $x36 $x16) (or false (or false (and true (or $x15 $x19)))))))
 (let (($x18 (and $x32 $x17)))
 (let (($x79 (=> $x18 $x5)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x127 ((_ extract 5 0) input.dst.llvm-%opt)))
 (let ((?x5 ((_ extract 5 0) input.spec-%var-opt-0.2)))
 (let ((?x79 (bvmul (_ bv16 6) ?x5)))
 (let (($x25 (= ?x79 ?x127)))
 (let (($x33 (= $x25 true)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x105)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x24)))
 (let (($x118 (= input.spec-%var-opt-0.2 ?x117)))
 (let (($x57 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x57 $x118)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x119 (_ bv1 32))))
 (let (($x113 (= $x57 $x120)))
 (let (($x21 (= false false)))
 (let (($x116 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x116 $x21)))
 (let (($x37 (= ?x119 (_ bv0 32))))
 (let (($x112 (= $x116 $x37)))
 (let (($x124 (and (and (and $x112 $x106) $x113) $x121)))
 (let (($x125 (= $x124 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x59 (concat ?x100 (concat ?x92 ?x94)))))
 (let (($x43 (= ?x115 input.dst.llvm-%opt)))
 (let (($x110 (= $x43 true)))
 (let (($x107 (= $x110 true)))
 (let (($x89 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x102 (= true $x89)))
 (let (($x40 (not $x7)))
 (let (($x97 (=> $x40 $x102)))
 (let (($x83 (and $x89 $x97)))
 (let (($x42 (= $x83 true)))
 (let (($x31 (= $x42 true)))
 (let (($x90 (= $x31 true)))
 (let (($x84 (= $x40 true)))
 (let (($x85 (= $x84 true)))
 (let (($x45 (= $x85 true)))
 (let ((?x66 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x66)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x71 $x67)))
 (let (($x73 (and $x68 $x69)))
 (let (($x58 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x58 $x73)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x52)))))))
 (let (($x77 (and $x70 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x101 (= $x78 true)))
 (let (($x87 (= $x101 true)))
 (let (($x81 (and $x87 $x45)))
 (let (($x93 (and $x81 $x90)))
 (let (($x8 (and $x93 $x107)))
 (let (($x126 (and $x8 $x125)))
 (let (($x17 (and $x57 $x126)))
 (let (($x55 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x18 (and $x55 $x17)))
 (let (($x56 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x9 (and $x56 $x18)))
 (let (($x20 (and $x21 $x9)))
 (let (($x10 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x44 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x51 (=> $x44 (or false (or false (and true (or $x13 $x10)))))))
 (let (($x48 (=> (and $x40 $x44) (or false (or false (and true (or $x13 $x10)))))))
 (let (($x27 (and $x48 $x20)))
 (let (($x86 (=> $x27 $x33)))
 (not $x86)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x127 ((_ extract 5 0) input.dst.llvm-%opt)))
 (let ((?x5 ((_ extract 5 0) input.spec-%var-opt-0.2)))
 (let ((?x79 (bvmul (_ bv16 6) ?x5)))
 (let (($x25 (= ?x79 ?x127)))
 (let (($x33 (= $x25 true)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x105)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x24)))
 (let (($x118 (= input.spec-%var-opt-0.2 ?x117)))
 (let (($x57 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x121 (=> $x57 $x118)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x119 (_ bv1 32))))
 (let (($x113 (= $x57 $x120)))
 (let (($x21 (= false false)))
 (let (($x116 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x106 (=> $x116 $x21)))
 (let (($x37 (= ?x119 (_ bv0 32))))
 (let (($x112 (= $x116 $x37)))
 (let (($x124 (and (and (and $x112 $x106) $x113) $x121)))
 (let (($x125 (= $x124 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x59 (concat ?x100 (concat ?x92 ?x94)))))
 (let (($x43 (= ?x115 input.dst.llvm-%opt)))
 (let (($x110 (= $x43 true)))
 (let (($x107 (= $x110 true)))
 (let (($x89 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x102 (= true $x89)))
 (let (($x40 (not $x7)))
 (let (($x97 (=> $x40 $x102)))
 (let (($x83 (and $x89 $x97)))
 (let (($x42 (= $x83 true)))
 (let (($x31 (= $x42 true)))
 (let (($x90 (= $x31 true)))
 (let (($x84 (= $x40 true)))
 (let (($x85 (= $x84 true)))
 (let (($x45 (= $x85 true)))
 (let ((?x66 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x66)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x71 $x67)))
 (let (($x73 (and $x68 $x69)))
 (let (($x58 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x58 $x73)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x52)))))))
 (let (($x77 (and $x70 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x101 (= $x78 true)))
 (let (($x87 (= $x101 true)))
 (let (($x81 (and $x87 $x45)))
 (let (($x93 (and $x81 $x90)))
 (let (($x8 (and $x93 $x107)))
 (let (($x126 (and $x8 $x125)))
 (let (($x17 (and $x57 $x126)))
 (let (($x55 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x18 (and $x55 $x17)))
 (let (($x56 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x9 (and $x56 $x18)))
 (let (($x20 (and $x21 $x9)))
 (let (($x10 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x44 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x51 (=> $x44 (or false (or false (and true (or $x13 $x10)))))))
 (let (($x48 (=> (and $x40 $x44) (or false (or false (and true (or $x13 $x10)))))))
 (let (($x27 (and $x48 $x20)))
 (let (($x86 (=> $x27 $x33)))
 (not $x86)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000010)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000010)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000010)
(= input.dst.llvm-mem @fun_20)
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_20 #b01000000000000000000000000000011) #b10000000)
 (= (@fun_20 #b10000000000000000000000000000000) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x191ab900)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x63)
                                #x191ab900
                                #xf8)
                         #x191ab903
                         #x19)
                  #x191ab901
                  #xa8)))
  (store a!1 #x191ab902 #x0a)))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x63636363)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x63636363)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x63636363)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x190aa8f8)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x191ab903)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x191ab900)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv2147449856 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147540989 32) (_ bv124 8)) (_ bv2147540990 32) (_ bv255 8)) (_ bv2147540991 32) (_ bv127 8)) (_ bv2147449856 32) (_ bv1 8)))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147540988 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147540988 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147540991 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%opt)))
 (let (($x86 (= (_ bv0 3) ?x33)))
 (let (($x128 (= $x86 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x117)))
 (let (($x124 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x125 (=> $x62 $x124)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x57 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x57 (_ bv1 32))))
 (let (($x109 (= $x62 $x114)))
 (let (($x44 (= false false)))
 (let (($x122 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x123 (=> $x122 $x44)))
 (let (($x120 (= ?x57 (_ bv0 32))))
 (let (($x113 (= $x122 $x120)))
 (let (($x18 (and (and (and $x113 $x123) $x109) $x125)))
 (let (($x9 (= $x18 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x116 (concat ?x107 (concat ?x14 ?x94)))))
 (let (($x37 (= ?x119 input.dst.llvm-%opt)))
 (let (($x112 (= $x37 true)))
 (let (($x21 (= $x112 true)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x93 (= true $x90)))
 (let (($x40 (not $x22)))
 (let (($x39 (=> $x40 $x93)))
 (let (($x65 (and $x90 $x39)))
 (let (($x59 (= $x65 true)))
 (let (($x98 (= $x59 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (= $x40 true)))
 (let (($x102 (= $x89 true)))
 (let (($x97 (= $x102 true)))
 (let ((?x101 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x101)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x73 $x77)))
 (let (($x84 (and $x78 $x87)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x63 $x84)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x58)))))))
 (let (($x45 (and $x69 $x85)))
 (let (($x81 (= $x45 true)))
 (let (($x95 (= $x81 true)))
 (let (($x91 (= $x95 true)))
 (let (($x83 (and $x91 $x97)))
 (let (($x100 (and $x83 $x99)))
 (let (($x106 (and $x100 $x21)))
 (let (($x20 (and $x106 $x9)))
 (let (($x27 (and $x62 $x20)))
 (let (($x75 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x82 (and $x75 $x27)))
 (let (($x60 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x5 (and $x60 $x82)))
 (let (($x79 (and $x44 $x5)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x50 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x56 (=> $x50 (or false (or false (and true (or $x34 $x11)))))))
 (let (($x49 (=> (and $x40 $x50) (or false (or false (and true (or $x34 $x11)))))))
 (let (($x127 (and $x49 $x79)))
 (let (($x47 (=> $x127 $x128)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%opt)))
 (let (($x86 (= (_ bv0 3) ?x33)))
 (let (($x128 (= $x86 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x117)))
 (let (($x124 (= input.spec-%var-opt-0.2 ?x121)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x125 (=> $x62 $x124)))
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x57 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x57 (_ bv1 32))))
 (let (($x109 (= $x62 $x114)))
 (let (($x44 (= false false)))
 (let (($x122 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x123 (=> $x122 $x44)))
 (let (($x120 (= ?x57 (_ bv0 32))))
 (let (($x113 (= $x122 $x120)))
 (let (($x18 (and (and (and $x113 $x123) $x109) $x125)))
 (let (($x9 (= $x18 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x116 (concat ?x107 (concat ?x14 ?x94)))))
 (let (($x37 (= ?x119 input.dst.llvm-%opt)))
 (let (($x112 (= $x37 true)))
 (let (($x21 (= $x112 true)))
 (let (($x90 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x93 (= true $x90)))
 (let (($x40 (not $x22)))
 (let (($x39 (=> $x40 $x93)))
 (let (($x65 (and $x90 $x39)))
 (let (($x59 (= $x65 true)))
 (let (($x98 (= $x59 true)))
 (let (($x99 (= $x98 true)))
 (let (($x89 (= $x40 true)))
 (let (($x102 (= $x89 true)))
 (let (($x97 (= $x102 true)))
 (let ((?x101 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x101)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x73 $x77)))
 (let (($x84 (and $x78 $x87)))
 (let (($x63 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x63 $x84)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x58)))))))
 (let (($x45 (and $x69 $x85)))
 (let (($x81 (= $x45 true)))
 (let (($x95 (= $x81 true)))
 (let (($x91 (= $x95 true)))
 (let (($x83 (and $x91 $x97)))
 (let (($x100 (and $x83 $x99)))
 (let (($x106 (and $x100 $x21)))
 (let (($x20 (and $x106 $x9)))
 (let (($x27 (and $x62 $x20)))
 (let (($x75 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x82 (and $x75 $x27)))
 (let (($x60 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x5 (and $x60 $x82)))
 (let (($x79 (and $x44 $x5)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x50 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x56 (=> $x50 (or false (or false (and true (or $x34 $x11)))))))
 (let (($x49 (=> (and $x40 $x50) (or false (or false (and true (or $x34 $x11)))))))
 (let (($x127 (and $x49 $x79)))
 (let (($x47 (=> $x127 $x128)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000100)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10000000000000000000000000000111)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_19 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_19 #b10000000000000000000000000000111) #b00000000)
 (= (@fun_19 #b00000000000000000000000000000100) #b00000000)
 (= (@fun_19 #b00000000000000000000000000000101) #b00000000)
 (= (@fun_19 #b00000000000000000000000000000110) #b00000000)
 (= (@fun_19 #b00000000000000000000000000000111) #b00000000)
 (default #b00000100))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3f75bbdc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x04)
                     #x3f75bbdd
                     #xb8)
              #x3f75bbdf
              #x3f)
       #x3f75bbde
       #x05))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x3f05b804)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3f75bbdc)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3f75bbdf)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv3757703164 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3766620164 32) (_ bv252 8)) (_ bv3766620165 32) (_ bv255 8)) (_ bv3766620166 32) (_ bv249 8)) (_ bv3766620167 32) (_ bv223 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3766620164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3766620164 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3766620167 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x35 (= (_ bv0 2) ?x36)))
 (let (($x26 (= $x35 true)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x121)))
 (let (($x18 (= input.spec-%var-opt-0.2 ?x125)))
 (let (($x30 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x9 (=> $x30 $x18)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x62 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x62 (_ bv1 32))))
 (let (($x105 (= $x30 $x118)))
 (let (($x50 (= false false)))
 (let (($x126 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x126 $x50)))
 (let (($x114 (= ?x62 (_ bv0 32))))
 (let (($x109 (= $x126 $x114)))
 (let (($x82 (and (and (and $x109 $x17) $x105) $x9)))
 (let (($x5 (= $x82 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x122 (concat ?x21 (concat ?x8 ?x94)))))
 (let (($x120 (= ?x57 input.dst.llvm-%opt)))
 (let (($x113 (= $x120 true)))
 (let (($x44 (= $x113 true)))
 (let (($x99 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x100 (= true $x99)))
 (let (($x40 (not $x7)))
 (let (($x80 (=> $x40 $x100)))
 (let (($x61 (and $x99 $x80)))
 (let (($x116 (= $x61 true)))
 (let (($x43 (= $x116 true)))
 (let (($x110 (= $x43 true)))
 (let (($x90 (= $x40 true)))
 (let (($x93 (= $x90 true)))
 (let (($x39 (= $x93 true)))
 (let ((?x95 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x95)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x84 $x45)))
 (let (($x89 (and $x81 $x91)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x72 $x89)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x63)))))))
 (let (($x97 (and $x87 $x102)))
 (let (($x83 (= $x97 true)))
 (let (($x42 (= $x83 true)))
 (let (($x31 (= $x42 true)))
 (let (($x65 (and $x31 $x39)))
 (let (($x107 (and $x65 $x110)))
 (let (($x123 (and $x107 $x44)))
 (let (($x79 (and $x123 $x5)))
 (let (($x127 (and $x30 $x79)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x25 (and $x66 $x127)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x33 (and $x64 $x25)))
 (let (($x86 (and $x50 $x33)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x55 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x55 (or false (or false (and true (or $x51 $x48)))))))
 (let (($x19 (=> (and $x40 $x55) (or false (or false (and true (or $x51 $x48)))))))
 (let (($x128 (and $x19 $x86)))
 (let (($x52 (=> $x128 $x26)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x35 (= (_ bv0 2) ?x36)))
 (let (($x26 (= $x35 true)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x121)))
 (let (($x18 (= input.spec-%var-opt-0.2 ?x125)))
 (let (($x30 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x9 (=> $x30 $x18)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x62 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x62 (_ bv1 32))))
 (let (($x105 (= $x30 $x118)))
 (let (($x50 (= false false)))
 (let (($x126 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x17 (=> $x126 $x50)))
 (let (($x114 (= ?x62 (_ bv0 32))))
 (let (($x109 (= $x126 $x114)))
 (let (($x82 (and (and (and $x109 $x17) $x105) $x9)))
 (let (($x5 (= $x82 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x122 (concat ?x21 (concat ?x8 ?x94)))))
 (let (($x120 (= ?x57 input.dst.llvm-%opt)))
 (let (($x113 (= $x120 true)))
 (let (($x44 (= $x113 true)))
 (let (($x99 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x100 (= true $x99)))
 (let (($x40 (not $x7)))
 (let (($x80 (=> $x40 $x100)))
 (let (($x61 (and $x99 $x80)))
 (let (($x116 (= $x61 true)))
 (let (($x43 (= $x116 true)))
 (let (($x110 (= $x43 true)))
 (let (($x90 (= $x40 true)))
 (let (($x93 (= $x90 true)))
 (let (($x39 (= $x93 true)))
 (let ((?x95 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x95)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x84 $x45)))
 (let (($x89 (and $x81 $x91)))
 (let (($x72 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x72 $x89)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x63)))))))
 (let (($x97 (and $x87 $x102)))
 (let (($x83 (= $x97 true)))
 (let (($x42 (= $x83 true)))
 (let (($x31 (= $x42 true)))
 (let (($x65 (and $x31 $x39)))
 (let (($x107 (and $x65 $x110)))
 (let (($x123 (and $x107 $x44)))
 (let (($x79 (and $x123 $x5)))
 (let (($x127 (and $x30 $x79)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x25 (and $x66 $x127)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x33 (and $x64 $x25)))
 (let (($x86 (and $x50 $x33)))
 (let (($x48 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x55 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x60 (=> $x55 (or false (or false (and true (or $x51 $x48)))))))
 (let (($x19 (=> (and $x40 $x55) (or false (or false (and true (or $x51 $x48)))))))
 (let (($x128 (and $x19 $x86)))
 (let (($x52 (=> $x128 $x26)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x7 (not $x41)))
 (let ((?x92 (ite $x7 (_ bv1 1) (_ bv0 1))))
 (let ((?x16 ((_ zero_extend 31) ?x92)))
 (let (($x58 (= (_ bv1 32) ?x16)))
 (let (($x14 (= $x58 true)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x104)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x121)))
 (let (($x9 (= input.spec-%var-opt-0.2 ?x18)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x82 (=> $x69 $x9)))
 (let ((?x20 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x20 (_ bv1 32))))
 (let (($x124 (= $x69 $x27)))
 (let (($x6 (= false false)))
 (let (($x17 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x105 (=> $x17 $x6)))
 (let (($x30 (= ?x20 (_ bv0 32))))
 (let (($x118 (= $x17 $x30)))
 (let (($x127 (and (and (and $x118 $x105) $x124) $x82)))
 (let (($x25 (= $x127 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x70 (concat ?x113 (concat ?x119 ?x8)))))
 (let (($x62 (= ?x126 input.dst.llvm-%opt)))
 (let (($x114 (= $x62 true)))
 (let (($x109 (= $x114 true)))
 (let (($x43 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x110 (= true $x43)))
 (let (($x107 (=> $x7 $x110)))
 (let (($x96 (and $x43 $x107)))
 (let (($x12 (= $x96 true)))
 (let (($x122 (= $x12 true)))
 (let (($x37 (= $x122 true)))
 (let (($x98 (= $x7 true)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x83)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x91 $x102)))
 (let (($x31 (and $x97 $x42)))
 (let (($x73 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x73 $x31)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x71)))))))
 (let (($x93 (and $x95 $x90)))
 (let (($x39 (= $x93 true)))
 (let (($x65 (= $x39 true)))
 (let (($x59 (= $x65 true)))
 (let (($x80 (and $x59 $x100)))
 (let (($x112 (and $x80 $x37)))
 (let (($x50 (and $x112 $x109)))
 (let (($x33 (and $x50 $x25)))
 (let (($x86 (and $x69 $x33)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x128 (and $x68 $x86)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x47 (and $x66 $x128)))
 (let (($x36 (and $x6 $x47)))
 (let (($x56 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x75 (=> $x29 (or false (or false (and true (or $x38 $x56)))))))
 (let (($x10 (=> (and $x7 $x29) (or false (or false (and true (or $x38 $x56)))))))
 (let (($x35 (and $x10 $x36)))
 (let (($x23 (=> $x35 $x14)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x7 (not $x41)))
 (let ((?x92 (ite $x7 (_ bv1 1) (_ bv0 1))))
 (let ((?x16 ((_ zero_extend 31) ?x92)))
 (let (($x58 (= (_ bv1 32) ?x16)))
 (let (($x14 (= $x58 true)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x104)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x121)))
 (let (($x9 (= input.spec-%var-opt-0.2 ?x18)))
 (let (($x69 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x82 (=> $x69 $x9)))
 (let ((?x20 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x20 (_ bv1 32))))
 (let (($x124 (= $x69 $x27)))
 (let (($x6 (= false false)))
 (let (($x17 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x105 (=> $x17 $x6)))
 (let (($x30 (= ?x20 (_ bv0 32))))
 (let (($x118 (= $x17 $x30)))
 (let (($x127 (and (and (and $x118 $x105) $x124) $x82)))
 (let (($x25 (= $x127 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x70 (concat ?x113 (concat ?x119 ?x8)))))
 (let (($x62 (= ?x126 input.dst.llvm-%opt)))
 (let (($x114 (= $x62 true)))
 (let (($x109 (= $x114 true)))
 (let (($x43 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x110 (= true $x43)))
 (let (($x107 (=> $x7 $x110)))
 (let (($x96 (and $x43 $x107)))
 (let (($x12 (= $x96 true)))
 (let (($x122 (= $x12 true)))
 (let (($x37 (= $x122 true)))
 (let (($x98 (= $x7 true)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x83 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x83)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x91 $x102)))
 (let (($x31 (and $x97 $x42)))
 (let (($x73 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x73 $x31)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x71)))))))
 (let (($x93 (and $x95 $x90)))
 (let (($x39 (= $x93 true)))
 (let (($x65 (= $x39 true)))
 (let (($x59 (= $x65 true)))
 (let (($x80 (and $x59 $x100)))
 (let (($x112 (and $x80 $x37)))
 (let (($x50 (and $x112 $x109)))
 (let (($x33 (and $x50 $x25)))
 (let (($x86 (and $x69 $x33)))
 (let (($x68 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x128 (and $x68 $x86)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x47 (and $x66 $x128)))
 (let (($x36 (and $x6 $x47)))
 (let (($x56 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x29 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x75 (=> $x29 (or false (or false (and true (or $x38 $x56)))))))
 (let (($x10 (=> (and $x7 $x29) (or false (or false (and true (or $x38 $x56)))))))
 (let (($x35 (and $x10 $x36)))
 (let (($x23 (=> $x35 $x14)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x60 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x74 (or false (or false (and true (or $x54 $x60)))))))
 (let (($x58 (= $x66 true)))
 (let (($x14 (= $x58 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x82 (concat (select input.dst.llvm-mem ?x49) ?x18)))
 (let (($x127 (= input.spec-%var-opt-0.2 ?x82)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x25 (=> $x87 $x127)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x69 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x69 (_ bv1 32))))
 (let (($x24 (= $x87 $x125)))
 (let (($x29 (= false false)))
 (let (($x5 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x79 (=> $x5 $x29)))
 (let (($x27 (= ?x69 (_ bv0 32))))
 (let (($x124 (= $x5 $x27)))
 (let (($x128 (and (and (and $x124 $x79) $x24) $x25)))
 (let (($x47 (= $x128 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x17 (concat ?x109 (concat ?x44 ?x8)))))
 (let (($x30 (= ?x20 input.dst.llvm-%opt)))
 (let (($x118 (= $x30 true)))
 (let (($x6 (= $x118 true)))
 (let (($x37 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x112 (= true $x37)))
 (let (($x7 (not $x41)))
 (let (($x21 (=> $x7 $x112)))
 (let (($x123 (and $x37 $x21)))
 (let (($x70 (= $x123 true)))
 (let (($x57 (= $x70 true)))
 (let (($x120 (= $x57 true)))
 (let (($x43 (= $x7 true)))
 (let (($x110 (= $x43 true)))
 (let (($x107 (= $x110 true)))
 (let ((?x65 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x65)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x31 $x93)))
 (let (($x98 (and $x39 $x59)))
 (let (($x84 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x84 $x98)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x73)))))))
 (let (($x100 (and $x42 $x99)))
 (let (($x80 (= $x100 true)))
 (let (($x61 (= $x80 true)))
 (let (($x116 (= $x61 true)))
 (let (($x96 (and $x116 $x107)))
 (let (($x113 (and $x96 $x120)))
 (let (($x105 (and $x113 $x6)))
 (let (($x36 (and $x105 $x47)))
 (let (($x35 (and $x87 $x36)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x26 (and $x81 $x35)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x52 (and $x76 $x26)))
 (let (($x92 (and $x29 $x52)))
 (let (($x11 (=> (and $x7 $x74) (or false (or false (and true (or $x54 $x60)))))))
 (let (($x16 (and $x11 $x92)))
 (let (($x23 (=> $x16 $x14)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x60 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x74 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x74 (or false (or false (and true (or $x54 $x60)))))))
 (let (($x58 (= $x66 true)))
 (let (($x14 (= $x58 true)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x103)))
 (let ((?x82 (concat (select input.dst.llvm-mem ?x49) ?x18)))
 (let (($x127 (= input.spec-%var-opt-0.2 ?x82)))
 (let (($x87 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x25 (=> $x87 $x127)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x69 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x69 (_ bv1 32))))
 (let (($x24 (= $x87 $x125)))
 (let (($x29 (= false false)))
 (let (($x5 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x79 (=> $x5 $x29)))
 (let (($x27 (= ?x69 (_ bv0 32))))
 (let (($x124 (= $x5 $x27)))
 (let (($x128 (and (and (and $x124 $x79) $x24) $x25)))
 (let (($x47 (= $x128 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x17 (concat ?x109 (concat ?x44 ?x8)))))
 (let (($x30 (= ?x20 input.dst.llvm-%opt)))
 (let (($x118 (= $x30 true)))
 (let (($x6 (= $x118 true)))
 (let (($x37 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x112 (= true $x37)))
 (let (($x7 (not $x41)))
 (let (($x21 (=> $x7 $x112)))
 (let (($x123 (and $x37 $x21)))
 (let (($x70 (= $x123 true)))
 (let (($x57 (= $x70 true)))
 (let (($x120 (= $x57 true)))
 (let (($x43 (= $x7 true)))
 (let (($x110 (= $x43 true)))
 (let (($x107 (= $x110 true)))
 (let ((?x65 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x65)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x31 $x93)))
 (let (($x98 (and $x39 $x59)))
 (let (($x84 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x84 $x98)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x73)))))))
 (let (($x100 (and $x42 $x99)))
 (let (($x80 (= $x100 true)))
 (let (($x61 (= $x80 true)))
 (let (($x116 (= $x61 true)))
 (let (($x96 (and $x116 $x107)))
 (let (($x113 (and $x96 $x120)))
 (let (($x105 (and $x113 $x6)))
 (let (($x36 (and $x105 $x47)))
 (let (($x35 (and $x87 $x36)))
 (let (($x81 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x26 (and $x81 $x35)))
 (let (($x76 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x52 (and $x76 $x26)))
 (let (($x92 (and $x29 $x52)))
 (let (($x11 (=> (and $x7 $x74) (or false (or false (and true (or $x54 $x60)))))))
 (let (($x16 (and $x11 $x92)))
 (let (($x23 (=> $x16 $x14)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x82)))
 (let (($x129 (= input.spec-%tmpvar-6.E0%0%d.2 ?x25)))
 (let (($x40 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (=> $x40 $x129)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x87 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x87 (_ bv1 32))))
 (let (($x53 (= $x40 $x9)))
 (let (($x74 (= false false)))
 (let (($x71 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x13 (=> $x71 $x74)))
 (let (($x125 (= ?x87 (_ bv0 32))))
 (let (($x119 (= $x71 $x125)))
 (let (($x133 (and (and (and $x119 $x13) $x53) $x130)))
 (let (($x34 (= true true)))
 (let (($x134 (and $x34 $x133)))
 (let (($x135 (= $x134 true)))
 (let (($x128 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x63 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x47 (=> $x63 $x128)))
 (let (($x104 (= $x63 $x9)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x86 (=> $x33 $x74)))
 (let (($x24 (= $x33 $x125)))
 (let (($x26 (and (and (and $x24 $x86) $x104) $x47)))
 (let (($x52 (= $x26 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x5 (concat ?x6 (concat ?x50 ?x8)))))
 (let (($x27 (= ?x69 input.dst.llvm-%opt)))
 (let (($x124 (= $x27 true)))
 (let (($x29 (= $x124 true)))
 (let (($x120 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x113 (= true $x120)))
 (let (($x7 (not $x41)))
 (let (($x94 (=> $x7 $x113)))
 (let (($x101 (and $x120 $x94)))
 (let (($x17 (= $x101 true)))
 (let (($x62 (= $x17 true)))
 (let (($x114 (= $x62 true)))
 (let (($x37 (= $x7 true)))
 (let (($x112 (= $x37 true)))
 (let (($x21 (= $x112 true)))
 (let ((?x61 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x61)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x98 $x100)))
 (let (($x43 (and $x80 $x116)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x89 $x43)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x84)))))))
 (let (($x107 (and $x59 $x110)))
 (let (($x96 (= $x107 true)))
 (let (($x12 (= $x96 true)))
 (let (($x122 (= $x12 true)))
 (let (($x123 (and $x122 $x21)))
 (let (($x109 (and $x123 $x114)))
 (let (($x79 (and $x109 $x29)))
 (let (($x92 (and $x79 $x52)))
 (let (($x16 (and $x63 $x92)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x58 (and $x83 $x16)))
 (let (($x85 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x14 (and $x85 $x58)))
 (let (($x23 (and $x74 $x14)))
 (let (($x10 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x68 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x76 (=> $x68 (or false (or false (and true (or $x75 $x10)))))))
 (let (($x48 (=> (and $x7 $x68) (or false (or false (and true (or $x75 $x10)))))))
 (let (($x88 (and $x48 $x23)))
 (let (($x136 (=> $x88 $x135)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x108)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x82)))
 (let (($x129 (= input.spec-%tmpvar-6.E0%0%d.2 ?x25)))
 (let (($x40 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (=> $x40 $x129)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x87 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x87 (_ bv1 32))))
 (let (($x53 (= $x40 $x9)))
 (let (($x74 (= false false)))
 (let (($x71 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x13 (=> $x71 $x74)))
 (let (($x125 (= ?x87 (_ bv0 32))))
 (let (($x119 (= $x71 $x125)))
 (let (($x133 (and (and (and $x119 $x13) $x53) $x130)))
 (let (($x34 (= true true)))
 (let (($x134 (and $x34 $x133)))
 (let (($x135 (= $x134 true)))
 (let (($x128 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x63 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x47 (=> $x63 $x128)))
 (let (($x104 (= $x63 $x9)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x86 (=> $x33 $x74)))
 (let (($x24 (= $x33 $x125)))
 (let (($x26 (and (and (and $x24 $x86) $x104) $x47)))
 (let (($x52 (= $x26 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x5 (concat ?x6 (concat ?x50 ?x8)))))
 (let (($x27 (= ?x69 input.dst.llvm-%opt)))
 (let (($x124 (= $x27 true)))
 (let (($x29 (= $x124 true)))
 (let (($x120 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x113 (= true $x120)))
 (let (($x7 (not $x41)))
 (let (($x94 (=> $x7 $x113)))
 (let (($x101 (and $x120 $x94)))
 (let (($x17 (= $x101 true)))
 (let (($x62 (= $x17 true)))
 (let (($x114 (= $x62 true)))
 (let (($x37 (= $x7 true)))
 (let (($x112 (= $x37 true)))
 (let (($x21 (= $x112 true)))
 (let ((?x61 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x61)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x98 $x100)))
 (let (($x43 (and $x80 $x116)))
 (let (($x89 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x89 $x43)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x84)))))))
 (let (($x107 (and $x59 $x110)))
 (let (($x96 (= $x107 true)))
 (let (($x12 (= $x96 true)))
 (let (($x122 (= $x12 true)))
 (let (($x123 (and $x122 $x21)))
 (let (($x109 (and $x123 $x114)))
 (let (($x79 (and $x109 $x29)))
 (let (($x92 (and $x79 $x52)))
 (let (($x16 (and $x63 $x92)))
 (let (($x83 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x58 (and $x83 $x16)))
 (let (($x85 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x14 (and $x85 $x58)))
 (let (($x23 (and $x74 $x14)))
 (let (($x10 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x68 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x76 (=> $x68 (or false (or false (and true (or $x75 $x10)))))))
 (let (($x48 (=> (and $x7 $x68) (or false (or false (and true (or $x75 $x10)))))))
 (let (($x88 (and $x48 $x23)))
 (let (($x136 (=> $x88 $x135)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60000030)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x7f)
                     #x60000030
                     #xf4)
              #x60000032
              #xff)
       #x60000031
       #xa7))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x7fffa7f4)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60000030)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60000033)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1610612732 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592516 32) (_ bv252 8)) (_ bv2214592517 32) (_ bv255 8)) (_ bv2214592518 32) (_ bv255 8)) (_ bv2214592519 32) (_ bv95 8)) (_ bv1610612732 32) (_ bv255 8)) (_ bv1610612733 32) (_ bv255 8)) (_ bv1610612734 32) (_ bv255 8)) (_ bv1610612735 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592516 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592516 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592519 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x13 (= false true)))
 (let (($x131 (= $x13 true)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x121)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x25)))
 (let (($x26 (= input.spec-%var-opt-0.2 ?x47)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x52 (=> $x72 $x26)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x63 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x63 (_ bv1 32))))
 (let (($x103 (= $x72 $x127)))
 (let (($x68 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x35 (=> $x36 $x68)))
 (let (($x9 (= ?x63 (_ bv0 32))))
 (let (($x104 (= $x36 $x9)))
 (let (($x58 (and (and (and $x104 $x35) $x103) $x52)))
 (let (($x14 (= $x58 true)))
 (let (($x79 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x95 (= true $x79)))
 (let (($x7 (not $x41)))
 (let (($x33 (=> $x7 $x95)))
 (let (($x87 (and $x79 $x33)))
 (let (($x125 (= $x87 true)))
 (let (($x24 (= $x125 true)))
 (let (($x74 (= $x24 true)))
 (let ((?x118 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x118)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x123 $x5)))
 (let (($x126 (and $x30 $x6)))
 (let (($x21 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x21 $x126)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x94)))))))
 (let (($x8 (and $x106 $x50)))
 (let (($x20 (= $x8 true)))
 (let (($x105 (= $x20 true)))
 (let (($x69 (= $x105 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x110 (concat ?x61 (concat ?x98 ?x91)))))
 (let (($x96 (= ?x107 input.dst.llvm-%opt)))
 (let (($x12 (= $x96 true)))
 (let (($x122 (= $x12 true)))
 (let (($x84 (= $x7 true)))
 (let (($x31 (= $x84 true)))
 (let (($x90 (= $x31 true)))
 (let (($x37 (and $x90 $x122)))
 (let (($x27 (and $x37 $x69)))
 (let (($x86 (and $x27 $x74)))
 (let (($x23 (and $x86 $x14)))
 (let (($x88 (and $x72 $x23)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x34 (and $x65 $x88)))
 (let (($x102 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x28 (and $x102 $x34)))
 (let (($x71 (and $x68 $x28)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x85 (=> $x81 (or false (or false (and true (or $x66 $x11)))))))
 (let (($x49 (=> (and $x7 $x81) (or false (or false (and true (or $x66 $x11)))))))
 (let (($x119 (and $x49 $x71)))
 (let (($x40 (=> $x119 $x131)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x13 (= false true)))
 (let (($x131 (= $x13 true)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x121)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x25)))
 (let (($x26 (= input.spec-%var-opt-0.2 ?x47)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x52 (=> $x72 $x26)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x63 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x63 (_ bv1 32))))
 (let (($x103 (= $x72 $x127)))
 (let (($x68 (= false false)))
 (let (($x36 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x35 (=> $x36 $x68)))
 (let (($x9 (= ?x63 (_ bv0 32))))
 (let (($x104 (= $x36 $x9)))
 (let (($x58 (and (and (and $x104 $x35) $x103) $x52)))
 (let (($x14 (= $x58 true)))
 (let (($x79 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x95 (= true $x79)))
 (let (($x7 (not $x41)))
 (let (($x33 (=> $x7 $x95)))
 (let (($x87 (and $x79 $x33)))
 (let (($x125 (= $x87 true)))
 (let (($x24 (= $x125 true)))
 (let (($x74 (= $x24 true)))
 (let ((?x118 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x118)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x123 $x5)))
 (let (($x126 (and $x30 $x6)))
 (let (($x21 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x21 $x126)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x94)))))))
 (let (($x8 (and $x106 $x50)))
 (let (($x20 (= $x8 true)))
 (let (($x105 (= $x20 true)))
 (let (($x69 (= $x105 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x110 (concat ?x61 (concat ?x98 ?x91)))))
 (let (($x96 (= ?x107 input.dst.llvm-%opt)))
 (let (($x12 (= $x96 true)))
 (let (($x122 (= $x12 true)))
 (let (($x84 (= $x7 true)))
 (let (($x31 (= $x84 true)))
 (let (($x90 (= $x31 true)))
 (let (($x37 (and $x90 $x122)))
 (let (($x27 (and $x37 $x69)))
 (let (($x86 (and $x27 $x74)))
 (let (($x23 (and $x86 $x14)))
 (let (($x88 (and $x72 $x23)))
 (let (($x65 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x34 (and $x65 $x88)))
 (let (($x102 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x28 (and $x102 $x34)))
 (let (($x71 (and $x68 $x28)))
 (let (($x11 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x81 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x85 (=> $x81 (or false (or false (and true (or $x66 $x11)))))))
 (let (($x49 (=> (and $x7 $x81) (or false (or false (and true (or $x66 $x11)))))))
 (let (($x119 (and $x49 $x71)))
 (let (($x40 (=> $x119 $x131)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203b68e4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x203b68e5
                     #x20)
              #x203b68e7
              #x20)
       #x203b68e6
       #x3b))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x203b2080)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203b68e7)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203b68e4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv4294705148 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294709252 32) (_ bv252 8)) (_ bv4294709253 32) (_ bv255 8)) (_ bv4294709254 32) (_ bv251 8)) (_ bv4294709255 32) (_ bv255 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294709252 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294709252 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294709255 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x40 (= true false)))
 (let (($x53 (= $x40 true)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x57)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x94)))
 (let (($x52 (= input.spec-%var-opt-0.2 ?x17)))
 (let (($x46 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x58 (=> $x46 $x52)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x111 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x111 (_ bv1 32))))
 (let (($x26 (= $x46 $x47)))
 (let (($x54 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x25 (=> $x82 $x54)))
 (let (($x18 (= ?x111 (_ bv0 32))))
 (let (($x121 (= $x82 $x18)))
 (let (($x88 (and (and (and $x121 $x25) $x26) $x58)))
 (let (($x34 (= $x88 true)))
 (let ((?x68 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x68)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x36 $x9)))
 (let (($x92 (and $x104 $x35)))
 (let (($x27 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x27 $x92)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x33)))))))
 (let (($x127 (and $x42 $x72)))
 (let (($x103 (= $x127 true)))
 (let (($x16 (= $x103 true)))
 (let (($x128 (= $x16 true)))
 (let ((?x30 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x118 ((_ zero_extend 31) ?x30)))
 (let (($x6 (= (_ bv1 32) ?x118)))
 (let (($x126 (= $x6 true)))
 (let (($x50 (= $x126 true)))
 (let ((?x76 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x76)))
 (let (($x62 (= ?x48 ?x17)))
 (let (($x114 (= $x62 true)))
 (let (($x106 (= $x114 true)))
 (let (($x80 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x99 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x116 (=> $x99 (or false (or false (and true (or $x100 $x80)))))))
 (let (($x65 (= $x116 true)))
 (let (($x84 (= $x65 true)))
 (let (($x107 (= $x84 true)))
 (let (($x77 (= ?x48 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x85 (= $x77 true)))
 (let (($x49 (= $x85 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x75 (= (_ bv0 2) ?x41)))
 (let (($x10 (= $x75 true)))
 (let (($x64 (= $x10 true)))
 (let (($x45 (and $x64 $x49)))
 (let (($x96 (and $x45 $x107)))
 (let (($x21 (and $x96 $x106)))
 (let (($x8 (and $x21 $x50)))
 (let (($x108 (and $x8 $x128)))
 (let (($x28 (and $x108 $x34)))
 (let (($x71 (and $x46 $x28)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x119 (and $x51 $x71)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x13 (and $x11 $x119)))
 (let (($x131 (and $x54 $x13)))
 (let (($x32 (=> $x131 $x53)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x40 (= true false)))
 (let (($x53 (= $x40 true)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x57)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x94)))
 (let (($x52 (= input.spec-%var-opt-0.2 ?x17)))
 (let (($x46 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x58 (=> $x46 $x52)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x111 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x111 (_ bv1 32))))
 (let (($x26 (= $x46 $x47)))
 (let (($x54 (= false false)))
 (let (($x82 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x25 (=> $x82 $x54)))
 (let (($x18 (= ?x111 (_ bv0 32))))
 (let (($x121 (= $x82 $x18)))
 (let (($x88 (and (and (and $x121 $x25) $x26) $x58)))
 (let (($x34 (= $x88 true)))
 (let ((?x68 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x68)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x36 $x9)))
 (let (($x92 (and $x104 $x35)))
 (let (($x27 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x27 $x92)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x33)))))))
 (let (($x127 (and $x42 $x72)))
 (let (($x103 (= $x127 true)))
 (let (($x16 (= $x103 true)))
 (let (($x128 (= $x16 true)))
 (let ((?x30 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x118 ((_ zero_extend 31) ?x30)))
 (let (($x6 (= (_ bv1 32) ?x118)))
 (let (($x126 (= $x6 true)))
 (let (($x50 (= $x126 true)))
 (let ((?x76 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x76)))
 (let (($x62 (= ?x48 ?x17)))
 (let (($x114 (= $x62 true)))
 (let (($x106 (= $x114 true)))
 (let (($x80 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x99 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x116 (=> $x99 (or false (or false (and true (or $x100 $x80)))))))
 (let (($x65 (= $x116 true)))
 (let (($x84 (= $x65 true)))
 (let (($x107 (= $x84 true)))
 (let (($x77 (= ?x48 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x85 (= $x77 true)))
 (let (($x49 (= $x85 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x75 (= (_ bv0 2) ?x41)))
 (let (($x10 (= $x75 true)))
 (let (($x64 (= $x10 true)))
 (let (($x45 (and $x64 $x49)))
 (let (($x96 (and $x45 $x107)))
 (let (($x21 (and $x96 $x106)))
 (let (($x8 (and $x21 $x50)))
 (let (($x108 (and $x8 $x128)))
 (let (($x28 (and $x108 $x34)))
 (let (($x71 (and $x46 $x28)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x119 (and $x51 $x71)))
 (let (($x11 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x13 (and $x11 $x119)))
 (let (($x131 (and $x54 $x13)))
 (let (($x32 (=> $x131 $x53)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10100000000000000000000000000100)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01010000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x202cc000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203cd107)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x129 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x130 (= $x129 true)))
 (let (($x133 (= $x130 true)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x16)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x82)))
 (let (($x131 (= input.spec-%var-opt-0.2 ?x111)))
 (let (($x99 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x40 (=> $x99 $x131)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x88 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x88 (_ bv1 32))))
 (let (($x13 (= $x99 $x119)))
 (let (($x7 (= false false)))
 (let (($x52 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x52 $x7)))
 (let (($x34 (= ?x88 (_ bv0 32))))
 (let (($x28 (= $x52 $x34)))
 (let (($x112 (and (and (and $x28 $x71) $x13) $x40)))
 (let (($x97 (= $x112 true)))
 (let ((?x68 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x68)))
 (let (($x46 (= ?x35 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x47 (= $x46 true)))
 (let (($x26 (= $x47 true)))
 (let (($x18 (= ?x35 ?x111)))
 (let (($x121 (= $x18 true)))
 (let (($x54 (= $x121 true)))
 (let ((?x125 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x125)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x79 $x33)))
 (let (($x74 (and $x87 $x24)))
 (let (($x78 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x78 $x74)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x126)))))))
 (let (($x69 (and $x86 $x42)))
 (let (($x27 (= $x69 true)))
 (let (($x36 (= $x27 true)))
 (let (($x63 (= $x36 true)))
 (let ((?x122 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x57 ((_ zero_extend 31) ?x122)))
 (let (($x94 (= (_ bv1 32) ?x57)))
 (let (($x17 (= $x94 true)))
 (let (($x62 (= $x17 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x12 (= $x96 true)))
 (let (($x101 (= $x12 true)))
 (let (($x109 (= $x101 true)))
 (let (($x90 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x91 (=> $x98 (or false (or false (and true (or $x38 $x90)))))))
 (let (($x11 (= $x91 true)))
 (let (($x64 (= $x11 true)))
 (let (($x116 (= $x64 true)))
 (let ((?x48 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x22 (= (_ bv0 2) ?x48)))
 (let (($x100 (= $x22 true)))
 (let (($x43 (= $x100 true)))
 (let (($x65 (and $x43 $x116)))
 (let (($x120 (and $x65 $x109)))
 (let (($x114 (and $x120 $x62)))
 (let (($x9 (and $x114 $x63)))
 (let (($x25 (and $x9 $x54)))
 (let (($x23 (and $x25 $x26)))
 (let (($x83 (and $x23 $x97)))
 (let (($x105 (and $x99 $x83)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x39 (and $x51 $x105)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x132 (and $x110 $x39)))
 (let (($x115 (and $x7 $x132)))
 (let (($x134 (=> $x115 $x133)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x129 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x130 (= $x129 true)))
 (let (($x133 (= $x130 true)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x16)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x82)))
 (let (($x131 (= input.spec-%var-opt-0.2 ?x111)))
 (let (($x99 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x40 (=> $x99 $x131)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x88 (ite $x58 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x88 (_ bv1 32))))
 (let (($x13 (= $x99 $x119)))
 (let (($x7 (= false false)))
 (let (($x52 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x71 (=> $x52 $x7)))
 (let (($x34 (= ?x88 (_ bv0 32))))
 (let (($x28 (= $x52 $x34)))
 (let (($x112 (and (and (and $x28 $x71) $x13) $x40)))
 (let (($x97 (= $x112 true)))
 (let ((?x68 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x68)))
 (let (($x46 (= ?x35 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x47 (= $x46 true)))
 (let (($x26 (= $x47 true)))
 (let (($x18 (= ?x35 ?x111)))
 (let (($x121 (= $x18 true)))
 (let (($x54 (= $x121 true)))
 (let ((?x125 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x125)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x79 $x33)))
 (let (($x74 (and $x87 $x24)))
 (let (($x78 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x78 $x74)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x126)))))))
 (let (($x69 (and $x86 $x42)))
 (let (($x27 (= $x69 true)))
 (let (($x36 (= $x27 true)))
 (let (($x63 (= $x36 true)))
 (let ((?x122 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x57 ((_ zero_extend 31) ?x122)))
 (let (($x94 (= (_ bv1 32) ?x57)))
 (let (($x17 (= $x94 true)))
 (let (($x62 (= $x17 true)))
 (let (($x96 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x12 (= $x96 true)))
 (let (($x101 (= $x12 true)))
 (let (($x109 (= $x101 true)))
 (let (($x90 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x98 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x91 (=> $x98 (or false (or false (and true (or $x38 $x90)))))))
 (let (($x11 (= $x91 true)))
 (let (($x64 (= $x11 true)))
 (let (($x116 (= $x64 true)))
 (let ((?x48 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x22 (= (_ bv0 2) ?x48)))
 (let (($x100 (= $x22 true)))
 (let (($x43 (= $x100 true)))
 (let (($x65 (and $x43 $x116)))
 (let (($x120 (and $x65 $x109)))
 (let (($x114 (and $x120 $x62)))
 (let (($x9 (and $x114 $x63)))
 (let (($x25 (and $x9 $x54)))
 (let (($x23 (and $x25 $x26)))
 (let (($x83 (and $x23 $x97)))
 (let (($x105 (and $x99 $x83)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x39 (and $x51 $x105)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x132 (and $x110 $x39)))
 (let (($x115 (and $x7 $x132)))
 (let (($x134 (=> $x115 $x133)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x123 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x134 (=> $x123 true)))
 (let (($x135 (= $x134 true)))
 (let (($x76 (= $x135 true)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x16)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x121)))
 (let (($x40 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x48 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x112 (=> $x48 $x40)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x53 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge ?x53 (_ bv1 32))))
 (let (($x131 (= $x48 $x32)))
 (let (($x7 (= false false)))
 (let (($x28 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x13 (=> $x28 $x7)))
 (let (($x99 (= ?x53 (_ bv0 32))))
 (let (($x119 (= $x28 $x99)))
 (let (($x105 (and (and (and $x119 $x13) $x131) $x112)))
 (let (($x39 (= $x105 true)))
 (let ((?x85 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x52 (= (_ bv0 2) ?x85)))
 (let (($x58 (= $x52 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x100 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x100)))
 (let (($x14 (= ?x43 ?x25)))
 (let (($x46 (= $x14 true)))
 (let (($x47 (= $x46 true)))
 (let (($x63 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x92 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x117 (=> $x92 (or false (or false (and true (or $x36 $x63)))))))
 (let (($x24 (= $x117 true)))
 (let (($x74 (= $x24 true)))
 (let (($x128 (= $x74 true)))
 (let (($x78 (= $x123 true)))
 (let (($x79 (= $x78 true)))
 (let (($x95 (= $x79 true)))
 (let ((?x106 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x106)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x57 $x62)))
 (let (($x30 (and $x114 $x5)))
 (let (($x64 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x64 $x30)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x101)))))))
 (let (($x118 (and $x122 $x29)))
 (let (($x6 (= $x118 true)))
 (let (($x126 (= $x6 true)))
 (let (($x50 (= $x126 true)))
 (let ((?x49 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x38 ((_ zero_extend 31) ?x49)))
 (let (($x102 (= (_ bv1 32) ?x38)))
 (let (($x90 (= $x102 true)))
 (let (($x59 (= $x90 true)))
 (let (($x67 (= ?x43 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x77 (= $x67 true)))
 (let (($x81 (= $x77 true)))
 (let (($x80 (and $x81 $x59)))
 (let (($x8 (and $x80 $x50)))
 (let (($x33 (and $x8 $x95)))
 (let (($x108 (and $x33 $x128)))
 (let (($x26 (and $x108 $x47)))
 (let (($x34 (and $x26 $x88)))
 (let (($x132 (and $x34 $x39)))
 (let (($x115 (and $x48 $x132)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x129 (and $x51 $x115)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x130 (and $x110 $x129)))
 (let (($x133 (and $x7 $x130)))
 (let (($x10 (=> $x133 $x76)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x123 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x134 (=> $x123 true)))
 (let (($x135 (= $x134 true)))
 (let (($x76 (= $x135 true)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x16)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x121)))
 (let (($x40 (= input.spec-%var-opt-0.2 ?x25)))
 (let (($x48 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x112 (=> $x48 $x40)))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x53 (ite $x71 (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge ?x53 (_ bv1 32))))
 (let (($x131 (= $x48 $x32)))
 (let (($x7 (= false false)))
 (let (($x28 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x13 (=> $x28 $x7)))
 (let (($x99 (= ?x53 (_ bv0 32))))
 (let (($x119 (= $x28 $x99)))
 (let (($x105 (and (and (and $x119 $x13) $x131) $x112)))
 (let (($x39 (= $x105 true)))
 (let ((?x85 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x52 (= (_ bv0 2) ?x85)))
 (let (($x58 (= $x52 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x100 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x100)))
 (let (($x14 (= ?x43 ?x25)))
 (let (($x46 (= $x14 true)))
 (let (($x47 (= $x46 true)))
 (let (($x63 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x92 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x117 (=> $x92 (or false (or false (and true (or $x36 $x63)))))))
 (let (($x24 (= $x117 true)))
 (let (($x74 (= $x24 true)))
 (let (($x128 (= $x74 true)))
 (let (($x78 (= $x123 true)))
 (let (($x79 (= $x78 true)))
 (let (($x95 (= $x79 true)))
 (let ((?x106 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x106)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x57 $x62)))
 (let (($x30 (and $x114 $x5)))
 (let (($x64 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x64 $x30)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x101)))))))
 (let (($x118 (and $x122 $x29)))
 (let (($x6 (= $x118 true)))
 (let (($x126 (= $x6 true)))
 (let (($x50 (= $x126 true)))
 (let ((?x49 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x38 ((_ zero_extend 31) ?x49)))
 (let (($x102 (= (_ bv1 32) ?x38)))
 (let (($x90 (= $x102 true)))
 (let (($x59 (= $x90 true)))
 (let (($x67 (= ?x43 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x77 (= $x67 true)))
 (let (($x81 (= $x77 true)))
 (let (($x80 (and $x81 $x59)))
 (let (($x8 (and $x80 $x50)))
 (let (($x33 (and $x8 $x95)))
 (let (($x108 (and $x33 $x128)))
 (let (($x26 (and $x108 $x47)))
 (let (($x34 (and $x26 $x88)))
 (let (($x132 (and $x34 $x39)))
 (let (($x115 (and $x48 $x132)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x129 (and $x51 $x115)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x130 (and $x110 $x129)))
 (let (($x133 (and $x7 $x130)))
 (let (($x10 (=> $x133 $x76)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x18 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x18)))
 (let (($x10 (= ?x103 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x21 (= $x10 true)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x25)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x26)))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x105 (=> $x43 $x112)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x13 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x97 (_ bv1 32))))
 (let (($x40 (= $x43 $x83)))
 (let (($x7 (= false false)))
 (let (($x119 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x131 (=> $x119 $x7)))
 (let (($x48 (= ?x97 (_ bv0 32))))
 (let (($x32 (= $x119 $x48)))
 (let (($x115 (and (and (and $x32 $x131) $x40) $x105)))
 (let (($x129 (= $x115 true)))
 (let (($x28 (= ?x103 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x71 (= $x28 true)))
 (let (($x53 (= $x71 true)))
 (let (($x52 (= ?x103 ?x85)))
 (let (($x58 (= $x52 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x35 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x35)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x63 $x104)))
 (let (($x24 (and $x68 $x117)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x86 $x24)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x33)))))))
 (let (($x128 (and $x36 $x74)))
 (let (($x108 (= $x128 true)))
 (let (($x19 (= $x108 true)))
 (let (($x54 (= $x19 true)))
 (let ((?x30 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x29 ((_ zero_extend 31) ?x30)))
 (let (($x118 (= (_ bv1 32) ?x29)))
 (let (($x6 (= $x118 true)))
 (let (($x126 (= $x6 true)))
 (let (($x64 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x57 (= $x64 true)))
 (let (($x94 (= $x57 true)))
 (let (($x17 (= $x94 true)))
 (let (($x84 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x109 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x120 (=> $x109 (or false (or false (and true (or $x70 $x84)))))))
 (let (($x38 (= $x120 true)))
 (let (($x102 (= $x38 true)))
 (let (($x113 (= $x102 true)))
 (let ((?x77 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x81 (= (_ bv0 2) ?x77)))
 (let (($x41 (= $x81 true)))
 (let (($x98 (= $x41 true)))
 (let (($x37 (and $x98 $x113)))
 (let (($x62 (and $x37 $x17)))
 (let (($x50 (and $x62 $x126)))
 (let (($x82 (and $x50 $x54)))
 (let (($x34 (and $x82 $x88)))
 (let (($x99 (and $x34 $x53)))
 (let (($x130 (and $x99 $x129)))
 (let (($x133 (and $x43 $x130)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x134 (and $x51 $x133)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x135 (and $x110 $x134)))
 (let (($x76 (and $x7 $x135)))
 (let (($x125 (=> $x76 $x21)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x18 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x18)))
 (let (($x10 (= ?x103 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x21 (= $x10 true)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x25)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x26)))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x85)))
 (let (($x43 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x105 (=> $x43 $x112)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x97 (ite $x13 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x97 (_ bv1 32))))
 (let (($x40 (= $x43 $x83)))
 (let (($x7 (= false false)))
 (let (($x119 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x131 (=> $x119 $x7)))
 (let (($x48 (= ?x97 (_ bv0 32))))
 (let (($x32 (= $x119 $x48)))
 (let (($x115 (and (and (and $x32 $x131) $x40) $x105)))
 (let (($x129 (= $x115 true)))
 (let (($x28 (= ?x103 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x71 (= $x28 true)))
 (let (($x53 (= $x71 true)))
 (let (($x52 (= ?x103 ?x85)))
 (let (($x58 (= $x52 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x35 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x35)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x63 $x104)))
 (let (($x24 (and $x68 $x117)))
 (let (($x86 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x86 $x24)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x33)))))))
 (let (($x128 (and $x36 $x74)))
 (let (($x108 (= $x128 true)))
 (let (($x19 (= $x108 true)))
 (let (($x54 (= $x19 true)))
 (let ((?x30 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x29 ((_ zero_extend 31) ?x30)))
 (let (($x118 (= (_ bv1 32) ?x29)))
 (let (($x6 (= $x118 true)))
 (let (($x126 (= $x6 true)))
 (let (($x64 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x57 (= $x64 true)))
 (let (($x94 (= $x57 true)))
 (let (($x17 (= $x94 true)))
 (let (($x84 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x109 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x120 (=> $x109 (or false (or false (and true (or $x70 $x84)))))))
 (let (($x38 (= $x120 true)))
 (let (($x102 (= $x38 true)))
 (let (($x113 (= $x102 true)))
 (let ((?x77 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x81 (= (_ bv0 2) ?x77)))
 (let (($x41 (= $x81 true)))
 (let (($x98 (= $x41 true)))
 (let (($x37 (and $x98 $x113)))
 (let (($x62 (and $x37 $x17)))
 (let (($x50 (and $x62 $x126)))
 (let (($x82 (and $x50 $x54)))
 (let (($x34 (and $x82 $x88)))
 (let (($x99 (and $x34 $x53)))
 (let (($x130 (and $x99 $x129)))
 (let (($x133 (and $x43 $x130)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x134 (and $x51 $x133)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x135 (and $x110 $x134)))
 (let (($x76 (and $x7 $x135)))
 (let (($x125 (=> $x76 $x21)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x25)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x58)))
 (let (($x55 (= input.spec-%tmpvar-6.E0%0%d.2 ?x34)))
 (let (($x136 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (=> $x136 $x55)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x39 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x39 (_ bv1 32))))
 (let (($x137 (= $x136 $x132)))
 (let (($x7 (= false false)))
 (let (($x60 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x91 (=> $x60 $x7)))
 (let (($x43 (= ?x39 (_ bv0 32))))
 (let (($x20 (= $x60 $x43)))
 (let (($x139 (and (and (and $x20 $x91) $x137) $x73)))
 (let (($x61 (= true true)))
 (let (($x140 (and $x61 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x105 (= input.spec-%var-opt-0.2 ?x34)))
 (let (($x77 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x115 (=> $x77 $x105)))
 (let (($x112 (= $x77 $x132)))
 (let (($x32 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x40 (=> $x32 $x7)))
 (let (($x83 (= $x32 $x43)))
 (let (($x133 (and (and (and $x83 $x40) $x112) $x115)))
 (let (($x134 (= $x133 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x119 (= (_ bv0 2) ?x22)))
 (let (($x13 (= $x119 true)))
 (let (($x97 (= $x13 true)))
 (let ((?x41 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x41)))
 (let (($x56 (= ?x98 ?x34)))
 (let (($x28 (= $x56 true)))
 (let (($x71 (= $x28 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x72 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x23 (=> $x72 (or false (or false (and true (or $x19 $x54)))))))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let (($x14 (= $x24 true)))
 (let (($x124 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x86 (= $x124 true)))
 (let (($x63 (= $x86 true)))
 (let (($x9 (= $x63 true)))
 (let ((?x8 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x8)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x29 $x126)))
 (let (($x78 (and $x50 $x123)))
 (let (($x102 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x102 $x78)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x94)))))))
 (let (($x79 (and $x30 $x27)))
 (let (($x95 (= $x79 true)))
 (let (($x33 (= $x95 true)))
 (let (($x87 (= $x33 true)))
 (let ((?x65 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x70 ((_ zero_extend 31) ?x65)))
 (let (($x89 (= (_ bv1 32) ?x70)))
 (let (($x84 (= $x89 true)))
 (let (($x96 (= $x84 true)))
 (let (($x90 (= ?x98 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x100 (= $x90 true)))
 (let (($x59 (= $x100 true)))
 (let (($x12 (and $x59 $x96)))
 (let (($x42 (and $x12 $x87)))
 (let (($x104 (and $x42 $x9)))
 (let (($x46 (and $x104 $x14)))
 (let (($x53 (and $x46 $x71)))
 (let (($x48 (and $x53 $x97)))
 (let (($x135 (and $x48 $x134)))
 (let (($x76 (and $x77 $x135)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x10 (and $x51 $x76)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x21 (and $x110 $x10)))
 (let (($x125 (and $x7 $x21)))
 (let (($x142 (=> $x125 $x141)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x25)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x58)))
 (let (($x55 (= input.spec-%tmpvar-6.E0%0%d.2 ?x34)))
 (let (($x136 (bvuge input.spec-%tmpvar-6.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (=> $x136 $x55)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x39 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x39 (_ bv1 32))))
 (let (($x137 (= $x136 $x132)))
 (let (($x7 (= false false)))
 (let (($x60 (= input.spec-%tmpvar-6.E0%0%d.0 (_ bv0 32))))
 (let (($x91 (=> $x60 $x7)))
 (let (($x43 (= ?x39 (_ bv0 32))))
 (let (($x20 (= $x60 $x43)))
 (let (($x139 (and (and (and $x20 $x91) $x137) $x73)))
 (let (($x61 (= true true)))
 (let (($x140 (and $x61 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x105 (= input.spec-%var-opt-0.2 ?x34)))
 (let (($x77 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x115 (=> $x77 $x105)))
 (let (($x112 (= $x77 $x132)))
 (let (($x32 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x40 (=> $x32 $x7)))
 (let (($x83 (= $x32 $x43)))
 (let (($x133 (and (and (and $x83 $x40) $x112) $x115)))
 (let (($x134 (= $x133 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x119 (= (_ bv0 2) ?x22)))
 (let (($x13 (= $x119 true)))
 (let (($x97 (= $x13 true)))
 (let ((?x41 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x41)))
 (let (($x56 (= ?x98 ?x34)))
 (let (($x28 (= $x56 true)))
 (let (($x71 (= $x28 true)))
 (let (($x54 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x72 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x23 (=> $x72 (or false (or false (and true (or $x19 $x54)))))))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let (($x14 (= $x24 true)))
 (let (($x124 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x86 (= $x124 true)))
 (let (($x63 (= $x86 true)))
 (let (($x9 (= $x63 true)))
 (let ((?x8 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x8)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x29 $x126)))
 (let (($x78 (and $x50 $x123)))
 (let (($x102 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x102 $x78)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x94)))))))
 (let (($x79 (and $x30 $x27)))
 (let (($x95 (= $x79 true)))
 (let (($x33 (= $x95 true)))
 (let (($x87 (= $x33 true)))
 (let ((?x65 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x70 ((_ zero_extend 31) ?x65)))
 (let (($x89 (= (_ bv1 32) ?x70)))
 (let (($x84 (= $x89 true)))
 (let (($x96 (= $x84 true)))
 (let (($x90 (= ?x98 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x100 (= $x90 true)))
 (let (($x59 (= $x100 true)))
 (let (($x12 (and $x59 $x96)))
 (let (($x42 (and $x12 $x87)))
 (let (($x104 (and $x42 $x9)))
 (let (($x46 (and $x104 $x14)))
 (let (($x53 (and $x46 $x71)))
 (let (($x48 (and $x53 $x97)))
 (let (($x135 (and $x48 $x134)))
 (let (($x76 (and $x77 $x135)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x10 (and $x51 $x76)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x21 (and $x110 $x10)))
 (let (($x125 (and $x7 $x21)))
 (let (($x142 (=> $x125 $x141)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.2 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-6.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c1fe1c)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #xb6800218)
  (define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c1fe1f)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c1fe1c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv255 8)) (_ bv1073741825 32) (_ bv255 8)) (_ bv1073741826 32) (_ bv255 8)) (_ bv1073741827 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-6.E0%0%d.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-6.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv4294967295 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x20 (= false true)))
 (let (($x91 (= $x20 true)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x57)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x62)))
 (let (($x115 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x133 (=> $x98 $x115)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x129 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x130 (bvuge ?x129 (_ bv1 32))))
 (let (($x105 (= $x98 $x130)))
 (let (($x7 (= false false)))
 (let (($x83 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x83 $x7)))
 (let (($x77 (= ?x129 (_ bv0 32))))
 (let (($x132 (= $x83 $x77)))
 (let (($x76 (and (and (and $x132 $x112) $x105) $x133)))
 (let (($x10 (= $x76 true)))
 (let ((?x119 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x119)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x71 $x99)))
 (let (($x97 (and $x22 $x13)))
 (let (($x88 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x88 $x97)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x127)))))))
 (let (($x75 (and $x28 $x48)))
 (let (($x32 (= $x75 true)))
 (let (($x131 (= $x32 true)))
 (let (($x39 (= $x131 true)))
 (let ((?x111 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x18 ((_ zero_extend 31) ?x111)))
 (let (($x103 (= (_ bv1 32) ?x18)))
 (let (($x23 (= $x103 true)))
 (let (($x117 (= $x23 true)))
 (let (($x68 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x74 (= $x68 true)))
 (let (($x128 (= $x74 true)))
 (let (($x72 (= $x128 true)))
 (let (($x33 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x124 (=> $x36 (or false (or false (and true (or $x95 $x33)))))))
 (let (($x50 (= $x124 true)))
 (let (($x8 (= $x50 true)))
 (let (($x86 (= $x8 true)))
 (let ((?x116 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x116)))
 (let (($x102 (= ?x65 ?x38)))
 (let (($x29 (= $x102 true)))
 (let (($x118 (= $x29 true)))
 (let (($x89 (= ?x65 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x84 (= $x89 true)))
 (let (($x96 (= $x84 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x59 (= (_ bv0 2) ?x100)))
 (let (($x67 (= $x59 true)))
 (let (($x109 (= $x67 true)))
 (let (($x12 (and $x109 $x96)))
 (let (($x6 (and $x12 $x118)))
 (let (($x63 (and $x6 $x86)))
 (let (($x108 (and $x63 $x72)))
 (let (($x24 (and $x108 $x117)))
 (let (($x43 (and $x24 $x39)))
 (let (($x21 (and $x43 $x10)))
 (let (($x125 (and $x98 $x21)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x61 (and $x51 $x125)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x49 (and $x110 $x61)))
 (let (($x60 (and $x7 $x49)))
 (let (($x44 (=> $x60 $x91)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x20 (= false true)))
 (let (($x91 (= $x20 true)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x57)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x62)))
 (let (($x115 (= input.spec-%var-opt-0.2 ?x38)))
 (let (($x98 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x133 (=> $x98 $x115)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x129 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x130 (bvuge ?x129 (_ bv1 32))))
 (let (($x105 (= $x98 $x130)))
 (let (($x7 (= false false)))
 (let (($x83 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x112 (=> $x83 $x7)))
 (let (($x77 (= ?x129 (_ bv0 32))))
 (let (($x132 (= $x83 $x77)))
 (let (($x76 (and (and (and $x132 $x112) $x105) $x133)))
 (let (($x10 (= $x76 true)))
 (let ((?x119 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x119)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x71 $x99)))
 (let (($x97 (and $x22 $x13)))
 (let (($x88 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x88 $x97)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x127)))))))
 (let (($x75 (and $x28 $x48)))
 (let (($x32 (= $x75 true)))
 (let (($x131 (= $x32 true)))
 (let (($x39 (= $x131 true)))
 (let ((?x111 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x18 ((_ zero_extend 31) ?x111)))
 (let (($x103 (= (_ bv1 32) ?x18)))
 (let (($x23 (= $x103 true)))
 (let (($x117 (= $x23 true)))
 (let (($x68 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x74 (= $x68 true)))
 (let (($x128 (= $x74 true)))
 (let (($x72 (= $x128 true)))
 (let (($x33 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x36 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x124 (=> $x36 (or false (or false (and true (or $x95 $x33)))))))
 (let (($x50 (= $x124 true)))
 (let (($x8 (= $x50 true)))
 (let (($x86 (= $x8 true)))
 (let ((?x116 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x116)))
 (let (($x102 (= ?x65 ?x38)))
 (let (($x29 (= $x102 true)))
 (let (($x118 (= $x29 true)))
 (let (($x89 (= ?x65 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x84 (= $x89 true)))
 (let (($x96 (= $x84 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x59 (= (_ bv0 2) ?x100)))
 (let (($x67 (= $x59 true)))
 (let (($x109 (= $x67 true)))
 (let (($x12 (and $x109 $x96)))
 (let (($x6 (and $x12 $x118)))
 (let (($x63 (and $x6 $x86)))
 (let (($x108 (and $x63 $x72)))
 (let (($x24 (and $x108 $x117)))
 (let (($x43 (and $x24 $x39)))
 (let (($x21 (and $x43 $x10)))
 (let (($x125 (and $x98 $x21)))
 (let (($x51 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x61 (and $x51 $x125)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x49 (and $x110 $x61)))
 (let (($x60 (and $x7 $x49)))
 (let (($x44 (=> $x60 $x91)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%tobool.Lentry%2%d true)
(= input.dst.llvm-%opt #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-%0.Lif.then%2%fcallStart #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x202cc000)
  (define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool
    true)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203cd107)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.llvm-%tobool.Lentry%2%d () Bool true)
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x77 (= true false)))
 (let (($x132 (= $x77 true)))
 (let ((?x47 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x88 (concat ?x47 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x99 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x38 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x38) (concat ?x99 ?x88))))
 (let (($x97 (= input.spec-%var-opt-0.2 ?x13)))
 (let (($x89 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x48 (=> $x89 $x97)))
 (let (($x85 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x56 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x56 (_ bv1 32))))
 (let (($x25 (= $x89 $x16)))
 (let (($x45 (= false false)))
 (let (($x26 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x127 (=> $x26 $x45)))
 (let (($x52 (= ?x56 (_ bv0 32))))
 (let (($x121 (= $x26 $x52)))
 (let (($x131 (and (and (and $x121 $x127) $x25) $x48)))
 (let (($x39 (= $x131 true)))
 (let ((?x54 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x128 $x108)))
 (let (($x111 (and $x19 $x82)))
 (let (($x42 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x42 $x111)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x8)))))))
 (let (($x103 (and $x74 $x18)))
 (let (($x23 (= $x103 true)))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let (($x29 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x78 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x78 (or false (or false (and true (or $x102 $x29)))))))
 (let (($x17 (= $x36 true)))
 (let (($x41 (= $x17 true)))
 (let (($x27 (= $x41 true)))
 (let ((?x65 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x12 (= (_ bv0 2) ?x65)))
 (let (($x101 (= $x12 true)))
 (let (($x114 (= $x101 true)))
 (let ((?x100 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x100)))
 (let (($x96 (= ?x109 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x31 (= $x96 true)))
 (let (($x90 (= $x31 true)))
 (let (($x106 (and $x90 $x114)))
 (let (($x95 (and $x106 $x27)))
 (let (($x14 (and $x95 $x24)))
 (let (($x43 (and $x14 $x39)))
 (let (($x81 (and $x89 $x43)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x83 (and $x66 $x81)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x40 (and $x93 $x83)))
 (let (($x129 (and $x45 $x40)))
 (let (($x7 (=> $x129 $x132)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x77 (= true false)))
 (let (($x132 (= $x77 true)))
 (let ((?x47 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x88 (concat ?x47 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x99 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x38 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x38) (concat ?x99 ?x88))))
 (let (($x97 (= input.spec-%var-opt-0.2 ?x13)))
 (let (($x89 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x48 (=> $x89 $x97)))
 (let (($x85 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x56 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x56 (_ bv1 32))))
 (let (($x25 (= $x89 $x16)))
 (let (($x45 (= false false)))
 (let (($x26 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x127 (=> $x26 $x45)))
 (let (($x52 (= ?x56 (_ bv0 32))))
 (let (($x121 (= $x26 $x52)))
 (let (($x131 (and (and (and $x121 $x127) $x25) $x48)))
 (let (($x39 (= $x131 true)))
 (let ((?x54 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x128 $x108)))
 (let (($x111 (and $x19 $x82)))
 (let (($x42 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x42 $x111)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x8)))))))
 (let (($x103 (and $x74 $x18)))
 (let (($x23 (= $x103 true)))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let (($x29 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x78 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x36 (=> $x78 (or false (or false (and true (or $x102 $x29)))))))
 (let (($x17 (= $x36 true)))
 (let (($x41 (= $x17 true)))
 (let (($x27 (= $x41 true)))
 (let ((?x65 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x12 (= (_ bv0 2) ?x65)))
 (let (($x101 (= $x12 true)))
 (let (($x114 (= $x101 true)))
 (let ((?x100 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x100)))
 (let (($x96 (= ?x109 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x31 (= $x96 true)))
 (let (($x90 (= $x31 true)))
 (let (($x106 (and $x90 $x114)))
 (let (($x95 (and $x106 $x27)))
 (let (($x14 (and $x95 $x24)))
 (let (($x43 (and $x14 $x39)))
 (let (($x81 (and $x89 $x43)))
 (let (($x66 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x83 (and $x66 $x81)))
 (let (($x93 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x40 (and $x93 $x83)))
 (let (($x129 (and $x45 $x40)))
 (let (($x7 (=> $x129 $x132)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b10100000000000000000000000000100)
(= input.spec-%var-opt-0.2 #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b01010000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b01010000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-val-1.L3%5%fcallStart #b00000000000000000000000000000000)
(= input.dst.llvm-mem.Lif.then%2%fcallEnd @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x202cc000)
  (define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x203cd104)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x203cd107)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x121 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x117 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x125 (and (and $x117 $x117) $x121)))
 (let (($x61 (=> $x125 true)))
 (let (($x49 (= $x61 true)))
 (let (($x60 (= $x49 true)))
 (let ((?x43 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x81 (concat ?x43 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x129 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x80 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x80) (concat ?x129 ?x81))))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x30 (=> $x38 $x112)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x47 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x13 (bvuge ?x47 (_ bv1 32))))
 (let (($x97 (= $x38 $x13)))
 (let (($x67 (= false false)))
 (let (($x99 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x22 (=> $x99 $x67)))
 (let (($x34 (= ?x47 (_ bv0 32))))
 (let (($x88 (= $x99 $x34)))
 (let (($x98 (and (and (and $x88 $x22) $x97) $x30)))
 (let (($x130 (= $x98 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 2) ?x32)))
 (let (($x119 (= $x58 true)))
 (let (($x71 (= $x119 true)))
 (let (($x45 (= $x121 true)))
 (let (($x127 (= $x45 true)))
 (let (($x75 (= $x127 true)))
 (let (($x24 (= $x117 true)))
 (let (($x14 (= $x24 true)))
 (let (($x70 (= $x14 true)))
 (let ((?x42 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x42)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x9 $x74)))
 (let (($x72 (and $x87 $x128)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x41 $x72)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x92)))))))
 (let (($x19 (and $x63 $x108)))
 (let (($x54 (= $x19 true)))
 (let (($x82 (= $x54 true)))
 (let (($x111 (= $x82 true)))
 (let ((?x57 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x57)))
 (let (($x118 (= ?x29 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x6 (= $x118 true)))
 (let (($x126 (= $x6 true)))
 (let (($x18 (and $x126 $x111)))
 (let (($x26 (and $x18 $x70)))
 (let (($x85 (and $x26 $x70)))
 (let (($x89 (and $x85 $x75)))
 (let (($x16 (and $x89 $x75)))
 (let (($x53 (and $x16 $x71)))
 (let (($x105 (and $x53 $x130)))
 (let (($x135 (and $x38 $x105)))
 (let (($x5 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x115 (and $x5 $x135)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x133 (and $x64 $x115)))
 (let (($x76 (and $x67 $x133)))
 (let (($x65 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x11 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x122 (=> $x11 (or false (or false (and true (or $x116 $x65)))))))
 (let (($x10 (and $x122 $x76)))
 (let (($x20 (=> $x10 $x60)))
 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x121 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x117 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x125 (and (and $x117 $x117) $x121)))
 (let (($x61 (=> $x125 true)))
 (let (($x49 (= $x61 true)))
 (let (($x60 (= $x49 true)))
 (let ((?x43 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x81 (concat ?x43 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x129 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x80 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x80) (concat ?x129 ?x81))))
 (let (($x112 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x38 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x30 (=> $x38 $x112)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x47 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x13 (bvuge ?x47 (_ bv1 32))))
 (let (($x97 (= $x38 $x13)))
 (let (($x67 (= false false)))
 (let (($x99 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x22 (=> $x99 $x67)))
 (let (($x34 (= ?x47 (_ bv0 32))))
 (let (($x88 (= $x99 $x34)))
 (let (($x98 (and (and (and $x88 $x22) $x97) $x30)))
 (let (($x130 (= $x98 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x58 (= (_ bv0 2) ?x32)))
 (let (($x119 (= $x58 true)))
 (let (($x71 (= $x119 true)))
 (let (($x45 (= $x121 true)))
 (let (($x127 (= $x45 true)))
 (let (($x75 (= $x127 true)))
 (let (($x24 (= $x117 true)))
 (let (($x14 (= $x24 true)))
 (let (($x70 (= $x14 true)))
 (let ((?x42 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x42)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x9 $x74)))
 (let (($x72 (and $x87 $x128)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x41 $x72)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x92)))))))
 (let (($x19 (and $x63 $x108)))
 (let (($x54 (= $x19 true)))
 (let (($x82 (= $x54 true)))
 (let (($x111 (= $x82 true)))
 (let ((?x57 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x57)))
 (let (($x118 (= ?x29 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x6 (= $x118 true)))
 (let (($x126 (= $x6 true)))
 (let (($x18 (and $x126 $x111)))
 (let (($x26 (and $x18 $x70)))
 (let (($x85 (and $x26 $x70)))
 (let (($x89 (and $x85 $x75)))
 (let (($x16 (and $x89 $x75)))
 (let (($x53 (and $x16 $x71)))
 (let (($x105 (and $x53 $x130)))
 (let (($x135 (and $x38 $x105)))
 (let (($x5 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x115 (and $x5 $x135)))
 (let (($x64 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x133 (and $x64 $x115)))
 (let (($x76 (and $x67 $x133)))
 (let (($x65 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x11 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x122 (=> $x11 (or false (or false (and true (or $x116 $x65)))))))
 (let (($x10 (and $x122 $x76)))
 (let (($x20 (=> $x10 $x60)))
 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x16 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x37 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x46 (=> $x37 $x16)))
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x134 (ite $x97 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x134 (_ bv1 32))))
 (let (($x113 (= $x37 $x40)))
 (let (($x100 (= false false)))
 (let (($x36 (= (_ bv1 32) (_ bv0 32))))
 (let (($x136 (=> $x36 $x100)))
 (let (($x48 (= ?x134 (_ bv0 32))))
 (let (($x44 (= $x36 $x48)))
 (let (($x15 (and (and (and $x44 $x136) $x113) $x46)))
 (let (($x93 (= true true)))
 (let (($x55 (and $x93 $x15)))
 (let (($x73 (= $x55 true)))
 (let ((?x81 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x77 (concat ?x81 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x30 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x65) (concat ?x30 ?x77))))
 (let (($x135 (= input.spec-%var-opt-0.2 ?x105)))
 (let (($x118 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x115 (=> $x118 $x135)))
 (let (($x129 (= $x118 $x40)))
 (let (($x13 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x83 (=> $x13 $x100)))
 (let (($x132 (= $x13 $x48)))
 (let (($x10 (and (and (and $x132 $x83) $x129) $x115)))
 (let (($x21 (= $x10 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x67 (= (_ bv0 2) ?x88)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x25 (= $x16 true)))
 (let (($x32 (= $x25 true)))
 (let (($x58 (= $x32 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x71 (and $x85 $x16)))
 (let (($x53 (= $x71 true)))
 (let (($x62 (= $x53 true)))
 (let (($x99 (= $x62 true)))
 (let (($x56 (= $x85 true)))
 (let (($x52 (= $x56 true)))
 (let (($x121 (= $x52 true)))
 (let ((?x54 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x128 $x108)))
 (let (($x111 (and $x19 $x82)))
 (let (($x68 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x68 $x111)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x17)))))))
 (let (($x103 (and $x42 $x18)))
 (let (($x23 (= $x103 true)))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let ((?x126 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x126)))
 (let (($x27 (= ?x123 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x95 (= $x27 true)))
 (let (($x86 (= $x95 true)))
 (let (($x14 (and $x86 $x24)))
 (let (($x45 (and $x14 $x121)))
 (let (($x127 (and $x45 $x121)))
 (let (($x119 (and $x127 $x58)))
 (let (($x28 (and $x119 $x99)))
 (let (($x47 (and $x28 $x58)))
 (let (($x38 (and $x47 $x33)))
 (let (($x125 (and $x38 $x21)))
 (let (($x61 (and $x118 $x125)))
 (let (($x57 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x49 (and $x57 $x61)))
 (let (($x5 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x60 (and $x5 $x49)))
 (let (($x20 (and $x100 $x60)))
 (let (($x101 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x51 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x51 (or false (or false (and true (or $x12 $x101)))))))
 (let (($x91 (and $x64 $x20)))
 (let (($x139 (=> $x91 $x73)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x16 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x37 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x46 (=> $x37 $x16)))
 (let (($x97 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x134 (ite $x97 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x134 (_ bv1 32))))
 (let (($x113 (= $x37 $x40)))
 (let (($x100 (= false false)))
 (let (($x36 (= (_ bv1 32) (_ bv0 32))))
 (let (($x136 (=> $x36 $x100)))
 (let (($x48 (= ?x134 (_ bv0 32))))
 (let (($x44 (= $x36 $x48)))
 (let (($x15 (and (and (and $x44 $x136) $x113) $x46)))
 (let (($x93 (= true true)))
 (let (($x55 (and $x93 $x15)))
 (let (($x73 (= $x55 true)))
 (let ((?x81 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x77 (concat ?x81 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x30 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x65 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x65) (concat ?x30 ?x77))))
 (let (($x135 (= input.spec-%var-opt-0.2 ?x105)))
 (let (($x118 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x115 (=> $x118 $x135)))
 (let (($x129 (= $x118 $x40)))
 (let (($x13 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x83 (=> $x13 $x100)))
 (let (($x132 (= $x13 $x48)))
 (let (($x10 (and (and (and $x132 $x83) $x129) $x115)))
 (let (($x21 (= $x10 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x67 (= (_ bv0 2) ?x88)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x25 (= $x16 true)))
 (let (($x32 (= $x25 true)))
 (let (($x58 (= $x32 true)))
 (let (($x85 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x71 (and $x85 $x16)))
 (let (($x53 (= $x71 true)))
 (let (($x62 (= $x53 true)))
 (let (($x99 (= $x62 true)))
 (let (($x56 (= $x85 true)))
 (let (($x52 (= $x56 true)))
 (let (($x121 (= $x52 true)))
 (let ((?x54 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x54)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x128 $x108)))
 (let (($x111 (and $x19 $x82)))
 (let (($x68 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x68 $x111)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x17)))))))
 (let (($x103 (and $x42 $x18)))
 (let (($x23 (= $x103 true)))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let ((?x126 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x126)))
 (let (($x27 (= ?x123 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x95 (= $x27 true)))
 (let (($x86 (= $x95 true)))
 (let (($x14 (and $x86 $x24)))
 (let (($x45 (and $x14 $x121)))
 (let (($x127 (and $x45 $x121)))
 (let (($x119 (and $x127 $x58)))
 (let (($x28 (and $x119 $x99)))
 (let (($x47 (and $x28 $x58)))
 (let (($x38 (and $x47 $x33)))
 (let (($x125 (and $x38 $x21)))
 (let (($x61 (and $x118 $x125)))
 (let (($x57 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x49 (and $x57 $x61)))
 (let (($x5 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x60 (and $x5 $x49)))
 (let (($x20 (and $x100 $x60)))
 (let (($x101 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x51 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x51 (or false (or false (and true (or $x12 $x101)))))))
 (let (($x91 (and $x64 $x20)))
 (let (($x139 (=> $x91 $x73)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x81 (= $x59 false)))
 (let (($x43 (= $x81 true)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x97)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x132)))
 (let (($x133 (= input.spec-%var-opt-0.2 ?x83)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x67 $x133)))
 (let ((?x28 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x28 (_ bv1 32))))
 (let (($x33 (= $x67 $x22)))
 (let (($x31 (= false false)))
 (let (($x99 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x88 (=> $x99 $x31)))
 (let (($x47 (= ?x28 (_ bv0 32))))
 (let (($x34 (= $x99 $x47)))
 (let (($x76 (and (and (and $x34 $x88) $x33) $x118)))
 (let (($x39 (= $x76 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x25 (concat ?x75 (concat ?x52 ?x85)))))
 (let (($x58 (= ?x32 input.dst.llvm-%opt)))
 (let (($x119 (= $x58 true)))
 (let (($x71 (= $x119 true)))
 (let ((?x82 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x82)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x72 $x19)))
 (let (($x18 (and $x54 $x111)))
 (let (($x87 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x87 $x18)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x9)))))))
 (let (($x23 (and $x128 $x103)))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let (($x14 (= $x24 true)))
 (let (($x53 (and $x14 $x71)))
 (let (($x130 (and $x53 $x39)))
 (let (($x86 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x7 (and $x86 $x130)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x112 (and $x27 $x7)))
 (let (($x30 (and $x31 $x112)))
 (let (($x64 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x57 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x57 (or false (or false (and true (or $x84 $x64)))))))
 (let (($x11 (not $x59)))
 (let (($x80 (=> (and $x11 $x57) (or false (or false (and true (or $x84 $x64)))))))
 (let (($x131 (and $x80 $x30)))
 (let (($x77 (=> $x131 $x43)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x81 (= $x59 false)))
 (let (($x43 (= $x81 true)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x97)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x132)))
 (let (($x133 (= input.spec-%var-opt-0.2 ?x83)))
 (let (($x67 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x118 (=> $x67 $x133)))
 (let ((?x28 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x28 (_ bv1 32))))
 (let (($x33 (= $x67 $x22)))
 (let (($x31 (= false false)))
 (let (($x99 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x88 (=> $x99 $x31)))
 (let (($x47 (= ?x28 (_ bv0 32))))
 (let (($x34 (= $x99 $x47)))
 (let (($x76 (and (and (and $x34 $x88) $x33) $x118)))
 (let (($x39 (= $x76 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x25 (concat ?x75 (concat ?x52 ?x85)))))
 (let (($x58 (= ?x32 input.dst.llvm-%opt)))
 (let (($x119 (= $x58 true)))
 (let (($x71 (= $x119 true)))
 (let ((?x82 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x82)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x72 $x19)))
 (let (($x18 (and $x54 $x111)))
 (let (($x87 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x87 $x18)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x9)))))))
 (let (($x23 (and $x128 $x103)))
 (let (($x117 (= $x23 true)))
 (let (($x24 (= $x117 true)))
 (let (($x14 (= $x24 true)))
 (let (($x53 (and $x14 $x71)))
 (let (($x130 (and $x53 $x39)))
 (let (($x86 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x7 (and $x86 $x130)))
 (let (($x27 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x112 (and $x27 $x7)))
 (let (($x30 (and $x31 $x112)))
 (let (($x64 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x57 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x57 (or false (or false (and true (or $x84 $x64)))))))
 (let (($x11 (not $x59)))
 (let (($x80 (=> (and $x11 $x57) (or false (or false (and true (or $x84 $x64)))))))
 (let (($x131 (and $x80 $x30)))
 (let (($x77 (=> $x131 $x43)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%opt #b00000000000000000000000000000000)
(= input.spec-%var-opt-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-opt-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-val-1.L3%5%fcallStart #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-opt-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.llvm-%opt () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%opt () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-opt-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-opt-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x134 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (=> $x110 $x134)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x125 (=> (and $x75 $x110) $x134)))
 (let (($x61 (= $x125 true)))
 (let (($x49 (= $x61 true)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x39)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x112)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x131)))
 (let (($x97 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x43 (=> $x97 $x81)))
 (let ((?x48 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x48 (_ bv1 32))))
 (let (($x83 (= $x97 $x132)))
 (let (($x98 (and (and (= $x134 (= ?x48 (_ bv0 32))) (=> $x134 (= false false))) $x83)))
 (let (($x96 (and $x98 $x43)))
 (let (($x124 (= $x96 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x88 (concat ?x47 (concat ?x53 ?x119)))))
 (let (($x67 (= ?x40 input.dst.llvm-%opt)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x56 (= $x75 true)))
 (let (($x52 (= $x56 true)))
 (let (($x85 (= $x52 true)))
 (let ((?x103 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x103)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x54 $x111)))
 (let (($x117 (and $x18 $x23)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x41 $x117)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x92)))))))
 (let (($x14 (and $x19 $x24)))
 (let (($x70 (= $x14 true)))
 (let (($x16 (= $x70 true)))
 (let (($x25 (= $x16 true)))
 (let (($x121 (and $x25 $x85)))
 (let (($x89 (and $x121 $x85)))
 (let (($x129 (and $x89 $x33)))
 (let (($x26 (and $x129 $x124)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x105 (and $x63 $x26)))
 (let (($x86 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x135 (and $x86 $x105)))
 (let (($x116 (= false false)))
 (let (($x115 (and $x116 $x135)))
 (let (($x78 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x126 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x123 (=> $x126 (or false (or false (and true (or $x109 $x78)))))))
 (let (($x59 (not $x110)))
 (let (($x12 (=> (and $x59 $x126) (or false (or false (and true (or $x109 $x78)))))))
 (let (($x10 (and $x12 $x115)))
 (let (($x60 (=> $x10 $x49)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x134 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x21 (=> $x110 $x134)))
 (let (($x75 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x125 (=> (and $x75 $x110) $x134)))
 (let (($x61 (= $x125 true)))
 (let (($x49 (= $x61 true)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x39)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x112)))
 (let (($x81 (= input.spec-%var-opt-0.2 ?x131)))
 (let (($x97 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x43 (=> $x97 $x81)))
 (let ((?x48 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x48 (_ bv1 32))))
 (let (($x83 (= $x97 $x132)))
 (let (($x98 (and (and (= $x134 (= ?x48 (_ bv0 32))) (=> $x134 (= false false))) $x83)))
 (let (($x96 (and $x98 $x43)))
 (let (($x124 (= $x96 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x88 (concat ?x47 (concat ?x53 ?x119)))))
 (let (($x67 (= ?x40 input.dst.llvm-%opt)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x56 (= $x75 true)))
 (let (($x52 (= $x56 true)))
 (let (($x85 (= $x52 true)))
 (let ((?x103 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x103)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x54 $x111)))
 (let (($x117 (and $x18 $x23)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x41 $x117)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x92)))))))
 (let (($x14 (and $x19 $x24)))
 (let (($x70 (= $x14 true)))
 (let (($x16 (= $x70 true)))
 (let (($x25 (= $x16 true)))
 (let (($x121 (and $x25 $x85)))
 (let (($x89 (and $x121 $x85)))
 (let (($x129 (and $x89 $x33)))
 (let (($x26 (and $x129 $x124)))
 (let (($x63 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x105 (and $x63 $x26)))
 (let (($x86 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x135 (and $x86 $x105)))
 (let (($x116 (= false false)))
 (let (($x115 (and $x116 $x135)))
 (let (($x78 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x126 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x123 (=> $x126 (or false (or false (and true (or $x109 $x78)))))))
 (let (($x59 (not $x110)))
 (let (($x12 (=> (and $x59 $x126) (or false (or false (and true (or $x109 $x78)))))))
 (let (($x10 (and $x12 $x115)))
 (let (($x60 (=> $x10 $x49)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x59 (not $x110)))
 (let (($x105 (or $x110 $x59)))
 (let (($x135 (= $x105 true)))
 (let (($x115 (= $x135 true)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x132)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x30)))
 (let (($x118 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x29 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x76 (=> $x29 $x118)))
 (let ((?x129 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x13 (bvuge ?x129 (_ bv1 32))))
 (let (($x116 (= $x29 $x13)))
 (let (($x126 (= false false)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x48 (=> $x33 $x126)))
 (let (($x100 (= ?x129 (_ bv0 32))))
 (let (($x134 (= $x33 $x100)))
 (let (($x112 (and (and (and $x134 $x48) $x116) $x76)))
 (let (($x131 (= $x112 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x53 (concat ?x28 (concat ?x32 ?x121)))))
 (let (($x62 (= ?x119 input.dst.llvm-%opt)))
 (let (($x34 (= $x62 true)))
 (let (($x40 (= $x34 true)))
 (let ((?x14 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x14)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x103 $x117)))
 (let (($x16 (and $x24 $x70)))
 (let (($x92 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x92 $x16)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x19)))))))
 (let (($x45 (and $x18 $x25)))
 (let (($x127 (= $x45 true)))
 (let (($x75 (= $x127 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x40)))
 (let (($x81 (and $x67 $x131)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x43 (and $x108 $x81)))
 (let (($x9 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x96 (and $x9 $x43)))
 (let (($x124 (and $x126 $x96)))
 (let (($x6 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x95 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x86 (=> $x95 (or false (or false (and true (or $x102 $x6)))))))
 (let (($x106 (=> (and $x59 $x95) (or false (or false (and true (or $x102 $x6)))))))
 (let (($x26 (and $x106 $x124)))
 (let (($x10 (=> $x26 $x115)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x59 (not $x110)))
 (let (($x105 (or $x110 $x59)))
 (let (($x135 (= $x105 true)))
 (let (($x115 (= $x135 true)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x132)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x30)))
 (let (($x118 (= input.spec-%var-opt-0.2 ?x7)))
 (let (($x29 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x76 (=> $x29 $x118)))
 (let ((?x129 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x13 (bvuge ?x129 (_ bv1 32))))
 (let (($x116 (= $x29 $x13)))
 (let (($x126 (= false false)))
 (let (($x33 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x48 (=> $x33 $x126)))
 (let (($x100 (= ?x129 (_ bv0 32))))
 (let (($x134 (= $x33 $x100)))
 (let (($x112 (and (and (and $x134 $x48) $x116) $x76)))
 (let (($x131 (= $x112 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x53 (concat ?x28 (concat ?x32 ?x121)))))
 (let (($x62 (= ?x119 input.dst.llvm-%opt)))
 (let (($x34 (= $x62 true)))
 (let (($x40 (= $x34 true)))
 (let ((?x14 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x14)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x103 $x117)))
 (let (($x16 (and $x24 $x70)))
 (let (($x92 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x92 $x16)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x19)))))))
 (let (($x45 (and $x18 $x25)))
 (let (($x127 (= $x45 true)))
 (let (($x75 (= $x127 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x40)))
 (let (($x81 (and $x67 $x131)))
 (let (($x108 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x43 (and $x108 $x81)))
 (let (($x9 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x96 (and $x9 $x43)))
 (let (($x124 (and $x126 $x96)))
 (let (($x6 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x95 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x86 (=> $x95 (or false (or false (and true (or $x102 $x6)))))))
 (let (($x106 (=> (and $x59 $x95) (or false (or false (and true (or $x102 $x6)))))))
 (let (($x26 (and $x106 $x124)))
 (let (($x10 (=> $x26 $x115)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x101)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x85)))
 (let ((?x37 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x37)))
 (let (($x138 (= ?x113 ?x61)))
 (let (($x46 (= $x138 true)))
 (let (($x49 (= input.spec-%var-opt-0.2 ?x61)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x72 $x49)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x43 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x43 (_ bv1 32))))
 (let (($x135 (= $x72 $x105)))
 (let (($x95 (= false false)))
 (let (($x81 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x26 (=> $x81 $x95)))
 (let (($x96 (= ?x43 (_ bv0 32))))
 (let (($x124 (= $x81 $x96)))
 (let (($x11 (and (and (and $x124 $x26) $x135) $x60)))
 (let (($x68 (= $x11 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x30 (concat ?x97 (concat ?x130 ?x116)))))
 (let (($x118 (= ?x7 input.dst.llvm-%opt)))
 (let (($x76 (= $x118 true)))
 (let (($x112 (= $x76 true)))
 (let (($x121 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x33 (= true $x121)))
 (let (($x59 (not $x110)))
 (let (($x129 (=> $x59 $x33)))
 (let (($x100 (and $x121 $x129)))
 (let (($x134 (= $x100 true)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x34 (= $x59 true)))
 (let (($x40 (= $x34 true)))
 (let (($x67 (= $x40 true)))
 (let (($x31 (= $x121 true)))
 (let (($x47 (= $x31 true)))
 (let (($x119 (= $x47 true)))
 (let ((?x75 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x75)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x16 $x45)))
 (let (($x52 (and $x127 $x56)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x41 $x52)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x92)))))))
 (let (($x53 (and $x70 $x71)))
 (let (($x88 (= $x53 true)))
 (let (($x99 (= $x88 true)))
 (let (($x28 (= $x99 true)))
 (let (($x62 (and $x28 $x119)))
 (let (($x22 (and $x62 $x67)))
 (let (($x133 (and $x22 $x48)))
 (let (($x131 (and $x133 $x112)))
 (let (($x58 (and $x131 $x68)))
 (let (($x91 (and $x72 $x58)))
 (let (($x111 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x93 (and $x111 $x91)))
 (let (($x128 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x36 (and $x128 $x93)))
 (let (($x44 (and $x95 $x36)))
 (let (($x12 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x63 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x9 (=> $x63 (or false (or false (and true (or $x123 $x12)))))))
 (let (($x64 (=> (and $x59 $x63) (or false (or false (and true (or $x123 $x12)))))))
 (let (($x136 (and $x64 $x44)))
 (let (($x15 (=> $x136 $x46)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x101)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x85)))
 (let ((?x37 (bvmul input.spec-%var-opt-0.2 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x37)))
 (let (($x138 (= ?x113 ?x61)))
 (let (($x46 (= $x138 true)))
 (let (($x49 (= input.spec-%var-opt-0.2 ?x61)))
 (let (($x72 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x60 (=> $x72 $x49)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x43 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x43 (_ bv1 32))))
 (let (($x135 (= $x72 $x105)))
 (let (($x95 (= false false)))
 (let (($x81 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x26 (=> $x81 $x95)))
 (let (($x96 (= ?x43 (_ bv0 32))))
 (let (($x124 (= $x81 $x96)))
 (let (($x11 (and (and (and $x124 $x26) $x135) $x60)))
 (let (($x68 (= $x11 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x30 (concat ?x97 (concat ?x130 ?x116)))))
 (let (($x118 (= ?x7 input.dst.llvm-%opt)))
 (let (($x76 (= $x118 true)))
 (let (($x112 (= $x76 true)))
 (let (($x121 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x33 (= true $x121)))
 (let (($x59 (not $x110)))
 (let (($x129 (=> $x59 $x33)))
 (let (($x100 (and $x121 $x129)))
 (let (($x134 (= $x100 true)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x34 (= $x59 true)))
 (let (($x40 (= $x34 true)))
 (let (($x67 (= $x40 true)))
 (let (($x31 (= $x121 true)))
 (let (($x47 (= $x31 true)))
 (let (($x119 (= $x47 true)))
 (let ((?x75 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x75)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x16 $x45)))
 (let (($x52 (and $x127 $x56)))
 (let (($x41 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x41 $x52)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x92)))))))
 (let (($x53 (and $x70 $x71)))
 (let (($x88 (= $x53 true)))
 (let (($x99 (= $x88 true)))
 (let (($x28 (= $x99 true)))
 (let (($x62 (and $x28 $x119)))
 (let (($x22 (and $x62 $x67)))
 (let (($x133 (and $x22 $x48)))
 (let (($x131 (and $x133 $x112)))
 (let (($x58 (and $x131 $x68)))
 (let (($x91 (and $x72 $x58)))
 (let (($x111 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x93 (and $x111 $x91)))
 (let (($x128 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x36 (and $x128 $x93)))
 (let (($x44 (and $x95 $x36)))
 (let (($x12 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x63 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x9 (=> $x63 (or false (or false (and true (or $x123 $x12)))))))
 (let (($x64 (=> (and $x59 $x63) (or false (or false (and true (or $x123 $x12)))))))
 (let (($x136 (and $x64 $x44)))
 (let (($x15 (=> $x136 $x46)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x59 (not $x110)))
 (let ((?x55 (ite $x59 (_ bv1 1) (_ bv0 1))))
 (let ((?x114 ((_ zero_extend 31) ?x55)))
 (let (($x57 (= (_ bv1 32) ?x114)))
 (let (($x19 (= $x57 true)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x115)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x61)))
 (let (($x11 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x42 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x68 (=> $x42 $x11)))
 (let ((?x72 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x72 (_ bv1 32))))
 (let (($x90 (= $x42 $x125)))
 (let (($x63 (= false false)))
 (let (($x20 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x20 $x63)))
 (let (($x105 (= ?x72 (_ bv0 32))))
 (let (($x135 (= $x20 $x105)))
 (let (($x93 (and (and (and $x135 $x65) $x90) $x68)))
 (let (($x36 (= $x93 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x81 (concat ?x112 (concat ?x38 ?x116)))))
 (let (($x96 (= ?x43 input.dst.llvm-%opt)))
 (let (($x124 (= $x96 true)))
 (let (($x95 (= $x124 true)))
 (let (($x40 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x133 (= true $x40)))
 (let (($x29 (=> $x59 $x133)))
 (let (($x132 (and $x40 $x29)))
 (let (($x30 (= $x132 true)))
 (let (($x98 (= $x30 true)))
 (let (($x77 (= $x98 true)))
 (let (($x100 (= $x59 true)))
 (let (($x134 (= $x100 true)))
 (let (($x126 (= $x134 true)))
 (let (($x67 (= $x40 true)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let ((?x99 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x99)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x52 $x53)))
 (let (($x89 (and $x88 $x28)))
 (let (($x23 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x23 $x89)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x41)))))))
 (let (($x121 (and $x56 $x32)))
 (let (($x31 (= $x121 true)))
 (let (($x47 (= $x31 true)))
 (let (($x119 (= $x47 true)))
 (let (($x129 (and $x119 $x33)))
 (let (($x48 (and $x129 $x126)))
 (let (($x97 (and $x48 $x77)))
 (let (($x26 (and $x97 $x95)))
 (let (($x44 (and $x26 $x36)))
 (let (($x136 (and $x42 $x44)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x137 (and $x14 $x136)))
 (let (($x54 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x37 (and $x54 $x137)))
 (let (($x113 (and $x63 $x37)))
 (let (($x106 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x108 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x128 (=> $x108 (or false (or false (and true (or $x86 $x106)))))))
 (let (($x5 (=> (and $x59 $x108) (or false (or false (and true (or $x86 $x106)))))))
 (let (($x138 (and $x5 $x113)))
 (let (($x13 (=> $x138 $x19)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let (($x59 (not $x110)))
 (let ((?x55 (ite $x59 (_ bv1 1) (_ bv0 1))))
 (let ((?x114 ((_ zero_extend 31) ?x55)))
 (let (($x57 (= (_ bv1 32) ?x114)))
 (let (($x19 (= $x57 true)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x115)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x61)))
 (let (($x11 (= input.spec-%var-opt-0.2 ?x60)))
 (let (($x42 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x68 (=> $x42 $x11)))
 (let ((?x72 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x72 (_ bv1 32))))
 (let (($x90 (= $x42 $x125)))
 (let (($x63 (= false false)))
 (let (($x20 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x65 (=> $x20 $x63)))
 (let (($x105 (= ?x72 (_ bv0 32))))
 (let (($x135 (= $x20 $x105)))
 (let (($x93 (and (and (and $x135 $x65) $x90) $x68)))
 (let (($x36 (= $x93 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x81 (concat ?x112 (concat ?x38 ?x116)))))
 (let (($x96 (= ?x43 input.dst.llvm-%opt)))
 (let (($x124 (= $x96 true)))
 (let (($x95 (= $x124 true)))
 (let (($x40 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x133 (= true $x40)))
 (let (($x29 (=> $x59 $x133)))
 (let (($x132 (and $x40 $x29)))
 (let (($x30 (= $x132 true)))
 (let (($x98 (= $x30 true)))
 (let (($x77 (= $x98 true)))
 (let (($x100 (= $x59 true)))
 (let (($x134 (= $x100 true)))
 (let (($x126 (= $x134 true)))
 (let (($x67 (= $x40 true)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let ((?x99 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x99)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x52 $x53)))
 (let (($x89 (and $x88 $x28)))
 (let (($x23 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x23 $x89)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x41)))))))
 (let (($x121 (and $x56 $x32)))
 (let (($x31 (= $x121 true)))
 (let (($x47 (= $x31 true)))
 (let (($x119 (= $x47 true)))
 (let (($x129 (and $x119 $x33)))
 (let (($x48 (and $x129 $x126)))
 (let (($x97 (and $x48 $x77)))
 (let (($x26 (and $x97 $x95)))
 (let (($x44 (and $x26 $x36)))
 (let (($x136 (and $x42 $x44)))
 (let (($x14 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x137 (and $x14 $x136)))
 (let (($x54 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x37 (and $x54 $x137)))
 (let (($x113 (and $x63 $x37)))
 (let (($x106 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x108 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x128 (=> $x108 (or false (or false (and true (or $x86 $x106)))))))
 (let (($x5 (=> (and $x59 $x108) (or false (or false (and true (or $x86 $x106)))))))
 (let (($x138 (and $x5 $x113)))
 (let (($x13 (=> $x138 $x19)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x13 (= (_ bv0 2) ?x19)))
 (let (($x73 (= $x13 true)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x74)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x60)))
 (let (($x93 (= input.spec-%var-opt-0.2 ?x68)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x36 (=> $x17 $x93)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x42 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x42 (_ bv1 32))))
 (let (($x101 (= $x17 $x49)))
 (let (($x108 (= false false)))
 (let (($x58 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x58 $x108)))
 (let (($x125 (= ?x42 (_ bv0 32))))
 (let (($x90 (= $x58 $x125)))
 (let (($x137 (and (and (and $x90 $x91) $x101) $x36)))
 (let (($x37 (= $x137 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x20 (concat ?x95 (concat ?x131 ?x116)))))
 (let (($x105 (= ?x72 input.dst.llvm-%opt)))
 (let (($x135 (= $x105 true)))
 (let (($x63 (= $x135 true)))
 (let (($x134 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x97 (= true $x134)))
 (let (($x59 (not $x110)))
 (let (($x39 (=> $x59 $x97)))
 (let (($x87 (and $x134 $x39)))
 (let (($x81 (= $x87 true)))
 (let (($x118 (= $x81 true)))
 (let (($x76 (= $x118 true)))
 (let (($x132 (= $x59 true)))
 (let (($x30 (= $x132 true)))
 (let (($x98 (= $x30 true)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x133 (= $x48 true)))
 (let ((?x47 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x47)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x89 $x121)))
 (let (($x62 (and $x31 $x119)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x25 $x62)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x23)))))))
 (let (($x40 (and $x28 $x34)))
 (let (($x67 (= $x40 true)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x29 (and $x33 $x133)))
 (let (($x77 (and $x29 $x98)))
 (let (($x112 (and $x77 $x76)))
 (let (($x65 (and $x112 $x63)))
 (let (($x113 (and $x65 $x37)))
 (let (($x138 (and $x17 $x113)))
 (let (($x75 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x46 (and $x75 $x138)))
 (let (($x117 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x15 (and $x117 $x46)))
 (let (($x55 (and $x108 $x15)))
 (let (($x64 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x111 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x54 (=> $x111 (or false (or false (and true (or $x9 $x64)))))))
 (let (($x80 (=> (and $x59 $x111) (or false (or false (and true (or $x9 $x64)))))))
 (let (($x114 (and $x80 $x55)))
 (let (($x78 (=> $x114 $x73)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x13 (= (_ bv0 2) ?x19)))
 (let (($x73 (= $x13 true)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x74)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x60)))
 (let (($x93 (= input.spec-%var-opt-0.2 ?x68)))
 (let (($x17 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x36 (=> $x17 $x93)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x42 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x42 (_ bv1 32))))
 (let (($x101 (= $x17 $x49)))
 (let (($x108 (= false false)))
 (let (($x58 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x91 (=> $x58 $x108)))
 (let (($x125 (= ?x42 (_ bv0 32))))
 (let (($x90 (= $x58 $x125)))
 (let (($x137 (and (and (and $x90 $x91) $x101) $x36)))
 (let (($x37 (= $x137 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x20 (concat ?x95 (concat ?x131 ?x116)))))
 (let (($x105 (= ?x72 input.dst.llvm-%opt)))
 (let (($x135 (= $x105 true)))
 (let (($x63 (= $x135 true)))
 (let (($x134 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x97 (= true $x134)))
 (let (($x59 (not $x110)))
 (let (($x39 (=> $x59 $x97)))
 (let (($x87 (and $x134 $x39)))
 (let (($x81 (= $x87 true)))
 (let (($x118 (= $x81 true)))
 (let (($x76 (= $x118 true)))
 (let (($x132 (= $x59 true)))
 (let (($x30 (= $x132 true)))
 (let (($x98 (= $x30 true)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x133 (= $x48 true)))
 (let ((?x47 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x47)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x89 $x121)))
 (let (($x62 (and $x31 $x119)))
 (let (($x25 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x25 $x62)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x23)))))))
 (let (($x40 (and $x28 $x34)))
 (let (($x67 (= $x40 true)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x29 (and $x33 $x133)))
 (let (($x77 (and $x29 $x98)))
 (let (($x112 (and $x77 $x76)))
 (let (($x65 (and $x112 $x63)))
 (let (($x113 (and $x65 $x37)))
 (let (($x138 (and $x17 $x113)))
 (let (($x75 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x46 (and $x75 $x138)))
 (let (($x117 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x15 (and $x117 $x46)))
 (let (($x55 (and $x108 $x15)))
 (let (($x64 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x111 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x54 (=> $x111 (or false (or false (and true (or $x9 $x64)))))))
 (let (($x80 (=> (and $x59 $x111) (or false (or false (and true (or $x9 $x64)))))))
 (let (($x114 (and $x80 $x55)))
 (let (($x78 (=> $x114 $x73)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x5 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x14 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x117 (=> $x14 (or false (or false (and true (or $x128 $x5)))))))
 (let (($x78 (= $x117 true)))
 (let (($x122 (= $x78 true)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x85)))
 (let ((?x36 (concat (select input.dst.llvm-mem ?x104) ?x68)))
 (let (($x137 (= input.spec-%var-opt-0.2 ?x36)))
 (let (($x103 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x37 (=> $x103 $x137)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x17 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x11 (bvuge ?x17 (_ bv1 32))))
 (let (($x115 (= $x103 $x11)))
 (let (($x111 (= false false)))
 (let (($x44 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x136 (=> $x44 $x111)))
 (let (($x49 (= ?x17 (_ bv0 32))))
 (let (($x101 (= $x44 $x49)))
 (let (($x46 (and (and (and $x101 $x136) $x115) $x37)))
 (let (($x15 (= $x46 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x58 (concat ?x63 (concat ?x26 ?x116)))))
 (let (($x125 (= ?x42 input.dst.llvm-%opt)))
 (let (($x90 (= $x125 true)))
 (let (($x108 (= $x90 true)))
 (let (($x30 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x112 (= true $x30)))
 (let (($x59 (not $x110)))
 (let (($x83 (=> $x59 $x112)))
 (let (($x18 (and $x30 $x83)))
 (let (($x20 (= $x18 true)))
 (let (($x96 (= $x20 true)))
 (let (($x124 (= $x96 true)))
 (let (($x87 (= $x59 true)))
 (let (($x81 (= $x87 true)))
 (let (($x118 (= $x81 true)))
 (let (($x98 (= $x30 true)))
 (let (($x77 (= $x98 true)))
 (let (($x97 (= $x77 true)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x22)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x62 $x40)))
 (let (($x129 (and $x67 $x33)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x71 $x129)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x25)))))))
 (let (($x134 (and $x119 $x100)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x133 (= $x48 true)))
 (let (($x39 (and $x133 $x97)))
 (let (($x76 (and $x39 $x118)))
 (let (($x95 (and $x76 $x124)))
 (let (($x91 (and $x95 $x108)))
 (let (($x55 (and $x91 $x15)))
 (let (($x114 (and $x103 $x55)))
 (let (($x99 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x57 (and $x99 $x114)))
 (let (($x45 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x19 (and $x45 $x57)))
 (let (($x13 (and $x111 $x19)))
 (let (($x27 (=> (and $x59 $x14) (or false (or false (and true (or $x128 $x5)))))))
 (let (($x73 (and $x27 $x13)))
 (let (($x6 (=> $x73 $x122)))
 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x5 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x14 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x117 (=> $x14 (or false (or false (and true (or $x128 $x5)))))))
 (let (($x78 (= $x117 true)))
 (let (($x122 (= $x78 true)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x85)))
 (let ((?x36 (concat (select input.dst.llvm-mem ?x104) ?x68)))
 (let (($x137 (= input.spec-%var-opt-0.2 ?x36)))
 (let (($x103 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x37 (=> $x103 $x137)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x17 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x11 (bvuge ?x17 (_ bv1 32))))
 (let (($x115 (= $x103 $x11)))
 (let (($x111 (= false false)))
 (let (($x44 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x136 (=> $x44 $x111)))
 (let (($x49 (= ?x17 (_ bv0 32))))
 (let (($x101 (= $x44 $x49)))
 (let (($x46 (and (and (and $x101 $x136) $x115) $x37)))
 (let (($x15 (= $x46 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x58 (concat ?x63 (concat ?x26 ?x116)))))
 (let (($x125 (= ?x42 input.dst.llvm-%opt)))
 (let (($x90 (= $x125 true)))
 (let (($x108 (= $x90 true)))
 (let (($x30 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x112 (= true $x30)))
 (let (($x59 (not $x110)))
 (let (($x83 (=> $x59 $x112)))
 (let (($x18 (and $x30 $x83)))
 (let (($x20 (= $x18 true)))
 (let (($x96 (= $x20 true)))
 (let (($x124 (= $x96 true)))
 (let (($x87 (= $x59 true)))
 (let (($x81 (= $x87 true)))
 (let (($x118 (= $x81 true)))
 (let (($x98 (= $x30 true)))
 (let (($x77 (= $x98 true)))
 (let (($x97 (= $x77 true)))
 (let ((?x22 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x22)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x62 $x40)))
 (let (($x129 (and $x67 $x33)))
 (let (($x71 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x71 $x129)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x25)))))))
 (let (($x134 (and $x119 $x100)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x133 (= $x48 true)))
 (let (($x39 (and $x133 $x97)))
 (let (($x76 (and $x39 $x118)))
 (let (($x95 (and $x76 $x124)))
 (let (($x91 (and $x95 $x108)))
 (let (($x55 (and $x91 $x15)))
 (let (($x114 (and $x103 $x55)))
 (let (($x99 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x57 (and $x99 $x114)))
 (let (($x45 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x19 (and $x45 $x57)))
 (let (($x13 (and $x111 $x19)))
 (let (($x27 (=> (and $x59 $x14) (or false (or false (and true (or $x128 $x5)))))))
 (let (($x73 (and $x27 $x13)))
 (let (($x6 (=> $x73 $x122)))
 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x42 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x42)))
 (let (($x23 (= ?x125 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x131 (= $x23 true)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x113)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x138)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x74)))
 (let (($x8 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x57 (=> $x8 $x114)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x36 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x36 (_ bv1 32))))
 (let (($x55 (= $x8 $x15)))
 (let (($x111 (= false false)))
 (let (($x85 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x46 (=> $x85 $x111)))
 (let (($x137 (= ?x36 (_ bv0 32))))
 (let (($x37 (= $x85 $x137)))
 (let (($x73 (and (and (and $x37 $x46) $x55) $x57)))
 (let (($x78 (= $x73 true)))
 (let (($x60 (= ?x125 ?x74)))
 (let (($x10 (= $x60 true)))
 (let (($x21 (= $x10 true)))
 (let (($x108 (= ?x125 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x91 (= $x108 true)))
 (let (($x56 (= $x91 true)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x70)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x96 $x95)))
 (let (($x105 (and $x7 $x58)))
 (let (($x98 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x98 $x105)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x81)))))))
 (let (($x63 (and $x20 $x135)))
 (let (($x43 (= $x63 true)))
 (let (($x26 (= $x43 true)))
 (let (($x116 (= $x26 true)))
 (let ((?x129 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x100 ((_ zero_extend 31) ?x129)))
 (let (($x134 (= (_ bv1 32) ?x100)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x52 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x71 (= $x52 true)))
 (let (($x62 (= $x71 true)))
 (let (($x34 (= $x62 true)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x89 (=> $x25 (or false (or false (and true (or $x99 $x53)))))))
 (let (($x80 (= $x89 true)))
 (let (($x82 (= $x80 true)))
 (let (($x32 (= $x82 true)))
 (let ((?x64 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x104 (= (_ bv0 2) ?x64)))
 (let (($x128 (= $x104 true)))
 (let (($x84 (= $x128 true)))
 (let (($x121 (and $x84 $x32)))
 (let (($x40 (and $x121 $x34)))
 (let (($x133 (and $x40 $x48)))
 (let (($x72 (and $x133 $x116)))
 (let (($x44 (and $x72 $x56)))
 (let (($x61 (and $x44 $x21)))
 (let (($x122 (and $x61 $x78)))
 (let (($x6 (and $x8 $x122)))
 (let (($x123 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x109 (and $x123 $x6)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x12 (and $x110 $x109)))
 (let (($x102 (and $x111 $x12)))
 (let (($x41 (=> $x102 $x131)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x42 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x42)))
 (let (($x23 (= ?x125 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x131 (= $x23 true)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x113)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x138)))
 (let (($x114 (= input.spec-%var-opt-0.2 ?x74)))
 (let (($x8 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x57 (=> $x8 $x114)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x36 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x36 (_ bv1 32))))
 (let (($x55 (= $x8 $x15)))
 (let (($x111 (= false false)))
 (let (($x85 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x46 (=> $x85 $x111)))
 (let (($x137 (= ?x36 (_ bv0 32))))
 (let (($x37 (= $x85 $x137)))
 (let (($x73 (and (and (and $x37 $x46) $x55) $x57)))
 (let (($x78 (= $x73 true)))
 (let (($x60 (= ?x125 ?x74)))
 (let (($x10 (= $x60 true)))
 (let (($x21 (= $x10 true)))
 (let (($x108 (= ?x125 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x91 (= $x108 true)))
 (let (($x56 (= $x91 true)))
 (let ((?x70 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x70)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x96 $x95)))
 (let (($x105 (and $x7 $x58)))
 (let (($x98 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x98 $x105)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x81)))))))
 (let (($x63 (and $x20 $x135)))
 (let (($x43 (= $x63 true)))
 (let (($x26 (= $x43 true)))
 (let (($x116 (= $x26 true)))
 (let ((?x129 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x100 ((_ zero_extend 31) ?x129)))
 (let (($x134 (= (_ bv1 32) ?x100)))
 (let (($x126 (= $x134 true)))
 (let (($x48 (= $x126 true)))
 (let (($x52 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x71 (= $x52 true)))
 (let (($x62 (= $x71 true)))
 (let (($x34 (= $x62 true)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x25 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x89 (=> $x25 (or false (or false (and true (or $x99 $x53)))))))
 (let (($x80 (= $x89 true)))
 (let (($x82 (= $x80 true)))
 (let (($x32 (= $x82 true)))
 (let ((?x64 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x104 (= (_ bv0 2) ?x64)))
 (let (($x128 (= $x104 true)))
 (let (($x84 (= $x128 true)))
 (let (($x121 (and $x84 $x32)))
 (let (($x40 (and $x121 $x34)))
 (let (($x133 (and $x40 $x48)))
 (let (($x72 (and $x133 $x116)))
 (let (($x44 (and $x72 $x56)))
 (let (($x61 (and $x44 $x21)))
 (let (($x122 (and $x61 $x78)))
 (let (($x6 (and $x8 $x122)))
 (let (($x123 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x109 (and $x123 $x6)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x12 (and $x110 $x109)))
 (let (($x102 (and $x111 $x12)))
 (let (($x41 (=> $x102 $x131)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x38 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x54 (= $x38 true)))
 (let (($x5 (= $x54 true)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x138)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x21)))
 (let (($x57 (= input.spec-%var-opt-0.2 ?x86)))
 (let (($x64 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x73 (=> $x64 $x57)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x19 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x13 (bvuge ?x19 (_ bv1 32))))
 (let (($x114 (= $x64 $x13)))
 (let (($x111 (= false false)))
 (let (($x37 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x55 (=> $x37 $x111)))
 (let (($x8 (= ?x19 (_ bv0 32))))
 (let (($x15 (= $x37 $x8)))
 (let (($x6 (and (and (and $x15 $x55) $x114) $x73)))
 (let (($x109 (= $x6 true)))
 (let ((?x56 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x56)))
 (let (($x85 (= ?x44 ?x86)))
 (let (($x68 (= $x85 true)))
 (let (($x36 (= $x68 true)))
 (let (($x93 (= ?x44 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x103 (= $x93 true)))
 (let (($x11 (= $x103 true)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x43)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x58 $x135)))
 (let (($x116 (and $x63 $x26)))
 (let (($x118 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x118 $x116)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x30)))))))
 (let (($x65 (and $x70 $x72)))
 (let (($x42 (= $x65 true)))
 (let (($x125 (= $x42 true)))
 (let (($x90 (= $x125 true)))
 (let ((?x48 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x133 ((_ zero_extend 31) ?x48)))
 (let (($x29 (= (_ bv1 32) ?x133)))
 (let (($x77 (= $x29 true)))
 (let (($x97 (= $x77 true)))
 (let (($x40 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x67 (= $x40 true)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x89 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x31 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x119 (=> $x31 (or false (or false (and true (or $x16 $x89)))))))
 (let (($x45 (= $x119 true)))
 (let (($x127 (= $x45 true)))
 (let (($x52 (= $x127 true)))
 (let ((?x84 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x50 (= (_ bv0 2) ?x84)))
 (let (($x117 (= $x50 true)))
 (let (($x106 (= $x117 true)))
 (let (($x71 (and $x106 $x52)))
 (let (($x129 (and $x71 $x33)))
 (let (($x18 (and $x129 $x97)))
 (let (($x108 (and $x18 $x90)))
 (let (($x115 (and $x108 $x11)))
 (let (($x137 (and $x115 $x36)))
 (let (($x12 (and $x137 $x109)))
 (let (($x102 (and $x64 $x12)))
 (let (($x123 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x23 (and $x123 $x102)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x131 (and $x110 $x23)))
 (let (($x41 (and $x111 $x131)))
 (let (($x132 (=> $x41 $x5)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x38 (= input.spec-%var-val-1.L3%5%fcallStart input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x54 (= $x38 true)))
 (let (($x5 (= $x54 true)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x138)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x21)))
 (let (($x57 (= input.spec-%var-opt-0.2 ?x86)))
 (let (($x64 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x73 (=> $x64 $x57)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x19 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x13 (bvuge ?x19 (_ bv1 32))))
 (let (($x114 (= $x64 $x13)))
 (let (($x111 (= false false)))
 (let (($x37 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x55 (=> $x37 $x111)))
 (let (($x8 (= ?x19 (_ bv0 32))))
 (let (($x15 (= $x37 $x8)))
 (let (($x6 (and (and (and $x15 $x55) $x114) $x73)))
 (let (($x109 (= $x6 true)))
 (let ((?x56 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x56)))
 (let (($x85 (= ?x44 ?x86)))
 (let (($x68 (= $x85 true)))
 (let (($x36 (= $x68 true)))
 (let (($x93 (= ?x44 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x103 (= $x93 true)))
 (let (($x11 (= $x103 true)))
 (let ((?x43 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x43)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x58 $x135)))
 (let (($x116 (and $x63 $x26)))
 (let (($x118 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x118 $x116)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x30)))))))
 (let (($x65 (and $x70 $x72)))
 (let (($x42 (= $x65 true)))
 (let (($x125 (= $x42 true)))
 (let (($x90 (= $x125 true)))
 (let ((?x48 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x133 ((_ zero_extend 31) ?x48)))
 (let (($x29 (= (_ bv1 32) ?x133)))
 (let (($x77 (= $x29 true)))
 (let (($x97 (= $x77 true)))
 (let (($x40 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x67 (= $x40 true)))
 (let (($x22 (= $x67 true)))
 (let (($x33 (= $x22 true)))
 (let (($x89 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x31 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x119 (=> $x31 (or false (or false (and true (or $x16 $x89)))))))
 (let (($x45 (= $x119 true)))
 (let (($x127 (= $x45 true)))
 (let (($x52 (= $x127 true)))
 (let ((?x84 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x50 (= (_ bv0 2) ?x84)))
 (let (($x117 (= $x50 true)))
 (let (($x106 (= $x117 true)))
 (let (($x71 (and $x106 $x52)))
 (let (($x129 (and $x71 $x33)))
 (let (($x18 (and $x129 $x97)))
 (let (($x108 (and $x18 $x90)))
 (let (($x115 (and $x108 $x11)))
 (let (($x137 (and $x115 $x36)))
 (let (($x12 (and $x137 $x109)))
 (let (($x102 (and $x64 $x12)))
 (let (($x123 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x23 (and $x123 $x102)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x131 (and $x110 $x23)))
 (let (($x41 (and $x111 $x131)))
 (let (($x132 (=> $x41 $x5)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x132 (=> $x81 true)))
 (let (($x92 (= $x132 true)))
 (let (($x24 (= $x92 true)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x36)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x84 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x6 (=> $x84 $x73)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x78 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge ?x78 (_ bv1 32))))
 (let (($x57 (= $x84 $x122)))
 (let (($x111 (= false false)))
 (let (($x15 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x114 (=> $x15 $x111)))
 (let (($x64 (= ?x78 (_ bv0 32))))
 (let (($x13 (= $x15 $x64)))
 (let (($x102 (and (and (and $x13 $x114) $x57) $x6)))
 (let (($x23 (= $x102 true)))
 (let ((?x117 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x117)))
 (let (($x37 (= ?x106 ?x14)))
 (let (($x46 (= $x37 true)))
 (let (($x19 (= $x46 true)))
 (let ((?x101 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x61 (= (_ bv0 2) ?x101)))
 (let (($x74 (= $x61 true)))
 (let (($x60 (= $x74 true)))
 (let (($x90 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x17 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x93 (=> $x17 (or false (or false (and true (or $x125 $x90)))))))
 (let (($x26 (= $x93 true)))
 (let (($x116 (= $x26 true)))
 (let (($x103 (= $x116 true)))
 (let (($x118 (= $x81 true)))
 (let (($x58 (= $x118 true)))
 (let (($x105 (= $x58 true)))
 (let ((?x39 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x39)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x133 $x97)))
 (let (($x112 (and $x18 $x76)))
 (let (($x127 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x127 $x112)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x22)))))))
 (let (($x83 (and $x48 $x7)))
 (let (($x20 (= $x83 true)))
 (let (($x30 (= $x20 true)))
 (let (($x98 (= $x30 true)))
 (let ((?x28 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x16 ((_ zero_extend 31) ?x28)))
 (let (($x88 (= (_ bv1 32) ?x16)))
 (let (($x89 (= $x88 true)))
 (let (($x80 (= $x89 true)))
 (let (($x99 (= ?x106 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x9 (= $x99 true)))
 (let (($x75 (= $x9 true)))
 (let (($x82 (and $x75 $x80)))
 (let (($x96 (and $x82 $x98)))
 (let (($x135 (and $x96 $x105)))
 (let (($x11 (and $x135 $x103)))
 (let (($x10 (and $x11 $x60)))
 (let (($x8 (and $x10 $x19)))
 (let (($x131 (and $x8 $x23)))
 (let (($x41 (and $x84 $x131)))
 (let (($x123 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x38 (and $x123 $x41)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x54 (and $x110 $x38)))
 (let (($x5 (and $x111 $x54)))
 (let (($x27 (=> $x5 $x24)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%tobool.Lentry%2%d () Bool)
(declare-fun input.dst.llvm-%0.Lif.then%2%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(assert
 (let (($x81 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x132 (=> $x81 true)))
 (let (($x92 (= $x132 true)))
 (let (($x24 (= $x92 true)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%opt))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv2 32))) ?x21)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%opt (_ bv3 32))) ?x36)))
 (let (($x73 (= input.spec-%var-opt-0.2 ?x14)))
 (let (($x84 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x6 (=> $x84 $x73)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x78 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge ?x78 (_ bv1 32))))
 (let (($x57 (= $x84 $x122)))
 (let (($x111 (= false false)))
 (let (($x15 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x114 (=> $x15 $x111)))
 (let (($x64 (= ?x78 (_ bv0 32))))
 (let (($x13 (= $x15 $x64)))
 (let (($x102 (and (and (and $x13 $x114) $x57) $x6)))
 (let (($x23 (= $x102 true)))
 (let ((?x117 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x117)))
 (let (($x37 (= ?x106 ?x14)))
 (let (($x46 (= $x37 true)))
 (let (($x19 (= $x46 true)))
 (let ((?x101 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x61 (= (_ bv0 2) ?x101)))
 (let (($x74 (= $x61 true)))
 (let (($x60 (= $x74 true)))
 (let (($x90 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x17 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x93 (=> $x17 (or false (or false (and true (or $x125 $x90)))))))
 (let (($x26 (= $x93 true)))
 (let (($x116 (= $x26 true)))
 (let (($x103 (= $x116 true)))
 (let (($x118 (= $x81 true)))
 (let (($x58 (= $x118 true)))
 (let (($x105 (= $x58 true)))
 (let ((?x39 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x39)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x133 $x97)))
 (let (($x112 (and $x18 $x76)))
 (let (($x127 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x127 $x112)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x22)))))))
 (let (($x83 (and $x48 $x7)))
 (let (($x20 (= $x83 true)))
 (let (($x30 (= $x20 true)))
 (let (($x98 (= $x30 true)))
 (let ((?x28 (ite input.dst.llvm-%tobool.Lentry%2%d (_ bv1 1) (_ bv0 1))))
 (let ((?x16 ((_ zero_extend 31) ?x28)))
 (let (($x88 (= (_ bv1 32) ?x16)))
 (let (($x89 (= $x88 true)))
 (let (($x80 (= $x89 true)))
 (let (($x99 (= ?x106 input.dst.llvm-%0.Lif.then%2%fcallStart)))
 (let (($x9 (= $x99 true)))
 (let (($x75 (= $x9 true)))
 (let (($x82 (and $x75 $x80)))
 (let (($x96 (and $x82 $x98)))
 (let (($x135 (and $x96 $x105)))
 (let (($x11 (and $x135 $x103)))
 (let (($x10 (and $x11 $x60)))
 (let (($x8 (and $x10 $x19)))
 (let (($x131 (and $x8 $x23)))
 (let (($x41 (and $x84 $x131)))
 (let (($x123 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x38 (and $x123 $x41)))
 (let (($x110 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x54 (and $x110 $x38)))
 (let (($x5 (and $x111 $x54)))
 (let (($x27 (=> $x5 $x24)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x93 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x87 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x32 (=> $x87 $x93)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x21 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x21 (_ bv1 32))))
 (let (($x43 (= $x87 $x46)))
 (let (($x123 (= false false)))
 (let (($x92 (= (_ bv1 32) (_ bv0 32))))
 (let (($x27 (=> $x92 $x123)))
 (let (($x36 (= ?x21 (_ bv0 32))))
 (let (($x24 (= $x92 $x36)))
 (let (($x139 (and (and (and $x24 $x27) $x43) $x32)))
 (let (($x132 (= true true)))
 (let (($x140 (and $x132 $x139)))
 (let (($x66 (= $x140 true)))
 (let ((?x55 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x78 (concat ?x55 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x111 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x128 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x128) (concat ?x111 ?x78))))
 (let (($x122 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x57 (=> $x62 $x122)))
 (let (($x19 (= $x62 $x46)))
 (let (($x138 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x37 (=> $x138 $x123)))
 (let (($x14 (= $x138 $x36)))
 (let (($x6 (and (and (and $x14 $x37) $x19) $x57)))
 (let (($x102 (= $x6 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x86 (= (_ bv0 2) ?x137)))
 (let (($x85 (= $x86 true)))
 (let (($x68 (= $x85 true)))
 (let (($x101 (= $x93 true)))
 (let (($x61 (= $x101 true)))
 (let (($x74 (= $x61 true)))
 (let (($x17 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (and $x17 $x93)))
 (let (($x116 (= $x26 true)))
 (let (($x103 (= $x116 true)))
 (let (($x11 (= $x103 true)))
 (let (($x42 (= $x17 true)))
 (let (($x125 (= $x42 true)))
 (let (($x90 (= $x125 true)))
 (let ((?x124 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x124)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x20 $x98)))
 (let (($x70 (and $x96 $x95)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x45 $x70)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x97)))))))
 (let (($x118 (and $x83 $x81)))
 (let (($x58 (= $x118 true)))
 (let (($x105 (= $x58 true)))
 (let (($x135 (= $x105 true)))
 (let ((?x67 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x67)))
 (let (($x22 (= ?x34 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x33 (= $x22 true)))
 (let (($x129 (= $x33 true)))
 (let (($x63 (and $x129 $x135)))
 (let (($x108 (and $x63 $x90)))
 (let (($x91 (and $x108 $x90)))
 (let (($x115 (and $x91 $x11)))
 (let (($x60 (and $x115 $x74)))
 (let (($x10 (and $x60 $x74)))
 (let (($x136 (and $x10 $x68)))
 (let (($x23 (and $x136 $x102)))
 (let (($x131 (and $x62 $x23)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x41 (and $x71 $x131)))
 (let (($x121 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x38 (and $x121 $x41)))
 (let (($x54 (and $x123 $x38)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x89 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x89 (or false (or false (and true (or $x31 $x53)))))))
 (let (($x5 (and $x80 $x54)))
 (let (($x94 (=> $x5 $x66)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%call.Lif.then%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%opt () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lif.then%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-opt-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-opt-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L3%5%fcallStart () (_ BitVec 32))
(assert
 (let (($x93 (= input.spec-%tmpvar-3.L3%5%fcallEnd input.dst.llvm-%call.Lif.then%2%fcallEnd)))
 (let (($x87 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x32 (=> $x87 $x93)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%opt)))
 (let ((?x21 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x21 (_ bv1 32))))
 (let (($x43 (= $x87 $x46)))
 (let (($x123 (= false false)))
 (let (($x92 (= (_ bv1 32) (_ bv0 32))))
 (let (($x27 (=> $x92 $x123)))
 (let (($x36 (= ?x21 (_ bv0 32))))
 (let (($x24 (= $x92 $x36)))
 (let (($x139 (and (and (and $x24 $x27) $x43) $x32)))
 (let (($x132 (= true true)))
 (let (($x140 (and $x132 $x139)))
 (let (($x66 (= $x140 true)))
 (let ((?x55 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv1 32)))))
 (let ((?x78 (concat ?x55 (select input.dst.llvm-mem.Lif.then%2%fcallEnd input.dst.llvm-%opt))))
 (let ((?x111 (select input.dst.llvm-mem.Lif.then%2%fcallEnd (bvadd input.dst.llvm-%opt (_ bv2 32)))))
 (let ((?x128 (bvadd input.dst.llvm-%opt (_ bv3 32))))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lif.then%2%fcallEnd ?x128) (concat ?x111 ?x78))))
 (let (($x122 (= input.spec-%var-opt-0.2 ?x84)))
 (let (($x62 (bvuge input.spec-%var-opt-0.0 (_ bv1 32))))
 (let (($x57 (=> $x62 $x122)))
 (let (($x19 (= $x62 $x46)))
 (let (($x138 (= input.spec-%var-opt-0.0 (_ bv0 32))))
 (let (($x37 (=> $x138 $x123)))
 (let (($x14 (= $x138 $x36)))
 (let (($x6 (and (and (and $x14 $x37) $x19) $x57)))
 (let (($x102 (= $x6 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%opt)))
 (let (($x86 (= (_ bv0 2) ?x137)))
 (let (($x85 (= $x86 true)))
 (let (($x68 (= $x85 true)))
 (let (($x101 (= $x93 true)))
 (let (($x61 (= $x101 true)))
 (let (($x74 (= $x61 true)))
 (let (($x17 (= (bvand input.dst.llvm-%opt (_ bv4294967292 32)) input.dst.llvm-%opt)))
 (let (($x26 (and $x17 $x93)))
 (let (($x116 (= $x26 true)))
 (let (($x103 (= $x116 true)))
 (let (($x11 (= $x103 true)))
 (let (($x42 (= $x17 true)))
 (let (($x125 (= $x42 true)))
 (let (($x90 (= $x125 true)))
 (let ((?x124 (bvand input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x124)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x20 $x98)))
 (let (($x70 (and $x96 $x95)))
 (let (($x45 (= input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x45 $x70)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x97)))))))
 (let (($x118 (and $x83 $x81)))
 (let (($x58 (= $x118 true)))
 (let (($x105 (= $x58 true)))
 (let (($x135 (= $x105 true)))
 (let ((?x67 (bvmul input.spec-%var-val-1.L3%5%fcallStart (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x67)))
 (let (($x22 (= ?x34 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x33 (= $x22 true)))
 (let (($x129 (= $x33 true)))
 (let (($x63 (and $x129 $x135)))
 (let (($x108 (and $x63 $x90)))
 (let (($x91 (and $x108 $x90)))
 (let (($x115 (and $x91 $x11)))
 (let (($x60 (and $x115 $x74)))
 (let (($x10 (and $x60 $x74)))
 (let (($x136 (and $x10 $x68)))
 (let (($x23 (and $x136 $x102)))
 (let (($x131 (and $x62 $x23)))
 (let (($x71 (= input.spec-%var-opt-0.2 input.spec-%var-val-1.L3%5%fcallStart)))
 (let (($x41 (and $x71 $x131)))
 (let (($x121 (= input.spec-%var-opt-0.2 input.spec-fcall_arg_copy.0.spec-%var-val-1.L3%5%fcallEnd)))
 (let (($x38 (and $x121 $x41)))
 (let (($x54 (and $x123 $x38)))
 (let (($x53 (bvugt input.dst.llvm-%opt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x89 (bvule input.dst.llvm-%opt (bvsub (bvadd input.dst.llvm-%opt (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x89 (or false (or false (and true (or $x31 $x53)))))))
 (let (($x5 (and $x80 $x54)))
 (let (($x94 (=> $x5 $x66)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x77 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x100 (or (bvugt input.memlabel-mem--arg.0_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x100) (or $x29 $x77)))))))
 (let (($x16 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x9 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= ?x9 (_ bv0 32))))
 (let ((?x110 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x128 $x99)))
 (let (($x28 (and $x25 $x47)))
 (let (($x88 (and $x28 $x16)))
 (and $x88 $x83)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x77 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x100 (or (bvugt input.memlabel-mem--arg.0_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x100) (or $x29 $x77)))))))
 (let (($x16 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let ((?x9 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= ?x9 (_ bv0 32))))
 (let ((?x110 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x128 $x99)))
 (let (($x28 (and $x25 $x47)))
 (let (($x88 (and $x28 $x16)))
 (and $x88 $x83)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x116 (= true false)))
 (let (($x103 (= $x116 true)))
 (let (($x125 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x90 (= $x125 true)))
 (let (($x108 (= $x90 true)))
 (let (($x91 (= $x108 true)))
 (let ((?x118 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x118)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x79 $x70)))
 (let (($x105 (and $x81 $x58)))
 (let (($x18 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x18 $x105)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x29)))))))
 (let (($x63 (and $x124 $x135)))
 (let (($x72 (= $x63 true)))
 (let (($x65 (= $x72 true)))
 (let (($x17 (= $x65 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x80 (concat ?x127 (concat ?x71 ?x52)))))
 (let (($x67 (= ?x7 input.dst.llvm-%val)))
 (let (($x83 (= $x67 true)))
 (let (($x76 (= $x83 true)))
 (let (($x42 (and $x76 $x17)))
 (let (($x56 (and $x42 $x91)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x44 (and $x45 $x56)))
 (let ((?x47 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x100 (= ?x47 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x93 (and $x100 $x44)))
 (let (($x88 (= ?x47 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x26 (and $x88 $x93)))
 (let (($x11 (=> $x26 $x103)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x116 (= true false)))
 (let (($x103 (= $x116 true)))
 (let (($x125 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x90 (= $x125 true)))
 (let (($x108 (= $x90 true)))
 (let (($x91 (= $x108 true)))
 (let ((?x118 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x118)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x79 $x70)))
 (let (($x105 (and $x81 $x58)))
 (let (($x18 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x18 $x105)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x29)))))))
 (let (($x63 (and $x124 $x135)))
 (let (($x72 (= $x63 true)))
 (let (($x65 (= $x72 true)))
 (let (($x17 (= $x65 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x80 (concat ?x127 (concat ?x71 ?x52)))))
 (let (($x67 (= ?x7 input.dst.llvm-%val)))
 (let (($x83 (= $x67 true)))
 (let (($x76 (= $x83 true)))
 (let (($x42 (and $x76 $x17)))
 (let (($x56 (and $x42 $x91)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x44 (and $x45 $x56)))
 (let ((?x47 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x100 (= ?x47 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x93 (and $x100 $x44)))
 (let (($x88 (= ?x47 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x26 (and $x88 $x93)))
 (let (($x11 (=> $x26 $x103)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000001010)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111110110)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111110110)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv10 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967286 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x117 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x110 (= ?x117 ?x115)))
 (let (($x106 (= $x110 true)))
 (let (($x39 (= $x106 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x108 (concat ?x42 (concat ?x63 ?x105)))))
 (let (($x56 (= ?x91 input.dst.llvm-%val)))
 (let (($x44 (= $x56 true)))
 (let (($x93 (= $x44 true)))
 (let (($x18 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x79 (= $x18 true)))
 (let (($x95 (= $x79 true)))
 (let (($x70 (= $x95 true)))
 (let ((?x133 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x133)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x129 $x96)))
 (let (($x112 (and $x9 $x75)))
 (let (($x121 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x121 $x112)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x20)))))))
 (let (($x25 (and $x76 $x29)))
 (let (($x53 (= $x25 true)))
 (let (($x89 (= $x53 true)))
 (let (($x98 (= $x89 true)))
 (let (($x81 (and $x98 $x70)))
 (let (($x26 (and $x81 $x93)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x116 (and $x45 $x26)))
 (let (($x16 (= ?x117 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x103 (and $x16 $x116)))
 (let (($x82 (= ?x117 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x11 (and $x82 $x103)))
 (let (($x101 (=> $x11 $x39)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv4294967286 32) input.dst.llvm-%val)))
 (let ((?x117 (bvadd input.spec-%var-val-0 (_ bv4294967286 32))))
 (let (($x110 (= ?x117 ?x115)))
 (let (($x106 (= $x110 true)))
 (let (($x39 (= $x106 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___update_val__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x108 (concat ?x42 (concat ?x63 ?x105)))))
 (let (($x56 (= ?x91 input.dst.llvm-%val)))
 (let (($x44 (= $x56 true)))
 (let (($x93 (= $x44 true)))
 (let (($x18 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x79 (= $x18 true)))
 (let (($x95 (= $x79 true)))
 (let (($x70 (= $x95 true)))
 (let ((?x133 (bvand input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x133)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x129 $x96)))
 (let (($x112 (and $x9 $x75)))
 (let (($x121 (= input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x121 $x112)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x20)))))))
 (let (($x25 (and $x76 $x29)))
 (let (($x53 (= $x25 true)))
 (let (($x89 (= $x53 true)))
 (let (($x98 (= $x89 true)))
 (let (($x81 (and $x98 $x70)))
 (let (($x26 (and $x81 $x93)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x116 (and $x45 $x26)))
 (let (($x16 (= ?x117 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x103 (and $x16 $x116)))
 (let (($x82 (= ?x117 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x11 (and $x82 $x103)))
 (let (($x101 (=> $x11 $x39)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510089/query
