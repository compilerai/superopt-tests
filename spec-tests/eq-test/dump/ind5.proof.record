==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x126 (= true false)))
 (let (($x127 (= $x126 true)))
 (let (($x112 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x121 (= $x120 $x112)))
 (let (($x109 (= (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (= $x118 $x109)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x111 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x113 (= $x111 $x112)))
 (let (($x108 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x110 (= $x108 $x109)))
 (let (($x114 (and $x110 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x102 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x104 (and $x100 $x103)))
 (let (($x105 (= $x104 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x88 (concat ?x84 ?x82)))))
 (let (($x93 (= ?x92 input.dst.llvm-%l)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x75 (not $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x65 (bvugt ?x58 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x58 (_ bv3 32)))))
 (let (($x71 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x59 (= $x71 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x7)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x43 $x33)))
 (let (($x51 (and $x31 $x50)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x44 $x51)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x34)))))))
 (let (($x53 (and $x28 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x42 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x9 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x42)))))))
 (let (($x47 (= $x9 true)))
 (let (($x21 (= $x47 true)))
 (let (($x38 (= $x21 true)))
 (let (($x57 (and $x38 $x56)))
 (let (($x73 (and $x57 $x72)))
 (let (($x79 (and $x73 $x78)))
 (let (($x96 (and $x79 $x95)))
 (let (($x106 (and $x96 $x105)))
 (let (($x116 (and $x106 $x115)))
 (let (($x124 (and $x116 $x123)))
 (let (($x35 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x125 (and $x35 $x124)))
 (let (($x128 (=> $x125 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x126 (= true false)))
 (let (($x127 (= $x126 true)))
 (let (($x112 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x121 (= $x120 $x112)))
 (let (($x109 (= (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (= $x118 $x109)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x111 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x113 (= $x111 $x112)))
 (let (($x108 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x110 (= $x108 $x109)))
 (let (($x114 (and $x110 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x102 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x104 (and $x100 $x103)))
 (let (($x105 (= $x104 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x88 (concat ?x84 ?x82)))))
 (let (($x93 (= ?x92 input.dst.llvm-%l)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x75 (not $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x65 (bvugt ?x58 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x58 (_ bv3 32)))))
 (let (($x71 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x59 (= $x71 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x7)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x43 $x33)))
 (let (($x51 (and $x31 $x50)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x44 $x51)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x34)))))))
 (let (($x53 (and $x28 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x42 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x9 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x42)))))))
 (let (($x47 (= $x9 true)))
 (let (($x21 (= $x47 true)))
 (let (($x38 (= $x21 true)))
 (let (($x57 (and $x38 $x56)))
 (let (($x73 (and $x57 $x72)))
 (let (($x79 (and $x73 $x78)))
 (let (($x96 (and $x79 $x95)))
 (let (($x106 (and $x96 $x105)))
 (let (($x116 (and $x106 $x115)))
 (let (($x124 (and $x116 $x123)))
 (let (($x35 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x125 (and $x35 $x124)))
 (let (($x128 (=> $x125 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb8)
                     #xffa7ff3d
                     #x06)
              #xffa7ff3f
              #x57)
       #xffa7ff3e
       #x23))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x572306b8)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa7ff3f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xefffdffc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x7f)
                     #xefffdfff
                     #x00)
              #xefffdffe
              #x00)
       #xefffdffd
       #x05))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000057f)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xefffdffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xefffdfff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x141 (= true false)))
 (let (($x142 (= $x141 true)))
 (let (($x131 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x134 (not $x131)))
 (let (($x19 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x133 (not $x19)))
 (let (($x137 (and (and (and (= $x19 (= (_ bv1 32) (_ bv0 32))) (= $x131 (bvuge (_ bv1 32) (_ bv1 32)))) $x133) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x126 (not $x122)))
 (let (($x119 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x125 (not $x119)))
 (let (($x129 (and (and (and (= $x119 (= (_ bv1 32) (_ bv0 32))) (= $x122 (bvuge (_ bv1 32) (_ bv1 32)))) $x125) $x126)))
 (let (($x46 (= $x129 true)))
 (let (($x115 (not true)))
 (let (($x116 (= $x115 true)))
 (let (($x105 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x109 (not $x105)))
 (let (($x102 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x108 (not $x102)))
 (let (($x112 (and (and (and (= $x102 (= (_ bv0 32) (_ bv0 32))) (= $x105 (bvuge (_ bv0 32) (_ bv1 32)))) $x108) $x109)))
 (let (($x113 (= $x112 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x92 (concat ?x84 ?x88)))))
 (let (($x97 (= ?x96 input.dst.llvm-%l)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x78 (not $x77)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x90 (= $x80 true)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x69 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x70 (_ bv3 32)))))
 (let (($x74 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x63 (= $x74 true)))
 (let (($x64 (= $x63 true)))
 (let (($x75 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x31 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x39 $x54)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x45)))))))
 (let (($x56 (and $x33 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x61 (= $x58 true)))
 (let (($x17 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x38 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x17)))))))
 (let (($x15 (= $x38 true)))
 (let (($x16 (= $x15 true)))
 (let (($x5 (= $x16 true)))
 (let (($x62 (and $x5 $x61)))
 (let (($x76 (and $x62 $x75)))
 (let (($x91 (and $x76 $x90)))
 (let (($x100 (and $x91 $x99)))
 (let (($x114 (and $x100 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x37 (and $x117 $x46)))
 (let (($x139 (and $x37 $x138)))
 (let (($x23 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x140 (and $x23 $x139)))
 (let (($x143 (=> $x140 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x141 (= true false)))
 (let (($x142 (= $x141 true)))
 (let (($x131 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x134 (not $x131)))
 (let (($x19 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x133 (not $x19)))
 (let (($x137 (and (and (and (= $x19 (= (_ bv1 32) (_ bv0 32))) (= $x131 (bvuge (_ bv1 32) (_ bv1 32)))) $x133) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x126 (not $x122)))
 (let (($x119 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x125 (not $x119)))
 (let (($x129 (and (and (and (= $x119 (= (_ bv1 32) (_ bv0 32))) (= $x122 (bvuge (_ bv1 32) (_ bv1 32)))) $x125) $x126)))
 (let (($x46 (= $x129 true)))
 (let (($x115 (not true)))
 (let (($x116 (= $x115 true)))
 (let (($x105 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x109 (not $x105)))
 (let (($x102 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x108 (not $x102)))
 (let (($x112 (and (and (and (= $x102 (= (_ bv0 32) (_ bv0 32))) (= $x105 (bvuge (_ bv0 32) (_ bv1 32)))) $x108) $x109)))
 (let (($x113 (= $x112 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x92 (concat ?x84 ?x88)))))
 (let (($x97 (= ?x96 input.dst.llvm-%l)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x78 (not $x77)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x90 (= $x80 true)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x69 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x70 (_ bv3 32)))))
 (let (($x74 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x63 (= $x74 true)))
 (let (($x64 (= $x63 true)))
 (let (($x75 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x31 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x39 $x54)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x45)))))))
 (let (($x56 (and $x33 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x61 (= $x58 true)))
 (let (($x17 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x38 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x17)))))))
 (let (($x15 (= $x38 true)))
 (let (($x16 (= $x15 true)))
 (let (($x5 (= $x16 true)))
 (let (($x62 (and $x5 $x61)))
 (let (($x76 (and $x62 $x75)))
 (let (($x91 (and $x76 $x90)))
 (let (($x100 (and $x91 $x99)))
 (let (($x114 (and $x100 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x37 (and $x117 $x46)))
 (let (($x139 (and $x37 $x138)))
 (let (($x23 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x140 (and $x23 $x139)))
 (let (($x143 (=> $x140 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x20 (= true false)))
 (let (($x145 (= $x20 true)))
 (let (($x109 (= false false)))
 (let (($x137 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x137 $x109)))
 (let (($x19 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x139 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x140 (= $x139 $x19)))
 (let (($x46 (= (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= $x137 $x46)))
 (let (($x143 (and (and $x138 $x140) $x141)))
 (let (($x144 (= $x143 true)))
 (let (($x129 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x131 (=> $x129 $x109)))
 (let (($x81 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (= $x81 $x19)))
 (let (($x37 (= $x129 $x46)))
 (let (($x135 (and (and $x37 $x130) $x131)))
 (let (($x133 (= $x135 true)))
 (let (($x108 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x123 (= $x122 $x108)))
 (let (($x106 (= (_ bv0 32) (_ bv0 32))))
 (let (($x120 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x121 (= $x120 $x106)))
 (let (($x118 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x127 (and (and $x118 $x121) $x123)))
 (let (($x125 (= $x127 true)))
 (let (($x105 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x112 (=> $x105 $x109)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (= $x110 $x108)))
 (let (($x107 (= $x105 $x106)))
 (let (($x114 (and (and $x107 $x111) $x112)))
 (let (($x115 (= $x114 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x93 (concat ?x83 ?x89)))))
 (let (($x100 (= ?x99 input.dst.llvm-%l)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x80 (not $x79)))
 (let (($x90 (= $x80 true)))
 (let (($x91 (= $x90 true)))
 (let (($x86 (= $x91 true)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x60 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x66 (_ bv3 32)))))
 (let (($x76 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x73 (= $x76 true)))
 (let (($x67 (= $x73 true)))
 (let (($x77 (= $x67 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x54)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x50 $x52)))
 (let (($x56 (and $x53 $x55)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x30 $x56)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x44)))))))
 (let (($x58 (and $x7 $x57)))
 (let (($x61 (= $x58 true)))
 (let (($x62 (= $x61 true)))
 (let (($x70 (= $x62 true)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x5 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x36)))))))
 (let (($x48 (= $x5 true)))
 (let (($x40 (= $x48 true)))
 (let (($x6 (= $x40 true)))
 (let (($x65 (and $x6 $x70)))
 (let (($x78 (and $x65 $x77)))
 (let (($x94 (and $x78 $x86)))
 (let (($x103 (and $x94 $x102)))
 (let (($x116 (and $x103 $x115)))
 (let (($x128 (and $x116 $x125)))
 (let (($x136 (and $x128 $x133)))
 (let (($x11 (and $x136 $x144)))
 (let (($x13 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x87 (and $x13 $x11)))
 (let (($x146 (=> $x87 $x145)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x20 (= true false)))
 (let (($x145 (= $x20 true)))
 (let (($x109 (= false false)))
 (let (($x137 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x137 $x109)))
 (let (($x19 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x139 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x140 (= $x139 $x19)))
 (let (($x46 (= (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= $x137 $x46)))
 (let (($x143 (and (and $x138 $x140) $x141)))
 (let (($x144 (= $x143 true)))
 (let (($x129 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x131 (=> $x129 $x109)))
 (let (($x81 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (= $x81 $x19)))
 (let (($x37 (= $x129 $x46)))
 (let (($x135 (and (and $x37 $x130) $x131)))
 (let (($x133 (= $x135 true)))
 (let (($x108 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x123 (= $x122 $x108)))
 (let (($x106 (= (_ bv0 32) (_ bv0 32))))
 (let (($x120 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x121 (= $x120 $x106)))
 (let (($x118 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x127 (and (and $x118 $x121) $x123)))
 (let (($x125 (= $x127 true)))
 (let (($x105 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x112 (=> $x105 $x109)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (= $x110 $x108)))
 (let (($x107 (= $x105 $x106)))
 (let (($x114 (and (and $x107 $x111) $x112)))
 (let (($x115 (= $x114 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x93 (concat ?x83 ?x89)))))
 (let (($x100 (= ?x99 input.dst.llvm-%l)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x80 (not $x79)))
 (let (($x90 (= $x80 true)))
 (let (($x91 (= $x90 true)))
 (let (($x86 (= $x91 true)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x60 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x66 (_ bv3 32)))))
 (let (($x76 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x73 (= $x76 true)))
 (let (($x67 (= $x73 true)))
 (let (($x77 (= $x67 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x54)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x50 $x52)))
 (let (($x56 (and $x53 $x55)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x30 $x56)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x44)))))))
 (let (($x58 (and $x7 $x57)))
 (let (($x61 (= $x58 true)))
 (let (($x62 (= $x61 true)))
 (let (($x70 (= $x62 true)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x5 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x36)))))))
 (let (($x48 (= $x5 true)))
 (let (($x40 (= $x48 true)))
 (let (($x6 (= $x40 true)))
 (let (($x65 (and $x6 $x70)))
 (let (($x78 (and $x65 $x77)))
 (let (($x94 (and $x78 $x86)))
 (let (($x103 (and $x94 $x102)))
 (let (($x116 (and $x103 $x115)))
 (let (($x128 (and $x116 $x125)))
 (let (($x136 (and $x128 $x133)))
 (let (($x11 (and $x136 $x144)))
 (let (($x13 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x87 (and $x13 $x11)))
 (let (($x146 (=> $x87 $x145)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb8)
                     #xffa7ff3d
                     #x06)
              #xffa7ff3f
              #x57)
       #xffa7ff3e
       #x23))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x572306b8)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa7ff3f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592508 32) (_ bv250 8)) (_ bv2214592509 32) (_ bv255 8)) (_ bv2214592510 32) (_ bv255 8)) (_ bv2214592511 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592511 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x154 (= true false)))
 (let (($x155 (= $x154 true)))
 (let (($x116 (= false false)))
 (let (($x146 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x42 (=> $x146 $x116)))
 (let (($x12 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x85 (not $x12)))
 (let (($x150 (and (and (and (= $x146 (= (_ bv1 32) (_ bv0 32))) (= $x12 (bvuge (_ bv1 32) (_ bv1 32)))) $x85) $x42)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x136 $x116)))
 (let (($x138 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x142 (not $x138)))
 (let (($x11 (and (and (and (= $x136 (= (_ bv1 32) (_ bv0 32))) (= $x138 (bvuge (_ bv1 32) (_ bv1 32)))) $x142) $x141)))
 (let (($x87 (= $x11 true)))
 (let (($x126 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x37 (not $x126)))
 (let (($x125 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x46 (not $x125)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x129 (= $x126 $x112)))
 (let (($x19 (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x125 (= (_ bv0 32) (_ bv0 32)))) $x129)))
 (let (($x132 (and (and $x19 $x46) $x37)))
 (let (($x131 (= $x132 true)))
 (let (($x108 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x108 $x116)))
 (let (($x109 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (not $x109)))
 (let (($x120 (and (and (and (= $x108 (= (_ bv0 32) (_ bv0 32))) (= $x109 $x112)) $x115) $x117)))
 (let (($x121 (= $x120 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x83 ?x93)))))
 (let (($x104 (= ?x103 input.dst.llvm-%l)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x91 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x86 (not $x91)))
 (let (($x94 (= $x86 true)))
 (let (($x95 (= $x94 true)))
 (let (($x97 (= $x95 true)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x64 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x75 (_ bv3 32)))))
 (let (($x79 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x64)))))))
 (let (($x71 (= $x79 true)))
 (let (($x59 (= $x71 true)))
 (let (($x80 (= $x59 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x61 (and $x56 $x58)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x18 $x61)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x39)))))))
 (let (($x70 (and $x52 $x62)))
 (let (($x65 (= $x70 true)))
 (let (($x66 (= $x65 true)))
 (let (($x68 (= $x66 true)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x6 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x36)))))))
 (let (($x21 (= $x6 true)))
 (let (($x16 (= $x21 true)))
 (let (($x41 (= $x16 true)))
 (let (($x69 (and $x41 $x68)))
 (let (($x90 (and $x69 $x80)))
 (let (($x98 (and $x90 $x97)))
 (let (($x107 (and $x98 $x106)))
 (let (($x124 (and $x107 $x121)))
 (let (($x135 (and $x124 $x131)))
 (let (($x20 (and $x135 $x87)))
 (let (($x152 (and $x20 $x151)))
 (let (($x35 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x153 (and $x35 $x152)))
 (let (($x156 (=> $x153 $x155)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x154 (= true false)))
 (let (($x155 (= $x154 true)))
 (let (($x116 (= false false)))
 (let (($x146 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x42 (=> $x146 $x116)))
 (let (($x12 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x85 (not $x12)))
 (let (($x150 (and (and (and (= $x146 (= (_ bv1 32) (_ bv0 32))) (= $x12 (bvuge (_ bv1 32) (_ bv1 32)))) $x85) $x42)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x136 $x116)))
 (let (($x138 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x142 (not $x138)))
 (let (($x11 (and (and (and (= $x136 (= (_ bv1 32) (_ bv0 32))) (= $x138 (bvuge (_ bv1 32) (_ bv1 32)))) $x142) $x141)))
 (let (($x87 (= $x11 true)))
 (let (($x126 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x37 (not $x126)))
 (let (($x125 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x46 (not $x125)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x129 (= $x126 $x112)))
 (let (($x19 (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x125 (= (_ bv0 32) (_ bv0 32)))) $x129)))
 (let (($x132 (and (and $x19 $x46) $x37)))
 (let (($x131 (= $x132 true)))
 (let (($x108 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x108 $x116)))
 (let (($x109 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (not $x109)))
 (let (($x120 (and (and (and (= $x108 (= (_ bv0 32) (_ bv0 32))) (= $x109 $x112)) $x115) $x117)))
 (let (($x121 (= $x120 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x83 ?x93)))))
 (let (($x104 (= ?x103 input.dst.llvm-%l)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x91 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x86 (not $x91)))
 (let (($x94 (= $x86 true)))
 (let (($x95 (= $x94 true)))
 (let (($x97 (= $x95 true)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x64 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x75 (_ bv3 32)))))
 (let (($x79 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x64)))))))
 (let (($x71 (= $x79 true)))
 (let (($x59 (= $x71 true)))
 (let (($x80 (= $x59 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x61 (and $x56 $x58)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x18 $x61)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x39)))))))
 (let (($x70 (and $x52 $x62)))
 (let (($x65 (= $x70 true)))
 (let (($x66 (= $x65 true)))
 (let (($x68 (= $x66 true)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x6 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x36)))))))
 (let (($x21 (= $x6 true)))
 (let (($x16 (= $x21 true)))
 (let (($x41 (= $x16 true)))
 (let (($x69 (and $x41 $x68)))
 (let (($x90 (and $x69 $x80)))
 (let (($x98 (and $x90 $x97)))
 (let (($x107 (and $x98 $x106)))
 (let (($x124 (and $x107 $x121)))
 (let (($x135 (and $x124 $x131)))
 (let (($x20 (and $x135 $x87)))
 (let (($x152 (and $x20 $x151)))
 (let (($x35 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x153 (and $x35 $x152)))
 (let (($x156 (=> $x153 $x155)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x252 (= true false)))
 (let (($x253 (= $x252 true)))
 (let (($x119 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x238 (= $x237 $x119)))
 (let (($x226 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (and $x214 $x226)))
 (let (($x239 (=> $x229 $x238)))
 (let (($x114 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x114)))
 (let (($x236 (=> $x229 $x235)))
 (let (($x231 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x232 (=> $x229 $x231)))
 (let (($x227 (= $x226 $x119)))
 (let (($x228 (=> $x214 $x227)))
 (let (($x117 (= false false)))
 (let (($x221 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x214 $x221)))
 (let (($x225 (=> $x224 $x117)))
 (let (($x222 (= $x221 $x114)))
 (let (($x223 (=> $x214 $x222)))
 (let (($x218 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x219 (=> $x214 $x218)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x216 (=> $x212 $x117)))
 (let (($x242 (and (and (and (= $x212 (= (_ bv1 32) (_ bv0 32))) (= $x214 (bvuge (_ bv1 32) (_ bv1 32)))) $x216) $x219)))
 (let (($x248 (and (and (and (and (and (and $x242 $x223) $x225) $x228) $x232) $x236) $x239)))
 (let (($x249 (= $x248 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x197 $x119)))
 (let (($x186 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x189 (and $x173 $x186)))
 (let (($x199 (=> $x189 $x198)))
 (let (($x194 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x194 $x114)))
 (let (($x196 (=> $x189 $x195)))
 (let (($x191 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x192 (=> $x189 $x191)))
 (let (($x187 (= $x186 $x119)))
 (let (($x188 (=> $x173 $x187)))
 (let (($x181 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x173 $x181)))
 (let (($x185 (=> $x184 $x117)))
 (let (($x182 (= $x181 $x114)))
 (let (($x183 (=> $x173 $x182)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x179 (=> $x173 $x178)))
 (let (($x170 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x176 (=> $x170 $x117)))
 (let (($x202 (and (and (and (= $x170 (= (_ bv1 32) (_ bv0 32))) (= $x173 (bvuge (_ bv1 32) (_ bv1 32)))) $x176) $x179)))
 (let (($x208 (and (and (and (and (and (and $x202 $x183) $x185) $x188) $x192) $x196) $x199)))
 (let (($x209 (= $x208 true)))
 (let (($x13 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x13 $x119)))
 (let (($x42 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x159 (=> $x42 $x158)))
 (let (($x156 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x31 (and $x42 $x156)))
 (let (($x82 (=> $x31 $x117)))
 (let (($x157 (= $x156 $x114)))
 (let (($x24 (=> $x42 $x157)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x154 (=> $x42 $x153)))
 (let (($x85 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x151 (=> $x85 $x117)))
 (let (($x150 (= $x42 $x119)))
 (let (($x162 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x85 $x114)) $x150) $x151)))
 (let (($x166 (and (and (and (and $x162 $x154) $x24) $x82) $x159)))
 (let (($x167 (= $x166 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x138 (= $x137 $x119)))
 (let (($x129 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x115 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (and $x115 $x129)))
 (let (($x139 (=> $x130 $x138)))
 (let (($x133 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x136 (= $x133 $x114)))
 (let (($x134 (=> $x130 $x136)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x131 (=> $x130 $x132)))
 (let (($x19 (= $x129 $x119)))
 (let (($x46 (=> $x115 $x19)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x81 (and $x115 $x127)))
 (let (($x126 (=> $x81 $x117)))
 (let (($x125 (= $x127 $x114)))
 (let (($x128 (=> $x115 $x125)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x122 (=> $x115 $x124)))
 (let (($x112 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x120 (=> $x112 $x117)))
 (let (($x141 (and (and (and (and (and (= $x112 $x114) (= $x115 $x119)) $x120) $x122) $x128) $x126)))
 (let (($x145 (and (and (and (and $x141 $x46) $x131) $x134) $x139)))
 (let (($x146 (= $x145 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x83 ?x99)))))
 (let (($x110 (= ?x107 input.dst.llvm-%l)))
 (let (($x108 (= $x110 true)))
 (let (($x111 (= $x108 true)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x97 (not $x95)))
 (let (($x98 (= $x97 true)))
 (let (($x88 (= $x98 true)))
 (let (($x101 (= $x88 true)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x77 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x78 (_ bv3 32)))))
 (let (($x91 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x77)))))))
 (let (($x74 (= $x91 true)))
 (let (($x63 (= $x74 true)))
 (let (($x86 (= $x63 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x62)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x56 $x58)))
 (let (($x65 (and $x61 $x70)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x14 $x65)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x50)))))))
 (let (($x68 (and $x55 $x66)))
 (let (($x69 (= $x68 true)))
 (let (($x75 (= $x69 true)))
 (let (($x60 (= $x75 true)))
 (let (($x16 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x43 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x16)))))))
 (let (($x6 (= $x43 true)))
 (let (($x40 (= $x6 true)))
 (let (($x29 (= $x40 true)))
 (let (($x72 (and $x29 $x60)))
 (let (($x94 (and $x72 $x86)))
 (let (($x102 (and $x94 $x101)))
 (let (($x113 (and $x102 $x111)))
 (let (($x147 (and $x113 $x146)))
 (let (($x168 (and $x147 $x167)))
 (let (($x210 (and $x168 $x209)))
 (let (($x250 (and $x210 $x249)))
 (let (($x5 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x251 (and $x5 $x250)))
 (let (($x254 (=> $x251 $x253)))
 (not $x254))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x252 (= true false)))
 (let (($x253 (= $x252 true)))
 (let (($x119 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x238 (= $x237 $x119)))
 (let (($x226 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (and $x214 $x226)))
 (let (($x239 (=> $x229 $x238)))
 (let (($x114 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x114)))
 (let (($x236 (=> $x229 $x235)))
 (let (($x231 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x232 (=> $x229 $x231)))
 (let (($x227 (= $x226 $x119)))
 (let (($x228 (=> $x214 $x227)))
 (let (($x117 (= false false)))
 (let (($x221 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x214 $x221)))
 (let (($x225 (=> $x224 $x117)))
 (let (($x222 (= $x221 $x114)))
 (let (($x223 (=> $x214 $x222)))
 (let (($x218 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x219 (=> $x214 $x218)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x216 (=> $x212 $x117)))
 (let (($x242 (and (and (and (= $x212 (= (_ bv1 32) (_ bv0 32))) (= $x214 (bvuge (_ bv1 32) (_ bv1 32)))) $x216) $x219)))
 (let (($x248 (and (and (and (and (and (and $x242 $x223) $x225) $x228) $x232) $x236) $x239)))
 (let (($x249 (= $x248 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x197 $x119)))
 (let (($x186 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x189 (and $x173 $x186)))
 (let (($x199 (=> $x189 $x198)))
 (let (($x194 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x194 $x114)))
 (let (($x196 (=> $x189 $x195)))
 (let (($x191 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x192 (=> $x189 $x191)))
 (let (($x187 (= $x186 $x119)))
 (let (($x188 (=> $x173 $x187)))
 (let (($x181 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x173 $x181)))
 (let (($x185 (=> $x184 $x117)))
 (let (($x182 (= $x181 $x114)))
 (let (($x183 (=> $x173 $x182)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x179 (=> $x173 $x178)))
 (let (($x170 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x176 (=> $x170 $x117)))
 (let (($x202 (and (and (and (= $x170 (= (_ bv1 32) (_ bv0 32))) (= $x173 (bvuge (_ bv1 32) (_ bv1 32)))) $x176) $x179)))
 (let (($x208 (and (and (and (and (and (and $x202 $x183) $x185) $x188) $x192) $x196) $x199)))
 (let (($x209 (= $x208 true)))
 (let (($x13 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x13 $x119)))
 (let (($x42 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x159 (=> $x42 $x158)))
 (let (($x156 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x31 (and $x42 $x156)))
 (let (($x82 (=> $x31 $x117)))
 (let (($x157 (= $x156 $x114)))
 (let (($x24 (=> $x42 $x157)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x154 (=> $x42 $x153)))
 (let (($x85 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x151 (=> $x85 $x117)))
 (let (($x150 (= $x42 $x119)))
 (let (($x162 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x85 $x114)) $x150) $x151)))
 (let (($x166 (and (and (and (and $x162 $x154) $x24) $x82) $x159)))
 (let (($x167 (= $x166 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x138 (= $x137 $x119)))
 (let (($x129 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x115 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (and $x115 $x129)))
 (let (($x139 (=> $x130 $x138)))
 (let (($x133 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x136 (= $x133 $x114)))
 (let (($x134 (=> $x130 $x136)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x131 (=> $x130 $x132)))
 (let (($x19 (= $x129 $x119)))
 (let (($x46 (=> $x115 $x19)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x81 (and $x115 $x127)))
 (let (($x126 (=> $x81 $x117)))
 (let (($x125 (= $x127 $x114)))
 (let (($x128 (=> $x115 $x125)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x122 (=> $x115 $x124)))
 (let (($x112 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x120 (=> $x112 $x117)))
 (let (($x141 (and (and (and (and (and (= $x112 $x114) (= $x115 $x119)) $x120) $x122) $x128) $x126)))
 (let (($x145 (and (and (and (and $x141 $x46) $x131) $x134) $x139)))
 (let (($x146 (= $x145 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x83 ?x99)))))
 (let (($x110 (= ?x107 input.dst.llvm-%l)))
 (let (($x108 (= $x110 true)))
 (let (($x111 (= $x108 true)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x97 (not $x95)))
 (let (($x98 (= $x97 true)))
 (let (($x88 (= $x98 true)))
 (let (($x101 (= $x88 true)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x77 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x78 (_ bv3 32)))))
 (let (($x91 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x77)))))))
 (let (($x74 (= $x91 true)))
 (let (($x63 (= $x74 true)))
 (let (($x86 (= $x63 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x62)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x56 $x58)))
 (let (($x65 (and $x61 $x70)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x14 $x65)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x50)))))))
 (let (($x68 (and $x55 $x66)))
 (let (($x69 (= $x68 true)))
 (let (($x75 (= $x69 true)))
 (let (($x60 (= $x75 true)))
 (let (($x16 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x43 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x16)))))))
 (let (($x6 (= $x43 true)))
 (let (($x40 (= $x6 true)))
 (let (($x29 (= $x40 true)))
 (let (($x72 (and $x29 $x60)))
 (let (($x94 (and $x72 $x86)))
 (let (($x102 (and $x94 $x101)))
 (let (($x113 (and $x102 $x111)))
 (let (($x147 (and $x113 $x146)))
 (let (($x168 (and $x147 $x167)))
 (let (($x210 (and $x168 $x209)))
 (let (($x250 (and $x210 $x249)))
 (let (($x5 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x251 (and $x5 $x250)))
 (let (($x254 (=> $x251 $x253)))
 (not $x254))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
                     #xffa000bd
                     #x5b)
              #xffa000bf
              #x00)
       #xffa000be
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00005b20)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa000bf)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592508 32) (_ bv250 8)) (_ bv2214592509 32) (_ bv255 8)) (_ bv2214592510 32) (_ bv255 8)) (_ bv2214592511 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592511 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x273 (= true false)))
 (let (($x274 (= $x273 true)))
 (let (($x255 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x247 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x227 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x239 (and $x227 $x247)))
 (let (($x257 (and $x239 $x255)))
 (let (($x258 (not $x257)))
 (let (($x252 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x41 (and $x239 $x252)))
 (let (($x256 (not $x41)))
 (let (($x117 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x51 (= $x255 $x117)))
 (let (($x96 (=> $x239 $x51)))
 (let (($x119 (= (_ bv0 32) (_ bv0 32))))
 (let (($x253 (= $x252 $x119)))
 (let (($x254 (=> $x239 $x253)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x250 (=> $x239 $x249)))
 (let (($x237 (= $x247 $x117)))
 (let (($x238 (=> $x227 $x237)))
 (let (($x143 (= false false)))
 (let (($x246 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x235 (and $x227 $x246)))
 (let (($x236 (=> $x235 $x143)))
 (let (($x233 (= $x246 $x119)))
 (let (($x234 (=> $x227 $x233)))
 (let (($x230 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x231 (=> $x227 $x230)))
 (let (($x244 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x245 (=> $x244 $x143)))
 (let (($x261 (and (and (and (= $x244 (= (_ bv1 32) (_ bv0 32))) (= $x227 (bvuge (_ bv1 32) (_ bv1 32)))) $x245) $x231)))
 (let (($x267 (and (and (and (and (and (and $x261 $x234) $x236) $x238) $x250) $x254) $x96)))
 (let (($x269 (and (and $x267 $x256) $x258)))
 (let (($x270 (= $x269 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x194 (and $x182 $x192)))
 (let (($x214 (and $x194 $x209)))
 (let (($x215 (not $x214)))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x194 $x198)))
 (let (($x213 (not $x212)))
 (let (($x210 (= $x209 $x117)))
 (let (($x211 (=> $x194 $x210)))
 (let (($x199 (= $x198 $x119)))
 (let (($x208 (=> $x194 $x199)))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x207 (=> $x194 $x196)))
 (let (($x206 (= $x192 $x117)))
 (let (($x193 (=> $x182 $x206)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x190 (and $x182 $x188)))
 (let (($x191 (=> $x190 $x143)))
 (let (($x205 (= $x188 $x119)))
 (let (($x189 (=> $x182 $x205)))
 (let (($x204 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x186 (=> $x182 $x204)))
 (let (($x202 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x202 $x143)))
 (let (($x241 (and (and (and (= $x202 (= (_ bv1 32) (_ bv0 32))) (= $x182 (bvuge (_ bv1 32) (_ bv1 32)))) $x184) $x186)))
 (let (($x221 (and (and (and (and (and (and $x241 $x189) $x191) $x193) $x207) $x208) $x211)))
 (let (($x223 (and (and $x221 $x213) $x215)))
 (let (($x243 (= $x223 true)))
 (let (($x166 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x169 (and $x163 $x166)))
 (let (($x170 (not $x169)))
 (let (($x167 (= $x166 $x117)))
 (let (($x168 (=> $x163 $x167)))
 (let (($x82 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x163 $x82)))
 (let (($x159 (=> $x158 $x143)))
 (let (($x165 (= $x82 $x119)))
 (let (($x13 (=> $x163 $x165)))
 (let (($x24 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x164 (=> $x163 $x24)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x156 (=> $x153 $x143)))
 (let (($x155 (= $x163 $x117)))
 (let (($x173 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x153 $x119)) $x155) $x156)))
 (let (($x201 (and (and (and (and (and $x173 $x164) $x13) $x159) $x168) $x170)))
 (let (($x177 (= $x201 true)))
 (let (($x135 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x19 (and $x140 $x126)))
 (let (($x137 (and $x19 $x135)))
 (let (($x138 (not $x137)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x134 (and $x19 $x132)))
 (let (($x20 (not $x134)))
 (let (($x133 (= $x135 $x117)))
 (let (($x136 (=> $x19 $x133)))
 (let (($x131 (= $x132 $x119)))
 (let (($x87 (=> $x19 $x131)))
 (let (($x11 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x130 (=> $x19 $x11)))
 (let (($x141 (= $x126 $x117)))
 (let (($x129 (=> $x140 $x141)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x144 (and $x140 $x127)))
 (let (($x81 (=> $x144 $x143)))
 (let (($x125 (= $x127 $x119)))
 (let (($x128 (=> $x140 $x125)))
 (let (($x122 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x142 (=> $x140 $x122)))
 (let (($x115 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x121 (=> $x115 $x143)))
 (let (($x12 (and (and (and (and (and (= $x115 $x119) (= $x140 $x117)) $x121) $x142) $x128) $x81)))
 (let (($x42 (and (and (and (and (and (and $x12 $x129) $x130) $x87) $x136) $x20) $x138)))
 (let (($x150 (= $x42 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x108 (concat ?x104 (concat ?x92 ?x100)))))
 (let (($x113 (= ?x111 input.dst.llvm-%l)))
 (let (($x109 (= $x113 true)))
 (let (($x112 (= $x109 true)))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x88 (not $x98)))
 (let (($x101 (= $x88 true)))
 (let (($x102 (= $x101 true)))
 (let (($x84 (= $x102 true)))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x59 (bvugt ?x76 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x76 (_ bv3 32)))))
 (let (($x94 (=> (bvule ?x76 (bvsub (bvadd ?x76 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x59)))))))
 (let (($x90 (= $x94 true)))
 (let (($x73 (= $x90 true)))
 (let (($x95 (= $x73 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x65)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x18 $x62)))
 (let (($x68 (and $x70 $x66)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x57 $x68)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x54)))))))
 (let (($x75 (and $x40 $x69)))
 (let (($x60 (= $x75 true)))
 (let (($x72 (= $x60 true)))
 (let (($x78 (= $x72 true)))
 (let (($x50 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x49 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x50)))))))
 (let (($x23 (= $x49 true)))
 (let (($x39 (= $x23 true)))
 (let (($x36 (= $x39 true)))
 (let (($x64 (and $x36 $x78)))
 (let (($x97 (and $x64 $x95)))
 (let (($x105 (and $x97 $x84)))
 (let (($x114 (and $x105 $x112)))
 (let (($x161 (and $x114 $x150)))
 (let (($x178 (and $x161 $x177)))
 (let (($x224 (and $x178 $x243)))
 (let (($x271 (and $x224 $x270)))
 (let (($x15 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x272 (and $x15 $x271)))
 (let (($x275 (=> $x272 $x274)))
 (not $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x273 (= true false)))
 (let (($x274 (= $x273 true)))
 (let (($x255 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x247 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x227 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x239 (and $x227 $x247)))
 (let (($x257 (and $x239 $x255)))
 (let (($x258 (not $x257)))
 (let (($x252 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x41 (and $x239 $x252)))
 (let (($x256 (not $x41)))
 (let (($x117 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x51 (= $x255 $x117)))
 (let (($x96 (=> $x239 $x51)))
 (let (($x119 (= (_ bv0 32) (_ bv0 32))))
 (let (($x253 (= $x252 $x119)))
 (let (($x254 (=> $x239 $x253)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x250 (=> $x239 $x249)))
 (let (($x237 (= $x247 $x117)))
 (let (($x238 (=> $x227 $x237)))
 (let (($x143 (= false false)))
 (let (($x246 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x235 (and $x227 $x246)))
 (let (($x236 (=> $x235 $x143)))
 (let (($x233 (= $x246 $x119)))
 (let (($x234 (=> $x227 $x233)))
 (let (($x230 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x231 (=> $x227 $x230)))
 (let (($x244 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x245 (=> $x244 $x143)))
 (let (($x261 (and (and (and (= $x244 (= (_ bv1 32) (_ bv0 32))) (= $x227 (bvuge (_ bv1 32) (_ bv1 32)))) $x245) $x231)))
 (let (($x267 (and (and (and (and (and (and $x261 $x234) $x236) $x238) $x250) $x254) $x96)))
 (let (($x269 (and (and $x267 $x256) $x258)))
 (let (($x270 (= $x269 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x194 (and $x182 $x192)))
 (let (($x214 (and $x194 $x209)))
 (let (($x215 (not $x214)))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x194 $x198)))
 (let (($x213 (not $x212)))
 (let (($x210 (= $x209 $x117)))
 (let (($x211 (=> $x194 $x210)))
 (let (($x199 (= $x198 $x119)))
 (let (($x208 (=> $x194 $x199)))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x207 (=> $x194 $x196)))
 (let (($x206 (= $x192 $x117)))
 (let (($x193 (=> $x182 $x206)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x190 (and $x182 $x188)))
 (let (($x191 (=> $x190 $x143)))
 (let (($x205 (= $x188 $x119)))
 (let (($x189 (=> $x182 $x205)))
 (let (($x204 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x186 (=> $x182 $x204)))
 (let (($x202 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x202 $x143)))
 (let (($x241 (and (and (and (= $x202 (= (_ bv1 32) (_ bv0 32))) (= $x182 (bvuge (_ bv1 32) (_ bv1 32)))) $x184) $x186)))
 (let (($x221 (and (and (and (and (and (and $x241 $x189) $x191) $x193) $x207) $x208) $x211)))
 (let (($x223 (and (and $x221 $x213) $x215)))
 (let (($x243 (= $x223 true)))
 (let (($x166 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x169 (and $x163 $x166)))
 (let (($x170 (not $x169)))
 (let (($x167 (= $x166 $x117)))
 (let (($x168 (=> $x163 $x167)))
 (let (($x82 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x163 $x82)))
 (let (($x159 (=> $x158 $x143)))
 (let (($x165 (= $x82 $x119)))
 (let (($x13 (=> $x163 $x165)))
 (let (($x24 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x164 (=> $x163 $x24)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x156 (=> $x153 $x143)))
 (let (($x155 (= $x163 $x117)))
 (let (($x173 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x153 $x119)) $x155) $x156)))
 (let (($x201 (and (and (and (and (and $x173 $x164) $x13) $x159) $x168) $x170)))
 (let (($x177 (= $x201 true)))
 (let (($x135 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x19 (and $x140 $x126)))
 (let (($x137 (and $x19 $x135)))
 (let (($x138 (not $x137)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x134 (and $x19 $x132)))
 (let (($x20 (not $x134)))
 (let (($x133 (= $x135 $x117)))
 (let (($x136 (=> $x19 $x133)))
 (let (($x131 (= $x132 $x119)))
 (let (($x87 (=> $x19 $x131)))
 (let (($x11 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x130 (=> $x19 $x11)))
 (let (($x141 (= $x126 $x117)))
 (let (($x129 (=> $x140 $x141)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x144 (and $x140 $x127)))
 (let (($x81 (=> $x144 $x143)))
 (let (($x125 (= $x127 $x119)))
 (let (($x128 (=> $x140 $x125)))
 (let (($x122 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x142 (=> $x140 $x122)))
 (let (($x115 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x121 (=> $x115 $x143)))
 (let (($x12 (and (and (and (and (and (= $x115 $x119) (= $x140 $x117)) $x121) $x142) $x128) $x81)))
 (let (($x42 (and (and (and (and (and (and $x12 $x129) $x130) $x87) $x136) $x20) $x138)))
 (let (($x150 (= $x42 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x108 (concat ?x104 (concat ?x92 ?x100)))))
 (let (($x113 (= ?x111 input.dst.llvm-%l)))
 (let (($x109 (= $x113 true)))
 (let (($x112 (= $x109 true)))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x88 (not $x98)))
 (let (($x101 (= $x88 true)))
 (let (($x102 (= $x101 true)))
 (let (($x84 (= $x102 true)))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x59 (bvugt ?x76 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x76 (_ bv3 32)))))
 (let (($x94 (=> (bvule ?x76 (bvsub (bvadd ?x76 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x59)))))))
 (let (($x90 (= $x94 true)))
 (let (($x73 (= $x90 true)))
 (let (($x95 (= $x73 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x65)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x18 $x62)))
 (let (($x68 (and $x70 $x66)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x57 $x68)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x54)))))))
 (let (($x75 (and $x40 $x69)))
 (let (($x60 (= $x75 true)))
 (let (($x72 (= $x60 true)))
 (let (($x78 (= $x72 true)))
 (let (($x50 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x49 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x50)))))))
 (let (($x23 (= $x49 true)))
 (let (($x39 (= $x23 true)))
 (let (($x36 (= $x39 true)))
 (let (($x64 (and $x36 $x78)))
 (let (($x97 (and $x64 $x95)))
 (let (($x105 (and $x97 $x84)))
 (let (($x114 (and $x105 $x112)))
 (let (($x161 (and $x114 $x150)))
 (let (($x178 (and $x161 $x177)))
 (let (($x224 (and $x178 $x243)))
 (let (($x271 (and $x224 $x270)))
 (let (($x15 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x272 (and $x15 $x271)))
 (let (($x275 (=> $x272 $x274)))
 (not $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ef58198)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x34)
                     #x0ef58199
                     #x93)
              #x0ef5819b
              #x26)
       #x0ef5819a
       #xb9))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x26b99334)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ef58198)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ef5819b)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #xfffffffb
                     #xff)
              #xfffffffa
              #xff)
       #xfffffff9
       #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffd)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x16 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x47 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x56 (bvadd ?x47 (_ bv3 32))))
 (let ((?x71 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x178 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x170 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x176 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x180 (store (store (store ?x176 ?x170 ((_ extract 15 8) (_ bv42 32))) ?x178 ((_ extract 23 16) (_ bv42 32))) ?x71 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x184 (store (store ?x180 (bvadd ?x47 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x47 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x241 (store (store ?x184 (bvadd ?x47 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x56 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x207 (concat (select ?x241 (bvadd ?x16 (_ bv2 32))) (concat (select ?x241 (bvadd ?x16 (_ bv1 32))) (select ?x241 ?x16)))))
 (let ((?x198 (concat (select ?x241 (bvadd ?x16 (_ bv3 32))) ?x207)))
 (let (($x199 (= (_ bv0 32) ?x198)))
 (let ((?x208 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x208 (_ bv1 32))))
 (let (($x222 (= false $x213)))
 (let (($x152 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x214 (=> $x152 $x222)))
 (let (($x221 (= false false)))
 (let (($x133 (= (_ bv0 32) (_ bv0 32))))
 (let (($x211 (and $x152 $x133)))
 (let (($x212 (=> $x211 $x221)))
 (let (($x220 (= ?x208 (_ bv0 32))))
 (let (($x209 (= true $x220)))
 (let (($x210 (=> $x152 $x209)))
 (let ((?x217 (concat (select ?x241 ?x178) (concat (select ?x241 ?x170) (select ?x241 input.dst.llvm-%l)))))
 (let ((?x191 (concat (select ?x241 ?x71) ?x217)))
 (let (($x218 (= (_ bv42 32) ?x191)))
 (let (($x192 (=> $x152 $x218)))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x175 (ite $x128 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x175 (_ bv1 32))))
 (let (($x166 (= true $x200)))
 (let (($x158 (= ?x175 (_ bv0 32))))
 (let (($x159 (= false $x158)))
 (let (($x225 (and (and (and (and (and $x159 $x166) $x192) $x210) $x212) $x214)))
 (let (($x13 (not true)))
 (let (($x244 (or $x13 $x225)))
 (let (($x165 (= true true)))
 (let (($x226 (and $x165 $x244)))
 (let (($x227 (= $x226 true)))
 (let (($x173 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (= $x173 $x152)))
 (let (($x161 (= (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (= $x172 $x161)))
 (let (($x24 (and $x156 $x157)))
 (let (($x164 (= $x24 true)))
 (let (($x162 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x153 (= $x162 $x152)))
 (let (($x150 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x150 $x161)))
 (let (($x154 (and $x151 $x153)))
 (let (($x171 (= $x154 true)))
 (let (($x134 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (= $x149 $x134)))
 (let (($x135 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x136 (= $x135 $x133)))
 (let (($x160 (and $x136 $x20)))
 (let (($x137 (= $x160 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x123 (concat ?x122 (concat ?x143 ?x120)))))
 (let (($x37 (= ?x127 input.dst.llvm-%l)))
 (let (($x132 (= $x37 true)))
 (let (($x131 (= $x132 true)))
 (let (($x147 (not $x128)))
 (let (($x46 (= $x147 true)))
 (let (($x11 (= $x46 true)))
 (let (($x130 (= $x11 true)))
 (let (($x125 (= input.dst.llvm-%l ?x127)))
 (let (($x144 (and $x125 $x147)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x7)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x17 $x45)))
 (let (($x64 (and $x79 $x75)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x22 $x64)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x67)))))))
 (let (($x109 (= (bvand ?x47 (_ bv4294967292 32)) ?x47)))
 (let (($x100 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x47 (bvsub ?x47 (_ bv4 32))) (bvult ?x47 (bvsub ?x47 (_ bv4 32))))))
 (let (($x99 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x88 (and true $x98)))
 (let (($x105 (and $x88 $x84)))
 (let (($x106 (and $x105 $x98)))
 (let (($x111 (and (and (and $x88 $x106) $x99) $x100)))
 (let (($x112 (and $x111 $x109)))
 (let (($x126 (and (and (and $x112 $x62) $x35) $x144)))
 (let (($x141 (= $x126 true)))
 (let (($x129 (= $x141 true)))
 (let (($x8 (= $x129 true)))
 (let (($x114 (= $x112 true)))
 (let (($x118 (= $x114 true)))
 (let (($x115 (= $x118 true)))
 (let (($x52 (and $x62 $x35)))
 (let (($x10 (= $x52 true)))
 (let (($x63 (= $x10 true)))
 (let (($x94 (= $x63 true)))
 (let (($x119 (and $x94 $x115)))
 (let (($x116 (and $x119 $x115)))
 (let (($x19 (and $x116 $x8)))
 (let (($x148 (and $x19 $x130)))
 (let (($x87 (and $x148 $x131)))
 (let (($x138 (and $x87 $x137)))
 (let (($x163 (and $x138 $x171)))
 (let (($x174 (and $x163 $x164)))
 (let (($x48 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x31 (and $x48 $x174)))
 (let (($x53 (bvugt ?x47 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x21 (=> (bvule ?x47 (bvsub (bvadd ?x47 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x53)))))))
 (let (($x66 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x44 (=> (bvule input.dst.llvm-%l (bvsub ?x16 (_ bv1 32))) (or false (or false (and true (or $x14 $x66)))))))
 (let (($x9 (and $x44 $x21)))
 (let (($x82 (and $x9 $x31)))
 (let (($x228 (=> $x82 $x227)))
 (not $x228)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x16 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x47 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x56 (bvadd ?x47 (_ bv3 32))))
 (let ((?x71 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x178 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x170 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x176 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x180 (store (store (store ?x176 ?x170 ((_ extract 15 8) (_ bv42 32))) ?x178 ((_ extract 23 16) (_ bv42 32))) ?x71 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x184 (store (store ?x180 (bvadd ?x47 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x47 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x241 (store (store ?x184 (bvadd ?x47 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x56 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x207 (concat (select ?x241 (bvadd ?x16 (_ bv2 32))) (concat (select ?x241 (bvadd ?x16 (_ bv1 32))) (select ?x241 ?x16)))))
 (let ((?x198 (concat (select ?x241 (bvadd ?x16 (_ bv3 32))) ?x207)))
 (let (($x199 (= (_ bv0 32) ?x198)))
 (let ((?x208 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x208 (_ bv1 32))))
 (let (($x222 (= false $x213)))
 (let (($x152 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x214 (=> $x152 $x222)))
 (let (($x221 (= false false)))
 (let (($x133 (= (_ bv0 32) (_ bv0 32))))
 (let (($x211 (and $x152 $x133)))
 (let (($x212 (=> $x211 $x221)))
 (let (($x220 (= ?x208 (_ bv0 32))))
 (let (($x209 (= true $x220)))
 (let (($x210 (=> $x152 $x209)))
 (let ((?x217 (concat (select ?x241 ?x178) (concat (select ?x241 ?x170) (select ?x241 input.dst.llvm-%l)))))
 (let ((?x191 (concat (select ?x241 ?x71) ?x217)))
 (let (($x218 (= (_ bv42 32) ?x191)))
 (let (($x192 (=> $x152 $x218)))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x175 (ite $x128 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x175 (_ bv1 32))))
 (let (($x166 (= true $x200)))
 (let (($x158 (= ?x175 (_ bv0 32))))
 (let (($x159 (= false $x158)))
 (let (($x225 (and (and (and (and (and $x159 $x166) $x192) $x210) $x212) $x214)))
 (let (($x13 (not true)))
 (let (($x244 (or $x13 $x225)))
 (let (($x165 (= true true)))
 (let (($x226 (and $x165 $x244)))
 (let (($x227 (= $x226 true)))
 (let (($x173 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (= $x173 $x152)))
 (let (($x161 (= (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (= $x172 $x161)))
 (let (($x24 (and $x156 $x157)))
 (let (($x164 (= $x24 true)))
 (let (($x162 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x153 (= $x162 $x152)))
 (let (($x150 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x150 $x161)))
 (let (($x154 (and $x151 $x153)))
 (let (($x171 (= $x154 true)))
 (let (($x134 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (= $x149 $x134)))
 (let (($x135 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x136 (= $x135 $x133)))
 (let (($x160 (and $x136 $x20)))
 (let (($x137 (= $x160 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x123 (concat ?x122 (concat ?x143 ?x120)))))
 (let (($x37 (= ?x127 input.dst.llvm-%l)))
 (let (($x132 (= $x37 true)))
 (let (($x131 (= $x132 true)))
 (let (($x147 (not $x128)))
 (let (($x46 (= $x147 true)))
 (let (($x11 (= $x46 true)))
 (let (($x130 (= $x11 true)))
 (let (($x125 (= input.dst.llvm-%l ?x127)))
 (let (($x144 (and $x125 $x147)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x7)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x17 $x45)))
 (let (($x64 (and $x79 $x75)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x22 $x64)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x67)))))))
 (let (($x109 (= (bvand ?x47 (_ bv4294967292 32)) ?x47)))
 (let (($x100 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x47 (bvsub ?x47 (_ bv4 32))) (bvult ?x47 (bvsub ?x47 (_ bv4 32))))))
 (let (($x99 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x98 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x88 (and true $x98)))
 (let (($x105 (and $x88 $x84)))
 (let (($x106 (and $x105 $x98)))
 (let (($x111 (and (and (and $x88 $x106) $x99) $x100)))
 (let (($x112 (and $x111 $x109)))
 (let (($x126 (and (and (and $x112 $x62) $x35) $x144)))
 (let (($x141 (= $x126 true)))
 (let (($x129 (= $x141 true)))
 (let (($x8 (= $x129 true)))
 (let (($x114 (= $x112 true)))
 (let (($x118 (= $x114 true)))
 (let (($x115 (= $x118 true)))
 (let (($x52 (and $x62 $x35)))
 (let (($x10 (= $x52 true)))
 (let (($x63 (= $x10 true)))
 (let (($x94 (= $x63 true)))
 (let (($x119 (and $x94 $x115)))
 (let (($x116 (and $x119 $x115)))
 (let (($x19 (and $x116 $x8)))
 (let (($x148 (and $x19 $x130)))
 (let (($x87 (and $x148 $x131)))
 (let (($x138 (and $x87 $x137)))
 (let (($x163 (and $x138 $x171)))
 (let (($x174 (and $x163 $x164)))
 (let (($x48 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x31 (and $x48 $x174)))
 (let (($x53 (bvugt ?x47 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x21 (=> (bvule ?x47 (bvsub (bvadd ?x47 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x53)))))))
 (let (($x66 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x44 (=> (bvule input.dst.llvm-%l (bvsub ?x16 (_ bv1 32))) (or false (or false (and true (or $x14 $x66)))))))
 (let (($x9 (and $x44 $x21)))
 (let (($x82 (and $x9 $x31)))
 (let (($x228 (=> $x82 $x227)))
 (not $x228)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172812/query
