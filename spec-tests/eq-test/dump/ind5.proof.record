==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x126 (= true false)))
 (let (($x127 (= $x126 true)))
 (let (($x112 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x121 (= $x120 $x112)))
 (let (($x109 (= (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (= $x118 $x109)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x111 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x113 (= $x111 $x112)))
 (let (($x108 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x110 (= $x108 $x109)))
 (let (($x114 (and $x110 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x102 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x104 (and $x100 $x103)))
 (let (($x105 (= $x104 true)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x88 (bvugt ?x81 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x81 (_ bv3 32)))))
 (let (($x94 (=> (bvule ?x81 (bvsub (bvadd ?x81 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x88)))))))
 (let (($x82 (= $x94 true)))
 (let (($x83 (= $x82 true)))
 (let (($x95 (= $x83 true)))
 (let (($x72 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x78 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x72)))))))
 (let (($x66 (= $x78 true)))
 (let (($x67 (= $x66 true)))
 (let (($x79 (= $x67 true)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x59 (not $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x5)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x18 $x33)))
 (let (($x51 (and $x31 $x50)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x37 $x51)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x8)))))))
 (let (($x53 (and $x43 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x48 (concat ?x26 (concat ?x20 ?x47)))))
 (let (($x36 (= ?x17 input.dst.llvm-%l)))
 (let (($x15 (= $x36 true)))
 (let (($x9 (= $x15 true)))
 (let (($x57 (and $x9 $x56)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x96 (and $x80 $x95)))
 (let (($x106 (and $x96 $x105)))
 (let (($x116 (and $x106 $x115)))
 (let (($x124 (and $x116 $x123)))
 (let (($x35 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x125 (and $x35 $x124)))
 (let (($x128 (=> $x125 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x126 (= true false)))
 (let (($x127 (= $x126 true)))
 (let (($x112 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x121 (= $x120 $x112)))
 (let (($x109 (= (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x119 (= $x118 $x109)))
 (let (($x122 (and $x119 $x121)))
 (let (($x123 (= $x122 true)))
 (let (($x111 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x113 (= $x111 $x112)))
 (let (($x108 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x110 (= $x108 $x109)))
 (let (($x114 (and $x110 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x102 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x100 (= $x98 $x99)))
 (let (($x104 (and $x100 $x103)))
 (let (($x105 (= $x104 true)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x88 (bvugt ?x81 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x81 (_ bv3 32)))))
 (let (($x94 (=> (bvule ?x81 (bvsub (bvadd ?x81 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x88)))))))
 (let (($x82 (= $x94 true)))
 (let (($x83 (= $x82 true)))
 (let (($x95 (= $x83 true)))
 (let (($x72 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x78 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x72)))))))
 (let (($x66 (= $x78 true)))
 (let (($x67 (= $x66 true)))
 (let (($x79 (= $x67 true)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x59 (not $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x5)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x18 $x33)))
 (let (($x51 (and $x31 $x50)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x37 $x51)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x8)))))))
 (let (($x53 (and $x43 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x48 (concat ?x26 (concat ?x20 ?x47)))))
 (let (($x36 (= ?x17 input.dst.llvm-%l)))
 (let (($x15 (= $x36 true)))
 (let (($x9 (= $x15 true)))
 (let (($x57 (and $x9 $x56)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x96 (and $x80 $x95)))
 (let (($x106 (and $x96 $x105)))
 (let (($x116 (and $x106 $x115)))
 (let (($x124 (and $x116 $x123)))
 (let (($x35 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x125 (and $x35 $x124)))
 (let (($x128 (=> $x125 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb8)
                     #xffa7ff3d
                     #x06)
              #xffa7ff3f
              #x57)
       #xffa7ff3e
       #x23))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x572306b8)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa7ff3f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2181038079 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2181038076 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2181038076 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2181038076 32) (_ bv250 8)) (_ bv2181038077 32) (_ bv255 8)) (_ bv2181038078 32) (_ bv255 8)) (_ bv2181038079 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x141 (= true false)))
 (let (($x142 (= $x141 true)))
 (let (($x131 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x134 (not $x131)))
 (let (($x65 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x133 (not $x65)))
 (let (($x137 (and (and (and (= $x65 (= (_ bv1 32) (_ bv0 32))) (= $x131 (bvuge (_ bv1 32) (_ bv1 32)))) $x133) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x126 (not $x122)))
 (let (($x119 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x125 (not $x119)))
 (let (($x129 (and (and (and (= $x119 (= (_ bv1 32) (_ bv0 32))) (= $x122 (bvuge (_ bv1 32) (_ bv1 32)))) $x125) $x126)))
 (let (($x12 (= $x129 true)))
 (let (($x115 (not true)))
 (let (($x116 (= $x115 true)))
 (let (($x105 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x109 (not $x105)))
 (let (($x102 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x108 (not $x102)))
 (let (($x112 (and (and (and (= $x102 (= (_ bv0 32) (_ bv0 32))) (= $x105 (bvuge (_ bv0 32) (_ bv1 32)))) $x108) $x109)))
 (let (($x113 (= $x112 true)))
 (let ((?x86 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x94 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x86 (_ bv3 32)))))
 (let (($x98 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x94)))))))
 (let (($x87 (= $x98 true)))
 (let (($x88 (= $x87 true)))
 (let (($x99 (= $x88 true)))
 (let (($x78 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x84 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x78)))))))
 (let (($x71 (= $x84 true)))
 (let (($x72 (= $x71 true)))
 (let (($x85 (= $x72 true)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x62 (not $x61)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x68 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x39 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x6 $x54)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x11)))))))
 (let (($x56 (and $x31 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x17 (concat ?x20 (concat ?x49 ?x32)))))
 (let (($x15 (= ?x22 input.dst.llvm-%l)))
 (let (($x9 (= $x15 true)))
 (let (($x44 (= $x9 true)))
 (let (($x60 (and $x44 $x59)))
 (let (($x69 (and $x60 $x68)))
 (let (($x93 (and $x69 $x85)))
 (let (($x100 (and $x93 $x99)))
 (let (($x114 (and $x100 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x13 (and $x117 $x12)))
 (let (($x139 (and $x13 $x138)))
 (let (($x24 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x140 (and $x24 $x139)))
 (let (($x143 (=> $x140 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x141 (= true false)))
 (let (($x142 (= $x141 true)))
 (let (($x131 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x134 (not $x131)))
 (let (($x65 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x133 (not $x65)))
 (let (($x137 (and (and (and (= $x65 (= (_ bv1 32) (_ bv0 32))) (= $x131 (bvuge (_ bv1 32) (_ bv1 32)))) $x133) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x126 (not $x122)))
 (let (($x119 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x125 (not $x119)))
 (let (($x129 (and (and (and (= $x119 (= (_ bv1 32) (_ bv0 32))) (= $x122 (bvuge (_ bv1 32) (_ bv1 32)))) $x125) $x126)))
 (let (($x12 (= $x129 true)))
 (let (($x115 (not true)))
 (let (($x116 (= $x115 true)))
 (let (($x105 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x109 (not $x105)))
 (let (($x102 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x108 (not $x102)))
 (let (($x112 (and (and (and (= $x102 (= (_ bv0 32) (_ bv0 32))) (= $x105 (bvuge (_ bv0 32) (_ bv1 32)))) $x108) $x109)))
 (let (($x113 (= $x112 true)))
 (let ((?x86 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x94 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x86 (_ bv3 32)))))
 (let (($x98 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x94)))))))
 (let (($x87 (= $x98 true)))
 (let (($x88 (= $x87 true)))
 (let (($x99 (= $x88 true)))
 (let (($x78 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x84 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x78)))))))
 (let (($x71 (= $x84 true)))
 (let (($x72 (= $x71 true)))
 (let (($x85 (= $x72 true)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x62 (not $x61)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x68 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x39 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x6 $x54)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x11)))))))
 (let (($x56 (and $x31 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x17 (concat ?x20 (concat ?x49 ?x32)))))
 (let (($x15 (= ?x22 input.dst.llvm-%l)))
 (let (($x9 (= $x15 true)))
 (let (($x44 (= $x9 true)))
 (let (($x60 (and $x44 $x59)))
 (let (($x69 (and $x60 $x68)))
 (let (($x93 (and $x69 $x85)))
 (let (($x100 (and $x93 $x99)))
 (let (($x114 (and $x100 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x13 (and $x117 $x12)))
 (let (($x139 (and $x13 $x138)))
 (let (($x24 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x140 (and $x24 $x139)))
 (let (($x143 (=> $x140 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x145 (= $x70 true)))
 (let (($x109 (= false false)))
 (let (($x137 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x137 $x109)))
 (let (($x65 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x139 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x140 (= $x139 $x65)))
 (let (($x12 (= (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= $x137 $x12)))
 (let (($x143 (and (and $x138 $x140) $x141)))
 (let (($x144 (= $x143 true)))
 (let (($x129 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x131 (=> $x129 $x109)))
 (let (($x27 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (= $x27 $x65)))
 (let (($x13 (= $x129 $x12)))
 (let (($x135 (and (and $x13 $x130) $x131)))
 (let (($x133 (= $x135 true)))
 (let (($x108 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x123 (= $x122 $x108)))
 (let (($x106 (= (_ bv0 32) (_ bv0 32))))
 (let (($x120 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x121 (= $x120 $x106)))
 (let (($x118 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x127 (and (and $x118 $x121) $x123)))
 (let (($x125 (= $x127 true)))
 (let (($x105 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x112 (=> $x105 $x109)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (= $x110 $x108)))
 (let (($x107 (= $x105 $x106)))
 (let (($x114 (and (and $x107 $x111) $x112)))
 (let (($x115 (= $x114 true)))
 (let ((?x97 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x96 (bvugt ?x97 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x97 (_ bv3 32)))))
 (let (($x101 (=> (bvule ?x97 (bvsub (bvadd ?x97 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x96)))))))
 (let (($x91 (= $x101 true)))
 (let (($x92 (= $x91 true)))
 (let (($x102 (= $x92 true)))
 (let (($x80 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x86 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x80)))))))
 (let (($x75 (= $x86 true)))
 (let (($x76 (= $x75 true)))
 (let (($x89 (= $x76 true)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x64 (not $x63)))
 (let (($x68 (= $x64 true)))
 (let (($x69 (= $x68 true)))
 (let (($x77 (= $x69 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x54)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x8 $x52)))
 (let (($x56 (and $x53 $x55)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x33 $x56)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x18)))))))
 (let (($x58 (and $x50 $x57)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x22 (concat ?x29 (concat ?x25 ?x48)))))
 (let (($x9 (= ?x36 input.dst.llvm-%l)))
 (let (($x44 (= $x9 true)))
 (let (($x7 (= $x44 true)))
 (let (($x62 (and $x7 $x61)))
 (let (($x73 (and $x62 $x77)))
 (let (($x90 (and $x73 $x89)))
 (let (($x103 (and $x90 $x102)))
 (let (($x116 (and $x103 $x115)))
 (let (($x128 (and $x116 $x125)))
 (let (($x136 (and $x128 $x133)))
 (let (($x28 (and $x136 $x144)))
 (let (($x38 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x21 (and $x38 $x28)))
 (let (($x146 (=> $x21 $x145)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x145 (= $x70 true)))
 (let (($x109 (= false false)))
 (let (($x137 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x137 $x109)))
 (let (($x65 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x139 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x140 (= $x139 $x65)))
 (let (($x12 (= (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= $x137 $x12)))
 (let (($x143 (and (and $x138 $x140) $x141)))
 (let (($x144 (= $x143 true)))
 (let (($x129 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x131 (=> $x129 $x109)))
 (let (($x27 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (= $x27 $x65)))
 (let (($x13 (= $x129 $x12)))
 (let (($x135 (and (and $x13 $x130) $x131)))
 (let (($x133 (= $x135 true)))
 (let (($x108 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x123 (= $x122 $x108)))
 (let (($x106 (= (_ bv0 32) (_ bv0 32))))
 (let (($x120 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x121 (= $x120 $x106)))
 (let (($x118 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x127 (and (and $x118 $x121) $x123)))
 (let (($x125 (= $x127 true)))
 (let (($x105 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x112 (=> $x105 $x109)))
 (let (($x110 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (= $x110 $x108)))
 (let (($x107 (= $x105 $x106)))
 (let (($x114 (and (and $x107 $x111) $x112)))
 (let (($x115 (= $x114 true)))
 (let ((?x97 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x96 (bvugt ?x97 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x97 (_ bv3 32)))))
 (let (($x101 (=> (bvule ?x97 (bvsub (bvadd ?x97 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x96)))))))
 (let (($x91 (= $x101 true)))
 (let (($x92 (= $x91 true)))
 (let (($x102 (= $x92 true)))
 (let (($x80 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x86 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x80)))))))
 (let (($x75 (= $x86 true)))
 (let (($x76 (= $x75 true)))
 (let (($x89 (= $x76 true)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x64 (not $x63)))
 (let (($x68 (= $x64 true)))
 (let (($x69 (= $x68 true)))
 (let (($x77 (= $x69 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x54)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x8 $x52)))
 (let (($x56 (and $x53 $x55)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x33 $x56)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x18)))))))
 (let (($x58 (and $x50 $x57)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x22 (concat ?x29 (concat ?x25 ?x48)))))
 (let (($x9 (= ?x36 input.dst.llvm-%l)))
 (let (($x44 (= $x9 true)))
 (let (($x7 (= $x44 true)))
 (let (($x62 (and $x7 $x61)))
 (let (($x73 (and $x62 $x77)))
 (let (($x90 (and $x73 $x89)))
 (let (($x103 (and $x90 $x102)))
 (let (($x116 (and $x103 $x115)))
 (let (($x128 (and $x116 $x125)))
 (let (($x136 (and $x128 $x133)))
 (let (($x28 (and $x136 $x144)))
 (let (($x38 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x21 (and $x38 $x28)))
 (let (($x146 (=> $x21 $x145)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb8)
                     #xffa7ff3d
                     #x06)
              #xffa7ff3f
              #x57)
       #xffa7ff3e
       #x23))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x572306b8)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa7ff3c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa7ff3f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2181038079 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2181038076 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2181038076 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2181038076 32) (_ bv250 8)) (_ bv2181038077 32) (_ bv255 8)) (_ bv2181038078 32) (_ bv255 8)) (_ bv2181038079 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x154 (= true false)))
 (let (($x155 (= $x154 true)))
 (let (($x116 (= false false)))
 (let (($x146 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x81 (=> $x146 $x116)))
 (let (($x20 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x23 (not $x20)))
 (let (($x150 (and (and (and (= $x146 (= (_ bv1 32) (_ bv0 32))) (= $x20 (bvuge (_ bv1 32) (_ bv1 32)))) $x23) $x81)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x136 $x116)))
 (let (($x138 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x142 (not $x138)))
 (let (($x28 (and (and (and (= $x136 (= (_ bv1 32) (_ bv0 32))) (= $x138 (bvuge (_ bv1 32) (_ bv1 32)))) $x142) $x141)))
 (let (($x21 (= $x28 true)))
 (let (($x126 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x13 (not $x126)))
 (let (($x125 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x12 (not $x125)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x129 (= $x126 $x112)))
 (let (($x65 (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x125 (= (_ bv0 32) (_ bv0 32)))) $x129)))
 (let (($x132 (and (and $x65 $x12) $x13)))
 (let (($x131 (= $x132 true)))
 (let (($x108 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x108 $x116)))
 (let (($x109 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (not $x109)))
 (let (($x120 (and (and (and (= $x108 (= (_ bv0 32) (_ bv0 32))) (= $x109 $x112)) $x115) $x117)))
 (let (($x121 (= $x120 true)))
 (let ((?x83 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x101 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x83 (_ bv3 32)))))
 (let (($x105 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x101)))))))
 (let (($x95 (= $x105 true)))
 (let (($x96 (= $x95 true)))
 (let (($x106 (= $x96 true)))
 (let (($x86 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x94 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x79 (= $x94 true)))
 (let (($x80 (= $x79 true)))
 (let (($x82 (= $x80 true)))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x77 (not $x69)))
 (let (($x73 (= $x77 true)))
 (let (($x74 (= $x73 true)))
 (let (($x78 (= $x74 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x43 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x30 $x59)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x39)))))))
 (let (($x61 (and $x53 $x60)))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x36 (concat ?x25 (concat ?x24 ?x19)))))
 (let (($x44 (= ?x15 input.dst.llvm-%l)))
 (let (($x7 (= $x44 true)))
 (let (($x41 (= $x7 true)))
 (let (($x68 (and $x41 $x64)))
 (let (($x66 (and $x68 $x78)))
 (let (($x100 (and $x66 $x82)))
 (let (($x107 (and $x100 $x106)))
 (let (($x124 (and $x107 $x121)))
 (let (($x135 (and $x124 $x131)))
 (let (($x70 (and $x135 $x21)))
 (let (($x152 (and $x70 $x151)))
 (let (($x46 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x153 (and $x46 $x152)))
 (let (($x156 (=> $x153 $x155)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x154 (= true false)))
 (let (($x155 (= $x154 true)))
 (let (($x116 (= false false)))
 (let (($x146 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x81 (=> $x146 $x116)))
 (let (($x20 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x23 (not $x20)))
 (let (($x150 (and (and (and (= $x146 (= (_ bv1 32) (_ bv0 32))) (= $x20 (bvuge (_ bv1 32) (_ bv1 32)))) $x23) $x81)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x141 (=> $x136 $x116)))
 (let (($x138 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x142 (not $x138)))
 (let (($x28 (and (and (and (= $x136 (= (_ bv1 32) (_ bv0 32))) (= $x138 (bvuge (_ bv1 32) (_ bv1 32)))) $x142) $x141)))
 (let (($x21 (= $x28 true)))
 (let (($x126 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x13 (not $x126)))
 (let (($x125 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x12 (not $x125)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x129 (= $x126 $x112)))
 (let (($x65 (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x125 (= (_ bv0 32) (_ bv0 32)))) $x129)))
 (let (($x132 (and (and $x65 $x12) $x13)))
 (let (($x131 (= $x132 true)))
 (let (($x108 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x108 $x116)))
 (let (($x109 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (not $x109)))
 (let (($x120 (and (and (and (= $x108 (= (_ bv0 32) (_ bv0 32))) (= $x109 $x112)) $x115) $x117)))
 (let (($x121 (= $x120 true)))
 (let ((?x83 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x101 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x83 (_ bv3 32)))))
 (let (($x105 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x101)))))))
 (let (($x95 (= $x105 true)))
 (let (($x96 (= $x95 true)))
 (let (($x106 (= $x96 true)))
 (let (($x86 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x94 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x79 (= $x94 true)))
 (let (($x80 (= $x79 true)))
 (let (($x82 (= $x80 true)))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x77 (not $x69)))
 (let (($x73 (= $x77 true)))
 (let (($x74 (= $x73 true)))
 (let (($x78 (= $x74 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x43 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x30 $x59)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x39)))))))
 (let (($x61 (and $x53 $x60)))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x36 (concat ?x25 (concat ?x24 ?x19)))))
 (let (($x44 (= ?x15 input.dst.llvm-%l)))
 (let (($x7 (= $x44 true)))
 (let (($x41 (= $x7 true)))
 (let (($x68 (and $x41 $x64)))
 (let (($x66 (and $x68 $x78)))
 (let (($x100 (and $x66 $x82)))
 (let (($x107 (and $x100 $x106)))
 (let (($x124 (and $x107 $x121)))
 (let (($x135 (and $x124 $x131)))
 (let (($x70 (and $x135 $x21)))
 (let (($x152 (and $x70 $x151)))
 (let (($x46 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x153 (and $x46 $x152)))
 (let (($x156 (=> $x153 $x155)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x252 (= true false)))
 (let (($x253 (= $x252 true)))
 (let (($x119 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x238 (= $x237 $x119)))
 (let (($x226 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (and $x214 $x226)))
 (let (($x239 (=> $x229 $x238)))
 (let (($x114 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x114)))
 (let (($x236 (=> $x229 $x235)))
 (let (($x231 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x232 (=> $x229 $x231)))
 (let (($x227 (= $x226 $x119)))
 (let (($x228 (=> $x214 $x227)))
 (let (($x117 (= false false)))
 (let (($x221 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x214 $x221)))
 (let (($x225 (=> $x224 $x117)))
 (let (($x222 (= $x221 $x114)))
 (let (($x223 (=> $x214 $x222)))
 (let (($x218 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x219 (=> $x214 $x218)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x216 (=> $x212 $x117)))
 (let (($x242 (and (and (and (= $x212 (= (_ bv1 32) (_ bv0 32))) (= $x214 (bvuge (_ bv1 32) (_ bv1 32)))) $x216) $x219)))
 (let (($x248 (and (and (and (and (and (and $x242 $x223) $x225) $x228) $x232) $x236) $x239)))
 (let (($x249 (= $x248 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x197 $x119)))
 (let (($x186 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x189 (and $x173 $x186)))
 (let (($x199 (=> $x189 $x198)))
 (let (($x194 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x194 $x114)))
 (let (($x196 (=> $x189 $x195)))
 (let (($x191 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x192 (=> $x189 $x191)))
 (let (($x187 (= $x186 $x119)))
 (let (($x188 (=> $x173 $x187)))
 (let (($x181 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x173 $x181)))
 (let (($x185 (=> $x184 $x117)))
 (let (($x182 (= $x181 $x114)))
 (let (($x183 (=> $x173 $x182)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x179 (=> $x173 $x178)))
 (let (($x170 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x176 (=> $x170 $x117)))
 (let (($x202 (and (and (and (= $x170 (= (_ bv1 32) (_ bv0 32))) (= $x173 (bvuge (_ bv1 32) (_ bv1 32)))) $x176) $x179)))
 (let (($x208 (and (and (and (and (and (and $x202 $x183) $x185) $x188) $x192) $x196) $x199)))
 (let (($x209 (= $x208 true)))
 (let (($x67 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x67 $x119)))
 (let (($x81 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x159 (=> $x81 $x158)))
 (let (($x156 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x5 (and $x81 $x156)))
 (let (($x35 (=> $x5 $x117)))
 (let (($x157 (= $x156 $x114)))
 (let (($x47 (=> $x81 $x157)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x154 (=> $x81 $x153)))
 (let (($x23 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x151 (=> $x23 $x117)))
 (let (($x150 (= $x81 $x119)))
 (let (($x162 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x23 $x114)) $x150) $x151)))
 (let (($x166 (and (and (and (and $x162 $x154) $x47) $x35) $x159)))
 (let (($x167 (= $x166 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x138 (= $x137 $x119)))
 (let (($x129 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x115 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (and $x115 $x129)))
 (let (($x139 (=> $x130 $x138)))
 (let (($x133 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x136 (= $x133 $x114)))
 (let (($x134 (=> $x130 $x136)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x131 (=> $x130 $x132)))
 (let (($x65 (= $x129 $x119)))
 (let (($x12 (=> $x115 $x65)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x27 (and $x115 $x127)))
 (let (($x126 (=> $x27 $x117)))
 (let (($x125 (= $x127 $x114)))
 (let (($x128 (=> $x115 $x125)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x122 (=> $x115 $x124)))
 (let (($x112 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x120 (=> $x112 $x117)))
 (let (($x141 (and (and (and (and (and (= $x112 $x114) (= $x115 $x119)) $x120) $x122) $x128) $x126)))
 (let (($x145 (and (and (and (and $x141 $x12) $x131) $x134) $x139)))
 (let (($x146 (= $x145 true)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x105 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x88 (_ bv3 32)))))
 (let (($x108 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x105)))))))
 (let (($x99 (= $x108 true)))
 (let (($x101 (= $x99 true)))
 (let (($x111 (= $x101 true)))
 (let (($x94 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x98 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x94)))))))
 (let (($x85 (= $x98 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x78 (not $x74)))
 (let (($x66 (= $x78 true)))
 (let (($x93 (= $x66 true)))
 (let (($x84 (= $x93 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x60)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x31 $x58)))
 (let (($x62 (and $x59 $x61)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x18 $x62)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x51)))))))
 (let (($x64 (and $x56 $x63)))
 (let (($x68 (= $x64 true)))
 (let (($x69 (= $x68 true)))
 (let (($x77 (= $x69 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x9 (concat ?x19 (concat ?x25 ?x44)))))
 (let (($x45 (= ?x48 input.dst.llvm-%l)))
 (let (($x29 (= $x45 true)))
 (let (($x52 (= $x29 true)))
 (let (($x73 (and $x52 $x77)))
 (let (($x71 (and $x73 $x84)))
 (let (($x104 (and $x71 $x87)))
 (let (($x113 (and $x104 $x111)))
 (let (($x147 (and $x113 $x146)))
 (let (($x168 (and $x147 $x167)))
 (let (($x210 (and $x168 $x209)))
 (let (($x250 (and $x210 $x249)))
 (let (($x15 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x251 (and $x15 $x250)))
 (let (($x254 (=> $x251 $x253)))
 (not $x254))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x252 (= true false)))
 (let (($x253 (= $x252 true)))
 (let (($x119 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x238 (= $x237 $x119)))
 (let (($x226 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (and $x214 $x226)))
 (let (($x239 (=> $x229 $x238)))
 (let (($x114 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x114)))
 (let (($x236 (=> $x229 $x235)))
 (let (($x231 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x232 (=> $x229 $x231)))
 (let (($x227 (= $x226 $x119)))
 (let (($x228 (=> $x214 $x227)))
 (let (($x117 (= false false)))
 (let (($x221 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x224 (and $x214 $x221)))
 (let (($x225 (=> $x224 $x117)))
 (let (($x222 (= $x221 $x114)))
 (let (($x223 (=> $x214 $x222)))
 (let (($x218 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x219 (=> $x214 $x218)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x216 (=> $x212 $x117)))
 (let (($x242 (and (and (and (= $x212 (= (_ bv1 32) (_ bv0 32))) (= $x214 (bvuge (_ bv1 32) (_ bv1 32)))) $x216) $x219)))
 (let (($x248 (and (and (and (and (and (and $x242 $x223) $x225) $x228) $x232) $x236) $x239)))
 (let (($x249 (= $x248 true)))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x197 $x119)))
 (let (($x186 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x189 (and $x173 $x186)))
 (let (($x199 (=> $x189 $x198)))
 (let (($x194 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x195 (= $x194 $x114)))
 (let (($x196 (=> $x189 $x195)))
 (let (($x191 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x192 (=> $x189 $x191)))
 (let (($x187 (= $x186 $x119)))
 (let (($x188 (=> $x173 $x187)))
 (let (($x181 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x173 $x181)))
 (let (($x185 (=> $x184 $x117)))
 (let (($x182 (= $x181 $x114)))
 (let (($x183 (=> $x173 $x182)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x179 (=> $x173 $x178)))
 (let (($x170 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x176 (=> $x170 $x117)))
 (let (($x202 (and (and (and (= $x170 (= (_ bv1 32) (_ bv0 32))) (= $x173 (bvuge (_ bv1 32) (_ bv1 32)))) $x176) $x179)))
 (let (($x208 (and (and (and (and (and (and $x202 $x183) $x185) $x188) $x192) $x196) $x199)))
 (let (($x209 (= $x208 true)))
 (let (($x67 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x67 $x119)))
 (let (($x81 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x159 (=> $x81 $x158)))
 (let (($x156 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x5 (and $x81 $x156)))
 (let (($x35 (=> $x5 $x117)))
 (let (($x157 (= $x156 $x114)))
 (let (($x47 (=> $x81 $x157)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x154 (=> $x81 $x153)))
 (let (($x23 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x151 (=> $x23 $x117)))
 (let (($x150 (= $x81 $x119)))
 (let (($x162 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x23 $x114)) $x150) $x151)))
 (let (($x166 (and (and (and (and $x162 $x154) $x47) $x35) $x159)))
 (let (($x167 (= $x166 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x138 (= $x137 $x119)))
 (let (($x129 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x115 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (and $x115 $x129)))
 (let (($x139 (=> $x130 $x138)))
 (let (($x133 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x136 (= $x133 $x114)))
 (let (($x134 (=> $x130 $x136)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x131 (=> $x130 $x132)))
 (let (($x65 (= $x129 $x119)))
 (let (($x12 (=> $x115 $x65)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x27 (and $x115 $x127)))
 (let (($x126 (=> $x27 $x117)))
 (let (($x125 (= $x127 $x114)))
 (let (($x128 (=> $x115 $x125)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x122 (=> $x115 $x124)))
 (let (($x112 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x120 (=> $x112 $x117)))
 (let (($x141 (and (and (and (and (and (= $x112 $x114) (= $x115 $x119)) $x120) $x122) $x128) $x126)))
 (let (($x145 (and (and (and (and $x141 $x12) $x131) $x134) $x139)))
 (let (($x146 (= $x145 true)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x105 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x88 (_ bv3 32)))))
 (let (($x108 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x105)))))))
 (let (($x99 (= $x108 true)))
 (let (($x101 (= $x99 true)))
 (let (($x111 (= $x101 true)))
 (let (($x94 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x98 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x94)))))))
 (let (($x85 (= $x98 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x78 (not $x74)))
 (let (($x66 (= $x78 true)))
 (let (($x93 (= $x66 true)))
 (let (($x84 (= $x93 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x60)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x31 $x58)))
 (let (($x62 (and $x59 $x61)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x18 $x62)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x51)))))))
 (let (($x64 (and $x56 $x63)))
 (let (($x68 (= $x64 true)))
 (let (($x69 (= $x68 true)))
 (let (($x77 (= $x69 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x9 (concat ?x19 (concat ?x25 ?x44)))))
 (let (($x45 (= ?x48 input.dst.llvm-%l)))
 (let (($x29 (= $x45 true)))
 (let (($x52 (= $x29 true)))
 (let (($x73 (and $x52 $x77)))
 (let (($x71 (and $x73 $x84)))
 (let (($x104 (and $x71 $x87)))
 (let (($x113 (and $x104 $x111)))
 (let (($x147 (and $x113 $x146)))
 (let (($x168 (and $x147 $x167)))
 (let (($x210 (and $x168 $x209)))
 (let (($x250 (and $x210 $x249)))
 (let (($x15 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x251 (and $x15 $x250)))
 (let (($x254 (=> $x251 $x253)))
 (not $x254))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
                     #xffa000bd
                     #x5b)
              #xffa000bf
              #x00)
       #xffa000be
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00005b20)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa000bf)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2181038079 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2181038076 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2181038076 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2181038076 32) (_ bv250 8)) (_ bv2181038077 32) (_ bv255 8)) (_ bv2181038078 32) (_ bv255 8)) (_ bv2181038079 32) (_ bv255 8)))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x273 (= true false)))
 (let (($x274 (= $x273 true)))
 (let (($x255 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x247 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x227 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x239 (and $x227 $x247)))
 (let (($x257 (and $x239 $x255)))
 (let (($x258 (not $x257)))
 (let (($x252 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x72 (and $x239 $x252)))
 (let (($x256 (not $x72)))
 (let (($x117 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x38 (= $x255 $x117)))
 (let (($x40 (=> $x239 $x38)))
 (let (($x119 (= (_ bv0 32) (_ bv0 32))))
 (let (($x253 (= $x252 $x119)))
 (let (($x254 (=> $x239 $x253)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x250 (=> $x239 $x249)))
 (let (($x237 (= $x247 $x117)))
 (let (($x238 (=> $x227 $x237)))
 (let (($x143 (= false false)))
 (let (($x246 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x235 (and $x227 $x246)))
 (let (($x236 (=> $x235 $x143)))
 (let (($x233 (= $x246 $x119)))
 (let (($x234 (=> $x227 $x233)))
 (let (($x230 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x231 (=> $x227 $x230)))
 (let (($x244 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x245 (=> $x244 $x143)))
 (let (($x261 (and (and (and (= $x244 (= (_ bv1 32) (_ bv0 32))) (= $x227 (bvuge (_ bv1 32) (_ bv1 32)))) $x245) $x231)))
 (let (($x267 (and (and (and (and (and (and $x261 $x234) $x236) $x238) $x250) $x254) $x40)))
 (let (($x269 (and (and $x267 $x256) $x258)))
 (let (($x270 (= $x269 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x194 (and $x182 $x192)))
 (let (($x214 (and $x194 $x209)))
 (let (($x215 (not $x214)))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x194 $x198)))
 (let (($x213 (not $x212)))
 (let (($x210 (= $x209 $x117)))
 (let (($x211 (=> $x194 $x210)))
 (let (($x199 (= $x198 $x119)))
 (let (($x208 (=> $x194 $x199)))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x207 (=> $x194 $x196)))
 (let (($x206 (= $x192 $x117)))
 (let (($x193 (=> $x182 $x206)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x190 (and $x182 $x188)))
 (let (($x191 (=> $x190 $x143)))
 (let (($x205 (= $x188 $x119)))
 (let (($x189 (=> $x182 $x205)))
 (let (($x204 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x186 (=> $x182 $x204)))
 (let (($x202 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x202 $x143)))
 (let (($x241 (and (and (and (= $x202 (= (_ bv1 32) (_ bv0 32))) (= $x182 (bvuge (_ bv1 32) (_ bv1 32)))) $x184) $x186)))
 (let (($x221 (and (and (and (and (and (and $x241 $x189) $x191) $x193) $x207) $x208) $x211)))
 (let (($x223 (and (and $x221 $x213) $x215)))
 (let (($x243 (= $x223 true)))
 (let (($x166 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x169 (and $x163 $x166)))
 (let (($x170 (not $x169)))
 (let (($x167 (= $x166 $x117)))
 (let (($x168 (=> $x163 $x167)))
 (let (($x35 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x163 $x35)))
 (let (($x159 (=> $x158 $x143)))
 (let (($x165 (= $x35 $x119)))
 (let (($x67 (=> $x163 $x165)))
 (let (($x47 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x164 (=> $x163 $x47)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x156 (=> $x153 $x143)))
 (let (($x155 (= $x163 $x117)))
 (let (($x173 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x153 $x119)) $x155) $x156)))
 (let (($x201 (and (and (and (and (and $x173 $x164) $x67) $x159) $x168) $x170)))
 (let (($x177 (= $x201 true)))
 (let (($x135 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x65 (and $x140 $x126)))
 (let (($x137 (and $x65 $x135)))
 (let (($x138 (not $x137)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x134 (and $x65 $x132)))
 (let (($x70 (not $x134)))
 (let (($x133 (= $x135 $x117)))
 (let (($x136 (=> $x65 $x133)))
 (let (($x131 (= $x132 $x119)))
 (let (($x21 (=> $x65 $x131)))
 (let (($x28 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x130 (=> $x65 $x28)))
 (let (($x141 (= $x126 $x117)))
 (let (($x129 (=> $x140 $x141)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x144 (and $x140 $x127)))
 (let (($x27 (=> $x144 $x143)))
 (let (($x125 (= $x127 $x119)))
 (let (($x128 (=> $x140 $x125)))
 (let (($x122 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x142 (=> $x140 $x122)))
 (let (($x115 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x121 (=> $x115 $x143)))
 (let (($x20 (and (and (and (and (and (= $x115 $x119) (= $x140 $x117)) $x121) $x142) $x128) $x27)))
 (let (($x81 (and (and (and (and (and (and $x20 $x129) $x130) $x21) $x136) $x70) $x138)))
 (let (($x150 (= $x81 true)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x107 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x110 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x102 (= $x109 true)))
 (let (($x103 (= $x102 true)))
 (let (($x112 (= $x103 true)))
 (let (($x100 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x88 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x100)))))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x93 (not $x66)))
 (let (($x84 (= $x93 true)))
 (let (($x71 (= $x84 true)))
 (let (($x97 (= $x71 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x31 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x32 $x64)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x48)))))))
 (let (($x69 (and $x30 $x68)))
 (let (($x77 (= $x69 true)))
 (let (($x73 (= $x77 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x45 (concat ?x25 (concat ?x16 ?x41)))))
 (let (($x26 (= ?x18 input.dst.llvm-%l)))
 (let (($x51 (= $x26 true)))
 (let (($x6 (= $x51 true)))
 (let (($x78 (and $x6 $x74)))
 (let (($x75 (and $x78 $x97)))
 (let (($x92 (and $x75 $x91)))
 (let (($x114 (and $x92 $x112)))
 (let (($x161 (and $x114 $x150)))
 (let (($x178 (and $x161 $x177)))
 (let (($x224 (and $x178 $x243)))
 (let (($x271 (and $x224 $x270)))
 (let (($x17 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x272 (and $x17 $x271)))
 (let (($x275 (=> $x272 $x274)))
 (not $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x273 (= true false)))
 (let (($x274 (= $x273 true)))
 (let (($x255 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x247 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x227 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x239 (and $x227 $x247)))
 (let (($x257 (and $x239 $x255)))
 (let (($x258 (not $x257)))
 (let (($x252 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x72 (and $x239 $x252)))
 (let (($x256 (not $x72)))
 (let (($x117 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x38 (= $x255 $x117)))
 (let (($x40 (=> $x239 $x38)))
 (let (($x119 (= (_ bv0 32) (_ bv0 32))))
 (let (($x253 (= $x252 $x119)))
 (let (($x254 (=> $x239 $x253)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x250 (=> $x239 $x249)))
 (let (($x237 (= $x247 $x117)))
 (let (($x238 (=> $x227 $x237)))
 (let (($x143 (= false false)))
 (let (($x246 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x235 (and $x227 $x246)))
 (let (($x236 (=> $x235 $x143)))
 (let (($x233 (= $x246 $x119)))
 (let (($x234 (=> $x227 $x233)))
 (let (($x230 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x231 (=> $x227 $x230)))
 (let (($x244 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x245 (=> $x244 $x143)))
 (let (($x261 (and (and (and (= $x244 (= (_ bv1 32) (_ bv0 32))) (= $x227 (bvuge (_ bv1 32) (_ bv1 32)))) $x245) $x231)))
 (let (($x267 (and (and (and (and (and (and $x261 $x234) $x236) $x238) $x250) $x254) $x40)))
 (let (($x269 (and (and $x267 $x256) $x258)))
 (let (($x270 (= $x269 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x194 (and $x182 $x192)))
 (let (($x214 (and $x194 $x209)))
 (let (($x215 (not $x214)))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x194 $x198)))
 (let (($x213 (not $x212)))
 (let (($x210 (= $x209 $x117)))
 (let (($x211 (=> $x194 $x210)))
 (let (($x199 (= $x198 $x119)))
 (let (($x208 (=> $x194 $x199)))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x207 (=> $x194 $x196)))
 (let (($x206 (= $x192 $x117)))
 (let (($x193 (=> $x182 $x206)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x190 (and $x182 $x188)))
 (let (($x191 (=> $x190 $x143)))
 (let (($x205 (= $x188 $x119)))
 (let (($x189 (=> $x182 $x205)))
 (let (($x204 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x186 (=> $x182 $x204)))
 (let (($x202 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x202 $x143)))
 (let (($x241 (and (and (and (= $x202 (= (_ bv1 32) (_ bv0 32))) (= $x182 (bvuge (_ bv1 32) (_ bv1 32)))) $x184) $x186)))
 (let (($x221 (and (and (and (and (and (and $x241 $x189) $x191) $x193) $x207) $x208) $x211)))
 (let (($x223 (and (and $x221 $x213) $x215)))
 (let (($x243 (= $x223 true)))
 (let (($x166 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x169 (and $x163 $x166)))
 (let (($x170 (not $x169)))
 (let (($x167 (= $x166 $x117)))
 (let (($x168 (=> $x163 $x167)))
 (let (($x35 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x163 $x35)))
 (let (($x159 (=> $x158 $x143)))
 (let (($x165 (= $x35 $x119)))
 (let (($x67 (=> $x163 $x165)))
 (let (($x47 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x164 (=> $x163 $x47)))
 (let (($x153 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x156 (=> $x153 $x143)))
 (let (($x155 (= $x163 $x117)))
 (let (($x173 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x153 $x119)) $x155) $x156)))
 (let (($x201 (and (and (and (and (and $x173 $x164) $x67) $x159) $x168) $x170)))
 (let (($x177 (= $x201 true)))
 (let (($x135 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x65 (and $x140 $x126)))
 (let (($x137 (and $x65 $x135)))
 (let (($x138 (not $x137)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x134 (and $x65 $x132)))
 (let (($x70 (not $x134)))
 (let (($x133 (= $x135 $x117)))
 (let (($x136 (=> $x65 $x133)))
 (let (($x131 (= $x132 $x119)))
 (let (($x21 (=> $x65 $x131)))
 (let (($x28 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x130 (=> $x65 $x28)))
 (let (($x141 (= $x126 $x117)))
 (let (($x129 (=> $x140 $x141)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x144 (and $x140 $x127)))
 (let (($x27 (=> $x144 $x143)))
 (let (($x125 (= $x127 $x119)))
 (let (($x128 (=> $x140 $x125)))
 (let (($x122 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x142 (=> $x140 $x122)))
 (let (($x115 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x121 (=> $x115 $x143)))
 (let (($x20 (and (and (and (and (and (= $x115 $x119) (= $x140 $x117)) $x121) $x142) $x128) $x27)))
 (let (($x81 (and (and (and (and (and (and $x20 $x129) $x130) $x21) $x136) $x70) $x138)))
 (let (($x150 (= $x81 true)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x107 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x110 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x102 (= $x109 true)))
 (let (($x103 (= $x102 true)))
 (let (($x112 (= $x103 true)))
 (let (($x100 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x88 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x100)))))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x93 (not $x66)))
 (let (($x84 (= $x93 true)))
 (let (($x71 (= $x84 true)))
 (let (($x97 (= $x71 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x31 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x32 $x64)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x48)))))))
 (let (($x69 (and $x30 $x68)))
 (let (($x77 (= $x69 true)))
 (let (($x73 (= $x77 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x45 (concat ?x25 (concat ?x16 ?x41)))))
 (let (($x26 (= ?x18 input.dst.llvm-%l)))
 (let (($x51 (= $x26 true)))
 (let (($x6 (= $x51 true)))
 (let (($x78 (and $x6 $x74)))
 (let (($x75 (and $x78 $x97)))
 (let (($x92 (and $x75 $x91)))
 (let (($x114 (and $x92 $x112)))
 (let (($x161 (and $x114 $x150)))
 (let (($x178 (and $x161 $x177)))
 (let (($x224 (and $x178 $x243)))
 (let (($x271 (and $x224 $x270)))
 (let (($x17 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x272 (and $x17 $x271)))
 (let (($x275 (=> $x272 $x274)))
 (not $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ef58198)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x34)
                     #x0ef58199
                     #x93)
              #x0ef5819b
              #x26)
       #x0ef5819a
       #xb9))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x26b99334)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ef58198)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ef5819b)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #xfffffffb
                     #xff)
              #xfffffffa
              #xff)
       #xfffffff9
       #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffd)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x103 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv4 32))) (bvult ?x45 (bvsub ?x45 (_ bv4 32))))))
 (let (($x113 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x87 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x91 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x88 (and true $x87)))
 (let (($x92 (and $x88 $x91)))
 (let (($x110 (and $x92 $x87)))
 (let (($x109 (and (and (and $x88 $x110) $x113) $x99)))
 (let (($x112 (and $x109 $x103)))
 (let (($x172 (=> $x112 true)))
 (let (($x156 (= $x172 true)))
 (let (($x173 (= $x156 true)))
 (let (($x70 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x152 (= $x162 $x70)))
 (let (($x136 (= (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x161 $x136)))
 (let (($x153 (and $x151 $x152)))
 (let (($x154 (= $x153 true)))
 (let (($x134 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x160 (= $x134 $x70)))
 (let (($x133 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x149 (= $x133 $x136)))
 (let (($x137 (and $x149 $x160)))
 (let (($x138 (= $x137 true)))
 (let (($x13 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x132 (= $x148 $x13)))
 (let (($x28 (= (_ bv0 32) (_ bv0 32))))
 (let (($x12 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x130 (= $x12 $x28)))
 (let (($x131 (and $x130 $x132)))
 (let (($x21 (= $x131 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x27 (concat ?x128 (concat ?x146 ?x122)))))
 (let (($x126 (= ?x20 input.dst.llvm-%l)))
 (let (($x141 (= $x126 true)))
 (let (($x129 (= $x141 true)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x117 (not $x140)))
 (let (($x120 (= $x117 true)))
 (let (($x139 (= $x120 true)))
 (let (($x143 (= $x139 true)))
 (let (($x114 (= $x112 true)))
 (let (($x118 (= $x114 true)))
 (let (($x115 (= $x118 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x71)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x78 $x93)))
 (let (($x75 (and $x84 $x97)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x31 $x75)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x63)))))))
 (let (($x79 (and $x74 $x94)))
 (let (($x104 (= $x79 true)))
 (let (($x80 (= $x104 true)))
 (let (($x82 (= $x80 true)))
 (let (($x119 (and $x82 $x115)))
 (let (($x116 (and $x119 $x115)))
 (let (($x121 (and $x116 $x143)))
 (let (($x14 (and $x121 $x129)))
 (let (($x23 (and $x14 $x21)))
 (let (($x81 (and $x23 $x138)))
 (let (($x171 (and $x81 $x154)))
 (let (($x33 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x163 (and $x33 $x171)))
 (let (($x52 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x45 (_ bv3 32)))))
 (let (($x53 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x52)))))))
 (let (($x10 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x26 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x10)))))))
 (let (($x16 (and $x26 $x53)))
 (let (($x155 (and $x16 $x163)))
 (let (($x157 (=> $x155 $x173)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x103 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv4 32))) (bvult ?x45 (bvsub ?x45 (_ bv4 32))))))
 (let (($x113 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x87 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x91 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x88 (and true $x87)))
 (let (($x92 (and $x88 $x91)))
 (let (($x110 (and $x92 $x87)))
 (let (($x109 (and (and (and $x88 $x110) $x113) $x99)))
 (let (($x112 (and $x109 $x103)))
 (let (($x172 (=> $x112 true)))
 (let (($x156 (= $x172 true)))
 (let (($x173 (= $x156 true)))
 (let (($x70 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x152 (= $x162 $x70)))
 (let (($x136 (= (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x161 $x136)))
 (let (($x153 (and $x151 $x152)))
 (let (($x154 (= $x153 true)))
 (let (($x134 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x160 (= $x134 $x70)))
 (let (($x133 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x149 (= $x133 $x136)))
 (let (($x137 (and $x149 $x160)))
 (let (($x138 (= $x137 true)))
 (let (($x13 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x132 (= $x148 $x13)))
 (let (($x28 (= (_ bv0 32) (_ bv0 32))))
 (let (($x12 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x130 (= $x12 $x28)))
 (let (($x131 (and $x130 $x132)))
 (let (($x21 (= $x131 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x27 (concat ?x128 (concat ?x146 ?x122)))))
 (let (($x126 (= ?x20 input.dst.llvm-%l)))
 (let (($x141 (= $x126 true)))
 (let (($x129 (= $x141 true)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x117 (not $x140)))
 (let (($x120 (= $x117 true)))
 (let (($x139 (= $x120 true)))
 (let (($x143 (= $x139 true)))
 (let (($x114 (= $x112 true)))
 (let (($x118 (= $x114 true)))
 (let (($x115 (= $x118 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x71)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x78 $x93)))
 (let (($x75 (and $x84 $x97)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x31 $x75)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x63)))))))
 (let (($x79 (and $x74 $x94)))
 (let (($x104 (= $x79 true)))
 (let (($x80 (= $x104 true)))
 (let (($x82 (= $x80 true)))
 (let (($x119 (and $x82 $x115)))
 (let (($x116 (and $x119 $x115)))
 (let (($x121 (and $x116 $x143)))
 (let (($x14 (and $x121 $x129)))
 (let (($x23 (and $x14 $x21)))
 (let (($x81 (and $x23 $x138)))
 (let (($x171 (and $x81 $x154)))
 (let (($x33 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x163 (and $x33 $x171)))
 (let (($x52 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x45 (_ bv3 32)))))
 (let (($x53 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x52)))))))
 (let (($x10 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x26 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x10)))))))
 (let (($x16 (and $x26 $x53)))
 (let (($x155 (and $x16 $x163)))
 (let (($x157 (=> $x155 $x173)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x54 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x52 (bvadd ?x54 (_ bv3 32))))
 (let ((?x10 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x200 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x175 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x165 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x168 (store (store (store ?x165 ?x175 ((_ extract 15 8) (_ bv42 32))) ?x200 ((_ extract 23 16) (_ bv42 32))) ?x10 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x178 (store (store ?x168 (bvadd ?x54 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x54 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x182 (store (store ?x178 (bvadd ?x54 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x52 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x191 (concat (select ?x182 (bvadd ?x34 (_ bv2 32))) (concat (select ?x182 (bvadd ?x34 (_ bv1 32))) (select ?x182 ?x34)))))
 (let ((?x206 (concat (select ?x182 (bvadd ?x34 (_ bv3 32))) ?x191)))
 (let (($x193 (= (_ bv0 32) ?x206)))
 (let ((?x219 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x219 (_ bv1 32))))
 (let (($x199 (= false $x198)))
 (let (($x138 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x208 (=> $x138 $x199)))
 (let (($x242 (= false false)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let (($x207 (and $x138 $x13)))
 (let (($x197 (=> $x207 $x242)))
 (let (($x194 (= ?x219 (_ bv0 32))))
 (let (($x195 (= true $x194)))
 (let (($x196 (=> $x138 $x195)))
 (let ((?x216 (concat (select ?x182 ?x200) (concat (select ?x182 ?x175) (select ?x182 input.dst.llvm-%l)))))
 (let ((?x204 (concat (select ?x182 ?x10) ?x216)))
 (let (($x186 (= (_ bv42 32) ?x204)))
 (let (($x241 (=> $x138 $x186)))
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x164 (bvuge ?x30 (_ bv1 32))))
 (let (($x174 (= true $x164)))
 (let (($x124 (= ?x30 (_ bv0 32))))
 (let (($x49 (= false $x124)))
 (let (($x221 (and (and (and (and (and $x49 $x174) $x241) $x196) $x197) $x208)))
 (let (($x47 (not true)))
 (let (($x212 (or $x47 $x221)))
 (let (($x157 (= true true)))
 (let (($x213 (and $x157 $x212)))
 (let (($x222 (= $x213 true)))
 (let (($x154 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (= $x154 $x138)))
 (let (($x70 (= (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x153 (= $x152 $x70)))
 (let (($x163 (and $x153 $x171)))
 (let (($x155 (= $x163 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x81 (= $x137 $x138)))
 (let (($x134 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x160 (= $x134 $x70)))
 (let (($x150 (and $x160 $x81)))
 (let (($x161 (= $x150 true)))
 (let (($x21 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x23 (= $x131 $x21)))
 (let (($x148 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x132 (= $x148 $x13)))
 (let (($x135 (and $x132 $x23)))
 (let (($x133 (= $x135 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x141 (concat ?x147 (concat ?x142 ?x125)))))
 (let (($x14 (= ?x129 input.dst.llvm-%l)))
 (let (($x65 (= $x14 true)))
 (let (($x12 (= $x65 true)))
 (let (($x139 (not $x120)))
 (let (($x143 (= $x139 true)))
 (let (($x121 (= $x143 true)))
 (let (($x145 (= $x121 true)))
 (let (($x114 (= (bvand ?x54 (_ bv4294967292 32)) ?x54)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x54 (bvsub ?x54 (_ bv4 32))) (bvult ?x54 (bvsub ?x54 (_ bv4 32))))))
 (let (($x111 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x89 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x110 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x90 (and true $x89)))
 (let (($x101 (and $x90 $x110)))
 (let (($x105 (and $x101 $x89)))
 (let (($x103 (and (and (and $x90 $x105) $x111) $x99)))
 (let (($x118 (and $x103 $x114)))
 (let (($x115 (= $x118 true)))
 (let (($x119 (= $x115 true)))
 (let (($x116 (= $x119 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x75)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x93 $x71)))
 (let (($x79 (and $x97 $x94)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x61 $x79)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x80 (and $x66 $x104)))
 (let (($x82 (= $x80 true)))
 (let (($x98 (= $x82 true)))
 (let (($x100 (= $x98 true)))
 (let (($x140 (and $x100 $x116)))
 (let (($x117 (and $x140 $x116)))
 (let (($x144 (and $x117 $x145)))
 (let (($x28 (and $x144 $x12)))
 (let (($x136 (and $x28 $x133)))
 (let (($x151 (and $x136 $x161)))
 (let (($x172 (and $x151 $x155)))
 (let (($x29 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x156 (and $x29 $x172)))
 (let (($x7 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x46 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x7)))))))
 (let (($x22 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x19 (=> (bvule input.dst.llvm-%l (bvsub ?x34 (_ bv1 32))) (or false (or false (and true (or $x41 $x22)))))))
 (let (($x24 (and $x19 $x46)))
 (let (($x173 (and $x24 $x156)))
 (let (($x214 (=> $x173 $x222)))
 (not $x214))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x54 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x52 (bvadd ?x54 (_ bv3 32))))
 (let ((?x10 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x200 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x175 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x165 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x168 (store (store (store ?x165 ?x175 ((_ extract 15 8) (_ bv42 32))) ?x200 ((_ extract 23 16) (_ bv42 32))) ?x10 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x178 (store (store ?x168 (bvadd ?x54 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x54 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x182 (store (store ?x178 (bvadd ?x54 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x52 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x191 (concat (select ?x182 (bvadd ?x34 (_ bv2 32))) (concat (select ?x182 (bvadd ?x34 (_ bv1 32))) (select ?x182 ?x34)))))
 (let ((?x206 (concat (select ?x182 (bvadd ?x34 (_ bv3 32))) ?x191)))
 (let (($x193 (= (_ bv0 32) ?x206)))
 (let ((?x219 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x219 (_ bv1 32))))
 (let (($x199 (= false $x198)))
 (let (($x138 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x208 (=> $x138 $x199)))
 (let (($x242 (= false false)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let (($x207 (and $x138 $x13)))
 (let (($x197 (=> $x207 $x242)))
 (let (($x194 (= ?x219 (_ bv0 32))))
 (let (($x195 (= true $x194)))
 (let (($x196 (=> $x138 $x195)))
 (let ((?x216 (concat (select ?x182 ?x200) (concat (select ?x182 ?x175) (select ?x182 input.dst.llvm-%l)))))
 (let ((?x204 (concat (select ?x182 ?x10) ?x216)))
 (let (($x186 (= (_ bv42 32) ?x204)))
 (let (($x241 (=> $x138 $x186)))
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x164 (bvuge ?x30 (_ bv1 32))))
 (let (($x174 (= true $x164)))
 (let (($x124 (= ?x30 (_ bv0 32))))
 (let (($x49 (= false $x124)))
 (let (($x221 (and (and (and (and (and $x49 $x174) $x241) $x196) $x197) $x208)))
 (let (($x47 (not true)))
 (let (($x212 (or $x47 $x221)))
 (let (($x157 (= true true)))
 (let (($x213 (and $x157 $x212)))
 (let (($x222 (= $x213 true)))
 (let (($x154 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (= $x154 $x138)))
 (let (($x70 (= (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x153 (= $x152 $x70)))
 (let (($x163 (and $x153 $x171)))
 (let (($x155 (= $x163 true)))
 (let (($x137 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x81 (= $x137 $x138)))
 (let (($x134 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x160 (= $x134 $x70)))
 (let (($x150 (and $x160 $x81)))
 (let (($x161 (= $x150 true)))
 (let (($x21 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x23 (= $x131 $x21)))
 (let (($x148 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x132 (= $x148 $x13)))
 (let (($x135 (and $x132 $x23)))
 (let (($x133 (= $x135 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x141 (concat ?x147 (concat ?x142 ?x125)))))
 (let (($x14 (= ?x129 input.dst.llvm-%l)))
 (let (($x65 (= $x14 true)))
 (let (($x12 (= $x65 true)))
 (let (($x139 (not $x120)))
 (let (($x143 (= $x139 true)))
 (let (($x121 (= $x143 true)))
 (let (($x145 (= $x121 true)))
 (let (($x114 (= (bvand ?x54 (_ bv4294967292 32)) ?x54)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x54 (bvsub ?x54 (_ bv4 32))) (bvult ?x54 (bvsub ?x54 (_ bv4 32))))))
 (let (($x111 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x89 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x110 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x90 (and true $x89)))
 (let (($x101 (and $x90 $x110)))
 (let (($x105 (and $x101 $x89)))
 (let (($x103 (and (and (and $x90 $x105) $x111) $x99)))
 (let (($x118 (and $x103 $x114)))
 (let (($x115 (= $x118 true)))
 (let (($x119 (= $x115 true)))
 (let (($x116 (= $x119 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x75)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x93 $x71)))
 (let (($x79 (and $x97 $x94)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x61 $x79)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x80 (and $x66 $x104)))
 (let (($x82 (= $x80 true)))
 (let (($x98 (= $x82 true)))
 (let (($x100 (= $x98 true)))
 (let (($x140 (and $x100 $x116)))
 (let (($x117 (and $x140 $x116)))
 (let (($x144 (and $x117 $x145)))
 (let (($x28 (and $x144 $x12)))
 (let (($x136 (and $x28 $x133)))
 (let (($x151 (and $x136 $x161)))
 (let (($x172 (and $x151 $x155)))
 (let (($x29 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x156 (and $x29 $x172)))
 (let (($x7 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x46 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x7)))))))
 (let (($x22 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x19 (=> (bvule input.dst.llvm-%l (bvsub ?x34 (_ bv1 32))) (or false (or false (and true (or $x41 $x22)))))))
 (let (($x24 (and $x19 $x46)))
 (let (($x173 (and $x24 $x156)))
 (let (($x214 (=> $x173 $x222)))
 (not $x214))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1506729/query
