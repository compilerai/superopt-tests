=FunctionName: make_node
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph make_node.A1.B1.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.make_node:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_node
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-val-0 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_node}
=memlabel_map.0 for call-context {*;make_node}
mlheap.src.spec.make_node : memlabel-mem--heap
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%var-val-0 : BV:32
3 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : unit : UNIT
6 : sum_init(3, 4, 5) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(1, 2, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-0.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-2.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-val-0 : BV:32
5 : 0 { 0x0 +1.0e1025 } : INT
6 : unit : UNIT
7 : sum_init(1, 5, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
8 : prod_init(3, 4, 7) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
9 : sum_init(1, 2, 8) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-val-0 : BV:32
5 : 0 { 0x0 +1.0e1025 } : INT
6 : unit : UNIT
7 : sum_init(1, 5, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
8 : prod_init(3, 4, 7) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
9 : sum_init(1, 2, 8) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*ctor_sum)*ctor_prod)*(ctor_sum*func_ret))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.make_node
=Loc 1 in src.spec.make_node.
REGMEM
spec-%var-val-0
1 : input.spec-%var-val-0 : BV:32
=Loc 6 in src.spec.make_node.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 7 in src.spec.make_node.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 8 in src.spec.make_node.
REGMEM
spec-%tmpvar-0.E0%0%d
1 : input.spec-%tmpvar-0.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 9 in src.spec.make_node.
REGMEM
spec-%tmpvar-1.E0%0%d
1 : input.spec-%tmpvar-1.E0%0%d : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 10 in src.spec.make_node.
REGMEM
spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 11 in src.spec.make_node.
REGMEM
spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Locs end
=Liveness in src.spec.make_node
=live locs at L0%0%d
1, 
=live locs at E0%0%d
11, 

=Definedness in src.spec.make_node
=loc definedness at L0%0%d
1, 6, 7
=loc definedness at E0%0%d
1, 6, 7, 8, 9, 10, 11

=Branch affecting variable locs in src.spec.make_node
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.make_node
=relevant memlabels
=function: make_node
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 8 {input.spec-%tmpvar-0.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 9 {input.spec-%tmpvar-1.E0%0%d }
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%var-val-0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : unit : UNIT
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform7 : BV:32
7 : Lambda14 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda15 : BV:32
10 : sum(3, 4, 6) : SUM[UNIT,BV:32]
11 : prod(3, 10) : PROD[BV:32,SUM[UNIT,BV:32]]
12 : lambda(9, 11) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
13 : ind(5, 5, 3, 6, 8, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 4, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod_init(1, 2, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 10 {input.spec-%tmpvar-2.E0%0%d }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-val-0 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : unit : UNIT
7 : Indxform7 : BV:32
8 : Lambda14 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda15 : BV:32
11 : sum(5, 6, 7) : SUM[UNIT,BV:32]
12 : prod(5, 11) : PROD[BV:32,SUM[UNIT,BV:32]]
13 : lambda(10, 12) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
14 : ind(2, 2, 5, 7, 9, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(5, 6, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod_init(3, 4, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum_init(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 11 {input.spec-%tmpvar-3.E0%0%d }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-val-0 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : unit : UNIT
7 : Indxform7 : BV:32
8 : Lambda14 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda15 : BV:32
11 : sum(5, 6, 7) : SUM[UNIT,BV:32]
12 : prod(5, 11) : PROD[BV:32,SUM[UNIT,BV:32]]
13 : lambda(10, 12) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
14 : ind(2, 2, 5, 7, 9, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(5, 6, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod_init(3, 4, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum_init(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.make_node
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-val-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 8
=loc_expr
140341 : input.spec-%tmpvar-0.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.make_node
=loc 8 expr
1 : input.spec-%tmpvar-0.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 8 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140278 : unit : UNIT
140283 : 1 { 0x1 +1.0e1025 } : INT
140344 : Indxform7 : BV:32
140347 : Lambda14 : BV:32
140348 : lambda(140347, 140347) : FUNCTION[BV:32 -> BV:32]
140349 : Lambda15 : BV:32
140345 : sum(140287, 140278, 140344) : SUM[UNIT,BV:32]
140346 : prod(140287, 140345) : PROD[BV:32,SUM[UNIT,BV:32]]
140353 : lambda(140349, 140346) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140356 : ind(140283, 140283, 140287, 140344, 140348, 140353) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140357 : sum(140287, 140278, 140356) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140358 : sym_const(140357) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_node}
=loc_id 1 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 6 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 7 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 8 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 9 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 10 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 11 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 8 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=spec-%tmpvar-1.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%var-val-0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : unit : UNIT
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform7 : BV:32
7 : Lambda14 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda15 : BV:32
10 : sum(3, 4, 6) : SUM[UNIT,BV:32]
11 : prod(3, 10) : PROD[BV:32,SUM[UNIT,BV:32]]
12 : lambda(9, 11) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
13 : ind(5, 5, 3, 6, 8, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 4, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod_init(1, 2, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-0.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-2.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-val-0 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : unit : UNIT
7 : Indxform7 : BV:32
8 : Lambda14 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda15 : BV:32
11 : sum(5, 6, 7) : SUM[UNIT,BV:32]
12 : prod(5, 11) : PROD[BV:32,SUM[UNIT,BV:32]]
13 : lambda(10, 12) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
14 : ind(2, 2, 5, 7, 9, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(5, 6, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod_init(3, 4, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum_init(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%var-val-0 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : unit : UNIT
7 : Indxform7 : BV:32
8 : Lambda14 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda15 : BV:32
11 : sum(5, 6, 7) : SUM[UNIT,BV:32]
12 : prod(5, 11) : PROD[BV:32,SUM[UNIT,BV:32]]
13 : lambda(10, 12) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
14 : ind(2, 2, 5, 7, 9, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(5, 6, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod_init(3, 4, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum_init(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.make_node
=suffixpath_at_L0%0%d for src.spec.make_node
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for src.spec.make_node
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for src.spec.make_node done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.make_node:
=TFG:
=Nodes: L0%0%d Lentry%1%intermediateVal1 Lentry%1%fcallStart Lentry%1%fcallEnd Lentry%2%d E0%0%d
=Edges:
L0%0%d => Lentry%1%fcallStart
Lentry%1%fcallStart => Lentry%1%fcallEnd
Lentry%1%fcallEnd => Lentry%1%intermediateVal1
Lentry%1%intermediateVal1 => Lentry%2%d
Lentry%2%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%val
1 : input.dst.llvm-%val : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%intermediateVal1
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_node
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%val : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_node : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%val : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_node}
=memlabel_map.0 for call-context {*;make_node}
mlcall.dst.llvm.make_node.2 : memlabel-mem-
=memlabel_map.1 for call-context {*;make_node}
mlcall.dst.llvm.make_node.3 : memlabel-mem-
=memlabel_map.2 for call-context {*;make_node}
mlheap.dst.llvm.make_node : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;make_node}
mlvar.dst.llvm.make_node.0 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=memlabel_map.4 for call-context {*;make_node}
mlvar.dst.llvm.make_node.1 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Edge: L0%0%d => Lentry%1%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*fcall_edge_start)
tfg_edge_comment end

=Edge: Lentry%1%fcallStart => Lentry%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.make_node.2 : MEMLABEL
3 : mlcall.dst.llvm.make_node.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.make_node.2 : MEMLABEL
3 : mlcall.dst.llvm.make_node.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i8* @malloc(i32 8), !dbg !22)
tfg_edge_comment end

=Edge: Lentry%1%fcallEnd => Lentry%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*  %call = call i8* @malloc(i32 8), !dbg !22)
tfg_edge_comment end

=Edge: Lentry%1%intermediateVal1 => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(1, 4) : BV:32
6 : ite(3, 2, 5) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%val.Lentry%2%d
1 : input.dst.llvm-%val : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
10 : store_uninit(4, 8, 6, 1, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
2 : increment_count(1) : COUNT
=dst.llvm-mem.alloc.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 1, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : eq(4, 2) : BOOL
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc_ptr(1, 6) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : bvadd(7, 9) : BV:32
11 : bvule(7, 10) : BOOL
12 : or(5, 11) : BOOL
13 : or(3, 12) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : mlheap.dst.llvm.make_node : MEMLABEL
7 : region_agrees_with_memlabel(4, 1, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %call = call i8* @malloc(i32 8), !dbg !22
tfg_edge_comment end

=Edge: Lentry%2%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%next.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%val1.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-mem.E0%0%d
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_node.0 : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : input.dst.llvm-%val.Lentry%2%d : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : store(1, 2, 3, 10, 11, 12, 13) : ARRAY[BV:32 -> BV:8]
15 : mlvar.dst.llvm.make_node.1 : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvadd(8, 16) : BV:32
18 : bvadd(4, 17) : BV:32
19 : store(14, 2, 15, 18, 5, 12, 13) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
7 : isgepoffset(6, 4) : BOOL
8 : bvslt(2, 2) : BOOL
9 : 32 { 0x20 +1.0e1025 } : INT
10 : bvsign_ext(2, 9) : BV:64
11 : bvzero_ext(3, 9) : BV:64
12 : bvmul(10, 11) : BV:64
13 : 63 { 0x3f +1.0e1025 } : INT
14 : bvextract(12, 13, 9) : BV:32
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(14, 15) : BOOL
17 : eq(14, 2) : BOOL
18 : ite(8, 16, 17) : BOOL
19 : 8 { 0x8 +1.0e1025 } : INT
20 : isindexforsize(18, 19) : BOOL
21 : and(7, 20) : BOOL
22 : bvadd(5, 2) : BV:32
23 : bvadd(1, 22) : BV:32
24 : isgepoffset(23, 2) : BOOL
25 : and(21, 24) : BOOL
26 : 4 { 0x4 +1.0e1025 } : INT
27 : islangaligned(23, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvadd(5, 29) : BV:32
31 : bvadd(1, 30) : BV:32
32 : isgepoffset(31, 29) : BOOL
33 : and(21, 32) : BOOL
34 : and(28, 33) : BOOL
35 : islangaligned(31, 26) : BOOL
36 : and(34, 35) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((((  %0 = bitcast i8* %call to %struct.list*, !dbg !22*  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24)*  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24)*(  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24*  %val1 = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !24))*  store i32 %val, i32* %val1, align 4, !dbg !25)*((  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26)*(  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !26)))*  store %struct.list* null, %struct.list** %next, align 4, !dbg !27)*  ret %struct.list* %0, !dbg !28)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.make_node
=Loc 100002 in dst.llvm.make_node.
REGMEM
dst.llvm-%val
1 : input.dst.llvm-%val : BV:32
=Loc 100017 in dst.llvm.make_node.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100019 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100020 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100021 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100022 in dst.llvm.make_node.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100025 in dst.llvm.make_node.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100026 in dst.llvm.make_node.
REGMEM
dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=Loc 100028 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100029 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100030 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100031 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100032 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100033 in dst.llvm.make_node.
REGMEM
dst.llvm-%call.Lentry%1%fcallEnd
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=Loc 100034 in dst.llvm.make_node.
REGMEM
dst.llvm-%call.Lentry%2%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=Loc 100035 in dst.llvm.make_node.
REGMEM
dst.llvm-%val.Lentry%2%d
1 : input.dst.llvm-%val.Lentry%2%d : BV:32
=Loc 100036 in dst.llvm.make_node.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=Loc 100037 in dst.llvm.make_node.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=Loc 100038 in dst.llvm.make_node.
REGMEM
dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%0.E0%0%d : BV:32
=Loc 100039 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100040 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100041 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100042 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100043 in dst.llvm.make_node.
REGMEM
dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100044 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100045 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100046 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100047 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100048 in dst.llvm.make_node.
REGMEM
dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100049 in dst.llvm.make_node.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100050 in dst.llvm.make_node.
REGMEM
dst.llvm-%next.E0%0%d
1 : input.dst.llvm-%next.E0%0%d : BV:32
=Loc 100051 in dst.llvm.make_node.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100052 in dst.llvm.make_node.
REGMEM
dst.llvm-%val1.E0%0%d
1 : input.dst.llvm-%val1.E0%0%d : BV:32
=Loc 100053 in dst.llvm.make_node.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100054 in dst.llvm.make_node.
REGMEM
dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=Loc 100055 in dst.llvm.make_node.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100056 in dst.llvm.make_node.
REGMEM
dst.cur_rounding_mode.Lentry%1%fcallStart
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=Loc 100057 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100058 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100059 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100060 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100061 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100062 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100063 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100064 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100065 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100066 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100067 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100068 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100069 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Loc 100070 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
=Loc 100071 in dst.llvm.make_node.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=Locs end
=Liveness in dst.llvm.make_node
=live locs at L0%0%d
100002, 100029, 100030, 100031, 100032, 
=live locs at Lentry%1%intermediateVal1
100002, 100033, 100058, 
=live locs at Lentry%1%fcallStart
100002, 100029, 100030, 100031, 100032, 
=live locs at Lentry%1%fcallEnd
100002, 100033, 100058, 
=live locs at Lentry%2%d
100034[f], 100035, 100063, 
=live locs at E0%0%d
100034[f], 100068, 

=Definedness in dst.llvm.make_node
=loc definedness at L0%0%d
100002, 100026, 100028, 100029, 100030, 100031, 100032
=loc definedness at Lentry%1%intermediateVal1
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100036, 100054, 100056, 100057, 100058, 100059, 100060, 100061
=loc definedness at Lentry%1%fcallStart
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100054, 100056
=loc definedness at Lentry%1%fcallEnd
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100036, 100054, 100056, 100057, 100058, 100059, 100060, 100061
=loc definedness at Lentry%2%d
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066
=loc definedness at E0%0%d
100002, 100026, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100071

=Branch affecting variable locs in dst.llvm.make_node
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at Lentry%1%intermediateVal1

=branch affecting variable locs at Lentry%1%fcallStart

=branch affecting variable locs at Lentry%1%fcallEnd

=branch affecting variable locs at Lentry%2%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.make_node
=relevant memlabels
=function: make_node
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100054 {input.dst.local_alloc_count.Lentry%1%fcallStart }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100056 {input.dst.cur_rounding_mode.Lentry%1%fcallStart }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100034 {input.dst.llvm-%call.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100035 {input.dst.llvm-%val.Lentry%2%d }
1 : input.dst.llvm-%val : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100037 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100055 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
2 : increment_count(1) : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100062 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--arg.0) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100063 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100064 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100065 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d for loc_id 100066 {memmask(input.dst.llvm-mem.Lentry%2%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100033 {input.dst.llvm-%call.Lentry%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100036 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100057 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100058 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100059 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100060 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100061 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100038 {input.dst.llvm-%0.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100041 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100042 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100043 {input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100044 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100045 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100046 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100047 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100048 {input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100049 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100050 {input.dst.llvm-%next.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100051 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100052 {input.dst.llvm-%val1.E0%0%d }
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100053 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100067 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100068 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100069 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : input.dst.llvm-%val.Lentry%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memmask(12, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100070 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d for loc_id 100071 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc.Lentry%2%d, memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%1%intermediateVal1:
vacuous mls at Lentry%1%fcallStart:
vacuous mls at Lentry%1%fcallEnd:
vacuous mls at Lentry%2%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%1%intermediateVal1:
non-vacuous mls at Lentry%1%fcallStart:
non-vacuous mls at Lentry%1%fcallEnd:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.make_node
=avail_exprs begin
=loc 100002
=loc_expr
140406 : input.dst.llvm-%val : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140485 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140486 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140488 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140490 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140492 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100025
=loc_expr
140413 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140409 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140543 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=avail_exprs_val.end
=loc 100035
=loc_expr
140548 : input.dst.llvm-%val.Lentry%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%val : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140391 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100037
=loc_expr
140565 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140566 : input.dst.llvm-%0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140567 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140568 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140569 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140570 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140571 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100044
=loc_expr
140572 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100045
=loc_expr
140573 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140574 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100047
=loc_expr
140575 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
140576 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140577 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140578 : input.dst.llvm-%next.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140579 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140580 : input.dst.llvm-%val1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140581 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140397 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100055
=loc_expr
140582 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
2 : increment_count(1) : COUNT
=avail_exprs_val.end
=loc 100056
=loc_expr
140583 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=loc 100057
=loc_expr
140393 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140290 : memlabel-mem--arg.0 : MEMLABEL
140584 : memmask(140393, 140408, 140290) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100058
=loc_expr
140393 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140586 : memmask(140393, 140408, 140410) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100059
=loc_expr
140393 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140587 : memmask(140393, 140408, 140427) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100060
=loc_expr
140393 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140494 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
140588 : memmask(140393, 140408, 140494) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100061
=loc_expr
140393 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140589 : memmask(140393, 140408, 140509) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100062
=loc_expr
140546 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140290 : memlabel-mem--arg.0 : MEMLABEL
140590 : memmask(140546, 140547, 140290) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100063
=loc_expr
140546 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140591 : memmask(140546, 140547, 140410) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100064
=loc_expr
140546 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140592 : memmask(140546, 140547, 140427) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100065
=loc_expr
140546 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140494 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
140593 : memmask(140546, 140547, 140494) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100066
=loc_expr
140546 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140594 : memmask(140546, 140547, 140509) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100067
=loc_expr
140563 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140290 : memlabel-mem--arg.0 : MEMLABEL
140595 : memmask(140563, 140547, 140290) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100068
=loc_expr
140563 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140564 : memmask(140563, 140547, 140410) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100069
=loc_expr
140563 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140596 : memmask(140563, 140547, 140427) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : input.dst.llvm-%val.Lentry%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memmask(12, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100070
=loc_expr
140563 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140494 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
140597 : memmask(140563, 140547, 140494) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100071
=loc_expr
140563 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140547 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140598 : memmask(140563, 140547, 140509) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.make_node
=loc 100036 expr
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=loc 100036 spreled-expr
140415 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100039 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100039 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100040 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100040 spreled-expr
140389 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100042 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100043 expr
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100043 spreled-expr
140389 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100044 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100044 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100045 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100045 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100047 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100047 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100048 expr
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100048 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100053 spreled-expr
140267 : retaddr_const : BV:32
=loc 100054 expr
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=loc 100054 spreled-expr
140413 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100055 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100055 spreled-expr
140413 : input.dst.local_alloc_count.=L0%0%d= : COUNT
140649 : increment_count(140413) : COUNT
=loc 100056 expr
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=loc 100056 spreled-expr
140414 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_node}
=loc_id 100002 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100025 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;make_node}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100036 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=loc_id 100053 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;make_node}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100060 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100061 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(local./*___y___make_node__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(local./*___y___make_node__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100069 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(local./*___y___make_node__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100070 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100071 lr-status in lr-status-map at call-context {*;make_node}
lr_status_bottom(local./*___y___make_node__x__=L0%0%argnum0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100036 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%1%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%intermediateVal1=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallStart=>Lentry%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%1%fcallStart
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%intermediateVal1=>Lentry%2%d
=dst.llvm-%call.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=dst.llvm-%val.Lentry%2%d
1 : input.dst.llvm-%val : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.=L0%0%d= : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
2 : increment_count(1) : COUNT
=dst.llvm-mem.alloc.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 2, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-mem.Lentry%1%fcallEnd
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>E0%0%d
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%next.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-%val1.E0%0%d
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-mem.E0%0%d
1 : input.dst.llvm-mem.Lentry%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lentry%2%d : BV:32
5 : input.dst.llvm-%val.Lentry%2%d : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d assume# 0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
7 : region_agrees_with_memlabel(4, 2, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d assume# 1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(6, 7) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%1%intermediateVal1=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume# 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>E0%0%d assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%call.Lentry%2%d : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : and(4, 5) : BOOL
7 : 4 { 0x4 +1.0e1025 } : INT
8 : islangaligned(2, 7) : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 2) : BV:32
11 : isgepoffset(10, 9) : BOOL
12 : and(5, 6, 8, 11) : BOOL
13 : islangaligned(10, 7) : BOOL
14 : and(12, 13) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : malloc
=Nextpc-map done
=suffixpaths for dst.llvm.make_node
=suffixpath_at_L0%0%d for dst.llvm.make_node
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%1%intermediateVal1 for dst.llvm.make_node
=suffixpath_at_Lentry%1%intermediateVal1.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*(Lentry%1%fcallEnd=>Lentry%1%intermediateVal1)))
=suffixpath_at_Lentry%1%fcallStart for dst.llvm.make_node
=suffixpath_at_Lentry%1%fcallStart.graph_edge_composition
(L0%0%d=>Lentry%1%fcallStart)
=suffixpath_at_Lentry%1%fcallEnd for dst.llvm.make_node
=suffixpath_at_Lentry%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*(Lentry%1%fcallStart=>Lentry%1%fcallEnd))
=suffixpath_at_Lentry%2%d for dst.llvm.make_node
=suffixpath_at_Lentry%2%d.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%1%intermediateVal1)*(Lentry%1%intermediateVal1=>Lentry%2%d))))
=suffixpath_at_E0%0%d for dst.llvm.make_node
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%1%intermediateVal1)*((Lentry%1%intermediateVal1=>Lentry%2%d)*(Lentry%2%d=>E0%0%d)))))
=suffixpaths for dst.llvm.make_node done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart done
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #0.pred
=Comment
undef-behavioursome.edge.Lentry%1%intermediateVal1=>Lentry%2%d
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140415 : 8 { 0x8 +1.95e129 } : BV:32
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140818 : region_agrees_with_memlabel(140408, 140374, 140415, 140410) : BOOL
140827 : or(140622, 140818) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1.ec
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d assume #1.pred
=Comment
undef-behavioursome.edge.Lentry%1%intermediateVal1=>Lentry%2%d
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140363 : 0 { 0x0 } : BOOL
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140380 : heap_alloc_ptr(140374, 140427) : BV:32
140537 : 7 { 0x7 +1.83e129 } : BV:32
140651 : bvadd(140380, 140537) : BV:32
140655 : bvule(140380, 140651) : BOOL
140659 : or(140363, 140655) : BOOL
140663 : or(140622, 140659) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0.ec
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=LhsExpr
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140283 : 1 { 0x1 +1.0e1025 } : INT
140533 : islangaligned(140374, 140283) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%1%intermediateVal1 done
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0.ec
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lentry%2%d=>E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.Lentry%2%d=>E0%0%d
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140543 : input.dst.llvm-%call.Lentry%2%d : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140760 : isgepoffset(140543, 140287) : BOOL
140771 : and(140275, 140760) : BOOL
140774 : and(140760, 140771) : BOOL
140362 : 4 { 0x4 +1.0e1025 } : INT
140776 : islangaligned(140543, 140362) : BOOL
140389 : 4 { 0x4 +1.47e129 } : BV:32
140752 : bvadd(140389, 140543) : BV:32
140780 : isgepoffset(140752, 140389) : BOOL
140787 : and(140771, 140774, 140776, 140780) : BOOL
140789 : islangaligned(140752, 140362) : BOOL
140792 : and(140787, 140789) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lentry%2%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 7
=pc
Lentry%2%d
=linename
line 7
=pc
Lentry%3%d
=linename
line 8
=pc
Lentry%4%d
=linename
line 8
=pc
Lentry%5%d
=linename
line 9
=pc
Lentry%6%d
=linename
line 9
=pc
Lentry%7%d
=linename
line 10
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 16
=pc
Lentry%2%d
=column_name
 at column 16
=pc
Lentry%3%d
=column_name
 at column 9
=pc
Lentry%4%d
=column_name
 at column 13
=pc
Lentry%5%d
=column_name
 at column 9
=pc
Lentry%6%d
=column_name
 at column 14
=pc
Lentry%7%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 7
=pc
Lentry%2%d
=line_and_column
line 7
=pc
Lentry%3%d
=line_and_column
(line 8 at column 9)
=pc
Lentry%4%d
=line_and_column
(line 8 at column 13)
=pc
Lentry%5%d
=line_and_column
(line 9 at column 9)
=pc
Lentry%6%d
=line_and_column
(line 9 at column 14)
=pc
Lentry%7%d
=line_and_column
line 10
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%next.E0%0%d : L0%0%d : (4 + input.dst.llvm-%call.Lentry%2%d)
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : L0%0%d : (4 + input.dst.llvm-%call.Lentry%2%d)
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%val1.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : L0%0%d : 8
input.dst.llvm-%0.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-%val.Lentry%2%d : L0%0%d : malloc_side_effect(val', ite(input.dst.llvm-%call.Lentry%1%fcallEnd = 0, input.dst.llvm-mem.alloc, heap_alloc(input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, input.dst.llvm-%call.Lentry%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/)
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : L0%0%d : input.dst.llvm-%call.Lentry%2%d
input.dst.llvm-%call.Lentry%2%d : L0%0%d : ite(input.dst.llvm-%call.Lentry%1%fcallEnd = 0, 0, heap_alloc_ptr(input.dst.llvm-%call.Lentry%1%fcallEnd, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/))
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : L0%0%d : malloc_side_effect(8, ite(input.dst.llvm-%call.Lentry%1%fcallEnd = 0, input.dst.llvm-mem.alloc, heap_alloc(input.dst.llvm-mem.alloc, memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, input.dst.llvm-%call.Lentry%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/)
input.dst.llvm-%val : L0%0%d : val'
input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.local_alloc_count.Lentry%1%fcallStart : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset : L0%0%d : (input.dst.llvm-%0 + 4)
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%0 : Lentry%3%bbentry : node'
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val1 : L0%0%d : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : increment_count(input.dst.local_alloc_count.=L0%0%d=)
input.dst.cur_rounding_mode.Lentry%1%fcallStart : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%call
=dst.llvm-%call loop pc: L0%0%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%val1
=dst.llvm-%val1 loop pc: L0%0%d
=dst.llvm-%val1 val_scevb
=dst.llvm-%val1 val_scevb scev
=dst.llvm-%val1 val_scevb scev loop: L0%0%d
=dst.llvm-%val1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%val1 val_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%val1 val_scevb scev scev_expr done
=dst.llvm-%val1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb
=dst.llvm-%val1 atuse_scevb scev
=dst.llvm-%val1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%val1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val1 atuse_scevb scev scev_expr
1 : input.dst.llvm-%call : BV32
=dst.llvm-%val1 atuse_scevb scev scev_expr done
=dst.llvm-%val1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val1 atexit_scev nullptr
=dst.llvm-%next
=dst.llvm-%next loop pc: L0%0%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
2 : 00000000000000000000000000000100b
1 : input.dst.llvm-%call : BV32
3 : scev_op_add(2, 1) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
2 : 00000000000000000000000000000100b
1 : input.dst.llvm-%call : BV32
3 : scev_op_add(2, 1) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%intermediateVal1
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%val.Lentry%2%d : BV:32
=reaching defns for expr 3 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=reaching defns for expr 4 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%call.Lentry%2%d : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%val.Lentry%2%d : BV:32
=reaching defns for expr 3 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%0.E0%0%d : BV:32
=reaching defns for expr 4 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d : BV:32
=reaching defns for expr 5 edges
  Lentry%1%intermediateVal1=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 6 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 7 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 14 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 15 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%next.E0%0%d : BV:32
=reaching defns for expr 16 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 17 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%val1.E0%0%d : BV:32
=reaching defns for expr 18 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 19 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lentry%2%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 22 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 23 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 24 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 25 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 26 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 26 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.gepoffset.3.total_offset.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%23b466432f6ed930e4a402888b91590.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%val1.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lentry%1%fcallEnd
lr_status_bottom(; )
=LR status for var input.dst.llvm-%0.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%val.Lentry%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.3.total_offset.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%call.Lentry%2%d
lr_status_linearly_related(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%385a3b2bda8eee35f95ea1bb11c76ec.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%val
lr_status_bottom(hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.local_alloc_count.Lentry%1%fcallStart
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%1%fcallStart
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind7.proof
=function_name make_node
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: make_node
=EntryPreconds
=pred 0
=Comment
equal-val
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : $llvm-ret : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : $llvm-md : ARRAY[BV:32 -> BV:8]
7 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L0%0%d_Lentry%1%fcallStart L0%0%d_Lentry%1%fcallEnd E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L0%0%d_Lentry%1%fcallStart
L0%0%d_Lentry%1%fcallStart => L0%0%d_Lentry%1%fcallEnd
L0%0%d_Lentry%1%fcallEnd => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: make_node
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%val : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_node : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%val : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L0%0%d_Lentry%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L0%0%d at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lentry%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lentry%1%fcallStart#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L0%0%d_Lentry%1%fcallStart => L0%0%d_Lentry%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L0%0%d at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%1%fcallStart to Lentry%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%1%fcallStart#{0,0}=>Lentry%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L0%0%d_Lentry%1%fcallEnd => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%1%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lentry%1%fcallEnd#{0,0}=>Lentry%1%intermediateVal1#{0,0})*((Lentry%1%intermediateVal1#{0,0}=>Lentry%2%d#{0,0})*(Lentry%2%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-val
=LhsExpr
1 : input.spec-%var-val-0 : BV:32
2 : input.dst.llvm-%val : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=graph_with_precondition_done

=Locs in make_node.A1.B1.C1
=Locs end
=Liveness in make_node.A1.B1.C1
=live locs at L0%0%d_L0%0%d

=live locs at L0%0%d_Lentry%1%fcallStart

=live locs at L0%0%d_Lentry%1%fcallEnd

=live locs at E0%0%d_E0%0%d


=Definedness in make_node.A1.B1.C1

=Branch affecting variable locs in make_node.A1.B1.C1

=Relevant Memlabels in make_node.A1.B1.C1
=relevant memlabels
=function: make_node
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/
memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/
memlabel-mem--hpalloc.R2p./*___y___make_node__x__=Lentry%1%intermediateVal0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in make_node.A1.B1.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in make_node.A1.B1.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce7.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce7 ab6fae22a9a5a0dc72dc299bcedbce67
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform17 : BV:32
4 : Lambda52 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda53 : BV:32
7 : unit : UNIT
8 : 1623928431 { 0x60cb2e6f +1.58735454e66 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1814547082 { 0x6c27ca8a +1.31086850e89 } : COUNT
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1814547082 { 0x6c27ca8a +1.31086850e89 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1451922571
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L0%0%d_Lentry%1%fcallStart
=global nodece 1
=global nodece 1 nodece z3.ce8.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3.ce8 78cd95275eca2244569d7d8d651a6111
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform19 : BV:32
4 : Lambda56 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda57 : BV:32
7 : unit : UNIT
8 : 1573078159 { 0x5dc3448f +1.52552974e60 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3919076487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3919076488; 3919076491 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 3919076492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 3919076488 { 0xe9985c88 -375890808 -1.19032382e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 3919076488 { 0xe9985c88 -375890808 -1.19032382e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 3919076491 { 0xe9985c8b -375890805 -1.19032418e84 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
52945785
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce25 cf5f71be0dcde26e363c18347587ce8
=input.spec-%var-val-0
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform29 : BV:32
4 : Lambda100 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda101 : BV:32
7 : unit : UNIT
8 : 1200852792 { 0x47938f38 +1.15280818e16 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 3666733056 { 0xda8de800 -628234240 -1.10864257e54 } : BV:32
=input.dst.llvm-%call.Lentry%2%d
1 : 2321154048 { 0x8a5a0000 -1973813248 -1.70312500e149 } : BV:32
=input.dst.llvm-%val
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4281642647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4281642648; 4281642651 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 4281642652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 4281642648 { 0xff34ae98 -13324648 -1.41157817e127 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1638728477 { 0x61ad031d +1.35165750e68 } : COUNT
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1638728477 { 0x61ad031d +1.35165750e68 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 4281642648 { 0xff34ae98 -13324648 -1.41157817e127 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 4281642651 { 0xff34ae9b -13324645 -1.41157853e127 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
522059473
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallStart
=global nodece 3
=global nodece 3 nodece z3.ce43.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce43 c6e244e4adf51aaec336b895b26acb67
=input.spec-%var-val-0
1 : 50529027 { 0x3030303 +1.2352941e135 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform41 : BV:32
4 : Lambda142 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda143 : BV:32
7 : unit : UNIT
8 : 995653868 { 0x3b5878ec +1.69119024e247 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 2147483641 { 0x7ffffff9 +1.99999916e128 } : BV:32
=input.dst.llvm-%call.Lentry%2%d
1 : 2634039296 { 0x9d004000 -1660928000 -1.195312e187 } : BV:32
=input.dst.llvm-%val
1 : 50529027 { 0x3030303 +1.2352941e135 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1493442739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1493442740; 1493442743 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 1493442744; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 1493442740 { 0x590420b4 +1.3224802e51 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1681570802 { 0x643abbf2 +1.45886063e73 } : COUNT
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1681570802 { 0x643abbf2 +1.45886063e73 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 1493442740 { 0x590420b4 +1.3224802e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 1493442743 { 0x590420b7 +1.3224837e51 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1676812338
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallStart
=global nodece 4
=global nodece 4 nodece z3v487.ce95.num_edges_traversed0
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(epsilon)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce95 1a68d091ce921f4a9fbbdc6519014f7
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform129 : BV:32
4 : Lambda402 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda403 : BV:32
7 : unit : UNIT
8 : 561255677 { 0x217414fd +1.90689051e195 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3760492780
=counter_example_end
=global nodece 4 num_edges_traversed 0
=global nodece 4 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallStart
=global nodece 5
=global nodece 5 nodece z3.ce96.num_edges_traversed0
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(epsilon)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce96 75efa46ae64e4e05888368a8e6cd072
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform131 : BV:32
4 : Lambda406 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda407 : BV:32
7 : unit : UNIT
8 : 2021310031 { 0x787abe4f +1.95893275e113 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3919076487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3919076488; 3919076491 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 3919076492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 3919076488 { 0xe9985c88 -375890808 -1.19032382e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 3919076488 { 0xe9985c88 -375890808 -1.19032382e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 3919076491 { 0xe9985c8b -375890805 -1.19032418e84 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
418211346
=counter_example_end
=global nodece 5 num_edges_traversed 0
=global nodece 5 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallStart
=global nodece 6
=global nodece 6 nodece z3v487.ce121.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce121 cca356b4c2baa4f3fbe0e7aa58a95438
=nextpc_const.1
1 : 207098868 { 0xc5813f4 +1.68810892e153 } : BV:32
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 696428888 { 0x2982a958 +1.2079296e212 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 237 , m_adder -> 102), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 207098868 , 1000 , 8 ) -> 696428888, () -> 337120701, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1814547082 { 0x6c27ca8a +1.31086850e89 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 237 , m_adder -> 102), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3314652207
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 7
=global nodece 7 nodece z3.ce116.num_edges_traversed2
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce116 2cfae4a6da54ba6d6a8a88502dcf6cf6
=nextpc_const.1
1 : 552785511 { 0x20f2d667 +1.89716804e194 } : BV:32
=input.spec-%var-val-0
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 541407871 { 0x20453a7f +1.54084765e193 } : BV:32
=input.dst.llvm-%val
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4281642647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4281642648; 4281642651 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 4281642652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 4281642648 { 0xff34ae98 -13324648 -1.41157817e127 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 197), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 552785511 , 1000 , 8 ) -> 541407871, () -> 1281840322, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1638728477 { 0x61ad031d +1.35165750e68 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 4281642648 { 0xff34ae98 -13324648 -1.41157817e127 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 4281642651 { 0xff34ae9b -13324645 -1.41157853e127 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 197), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2160335893
=counter_example_end
=global nodece 7 num_edges_traversed 2
=global nodece 7 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 8
=global nodece 8 nodece z3.ce111.num_edges_traversed2
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce111 4d32ec14aadda55a5df7f87ce6a9d0
=nextpc_const.1
1 : 1228191043 { 0x4934b543 +1.41178166e19 } : BV:32
=input.spec-%var-val-0
1 : 50529027 { 0x3030303 +1.2352941e135 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1672095203 { 0x63aa25e3 +1.32928121e72 } : BV:32
=input.dst.llvm-%val
1 : 50529027 { 0x3030303 +1.2352941e135 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1493442739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1493442740; 1493442743 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 1493442744; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 1493442740 { 0x590420b4 +1.3224802e51 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 148), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1228191043 , 1000 , 8 ) -> 1672095203, () -> 1808188935, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1681570802 { 0x643abbf2 +1.45886063e73 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 1493442740 { 0x590420b4 +1.3224802e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 1493442743 { 0x590420b7 +1.3224837e51 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 148), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3759895142
=counter_example_end
=global nodece 8 num_edges_traversed 2
=global nodece 8 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 9
=global nodece 9 nodece z3v487.ce106.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce106 e14d3cff844938b0c221c5d5f1247c
=nextpc_const.1
1 : 1890784547 { 0x70b31523 +1.39908254e98 } : BV:32
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 135), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 444987327 { 0x1a85f7bf +1.4662311e182 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 135), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 135), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1890784547 , 1000 , 8 ) -> 444987327, () -> 200386863, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 135), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4063420996
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 10
=global nodece 10 nodece z3.ce101.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce101 a3dcf3e1f99f6bb4fc01a5cce025be
=nextpc_const.1
1 : 1682401968 { 0x64476ab0 +1.55794334e73 } : BV:32
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1969793188 { 0x7568a8a4 +1.81764650e107 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3919076487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3919076488; 3919076491 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 3919076492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 3919076488 { 0xe9985c88 -375890808 -1.19032382e84 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 156), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1682401968 , 1000 , 8 ) -> 1969793188, () -> 1415643752, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 3919076488 { 0xe9985c88 -375890808 -1.19032382e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 3919076491 { 0xe9985c8b -375890805 -1.19032418e84 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1463405610
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 11
=global nodece 11 nodece z3.ce130.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce130 9f2286baece329dcf12d4c66a344dd30
=nextpc_const.1
1 : 938428173 { 0x37ef470d +1.86935579e240 } : BV:32
=input.spec-%var-val-0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform141 : BV:32
4 : Lambda444 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda445 : BV:32
7 : unit : UNIT
8 : 1351824782 { 0x5093358e +1.15007185e34 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lentry%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 127 , m_adder -> 77), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1401948451 { 0x53900923 +1.12527883e40 } : BV:32
=input.dst.llvm-%call.Lentry%2%d
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%val
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 127 , m_adder -> 77), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 145966463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 145966464; 145966467 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 145966468; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 145966464 { 0x8b34580 +1.40055847e146 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 127 , m_adder -> 77), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 938428173 , 1000 , 8 ) -> 1401948451, () -> 47307684, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 145966464 { 0x8b34580 +1.40055847e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 145966467 { 0x8b34583 +1.40055882e146 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 127 , m_adder -> 77), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2852403955
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 12
=global nodece 12 nodece z3.ce182.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce182 3931c679b1e4739720743390575566a
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform229 : BV:32
4 : Lambda692 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda693 : BV:32
7 : unit : UNIT
8 : 1644061228 { 0x61fe622c +1.98737096e68 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 66052098 { 0x3efe002 +1.87402367e136 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1171092523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1171092524; 1171092527 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 1171092528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 1171092524 { 0x45cd742c +1.60510778e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 1171092524 { 0x45cd742c +1.60510778e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 1171092527 { 0x45cd742f +1.60510814e12 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4231511837
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=global nodece 13
=global nodece 13 nodece z3v487.ce183.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce183 eaf9d7fbf5bc4de2ea344d2c2be52
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform231 : BV:32
4 : Lambda696 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda697 : BV:32
7 : unit : UNIT
8 : 1061623217 { 0x3f4715b1 +1.55534946e255 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1017 { 0x3f9 +1.12123e129 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_node__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-0.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
427416243
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L0%0%d_Lentry%1%fcallEnd
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-val-0 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%val : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lentry%2%d : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 5
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%val : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 7
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%val : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce7
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3v487.ce7 expr point z3v487.ce7 done
=inductive-invariants point_set point z3.ce8
=inductive-invariants point_set point z3.ce8 expr point z3.ce8
=inductive-invariants point_set point z3.ce8 expr point z3.ce8 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce8 expr point z3.ce8 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3.ce8 expr point z3.ce8 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3.ce8 expr point z3.ce8 done
=inductive-invariants point_set point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 2 for input.spec-%var-val-0
67372036
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 3 for input.dst.llvm-%val
67372036
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.spec-%var-val-0
134744072
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.dst.llvm-%val
134744072
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point z3v487.ce44
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 2 for input.spec-%var-val-0
50529027
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 val 3 for input.dst.llvm-%val
50529027
=inductive-invariants point_set point z3v487.ce44 expr point z3v487.ce44 done
=inductive-invariants point_set point z3.ce43
=inductive-invariants point_set point z3.ce43 expr point z3.ce43
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 2 for input.spec-%var-val-0
50529027
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 val 3 for input.dst.llvm-%val
50529027
=inductive-invariants point_set point z3.ce43 expr point z3.ce43 done
=inductive-invariants point_set point z3v487.ce78
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 done
=inductive-invariants point_set point z3.ce77
=inductive-invariants point_set point z3.ce77 expr point z3.ce77
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 done
=inductive-invariants point_set point z3.ce101
=inductive-invariants point_set point z3.ce101 expr point z3.ce101
=inductive-invariants point_set point z3.ce101 expr point z3.ce101 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce101 expr point z3.ce101 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3.ce101 expr point z3.ce101 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3.ce101 expr point z3.ce101 val 6 for input.dst.llvm-%call.Lentry%1%fcallEnd
1969793188
=inductive-invariants point_set point z3.ce101 expr point z3.ce101 done
=inductive-invariants point_set point z3v487.ce106
=inductive-invariants point_set point z3v487.ce106 expr point z3v487.ce106
=inductive-invariants point_set point z3v487.ce106 expr point z3v487.ce106 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce106 expr point z3v487.ce106 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3v487.ce106 expr point z3v487.ce106 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3v487.ce106 expr point z3v487.ce106 val 6 for input.dst.llvm-%call.Lentry%1%fcallEnd
444987327
=inductive-invariants point_set point z3v487.ce106 expr point z3v487.ce106 done
=inductive-invariants point_set point z3.ce130
=inductive-invariants point_set point z3.ce130 expr point z3.ce130
=inductive-invariants point_set point z3.ce130 expr point z3.ce130 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce130 expr point z3.ce130 val 2 for input.spec-%var-val-0
4294967295
=inductive-invariants point_set point z3.ce130 expr point z3.ce130 val 3 for input.dst.llvm-%val
4294967295
=inductive-invariants point_set point z3.ce130 expr point z3.ce130 val 6 for input.dst.llvm-%call.Lentry%1%fcallEnd
1401948451
=inductive-invariants point_set point z3.ce130 expr point z3.ce130 done
=inductive-invariants point_set point z3v487.ce131
=inductive-invariants point_set point z3v487.ce131 expr point z3v487.ce131
=inductive-invariants point_set point z3v487.ce131 expr point z3v487.ce131 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce131 expr point z3v487.ce131 val 2 for input.spec-%var-val-0
4294967295
=inductive-invariants point_set point z3v487.ce131 expr point z3v487.ce131 val 3 for input.dst.llvm-%val
4294967295
=inductive-invariants point_set point z3v487.ce131 expr point z3v487.ce131 val 6 for input.dst.llvm-%call.Lentry%1%fcallEnd
1292939918
=inductive-invariants point_set point z3v487.ce131 expr point z3v487.ce131 done
=inductive-invariants point_set point z3v487.ce165
=inductive-invariants point_set point z3v487.ce165 expr point z3v487.ce165
=inductive-invariants point_set point z3v487.ce165 expr point z3v487.ce165 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce165 expr point z3v487.ce165 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3v487.ce165 expr point z3v487.ce165 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3v487.ce165 expr point z3v487.ce165 val 6 for input.dst.llvm-%call.Lentry%1%fcallEnd
1675911355
=inductive-invariants point_set point z3v487.ce165 expr point z3v487.ce165 done
=inductive-invariants point_set point z3.ce164
=inductive-invariants point_set point z3.ce164 expr point z3.ce164
=inductive-invariants point_set point z3.ce164 expr point z3.ce164 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_node__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce164 expr point z3.ce164 val 2 for input.spec-%var-val-0
0
=inductive-invariants point_set point z3.ce164 expr point z3.ce164 val 3 for input.dst.llvm-%val
0
=inductive-invariants point_set point z3.ce164 expr point z3.ce164 val 6 for input.dst.llvm-%call.Lentry%1%fcallEnd
1506387082
=inductive-invariants point_set point z3.ce164 expr point z3.ce164 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L0%0%d_Lentry%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L0%0%d_Lentry%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L0%0%d_Lentry%1%fcallStart for reason inductive-invariants
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L0%0%d_Lentry%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants invariant_state failcond done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce7
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 2 exprs
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-val-0 : BV:32
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%val : BV:32
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.3
=LhsExpr
1 : input.spec-%var-val-0 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce7
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce25
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce43
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=2; number of visited CEs=3; number of preds=1
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->4294967295; 3->1; 
matrix done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 2 exprs
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 4
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lentry%2%d : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 5
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%val : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce7
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=2; number of visited CEs=1; number of preds=0
=pc L0%0%d_Lentry%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L0%0%d_Lentry%1%fcallEnd for reason inductive-invariants
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce106
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 3 exprs
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-val-0 : BV:32
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%val : BV:32
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-val-0 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce101
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce106
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce130
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=3; number of visited CEs=3; number of preds=1
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->1; 6->0; 
matrix done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 2 exprs
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 7
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%val : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce106
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=2; number of visited CEs=1; number of preds=0
=pc L0%0%d_Lentry%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lentry%2%d : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcL0%0%d_Lentry%1%fcallStart-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(4, 1) : BOOL
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
9 : region_agrees_with_memlabel(6, 1, 7, 8) : BOOL
10 : or(5, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : input.dst.llvm-%call.Lentry%2%d : BV:32
13 : isgepoffset(12, 4) : BOOL
14 : and(11, 13) : BOOL
15 : and(13, 14) : BOOL
16 : 4 { 0x4 +1.0e1025 } : INT
17 : islangaligned(12, 16) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvadd(18, 12) : BV:32
20 : isgepoffset(19, 18) : BOOL
21 : and(14, 15, 17, 20) : BOOL
22 : islangaligned(19, 16) : BOOL
23 : and(21, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
26 : heap_alloc_ptr(1, 25) : BV:32
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvadd(26, 27) : BV:32
29 : bvule(26, 28) : BOOL
30 : or(24, 29) : BOOL
31 : or(5, 30) : BOOL
32 : and(3, 10, 23, 31) : BOOL
33 : implies(32, 11) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_Lentry%1%fcallStart.to_pcL0%0%d_Lentry%1%fcallEnd-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(4, 1) : BOOL
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
9 : region_agrees_with_memlabel(6, 1, 7, 8) : BOOL
10 : or(5, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : input.dst.llvm-%call.Lentry%2%d : BV:32
13 : isgepoffset(12, 4) : BOOL
14 : and(11, 13) : BOOL
15 : and(13, 14) : BOOL
16 : 4 { 0x4 +1.0e1025 } : INT
17 : islangaligned(12, 16) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvadd(18, 12) : BV:32
20 : isgepoffset(19, 18) : BOOL
21 : and(14, 15, 17, 20) : BOOL
22 : islangaligned(19, 16) : BOOL
23 : and(21, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
26 : heap_alloc_ptr(1, 25) : BV:32
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvadd(26, 27) : BV:32
29 : bvule(26, 28) : BOOL
30 : or(24, 29) : BOOL
31 : or(5, 30) : BOOL
32 : and(3, 10, 23, 31) : BOOL
33 : implies(32, 11) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_Lentry%1%fcallEnd.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(5, 1) : BOOL
7 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
8 : heap_alloc_ptr(1, 7) : BV:32
9 : ite(6, 5, 8) : BV:32
10 : isgepoffset(9, 5) : BOOL
11 : and(4, 10) : BOOL
12 : and(10, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : islangaligned(9, 13) : BOOL
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvadd(15, 9) : BV:32
17 : isgepoffset(16, 15) : BOOL
18 : and(11, 12, 14, 17) : BOOL
19 : islangaligned(16, 13) : BOOL
20 : and(18, 19) : BOOL
21 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
24 : region_agrees_with_memlabel(21, 1, 22, 23) : BOOL
25 : or(6, 24) : BOOL
26 : 0 { 0x0 } : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvadd(8, 27) : BV:32
29 : bvule(8, 28) : BOOL
30 : or(26, 29) : BOOL
31 : or(6, 30) : BOOL
32 : and(25, 31) : BOOL
33 : and(3, 20, 32) : BOOL
34 : implies(33, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lentry%2%d : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lentry%2%d : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L0%0%d_Lentry%1%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-val-0 : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%val : BV:32
=bv_rank_exprs done
=Ranking exprs at node L0%0%d_Lentry%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%var-val-0 : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%val : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #0.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140283 : 1 { 0x1 +1.0e1025 } : INT
140533 : islangaligned(140374, 140283) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140415 : 8 { 0x8 +1.95e129 } : BV:32
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140818 : region_agrees_with_memlabel(140408, 140374, 140415, 140410) : BOOL
140827 : or(140622, 140818) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #2.pred
=Comment
undef-behavioursome
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140543 : input.dst.llvm-%call.Lentry%2%d : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140760 : isgepoffset(140543, 140287) : BOOL
140771 : and(140275, 140760) : BOOL
140774 : and(140760, 140771) : BOOL
140362 : 4 { 0x4 +1.0e1025 } : INT
140776 : islangaligned(140543, 140362) : BOOL
140389 : 4 { 0x4 +1.47e129 } : BV:32
140752 : bvadd(140389, 140543) : BV:32
140780 : isgepoffset(140752, 140389) : BOOL
140787 : and(140771, 140774, 140776, 140780) : BOOL
140789 : islangaligned(140752, 140362) : BOOL
140792 : and(140787, 140789) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart assume #3.pred
=Comment
undef-behavioursome
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140363 : 0 { 0x0 } : BOOL
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140380 : heap_alloc_ptr(140374, 140427) : BV:32
140537 : 7 { 0x7 +1.83e129 } : BV:32
140651 : bvadd(140380, 140537) : BV:32
140655 : bvule(140380, 140651) : BOOL
140659 : or(140363, 140655) : BOOL
140663 : or(140622, 140659) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L0%0%d_Lentry%1%fcallStart done
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #0
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #0.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140283 : 1 { 0x1 +1.0e1025 } : INT
140533 : islangaligned(140374, 140283) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #1
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #1.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140415 : 8 { 0x8 +1.95e129 } : BV:32
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140818 : region_agrees_with_memlabel(140408, 140374, 140415, 140410) : BOOL
140827 : or(140622, 140818) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #2
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #2.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #2.pred
=Comment
undef-behavioursome
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140543 : input.dst.llvm-%call.Lentry%2%d : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140760 : isgepoffset(140543, 140287) : BOOL
140771 : and(140275, 140760) : BOOL
140774 : and(140760, 140771) : BOOL
140362 : 4 { 0x4 +1.0e1025 } : INT
140776 : islangaligned(140543, 140362) : BOOL
140389 : 4 { 0x4 +1.47e129 } : BV:32
140752 : bvadd(140389, 140543) : BV:32
140780 : isgepoffset(140752, 140389) : BOOL
140787 : and(140771, 140774, 140776, 140780) : BOOL
140789 : islangaligned(140752, 140362) : BOOL
140792 : and(140787, 140789) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #3
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #3.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd assume #3.pred
=Comment
undef-behavioursome
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140363 : 0 { 0x0 } : BOOL
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140380 : heap_alloc_ptr(140374, 140427) : BV:32
140537 : 7 { 0x7 +1.83e129 } : BV:32
140651 : bvadd(140380, 140537) : BV:32
140655 : bvule(140380, 140651) : BOOL
140659 : or(140363, 140655) : BOOL
140663 : or(140622, 140659) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallStart=>L0%0%d_Lentry%1%fcallEnd done
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lentry%1%fcallEnd=>Lentry%1%intermediateVal1
=LhsExpr
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140283 : 1 { 0x1 +1.0e1025 } : INT
140533 : islangaligned(140374, 140283) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #1.pred
=Comment
undef-behavioursome.edge.Lentry%2%d=>E0%0%d
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140380 : heap_alloc_ptr(140374, 140427) : BV:32
140624 : ite(140622, 140287, 140380) : BV:32
145361 : isgepoffset(140624, 140287) : BOOL
145362 : and(140275, 145361) : BOOL
145369 : and(145361, 145362) : BOOL
140362 : 4 { 0x4 +1.0e1025 } : INT
145370 : islangaligned(140624, 140362) : BOOL
140389 : 4 { 0x4 +1.47e129 } : BV:32
144415 : bvadd(140389, 140624) : BV:32
145371 : isgepoffset(144415, 140389) : BOOL
145372 : and(145362, 145369, 145370, 145371) : BOOL
145373 : islangaligned(144415, 140362) : BOOL
145374 : and(145372, 145373) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d assume #2.pred
=Comment
merged-predicate
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140374 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
140622 : eq(140287, 140374) : BOOL
140408 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140415 : 8 { 0x8 +1.95e129 } : BV:32
140410 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140818 : region_agrees_with_memlabel(140408, 140374, 140415, 140410) : BOOL
140827 : or(140622, 140818) : BOOL
140363 : 0 { 0x0 } : BOOL
140427 : memlabel-mem--hpalloc.R1./*___y___make_node__x__=Lentry%1%intermediateVal0=/ : MEMLABEL
140380 : heap_alloc_ptr(140374, 140427) : BV:32
140537 : 7 { 0x7 +1.83e129 } : BV:32
140651 : bvadd(140380, 140537) : BV:32
140655 : bvule(140380, 140651) : BOOL
140659 : or(140363, 140655) : BOOL
140663 : or(140622, 140659) : BOOL
145375 : and(140827, 140663) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_Lentry%1%fcallEnd=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L0%0%d_Lentry%1%fcallStart
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 3
=bv_rank at L0%0%d_Lentry%1%fcallEnd
m_dst_rank: 1, m_src_rank: 0, m_spec_rank: 3
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
