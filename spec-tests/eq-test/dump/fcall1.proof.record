==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= true false)))
 (let (($x69 (= $x68 true)))
 (let (($x61 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let ((?x52 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x5 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x22 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x22 $x54)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x43)))))))
 (let (($x56 (and $x29 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x35 (concat ?x41 (concat ?x49 ?x19)))))
 (let (($x36 (= ?x7 input.dst.llvm-%x)))
 (let (($x9 (= $x36 true)))
 (let (($x38 (= $x9 true)))
 (let (($x60 (and $x38 $x59)))
 (let (($x65 (and $x60 $x64)))
 (let (($x20 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x20 $x65)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x23 $x66)))
 (let (($x70 (=> $x67 $x69)))
 (not $x70)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= true false)))
 (let (($x69 (= $x68 true)))
 (let (($x61 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let ((?x52 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x5 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x22 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x22 $x54)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x43)))))))
 (let (($x56 (and $x29 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x35 (concat ?x41 (concat ?x49 ?x19)))))
 (let (($x36 (= ?x7 input.dst.llvm-%x)))
 (let (($x9 (= $x36 true)))
 (let (($x38 (= $x9 true)))
 (let (($x60 (and $x38 $x59)))
 (let (($x65 (and $x60 $x64)))
 (let (($x20 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x20 $x65)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x23 $x66)))
 (let (($x70 (=> $x67 $x69)))
 (not $x70)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x71 (= $x70 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x59 (concat ?x55 ?x53)))))
 (let (($x64 (= ?x63 input.dst.llvm-%x)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x29 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x22 (= $x29 true)))
 (let (($x5 (= $x22 true)))
 (let (($x10 (= $x5 true)))
 (let ((?x33 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x33)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x38 $x37)))
 (let (($x40 (and $x30 $x32)))
 (let (($x35 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x35 $x40)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x19)))))))
 (let (($x43 (and $x9 $x14)))
 (let (($x16 (= $x43 true)))
 (let (($x27 (= $x16 true)))
 (let (($x42 (= $x27 true)))
 (let (($x50 (and $x42 $x10)))
 (let (($x67 (and $x50 $x66)))
 (let (($x8 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x68 (and $x8 $x67)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x69 (and $x21 $x68)))
 (let (($x28 (=> $x69 $x71)))
 (not $x28)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x71 (= $x70 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x59 (concat ?x55 ?x53)))))
 (let (($x64 (= ?x63 input.dst.llvm-%x)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x29 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x22 (= $x29 true)))
 (let (($x5 (= $x22 true)))
 (let (($x10 (= $x5 true)))
 (let ((?x33 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x33)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x38 $x37)))
 (let (($x40 (and $x30 $x32)))
 (let (($x35 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x35 $x40)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x19)))))))
 (let (($x43 (and $x9 $x14)))
 (let (($x16 (= $x43 true)))
 (let (($x27 (= $x16 true)))
 (let (($x42 (= $x27 true)))
 (let (($x50 (and $x42 $x10)))
 (let (($x67 (and $x50 $x66)))
 (let (($x8 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x68 (and $x8 $x67)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x69 (and $x21 $x68)))
 (let (($x28 (=> $x69 $x71)))
 (not $x28)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b10000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-1 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000003 #xff))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #xff000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xff000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #xff000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x20)))
 (let (($x52 (= ?x13 input.dst.llvm-%x)))
 (let (($x72 (= $x52 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x65 (concat ?x60 (concat ?x54 ?x58)))))
 (let (($x67 (= ?x66 input.dst.llvm-%x)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x5 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x10 (= $x5 true)))
 (let (($x50 (= $x10 true)))
 (let (($x51 (= $x50 true)))
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x40)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x11 $x33)))
 (let (($x43 (and $x32 $x14)))
 (let (($x41 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x41 $x43)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x7)))))))
 (let (($x27 (and $x17 $x16)))
 (let (($x42 (= $x27 true)))
 (let (($x12 (= $x42 true)))
 (let (($x29 (= $x12 true)))
 (let (($x61 (and $x29 $x51)))
 (let (($x70 (and $x61 $x69)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x71 (and $x21 $x70)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x28 (and $x24 $x71)))
 (let (($x73 (=> $x28 $x72)))
 (not $x73)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x20)))
 (let (($x52 (= ?x13 input.dst.llvm-%x)))
 (let (($x72 (= $x52 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x65 (concat ?x60 (concat ?x54 ?x58)))))
 (let (($x67 (= ?x66 input.dst.llvm-%x)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x5 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x10 (= $x5 true)))
 (let (($x50 (= $x10 true)))
 (let (($x51 (= $x50 true)))
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x40)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x11 $x33)))
 (let (($x43 (and $x32 $x14)))
 (let (($x41 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x41 $x43)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x7)))))))
 (let (($x27 (and $x17 $x16)))
 (let (($x42 (= $x27 true)))
 (let (($x12 (= $x42 true)))
 (let (($x29 (= $x12 true)))
 (let (($x61 (and $x29 $x51)))
 (let (($x70 (and $x61 $x69)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x71 (and $x21 $x70)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x28 (and $x24 $x71)))
 (let (($x73 (=> $x28 $x72)))
 (not $x73)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x59 (= true false)))
 (let (($x54 (= $x59 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x5)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x16 $x12)))
 (let (($x50 (and $x29 $x10)))
 (let (($x9 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x9 $x50)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x37)))))))
 (let (($x61 (and $x43 $x51)))
 (let (($x62 (= $x61 true)))
 (let (($x64 (= $x62 true)))
 (let (($x65 (= $x64 true)))
 (let ((?x34 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x34)))
 (let (($x49 (= ?x21 input.dst.llvm-%x)))
 (let (($x38 (= $x49 true)))
 (let (($x45 (= $x38 true)))
 (let (($x53 (and $x45 $x65)))
 (let (($x24 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x56 (and $x24 $x53)))
 (let (($x18 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x60 (and $x18 $x56)))
 (let (($x58 (=> $x60 $x54)))
 (not $x58)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x59 (= true false)))
 (let (($x54 (= $x59 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x5)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x16 $x12)))
 (let (($x50 (and $x29 $x10)))
 (let (($x9 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x9 $x50)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x37)))))))
 (let (($x61 (and $x43 $x51)))
 (let (($x62 (= $x61 true)))
 (let (($x64 (= $x62 true)))
 (let (($x65 (= $x64 true)))
 (let ((?x34 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x34)))
 (let (($x49 (= ?x21 input.dst.llvm-%x)))
 (let (($x38 (= $x49 true)))
 (let (($x45 (= $x38 true)))
 (let (($x53 (and $x45 $x65)))
 (let (($x24 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x56 (and $x24 $x53)))
 (let (($x18 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x60 (and $x18 $x56)))
 (let (($x58 (=> $x60 $x54)))
 (not $x58)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x58 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x55 (= $x58 true)))
 (let (($x26 (= $x55 true)))
 (let ((?x61 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x61)))
 (let (($x65 (= ?x62 input.dst.llvm-%x)))
 (let (($x53 (= $x65 true)))
 (let (($x56 (= $x53 true)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x16)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x32 $x15)))
 (let (($x42 (and $x9 $x27)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x21 $x42)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x19)))))))
 (let (($x29 (and $x33 $x12)))
 (let (($x5 (= $x29 true)))
 (let (($x10 (= $x5 true)))
 (let (($x50 (= $x10 true)))
 (let (($x60 (and $x50 $x56)))
 (let (($x17 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x59 (and $x17 $x60)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x54 (and $x24 $x59)))
 (let (($x7 (=> $x54 $x26)))
 (not $x7))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x58 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x55 (= $x58 true)))
 (let (($x26 (= $x55 true)))
 (let ((?x61 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x61)))
 (let (($x65 (= ?x62 input.dst.llvm-%x)))
 (let (($x53 (= $x65 true)))
 (let (($x56 (= $x53 true)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x16)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x32 $x15)))
 (let (($x42 (and $x9 $x27)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x21 $x42)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x19)))))))
 (let (($x29 (and $x33 $x12)))
 (let (($x5 (= $x29 true)))
 (let (($x10 (= $x5 true)))
 (let (($x50 (= $x10 true)))
 (let (($x60 (and $x50 $x56)))
 (let (($x17 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x59 (and $x17 $x60)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x54 (and $x24 $x59)))
 (let (($x7 (=> $x54 $x26)))
 (not $x7))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x64 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x64)))
 (let (($x26 (= ?x65 input.spec-%var-x-1)))
 (let (($x7 (= $x26 true)))
 (let (($x56 (= ?x65 input.dst.llvm-%x)))
 (let (($x60 (= $x56 true)))
 (let (($x59 (= $x60 true)))
 (let ((?x42 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x42)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x43 $x16)))
 (let (($x29 (and $x27 $x12)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x8 $x29)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x36)))))))
 (let (($x10 (and $x40 $x5)))
 (let (($x50 (= $x10 true)))
 (let (($x51 (= $x50 true)))
 (let (($x61 (= $x51 true)))
 (let (($x54 (and $x61 $x59)))
 (let (($x17 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x58 (and $x17 $x54)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x55 (and $x24 $x58)))
 (let (($x63 (=> $x55 $x7)))
 (not $x63)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x64 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x64)))
 (let (($x26 (= ?x65 input.spec-%var-x-1)))
 (let (($x7 (= $x26 true)))
 (let (($x56 (= ?x65 input.dst.llvm-%x)))
 (let (($x60 (= $x56 true)))
 (let (($x59 (= $x60 true)))
 (let ((?x42 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x42)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x43 $x16)))
 (let (($x29 (and $x27 $x12)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x8 $x29)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x36)))))))
 (let (($x10 (and $x40 $x5)))
 (let (($x50 (= $x10 true)))
 (let (($x51 (= $x50 true)))
 (let (($x61 (= $x51 true)))
 (let (($x54 (and $x61 $x59)))
 (let (($x17 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x58 (and $x17 $x54)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x55 (and $x24 $x58)))
 (let (($x63 (=> $x55 $x7)))
 (not $x63)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x7 (= true false)))
 (let (($x63 (= $x7 true)))
 (let ((?x62 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x62)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x5 $x51)))
 (let (($x65 (and $x61 $x64)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x33 $x65)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x15)))))))
 (let (($x56 (and $x29 $x53)))
 (let (($x60 (= $x56 true)))
 (let (($x59 (= $x60 true)))
 (let (($x54 (= $x59 true)))
 (let ((?x17 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x17)))
 (let (($x22 (= ?x11 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x32 (= $x22 true)))
 (let (($x45 (= $x32 true)))
 (let (($x58 (and $x45 $x54)))
 (let (($x24 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x55 (and $x24 $x58)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x26 (and $x23 $x55)))
 (let (($x38 (=> $x26 $x63)))
 (not $x38)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x7 (= true false)))
 (let (($x63 (= $x7 true)))
 (let ((?x62 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x62)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x5 $x51)))
 (let (($x65 (and $x61 $x64)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x33 $x65)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x15)))))))
 (let (($x56 (and $x29 $x53)))
 (let (($x60 (= $x56 true)))
 (let (($x59 (= $x60 true)))
 (let (($x54 (= $x59 true)))
 (let ((?x17 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x17)))
 (let (($x22 (= ?x11 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x32 (= $x22 true)))
 (let (($x45 (= $x32 true)))
 (let (($x58 (and $x45 $x54)))
 (let (($x24 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x55 (and $x24 $x58)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x26 (and $x23 $x55)))
 (let (($x38 (=> $x26 $x63)))
 (not $x38)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x63 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x68 (=> $x63 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x38 (= $x63 true)))
 (let (($x41 (= $x38 true)))
 (let (($x36 (= $x41 true)))
 (let ((?x64 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x10 $x61)))
 (let (($x53 (and $x62 $x65)))
 (let (($x12 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x12 $x53)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x16)))))))
 (let (($x60 (and $x5 $x56)))
 (let (($x59 (= $x60 true)))
 (let (($x54 (= $x59 true)))
 (let (($x58 (= $x54 true)))
 (let ((?x47 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x47)))
 (let (($x11 (= ?x17 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x22 (= $x11 true)))
 (let (($x32 (= $x22 true)))
 (let (($x55 (and $x32 $x58)))
 (let (($x31 (and $x55 $x36)))
 (let (($x34 (and $x31 $x36)))
 (let (($x49 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x49 $x34)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x23 $x66)))
 (let (($x71 (=> $x67 $x70)))
 (not $x71))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x63 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x68 (=> $x63 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x38 (= $x63 true)))
 (let (($x41 (= $x38 true)))
 (let (($x36 (= $x41 true)))
 (let ((?x64 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x10 $x61)))
 (let (($x53 (and $x62 $x65)))
 (let (($x12 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x12 $x53)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x16)))))))
 (let (($x60 (and $x5 $x56)))
 (let (($x59 (= $x60 true)))
 (let (($x54 (= $x59 true)))
 (let (($x58 (= $x54 true)))
 (let ((?x47 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x47)))
 (let (($x11 (= ?x17 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x22 (= $x11 true)))
 (let (($x32 (= $x22 true)))
 (let (($x55 (and $x32 $x58)))
 (let (($x31 (and $x55 $x36)))
 (let (($x34 (and $x31 $x36)))
 (let (($x49 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x49 $x34)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x23 $x66)))
 (let (($x71 (=> $x67 $x70)))
 (not $x71))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x71 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x70 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L3%1%fcallEnd)))
 (let (($x28 (= ?x70 ?x71)))
 (let (($x45 (= $x28 true)))
 (let (($x18 (= $x45 true)))
 (let (($x41 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x36 (= $x41 true)))
 (let (($x31 (= $x36 true)))
 (let (($x34 (= $x31 true)))
 (let ((?x53 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x53)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x51 $x64)))
 (let (($x60 (and $x65 $x56)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x43 $x60)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x29)))))))
 (let (($x54 (and $x50 $x59)))
 (let (($x58 (= $x54 true)))
 (let (($x55 (= $x58 true)))
 (let (($x26 (= $x55 true)))
 (let ((?x47 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x47)))
 (let (($x11 (= ?x17 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x22 (= $x11 true)))
 (let (($x32 (= $x22 true)))
 (let (($x7 (and $x32 $x26)))
 (let (($x66 (and $x7 $x34)))
 (let (($x67 (and $x66 $x34)))
 (let (($x48 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x68 (and $x48 $x67)))
 (let (($x35 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x69 (and $x35 $x68)))
 (let (($x46 (=> $x69 $x18)))
 (not $x46))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x71 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x70 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L3%1%fcallEnd)))
 (let (($x28 (= ?x70 ?x71)))
 (let (($x45 (= $x28 true)))
 (let (($x18 (= $x45 true)))
 (let (($x41 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x36 (= $x41 true)))
 (let (($x31 (= $x36 true)))
 (let (($x34 (= $x31 true)))
 (let ((?x53 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x53)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x51 $x64)))
 (let (($x60 (and $x65 $x56)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x43 $x60)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x29)))))))
 (let (($x54 (and $x50 $x59)))
 (let (($x58 (= $x54 true)))
 (let (($x55 (= $x58 true)))
 (let (($x26 (= $x55 true)))
 (let ((?x47 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x47)))
 (let (($x11 (= ?x17 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x22 (= $x11 true)))
 (let (($x32 (= $x22 true)))
 (let (($x7 (and $x32 $x26)))
 (let (($x66 (and $x7 $x34)))
 (let (($x67 (and $x66 $x34)))
 (let (($x48 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x68 (and $x48 $x67)))
 (let (($x35 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x69 (and $x35 $x68)))
 (let (($x46 (=> $x69 $x18)))
 (not $x46))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x65 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x43 (or (bvugt input.memlabel-mem--arg.0_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x64 $x65)))))))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= ?x22 (_ bv0 32))))
 (let ((?x44 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x17 $x49)))
 (let (($x40 (and $x23 $x19)))
 (let (($x9 (and $x40 $x15)))
 (and $x9 $x58)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x65 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x43 (or (bvugt input.memlabel-mem--arg.0_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x64 $x65)))))))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= ?x22 (_ bv0 32))))
 (let ((?x44 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x17 $x49)))
 (let (($x40 (and $x23 $x19)))
 (let (($x9 (and $x40 $x15)))
 (and $x9 $x58)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x39 (= true false)))
 (let (($x57 (= $x39 true)))
 (let (($x20 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (= $x20 true)))
 (let (($x13 (= $x8 true)))
 (let (($x52 (= $x13 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x48 $x34)))
 (let (($x69 (and $x66 $x68)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x33 $x69)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x49)))))))
 (let (($x71 (and $x36 $x70)))
 (let (($x28 (= $x71 true)))
 (let (($x45 (= $x28 true)))
 (let (($x18 (= $x45 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x25 (concat ?x51 (concat ?x56 ?x16)))))
 (let (($x37 (= ?x64 input.dst.llvm-%x)))
 (let (($x10 (= $x37 true)))
 (let (($x24 (= $x10 true)))
 (let (($x46 (and $x24 $x18)))
 (let (($x72 (and $x46 $x52)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x73 (and $x26 $x72)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= ?x19 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x74 (and $x43 $x73)))
 (let (($x9 (= ?x19 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x6 (and $x9 $x74)))
 (let (($x75 (=> $x6 $x57)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x39 (= true false)))
 (let (($x57 (= $x39 true)))
 (let (($x20 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (= $x20 true)))
 (let (($x13 (= $x8 true)))
 (let (($x52 (= $x13 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x48 $x34)))
 (let (($x69 (and $x66 $x68)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x33 $x69)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x49)))))))
 (let (($x71 (and $x36 $x70)))
 (let (($x28 (= $x71 true)))
 (let (($x45 (= $x28 true)))
 (let (($x18 (= $x45 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x25 (concat ?x51 (concat ?x56 ?x16)))))
 (let (($x37 (= ?x64 input.dst.llvm-%x)))
 (let (($x10 (= $x37 true)))
 (let (($x24 (= $x10 true)))
 (let (($x46 (and $x24 $x18)))
 (let (($x72 (and $x46 $x52)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x73 (and $x26 $x72)))
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x43 (= ?x19 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x74 (and $x43 $x73)))
 (let (($x9 (= ?x19 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x6 (and $x9 $x74)))
 (let (($x75 (=> $x6 $x57)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000000101)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111111011)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111111011)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x76 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x58 (= ?x35 ?x76)))
 (let (($x62 (= $x58 true)))
 (let (($x12 (= $x62 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x13 (concat ?x46 (concat ?x71 ?x69)))))
 (let (($x72 (= ?x52 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x33 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x48 (= $x33 true)))
 (let (($x31 (= $x48 true)))
 (let (($x34 (= $x31 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x29)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x23 $x41)))
 (let (($x22 (and $x59 $x60)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x42 $x22)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x7)))))))
 (let (($x21 (and $x24 $x49)))
 (let (($x5 (= $x21 true)))
 (let (($x17 (= $x5 true)))
 (let (($x38 (= $x17 true)))
 (let (($x66 (and $x38 $x34)))
 (let (($x6 (and $x66 $x74)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x39 (and $x26 $x6)))
 (let (($x15 (= ?x35 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x57 (and $x15 $x39)))
 (let (($x27 (= ?x35 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x75 (and $x27 $x57)))
 (let (($x77 (=> $x75 $x12)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x76 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x35 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x58 (= ?x35 ?x76)))
 (let (($x62 (= $x58 true)))
 (let (($x12 (= $x62 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x13 (concat ?x46 (concat ?x71 ?x69)))))
 (let (($x72 (= ?x52 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x33 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x48 (= $x33 true)))
 (let (($x31 (= $x48 true)))
 (let (($x34 (= $x31 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x29)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x23 $x41)))
 (let (($x22 (and $x59 $x60)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x42 $x22)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x7)))))))
 (let (($x21 (and $x24 $x49)))
 (let (($x5 (= $x21 true)))
 (let (($x17 (= $x5 true)))
 (let (($x38 (= $x17 true)))
 (let (($x66 (and $x38 $x34)))
 (let (($x6 (and $x66 $x74)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x39 (and $x26 $x6)))
 (let (($x15 (= ?x35 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x57 (and $x15 $x39)))
 (let (($x27 (= ?x35 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x75 (and $x27 $x57)))
 (let (($x77 (=> $x75 $x12)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510054/query
