==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= true false)))
 (let (($x125 (= $x124 true)))
 (let (($x107 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x93 false)))
 ))
 (let (($x108 (and $x97 $x107)))
 (let (($x109 (= $x108 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x83 (concat ?x80 (concat ?x76 ?x74)))))
 (let (($x85 (= ?x84 input.dst.llvm-%n)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x67 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x58)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x53 $x56)))
 (let (($x60 (and $x57 $x59)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x7 $x60)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x12)))))))
 (let (($x62 (and $x52 $x61)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x71 (and $x65 $x70)))
 (let (($x88 (and $x71 $x87)))
 (let (($x110 (and $x88 $x109)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x10 $x110)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x112 (and $x17 $x111)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x14 $x112)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x114 (and $x5 $x113)))
 (let (($x25 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x115 (and $x25 $x114)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x117 (and $x44 $x116)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x118 (and $x31 $x117)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x119 (and $x19 $x118)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x120 (and $x46 $x119)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x121 (and $x34 $x120)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x21 $x121)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x123 (and $x23 $x122)))
 (let (($x126 (=> $x123 $x125)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= true false)))
 (let (($x125 (= $x124 true)))
 (let (($x107 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x93 false)))
 ))
 (let (($x108 (and $x97 $x107)))
 (let (($x109 (= $x108 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x83 (concat ?x80 (concat ?x76 ?x74)))))
 (let (($x85 (= ?x84 input.dst.llvm-%n)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x67 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x58)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x53 $x56)))
 (let (($x60 (and $x57 $x59)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x7 $x60)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x12)))))))
 (let (($x62 (and $x52 $x61)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x71 (and $x65 $x70)))
 (let (($x88 (and $x71 $x87)))
 (let (($x110 (and $x88 $x109)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x10 $x110)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x112 (and $x17 $x111)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x14 $x112)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x114 (and $x5 $x113)))
 (let (($x25 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x115 (and $x25 $x114)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x117 (and $x44 $x116)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x118 (and $x31 $x117)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x119 (and $x19 $x118)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x120 (and $x46 $x119)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x121 (and $x34 $x120)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x21 $x121)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x123 (and $x23 $x122)))
 (let (($x126 (=> $x123 $x125)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00028010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00028013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00028010)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x39 $x59)))
 (let (($x63 (and $x60 $x62)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x44 $x63)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x10)))))))
 (let (($x102 (and $x42 $x64)))
 (let (($x100 (= $x102 true)))
 (let (($x89 (= $x100 true)))
 (let (($x114 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x92 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x92 false)))
 ))
 (let (($x115 (and $x101 $x114)))
 (let (($x116 (= $x115 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x79 (concat ?x82 (concat ?x69 ?x67)))))
 (let (($x75 (= input.dst.llvm-%n ?x80)))
 (let (($x77 (and (and (and $x42 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x64) $x75)))
 (let (($x81 (= $x77 true)))
 (let (($x84 (= $x81 true)))
 (let (($x85 (= $x84 true)))
 (let (($x117 (and $x85 $x116)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x34 $x117)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x119 (and $x16 $x118)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x53 $x119)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x121 (and $x25 $x120)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x122 (and $x48 $x121)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x123 (and $x57 $x122)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x124 (and $x22 $x123)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x17 $x124)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x126 (and $x28 $x125)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x127 (and $x5 $x126)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x37 (and $x8 $x127)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x73 (and $x24 $x37)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x94 (and $x20 $x73)))
 (let (($x91 (=> $x94 $x89)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x39 $x59)))
 (let (($x63 (and $x60 $x62)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x44 $x63)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x10)))))))
 (let (($x102 (and $x42 $x64)))
 (let (($x100 (= $x102 true)))
 (let (($x89 (= $x100 true)))
 (let (($x114 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x92 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x92 false)))
 ))
 (let (($x115 (and $x101 $x114)))
 (let (($x116 (= $x115 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x79 (concat ?x82 (concat ?x69 ?x67)))))
 (let (($x75 (= input.dst.llvm-%n ?x80)))
 (let (($x77 (and (and (and $x42 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x64) $x75)))
 (let (($x81 (= $x77 true)))
 (let (($x84 (= $x81 true)))
 (let (($x85 (= $x84 true)))
 (let (($x117 (and $x85 $x116)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x34 $x117)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x119 (and $x16 $x118)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x53 $x119)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x121 (and $x25 $x120)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x122 (and $x48 $x121)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x123 (and $x57 $x122)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x124 (and $x22 $x123)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x17 $x124)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x126 (and $x28 $x125)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x127 (and $x5 $x126)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x37 (and $x8 $x127)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x73 (and $x24 $x37)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x94 (and $x20 $x73)))
 (let (($x91 (=> $x94 $x89)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x110 (= $x96 true)))
 (let (($x126 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x112 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x37 (= $x127 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x83 (concat ?x69 (concat ?x71 ?x78)))))
 (let (($x75 (= input.dst.llvm-%n ?x80)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x39 $x59)))
 (let (($x63 (and $x60 $x62)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x44 $x63)))
 (let (($x26 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x40)))))))
 (let (($x84 (and (and (and $x76 $x26) $x64) $x75)))
 (let (($x85 (= $x84 true)))
 (let (($x88 (= $x85 true)))
 (let (($x92 (= $x88 true)))
 (let (($x73 (and $x92 $x37)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x38 $x73)))
 (let (($x56 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x102 (and $x56 $x94)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x100 (and $x46 $x102)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x89 (and $x52 $x100)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x91 (and $x41 $x89)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x95 (and $x45 $x91)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x49 (and $x19 $x95)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x66 (and $x18 $x49)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x93 (and $x15 $x66)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x109 (and $x21 $x93)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x107 (and $x9 $x109)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x86 (and $x31 $x107)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x87 (and $x23 $x86)))
 (let (($x106 (=> $x87 $x110)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x110 (= $x96 true)))
 (let (($x126 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x112 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x37 (= $x127 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x83 (concat ?x69 (concat ?x71 ?x78)))))
 (let (($x75 (= input.dst.llvm-%n ?x80)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x39 $x59)))
 (let (($x63 (and $x60 $x62)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x44 $x63)))
 (let (($x26 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x40)))))))
 (let (($x84 (and (and (and $x76 $x26) $x64) $x75)))
 (let (($x85 (= $x84 true)))
 (let (($x88 (= $x85 true)))
 (let (($x92 (= $x88 true)))
 (let (($x73 (and $x92 $x37)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x38 $x73)))
 (let (($x56 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x102 (and $x56 $x94)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x100 (and $x46 $x102)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x89 (and $x52 $x100)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x91 (and $x41 $x89)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x95 (and $x45 $x91)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x49 (and $x19 $x95)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x66 (and $x18 $x49)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x93 (and $x15 $x66)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x109 (and $x21 $x93)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x107 (and $x9 $x109)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x86 (and $x31 $x107)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x87 (and $x23 $x86)))
 (let (($x106 (=> $x87 $x110)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x118)))
 (let (($x105 (= ?x123 input.dst.llvm-%n)))
 (let (($x98 (= $x105 true)))
 (let (($x109 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x73 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x125 false)))
 ))
 (let (($x107 (and $x73 $x109)))
 (let (($x86 (= $x107 true)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x80 (concat ?x78 (concat ?x68 ?x83)))))
 (let (($x84 (= input.dst.llvm-%n ?x75)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x39 $x64)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x42)))))))
 (let (($x92 (and (and (and $x29 $x30) $x81) $x84)))
 (let (($x108 (= $x92 true)))
 (let (($x112 (= $x108 true)))
 (let (($x115 (= $x112 true)))
 (let (($x87 (and $x115 $x86)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x38 $x87)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x110 (and $x53 $x96)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x106 (and $x35 $x110)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x111 (and $x48 $x106)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x34 (and $x57 $x111)))
 (let (($x54 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x50 (and $x54 $x34)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x65 (and $x51 $x50)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x113 (and $x28 $x65)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x121 (and $x5 $x113)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x119 (and $x8 $x121)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x97 (and $x24 $x119)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x101 (and $x23 $x97)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x114 (and $x6 $x101)))
 (let (($x103 (=> $x114 $x98)))
 (not $x103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x118)))
 (let (($x105 (= ?x123 input.dst.llvm-%n)))
 (let (($x98 (= $x105 true)))
 (let (($x109 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x73 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x125 false)))
 ))
 (let (($x107 (and $x73 $x109)))
 (let (($x86 (= $x107 true)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x80 (concat ?x78 (concat ?x68 ?x83)))))
 (let (($x84 (= input.dst.llvm-%n ?x75)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x39 $x64)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x42)))))))
 (let (($x92 (and (and (and $x29 $x30) $x81) $x84)))
 (let (($x108 (= $x92 true)))
 (let (($x112 (= $x108 true)))
 (let (($x115 (= $x112 true)))
 (let (($x87 (and $x115 $x86)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x38 $x87)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x110 (and $x53 $x96)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x106 (and $x35 $x110)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x111 (and $x48 $x106)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x34 (and $x57 $x111)))
 (let (($x54 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x50 (and $x54 $x34)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x65 (and $x51 $x50)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x113 (and $x28 $x65)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x121 (and $x5 $x113)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x119 (and $x8 $x121)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x97 (and $x24 $x119)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x101 (and $x23 $x97)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x114 (and $x6 $x101)))
 (let (($x103 (=> $x114 $x98)))
 (not $x103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x120)))
 (let (($x95 (= ?x127 input.spec-%var-n-1)))
 (let (($x102 (= $x95 true)))
 (let (($x121 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x66 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x66 false)))
 ))
 (let (($x119 (and $x86 $x121)))
 (let (($x97 (= $x119 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x72 (concat ?x68 (concat ?x79 ?x67)))))
 (let (($x84 (= input.dst.llvm-%n ?x75)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x39 $x64)))
 (let (($x77 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x76)))))))
 (let (($x112 (and (and (and $x85 $x77) $x81) $x84)))
 (let (($x115 (= $x112 true)))
 (let (($x124 (= $x115 true)))
 (let (($x125 (= $x124 true)))
 (let (($x101 (and $x125 $x97)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x14 $x101)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x122 (and $x46 $x114)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x118 (and $x25 $x122)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x123 (and $x41 $x118)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x105 (and $x45 $x123)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x98 (and $x22 $x105)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x103 (and $x17 $x98)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x99 (and $x15 $x103)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x43 (and $x21 $x99)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x70 (and $x9 $x43)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x126 (and $x12 $x70)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x91 (and $x31 $x126)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x100 (and $x20 $x91)))
 (let (($x49 (=> $x100 $x102)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x120)))
 (let (($x95 (= ?x127 input.spec-%var-n-1)))
 (let (($x102 (= $x95 true)))
 (let (($x121 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x66 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x66 false)))
 ))
 (let (($x119 (and $x86 $x121)))
 (let (($x97 (= $x119 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x72 (concat ?x68 (concat ?x79 ?x67)))))
 (let (($x84 (= input.dst.llvm-%n ?x75)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x39 $x64)))
 (let (($x77 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x76)))))))
 (let (($x112 (and (and (and $x85 $x77) $x81) $x84)))
 (let (($x115 (= $x112 true)))
 (let (($x124 (= $x115 true)))
 (let (($x125 (= $x124 true)))
 (let (($x101 (and $x125 $x97)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x14 $x101)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x122 (and $x46 $x114)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x118 (and $x25 $x122)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x123 (and $x41 $x118)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x105 (and $x45 $x123)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x98 (and $x22 $x105)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x103 (and $x17 $x98)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x99 (and $x15 $x103)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x43 (and $x21 $x99)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x70 (and $x9 $x43)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x126 (and $x12 $x70)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x91 (and $x31 $x126)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x100 (and $x20 $x91)))
 (let (($x49 (=> $x100 $x102)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x73 (= $x37 true)))
 (let (($x109 (= $x73 true)))
 (let (($x43 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var219X)))
 (=> $x65 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var218X)))
 (= $x65 false)))
 ))
 (let (($x70 (and $x97 $x43)))
 (let (($x126 (= $x70 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x83 (concat ?x79 (concat ?x78 ?x69)))))
 (let (($x84 (= input.dst.llvm-%n ?x75)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x39 $x64)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x26)))))))
 (let (($x124 (and (and (and $x92 $x30) $x81) $x84)))
 (let (($x125 (= $x124 true)))
 (let (($x89 (= $x125 true)))
 (let (($x66 (= $x89 true)))
 (let (($x91 (and $x66 $x126)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (and $x56 $x91)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x116 (and $x35 $x100)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x52 $x116)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x127 (and $x57 $x120)))
 (let (($x54 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x95 (and $x54 $x127)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x19 $x95)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x49 (and $x18 $x102)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x117 (and $x5 $x49)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x10 (and $x8 $x117)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x74 (and $x24 $x10)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x93 (and $x23 $x74)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x111 (and $x27 $x93)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x110 (and $x38 $x111)))
 (let (($x34 (=> $x110 $x109)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x73 (= $x37 true)))
 (let (($x109 (= $x73 true)))
 (let (($x43 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var219X)))
 (=> $x65 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var218X)))
 (= $x65 false)))
 ))
 (let (($x70 (and $x97 $x43)))
 (let (($x126 (= $x70 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x83 (concat ?x79 (concat ?x78 ?x69)))))
 (let (($x84 (= input.dst.llvm-%n ?x75)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x62)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x60)))
 (let (($x64 (and $x61 $x63)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x39 $x64)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x26)))))))
 (let (($x124 (and (and (and $x92 $x30) $x81) $x84)))
 (let (($x125 (= $x124 true)))
 (let (($x89 (= $x125 true)))
 (let (($x66 (= $x89 true)))
 (let (($x91 (and $x66 $x126)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (and $x56 $x91)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x116 (and $x35 $x100)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x52 $x116)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x127 (and $x57 $x120)))
 (let (($x54 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x95 (and $x54 $x127)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x19 $x95)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x49 (and $x18 $x102)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x117 (and $x5 $x49)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x10 (and $x8 $x117)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x74 (and $x24 $x10)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x93 (and $x23 $x74)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x111 (and $x27 $x93)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x110 (and $x38 $x111)))
 (let (($x34 (=> $x110 $x109)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x189 (= $x188 false)))
 (let (($x190 (= $x189 true)))
 (let (($x171 (forall ((input.ind-%var233X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var233X)))
 (=> $x157 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var233X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var232X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var232X)))
 (= $x157 false)))
 ))
 (let (($x172 (and $x161 $x171)))
 (let (($x173 (= $x172 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x150 (= ?x42 input.dst.llvm-%n)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x145 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x123)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x34 $x88)))
 (let (($x107 (and $x113 $x122)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x120 $x107)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x74)))))))
 (let (($x121 (and $x109 $x86)))
 (let (($x105 (= $x121 true)))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x99 true)))
 (let (($x70 (= $x43 true)))
 (let (($x65 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x119 (= $x65 true)))
 (let (($x97 (= $x119 true)))
 (let (($x125 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x89 (= $x125 true)))
 (let (($x66 (= $x89 true)))
 (let (($x82 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x82 true)))
 (let (($x75 (= $x67 true)))
 (let (($x84 (= $x75 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x79 (= $x80 true)))
 (let (($x72 (= $x79 true)))
 (let (($x78 (= $x72 true)))
 (let (($x115 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x108 (= $x115 true)))
 (let (($x71 (= $x108 true)))
 (let (($x83 (= $x71 true)))
 (let (($x61 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x44 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x44 true)))
 (let (($x36 (= $x39 true)))
 (let (($x58 (= $x36 true)))
 (let (($x55 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x92 (= $x55 true)))
 (let (($x47 (= $x92 true)))
 (let (($x30 (= $x47 true)))
 (let (($x40 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x40 true)))
 (let (($x29 (= $x26 true)))
 (let (($x32 (= $x29 true)))
 (let (($x77 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (= $x77 true)))
 (let (($x76 (= $x33 true)))
 (let (($x85 (and $x76 $x32)))
 (let (($x112 (and $x85 $x30)))
 (let (($x59 (and $x112 $x58)))
 (let (($x81 (and $x59 $x64)))
 (let (($x68 (and $x81 $x83)))
 (let (($x69 (and $x68 $x78)))
 (let (($x124 (and $x69 $x84)))
 (let (($x106 (and $x124 $x66)))
 (let (($x118 (and $x106 $x97)))
 (let (($x126 (and $x118 $x70)))
 (let (($x87 (and $x126 $x98)))
 (let (($x129 (and $x87 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x153 (and $x148 $x152)))
 (let (($x174 (and $x153 $x173)))
 (let (($x53 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x53 $x174)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x25 $x175)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x177 (and $x48 $x176)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x178 (and $x45 $x177)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x179 (and $x22 $x178)))
 (let (($x51 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x180 (and $x51 $x179)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x181 (and $x28 $x180)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x182 (and $x21 $x181)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x183 (and $x9 $x182)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x184 (and $x6 $x183)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x185 (and $x24 $x184)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x186 (and $x16 $x185)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x12 $x186)))
 (let (($x191 (=> $x187 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x189 (= $x188 false)))
 (let (($x190 (= $x189 true)))
 (let (($x171 (forall ((input.ind-%var233X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var233X)))
 (=> $x157 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var233X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var232X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var232X)))
 (= $x157 false)))
 ))
 (let (($x172 (and $x161 $x171)))
 (let (($x173 (= $x172 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x150 (= ?x42 input.dst.llvm-%n)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x145 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x123)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x34 $x88)))
 (let (($x107 (and $x113 $x122)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x120 $x107)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x74)))))))
 (let (($x121 (and $x109 $x86)))
 (let (($x105 (= $x121 true)))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x99 true)))
 (let (($x70 (= $x43 true)))
 (let (($x65 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x119 (= $x65 true)))
 (let (($x97 (= $x119 true)))
 (let (($x125 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x89 (= $x125 true)))
 (let (($x66 (= $x89 true)))
 (let (($x82 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x82 true)))
 (let (($x75 (= $x67 true)))
 (let (($x84 (= $x75 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x79 (= $x80 true)))
 (let (($x72 (= $x79 true)))
 (let (($x78 (= $x72 true)))
 (let (($x115 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x108 (= $x115 true)))
 (let (($x71 (= $x108 true)))
 (let (($x83 (= $x71 true)))
 (let (($x61 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x44 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x44 true)))
 (let (($x36 (= $x39 true)))
 (let (($x58 (= $x36 true)))
 (let (($x55 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x92 (= $x55 true)))
 (let (($x47 (= $x92 true)))
 (let (($x30 (= $x47 true)))
 (let (($x40 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x40 true)))
 (let (($x29 (= $x26 true)))
 (let (($x32 (= $x29 true)))
 (let (($x77 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (= $x77 true)))
 (let (($x76 (= $x33 true)))
 (let (($x85 (and $x76 $x32)))
 (let (($x112 (and $x85 $x30)))
 (let (($x59 (and $x112 $x58)))
 (let (($x81 (and $x59 $x64)))
 (let (($x68 (and $x81 $x83)))
 (let (($x69 (and $x68 $x78)))
 (let (($x124 (and $x69 $x84)))
 (let (($x106 (and $x124 $x66)))
 (let (($x118 (and $x106 $x97)))
 (let (($x126 (and $x118 $x70)))
 (let (($x87 (and $x126 $x98)))
 (let (($x129 (and $x87 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x153 (and $x148 $x152)))
 (let (($x174 (and $x153 $x173)))
 (let (($x53 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x53 $x174)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x25 $x175)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x177 (and $x48 $x176)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x178 (and $x45 $x177)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x179 (and $x22 $x178)))
 (let (($x51 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x180 (and $x51 $x179)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x181 (and $x28 $x180)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x182 (and $x21 $x181)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x183 (and $x9 $x182)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x184 (and $x6 $x183)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x185 (and $x24 $x184)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x186 (and $x16 $x185)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x12 $x186)))
 (let (($x191 (=> $x187 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (not $x154)))
 (let (($x166 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (not $x166)))
 (let (($x159 (or $x164 $x155)))
 (let (($x167 (= $x159 true)))
 (let (($x163 (= $x167 true)))
 (let (($x178 (forall ((input.ind-%var584X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var584X)))
 (=> $x156 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var584X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var583X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var583X)))
 (= $x156 false)))
 ))
 (let (($x179 (and $x165 $x178)))
 (let (($x180 (= $x179 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x141 (= ?x135 input.dst.llvm-%n)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x136 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x50 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x50 true)))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x121 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x121 true)))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x120 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x111 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x70 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x126 (= $x70 true)))
 (let (($x127 (= $x126 true)))
 (let (($x95 (= $x127 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x89)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x75 $x124)))
 (let (($x106 (and $x125 $x66)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x64 $x106)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x80)))))))
 (let (($x119 (and $x67 $x65)))
 (let (($x97 (= $x119 true)))
 (let (($x118 (= $x97 true)))
 (let (($x103 (= $x118 true)))
 (let (($x39 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x36 (= $x39 true)))
 (let (($x58 (= $x36 true)))
 (let (($x59 (= $x58 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x92 true)))
 (let (($x30 (= $x47 true)))
 (let (($x112 (= $x30 true)))
 (let (($x26 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x29 (= $x26 true)))
 (let (($x32 (= $x29 true)))
 (let (($x85 (= $x32 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x33 (= ?x42 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x55 (and $x11 $x85)))
 (let (($x44 (and $x55 $x112)))
 (let (($x60 (and $x44 $x59)))
 (let (($x99 (and $x60 $x103)))
 (let (($x73 (and $x99 $x95)))
 (let (($x93 (and $x73 $x74)))
 (let (($x116 (and $x93 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x86 (and $x88 $x107)))
 (let (($x87 (and $x86 $x98)))
 (let (($x128 (and $x87 $x90)))
 (let (($x133 (and $x128 $x132)))
 (let (($x139 (and $x133 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x181 (and $x150 $x180)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x46 $x181)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x183 (and $x52 $x182)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x41 $x183)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x185 (and $x54 $x184)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x186 (and $x19 $x185)))
 (let (($x91 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x187 (and $x91 $x186)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x188 (and $x15 $x187)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x189 (and $x18 $x188)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x190 (and $x17 $x189)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x191 (and $x5 $x190)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x192 (and $x31 $x191)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x100 (and $x21 $x192)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x158 (and $x38 $x100)))
 (let (($x168 (=> $x158 $x163)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (not $x154)))
 (let (($x166 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (not $x166)))
 (let (($x159 (or $x164 $x155)))
 (let (($x167 (= $x159 true)))
 (let (($x163 (= $x167 true)))
 (let (($x178 (forall ((input.ind-%var584X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var584X)))
 (=> $x156 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var584X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var583X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var583X)))
 (= $x156 false)))
 ))
 (let (($x179 (and $x165 $x178)))
 (let (($x180 (= $x179 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x141 (= ?x135 input.dst.llvm-%n)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x136 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x50 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x50 true)))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x121 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x121 true)))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x120 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x111 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x70 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x126 (= $x70 true)))
 (let (($x127 (= $x126 true)))
 (let (($x95 (= $x127 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x89)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x75 $x124)))
 (let (($x106 (and $x125 $x66)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x64 $x106)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x80)))))))
 (let (($x119 (and $x67 $x65)))
 (let (($x97 (= $x119 true)))
 (let (($x118 (= $x97 true)))
 (let (($x103 (= $x118 true)))
 (let (($x39 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x36 (= $x39 true)))
 (let (($x58 (= $x36 true)))
 (let (($x59 (= $x58 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x92 true)))
 (let (($x30 (= $x47 true)))
 (let (($x112 (= $x30 true)))
 (let (($x26 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x29 (= $x26 true)))
 (let (($x32 (= $x29 true)))
 (let (($x85 (= $x32 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x33 (= ?x42 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x55 (and $x11 $x85)))
 (let (($x44 (and $x55 $x112)))
 (let (($x60 (and $x44 $x59)))
 (let (($x99 (and $x60 $x103)))
 (let (($x73 (and $x99 $x95)))
 (let (($x93 (and $x73 $x74)))
 (let (($x116 (and $x93 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x86 (and $x88 $x107)))
 (let (($x87 (and $x86 $x98)))
 (let (($x128 (and $x87 $x90)))
 (let (($x133 (and $x128 $x132)))
 (let (($x139 (and $x133 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x181 (and $x150 $x180)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x46 $x181)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x183 (and $x52 $x182)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x41 $x183)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x185 (and $x54 $x184)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x186 (and $x19 $x185)))
 (let (($x91 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x187 (and $x91 $x186)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x188 (and $x15 $x187)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x189 (and $x18 $x188)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x190 (and $x17 $x189)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x191 (and $x5 $x190)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x192 (and $x31 $x191)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x100 (and $x21 $x192)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x158 (and $x38 $x100)))
 (let (($x168 (=> $x158 $x163)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x200 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x194 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x196 (ite $x194 ?x195 (_ bv0 32))))
 (let ((?x193 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x162 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x197 (ite $x162 ?x193 ?x196)))
 (let ((?x198 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x199 (bvneg ?x198)))
 (let (($x201 (= ?x199 ?x200)))
 (let (($x202 (= $x201 true)))
 (let (($x166 (forall ((input.ind-%var625X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var625X)))
 (=> $x181 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var625X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var624X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var624X)))
 (= $x181 false)))
 ))
 (let (($x164 (and $x185 $x166)))
 (let (($x154 (= $x164 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x123 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x34 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x117 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x126 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x103 (= $x118 true)))
 (let (($x99 (= $x103 true)))
 (let (($x43 (= $x99 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x66 true)))
 (let (($x65 (= $x106 true)))
 (let (($x119 (= $x65 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x78)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x79)))
 (let (($x67 (and $x72 $x69)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x47 $x67)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x59)))))))
 (let (($x64 (and $x83 $x63)))
 (let (($x75 (= $x64 true)))
 (let (($x84 (= $x75 true)))
 (let (($x124 (= $x84 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x40 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (= $x40 true)))
 (let (($x29 (= $x26 true)))
 (let (($x33 (= ?x42 input.dst.llvm-%n)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x32 (and $x11 $x29)))
 (let (($x125 (and $x32 $x124)))
 (let (($x97 (and $x125 $x119)))
 (let (($x70 (and $x97 $x43)))
 (let (($x102 (and $x70 $x73)))
 (let (($x93 (and $x102 $x74)))
 (let (($x116 (and $x93 $x109)))
 (let (($x113 (and $x116 $x88)))
 (let (($x121 (and $x113 $x86)))
 (let (($x50 (and $x121 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x155 (and $x177 $x154)))
 (let (($x53 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and (not $x53) $x155)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x35 $x167)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x48 $x163)))
 (let (($x57 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x101 (and $x57 $x168)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x62 (and $x22 $x101)))
 (let (($x14 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x14 $x62)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x173 (and $x6 $x157)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x171 (and $x23 $x173)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x151 (and $x20 $x171)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x152 (and $x9 $x151)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x160 (and $x8 $x152)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x174 (and $x24 $x160)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x51 $x174)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x175 (and $x61 $x170)))
 (let (($x203 (=> $x175 $x202)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x200 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x194 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x196 (ite $x194 ?x195 (_ bv0 32))))
 (let ((?x193 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x162 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x197 (ite $x162 ?x193 ?x196)))
 (let ((?x198 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x199 (bvneg ?x198)))
 (let (($x201 (= ?x199 ?x200)))
 (let (($x202 (= $x201 true)))
 (let (($x166 (forall ((input.ind-%var625X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var625X)))
 (=> $x181 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var625X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var624X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var624X)))
 (= $x181 false)))
 ))
 (let (($x164 (and $x185 $x166)))
 (let (($x154 (= $x164 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x123 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x34 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x117 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x126 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x103 (= $x118 true)))
 (let (($x99 (= $x103 true)))
 (let (($x43 (= $x99 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x66 true)))
 (let (($x65 (= $x106 true)))
 (let (($x119 (= $x65 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x78)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x79)))
 (let (($x67 (and $x72 $x69)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x47 $x67)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x59)))))))
 (let (($x64 (and $x83 $x63)))
 (let (($x75 (= $x64 true)))
 (let (($x84 (= $x75 true)))
 (let (($x124 (= $x84 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x40 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (= $x40 true)))
 (let (($x29 (= $x26 true)))
 (let (($x33 (= ?x42 input.dst.llvm-%n)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x32 (and $x11 $x29)))
 (let (($x125 (and $x32 $x124)))
 (let (($x97 (and $x125 $x119)))
 (let (($x70 (and $x97 $x43)))
 (let (($x102 (and $x70 $x73)))
 (let (($x93 (and $x102 $x74)))
 (let (($x116 (and $x93 $x109)))
 (let (($x113 (and $x116 $x88)))
 (let (($x121 (and $x113 $x86)))
 (let (($x50 (and $x121 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x155 (and $x177 $x154)))
 (let (($x53 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and (not $x53) $x155)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x35 $x167)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x48 $x163)))
 (let (($x57 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x101 (and $x57 $x168)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x62 (and $x22 $x101)))
 (let (($x14 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x14 $x62)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x173 (and $x6 $x157)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x171 (and $x23 $x173)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x151 (and $x20 $x171)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x152 (and $x9 $x151)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x160 (and $x8 $x152)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x174 (and $x24 $x160)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x51 $x174)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x175 (and $x61 $x170)))
 (let (($x203 (=> $x175 $x202)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x55 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x190 (ite $x55 ?x182 (_ bv0 32))))
 (let ((?x204 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x203 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x188 (ite $x203 ?x204 ?x190)))
 (let ((?x178 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x179 (bvneg ?x178)))
 (let (($x191 (= ?x179 ?x183)))
 (let (($x187 (= $x191 true)))
 (let (($x173 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var701X)))
 (=> $x185 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var700X)))
 (= $x185 false)))
 ))
 (let (($x171 (and $x166 $x173)))
 (let (($x151 (= $x171 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x123 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x34 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x117 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x126 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x103 (= $x118 true)))
 (let (($x99 (= $x103 true)))
 (let (($x43 (= $x99 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x66 true)))
 (let (($x65 (= $x106 true)))
 (let (($x119 (= $x65 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x78)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x79)))
 (let (($x67 (and $x72 $x69)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x112 $x67)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x64 (and $x47 $x63)))
 (let (($x75 (= $x64 true)))
 (let (($x84 (= $x75 true)))
 (let (($x124 (= $x84 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x159)))
 (let (($x76 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (= $x76 true)))
 (let (($x40 (= $x11 true)))
 (let (($x42 (= ?x56 input.dst.llvm-%n)))
 (let (($x77 (= $x42 true)))
 (let (($x33 (= $x77 true)))
 (let (($x26 (and $x33 $x40)))
 (let (($x125 (and $x26 $x124)))
 (let (($x97 (and $x125 $x119)))
 (let (($x70 (and $x97 $x43)))
 (let (($x102 (and $x70 $x73)))
 (let (($x93 (and $x102 $x74)))
 (let (($x116 (and $x93 $x109)))
 (let (($x113 (and $x116 $x88)))
 (let (($x121 (and $x113 $x86)))
 (let (($x50 (and $x121 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x152 (and $x177 $x151)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and (not $x46) $x152)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x25 $x174)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x175 (and $x41 $x170)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x162 (and $x45 $x175)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x193 (and $x19 $x162)))
 (let (($x91 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x194 (and $x91 $x193)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x195 (and $x28 $x194)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x196 (and $x27 $x195)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x197 (and $x17 $x196)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x198 (and $x5 $x197)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x199 (and $x31 $x198)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x200 (and $x21 $x199)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x16 $x200)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x202 (and $x85 $x201)))
 (let (($x192 (=> $x202 $x187)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x55 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x190 (ite $x55 ?x182 (_ bv0 32))))
 (let ((?x204 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x203 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x188 (ite $x203 ?x204 ?x190)))
 (let ((?x178 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x179 (bvneg ?x178)))
 (let (($x191 (= ?x179 ?x183)))
 (let (($x187 (= $x191 true)))
 (let (($x173 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var701X)))
 (=> $x185 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var700X)))
 (= $x185 false)))
 ))
 (let (($x171 (and $x166 $x173)))
 (let (($x151 (= $x171 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x123 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x34 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x117 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x126 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x103 (= $x118 true)))
 (let (($x99 (= $x103 true)))
 (let (($x43 (= $x99 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x66 true)))
 (let (($x65 (= $x106 true)))
 (let (($x119 (= $x65 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x78)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x79)))
 (let (($x67 (and $x72 $x69)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x112 $x67)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x64 (and $x47 $x63)))
 (let (($x75 (= $x64 true)))
 (let (($x84 (= $x75 true)))
 (let (($x124 (= $x84 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x159)))
 (let (($x76 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (= $x76 true)))
 (let (($x40 (= $x11 true)))
 (let (($x42 (= ?x56 input.dst.llvm-%n)))
 (let (($x77 (= $x42 true)))
 (let (($x33 (= $x77 true)))
 (let (($x26 (and $x33 $x40)))
 (let (($x125 (and $x26 $x124)))
 (let (($x97 (and $x125 $x119)))
 (let (($x70 (and $x97 $x43)))
 (let (($x102 (and $x70 $x73)))
 (let (($x93 (and $x102 $x74)))
 (let (($x116 (and $x93 $x109)))
 (let (($x113 (and $x116 $x88)))
 (let (($x121 (and $x113 $x86)))
 (let (($x50 (and $x121 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x152 (and $x177 $x151)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and (not $x46) $x152)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x25 $x174)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x175 (and $x41 $x170)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x162 (and $x45 $x175)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x193 (and $x19 $x162)))
 (let (($x91 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x194 (and $x91 $x193)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x195 (and $x28 $x194)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x196 (and $x27 $x195)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x197 (and $x17 $x196)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x198 (and $x5 $x197)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x199 (and $x31 $x198)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x200 (and $x21 $x199)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x16 $x200)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x202 (and $x85 $x201)))
 (let (($x192 (=> $x202 $x187)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x32 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x163 (ite $x32 ?x189 (_ bv0 32))))
 (let ((?x169 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x192 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x155 (ite $x192 ?x169 ?x163)))
 (let (($x180 (bvule ?x155 (_ bv3 32))))
 (let (($x181 (= $x180 true)))
 (let (($x100 (= $x181 true)))
 (let (($x195 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var742X)))
 (=> $x166 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var742X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var741X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var741X)))
 (= $x166 false)))
 ))
 (let (($x196 (and $x173 $x195)))
 (let (($x197 (= $x196 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x123 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x10)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x95 $x102)))
 (let (($x74 (and $x117 $x49)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x125 $x74)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x118)))))))
 (let (($x111 (and $x127 $x93)))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x69 (= $x78 true)))
 (let (($x67 (= $x69 true)))
 (let (($x63 (= $x67 true)))
 (let (($x68 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x68 true)))
 (let (($x80 (= $x71 true)))
 (let (($x79 (= $x80 true)))
 (let (($x82 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x82 true)))
 (let (($x47 (= $x83 true)))
 (let (($x30 (= $x47 true)))
 (let ((?x108 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x108)))
 (let (($x58 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x58 true)))
 (let (($x81 (= $x60 true)))
 (let (($x92 (= ?x44 input.dst.llvm-%n)))
 (let (($x36 (= $x92 true)))
 (let (($x39 (= $x36 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x33 (= $x77 true)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x53 true)))
 (let (($x56 (= $x159 true)))
 (let (($x7 (= $x56 true)))
 (let (($x40 (and $x7 $x11)))
 (let (($x59 (and $x40 $x39)))
 (let (($x115 (and $x59 $x81)))
 (let (($x112 (and $x115 $x30)))
 (let (($x72 (and $x112 $x79)))
 (let (($x64 (and $x72 $x63)))
 (let (($x116 (and $x64 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x121 (and $x88 $x86)))
 (let (($x50 (and $x121 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x198 (and $x177 $x197)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x35) $x198)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and $x52 $x200)))
 (let (($x57 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x202 (and $x57 $x201)))
 (let (($x54 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x203 (and $x54 $x202)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x204 (and $x14 $x203)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x55 (and $x6 $x204)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x182 (and $x15 $x55)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x190 (and $x18 $x182)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x188 (and $x9 $x190)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x178 (and $x8 $x188)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x179 (and $x24 $x178)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x183 (and $x51 $x179)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x191 (and $x12 $x183)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x29 $x191)))
 (let (($x168 (=> $x187 $x100)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x32 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x163 (ite $x32 ?x189 (_ bv0 32))))
 (let ((?x169 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x192 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x155 (ite $x192 ?x169 ?x163)))
 (let (($x180 (bvule ?x155 (_ bv3 32))))
 (let (($x181 (= $x180 true)))
 (let (($x100 (= $x181 true)))
 (let (($x195 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var742X)))
 (=> $x166 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var742X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var741X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var741X)))
 (= $x166 false)))
 ))
 (let (($x196 (and $x173 $x195)))
 (let (($x197 (= $x196 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x123 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x10)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x95 $x102)))
 (let (($x74 (and $x117 $x49)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x125 $x74)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x118)))))))
 (let (($x111 (and $x127 $x93)))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x69 (= $x78 true)))
 (let (($x67 (= $x69 true)))
 (let (($x63 (= $x67 true)))
 (let (($x68 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x68 true)))
 (let (($x80 (= $x71 true)))
 (let (($x79 (= $x80 true)))
 (let (($x82 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x82 true)))
 (let (($x47 (= $x83 true)))
 (let (($x30 (= $x47 true)))
 (let ((?x108 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x108)))
 (let (($x58 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x58 true)))
 (let (($x81 (= $x60 true)))
 (let (($x92 (= ?x44 input.dst.llvm-%n)))
 (let (($x36 (= $x92 true)))
 (let (($x39 (= $x36 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x33 (= $x77 true)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x53 true)))
 (let (($x56 (= $x159 true)))
 (let (($x7 (= $x56 true)))
 (let (($x40 (and $x7 $x11)))
 (let (($x59 (and $x40 $x39)))
 (let (($x115 (and $x59 $x81)))
 (let (($x112 (and $x115 $x30)))
 (let (($x72 (and $x112 $x79)))
 (let (($x64 (and $x72 $x63)))
 (let (($x116 (and $x64 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x121 (and $x88 $x86)))
 (let (($x50 (and $x121 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x198 (and $x177 $x197)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x35) $x198)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and $x52 $x200)))
 (let (($x57 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x202 (and $x57 $x201)))
 (let (($x54 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x203 (and $x54 $x202)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x204 (and $x14 $x203)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x55 (and $x6 $x204)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x182 (and $x15 $x55)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x190 (and $x18 $x182)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x188 (and $x9 $x190)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x178 (and $x8 $x188)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x179 (and $x24 $x178)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x183 (and $x51 $x179)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x191 (and $x12 $x183)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x29 $x191)))
 (let (($x168 (=> $x187 $x100)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x170 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x184 (ite $x170 ?x152 (_ bv0 32))))
 (let ((?x167 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x84 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x185 (ite $x84 ?x167 ?x184)))
 (let (($x62 (bvule ?x185 (_ bv4 32))))
 (let (($x175 (= $x62 true)))
 (let (($x151 (= $x175 true)))
 (let (($x182 (forall ((input.ind-%var927X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var927X)))
 (=> $x173 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var927X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var926X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var926X)))
 (= $x173 false)))
 ))
 (let (($x190 (and $x195 $x182)))
 (let (($x188 (= $x190 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x113 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x10)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x125 $x102)))
 (let (($x74 (and $x117 $x49)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x89 $x74)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x118)))))))
 (let (($x111 (and $x124 $x93)))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x80 true)))
 (let (($x72 (= $x79 true)))
 (let (($x78 (= $x72 true)))
 (let (($x47 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x47 true)))
 (let (($x112 (= $x30 true)))
 (let (($x68 (= $x112 true)))
 (let (($x60 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x81 (= $x60 true)))
 (let (($x115 (= $x81 true)))
 (let (($x82 (= $x115 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x11)))
 (let (($x36 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x36 true)))
 (let (($x59 (= $x39 true)))
 (let (($x26 (= ?x40 input.dst.llvm-%n)))
 (let (($x108 (= $x26 true)))
 (let (($x44 (= $x108 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x7 (= $x56 true)))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x46 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x46 true)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x33 (and $x159 $x77)))
 (let (($x92 (and $x33 $x44)))
 (let (($x58 (and $x92 $x59)))
 (let (($x83 (and $x58 $x82)))
 (let (($x71 (and $x83 $x68)))
 (let (($x69 (and $x71 $x78)))
 (let (($x116 (and $x69 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x86 (and $x88 $x107)))
 (let (($x50 (and $x86 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x178 (and $x177 $x188)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (and (not $x25) $x178)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x48 $x183)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x187 (and $x45 $x191)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x192 (and $x22 $x187)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x169 (and $x91 $x192)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x32 (and $x28 $x169)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x189 (and $x23 $x32)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x20 $x189)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x5 $x163)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x180 (and $x31 $x155)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x181 (and $x21 $x180)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x100 (and $x16 $x181)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x168 (and $x38 $x100)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x154 (and $x75 $x168)))
 (let (($x162 (=> $x154 $x151)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x170 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x184 (ite $x170 ?x152 (_ bv0 32))))
 (let ((?x167 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x84 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x185 (ite $x84 ?x167 ?x184)))
 (let (($x62 (bvule ?x185 (_ bv4 32))))
 (let (($x175 (= $x62 true)))
 (let (($x151 (= $x175 true)))
 (let (($x182 (forall ((input.ind-%var927X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var927X)))
 (=> $x173 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var927X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var926X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var926X)))
 (= $x173 false)))
 ))
 (let (($x190 (and $x195 $x182)))
 (let (($x188 (= $x190 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x130 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x113 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x10)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x125 $x102)))
 (let (($x74 (and $x117 $x49)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x89 $x74)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x118)))))))
 (let (($x111 (and $x124 $x93)))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x80 true)))
 (let (($x72 (= $x79 true)))
 (let (($x78 (= $x72 true)))
 (let (($x47 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x47 true)))
 (let (($x112 (= $x30 true)))
 (let (($x68 (= $x112 true)))
 (let (($x60 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x81 (= $x60 true)))
 (let (($x115 (= $x81 true)))
 (let (($x82 (= $x115 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x11)))
 (let (($x36 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x36 true)))
 (let (($x59 (= $x39 true)))
 (let (($x26 (= ?x40 input.dst.llvm-%n)))
 (let (($x108 (= $x26 true)))
 (let (($x44 (= $x108 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x7 (= $x56 true)))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x46 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x46 true)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x33 (and $x159 $x77)))
 (let (($x92 (and $x33 $x44)))
 (let (($x58 (and $x92 $x59)))
 (let (($x83 (and $x58 $x82)))
 (let (($x71 (and $x83 $x68)))
 (let (($x69 (and $x71 $x78)))
 (let (($x116 (and $x69 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x86 (and $x88 $x107)))
 (let (($x50 (and $x86 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x178 (and $x177 $x188)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (and (not $x25) $x178)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x48 $x183)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x187 (and $x45 $x191)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x192 (and $x22 $x187)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x169 (and $x91 $x192)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x32 (and $x28 $x169)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x189 (and $x23 $x32)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x20 $x189)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x5 $x163)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x180 (and $x31 $x155)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x181 (and $x21 $x180)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x100 (and $x16 $x181)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x168 (and $x38 $x100)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x154 (and $x75 $x168)))
 (let (($x162 (=> $x154 $x151)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x198 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x166 (ite $x198 ?x158 (_ bv0 32))))
 (let ((?x201 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x174 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x193 (ite $x174 ?x201 ?x166)))
 (let (($x202 (bvule ?x193 (_ bv9 32))))
 (let (($x197 (= $x202 true)))
 (let (($x203 (= $x197 true)))
 (let (($x163 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1112X)))
 (=> $x200 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1112X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1111X)))
 (= $x200 false)))
 ))
 (let (($x155 (and $x190 $x163)))
 (let (($x180 (= $x155 true)))
 (let ((?x156 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x156)))
 (let (($x172 (= ?x161 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x172 true)))
 (let (($x177 (= $x176 true)))
 (let ((?x146 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x146)))
 (let (($x148 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x141 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x136 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x131 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x104 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x129 (= $x128 true)))
 (let (($x114 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x50 (= $x87 true)))
 (let (($x122 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x121 (= $x86 true)))
 (let (($x96 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x113 (= $x88 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x49)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x95 $x117)))
 (let (($x93 (and $x10 $x74)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x127 $x93)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x99)))))))
 (let (($x110 (and $x125 $x111)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x116 (= $x109 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x80 (= $x71 true)))
 (let (($x79 (= $x80 true)))
 (let (($x72 (= $x79 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x47 (= $x83 true)))
 (let (($x30 (= $x47 true)))
 (let (($x112 (= $x30 true)))
 (let (($x59 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x58 (= $x59 true)))
 (let (($x60 (= $x58 true)))
 (let (($x81 (= $x60 true)))
 (let (($x108 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x44 (= $x108 true)))
 (let (($x92 (= $x44 true)))
 (let (($x36 (= $x92 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x159)))
 (let (($x76 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (= $x76 true)))
 (let (($x40 (= $x11 true)))
 (let (($x7 (= ?x56 input.dst.llvm-%n)))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x199 (= $x35 true)))
 (let (($x46 (= $x199 true)))
 (let (($x160 (= $x46 true)))
 (let (($x33 (and $x160 $x77)))
 (let (($x26 (and $x33 $x40)))
 (let (($x39 (and $x26 $x36)))
 (let (($x115 (and $x39 $x81)))
 (let (($x68 (and $x115 $x112)))
 (let (($x78 (and $x68 $x72)))
 (let (($x120 (and $x78 $x116)))
 (let (($x123 (and $x120 $x113)))
 (let (($x105 (and $x123 $x121)))
 (let (($x94 (and $x105 $x50)))
 (let (($x130 (and $x94 $x129)))
 (let (($x135 (and $x130 $x134)))
 (let (($x140 (and $x135 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x153 (and $x145 $x150)))
 (let (($x157 (and $x153 $x177)))
 (let (($x181 (and $x157 $x180)))
 (let (($x52 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x52) $x181)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x41 $x168)))
 (let (($x54 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x84 (and $x54 $x154)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x167 (and $x19 $x84)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x6 $x167)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x152 (and $x15 $x170)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x184 (and $x27 $x152)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x185 (and $x17 $x184)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x62 (and $x8 $x185)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x175 (and $x24 $x62)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x151 (and $x51 $x175)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x12 $x151)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x85 $x162)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x63 (and $x67 $x164)))
 (let (($x171 (=> $x63 $x203)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x198 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x166 (ite $x198 ?x158 (_ bv0 32))))
 (let ((?x201 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x174 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x193 (ite $x174 ?x201 ?x166)))
 (let (($x202 (bvule ?x193 (_ bv9 32))))
 (let (($x197 (= $x202 true)))
 (let (($x203 (= $x197 true)))
 (let (($x163 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1112X)))
 (=> $x200 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1112X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1111X)))
 (= $x200 false)))
 ))
 (let (($x155 (and $x190 $x163)))
 (let (($x180 (= $x155 true)))
 (let ((?x156 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x156)))
 (let (($x172 (= ?x161 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x172 true)))
 (let (($x177 (= $x176 true)))
 (let ((?x146 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x146)))
 (let (($x148 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x141 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x136 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x131 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x104 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x129 (= $x128 true)))
 (let (($x114 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x50 (= $x87 true)))
 (let (($x122 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x107 (= $x122 true)))
 (let (($x86 (= $x107 true)))
 (let (($x121 (= $x86 true)))
 (let (($x96 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x113 (= $x88 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x49)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x95 $x117)))
 (let (($x93 (and $x10 $x74)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x127 $x93)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x99)))))))
 (let (($x110 (and $x125 $x111)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x116 (= $x109 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x80 (= $x71 true)))
 (let (($x79 (= $x80 true)))
 (let (($x72 (= $x79 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x47 (= $x83 true)))
 (let (($x30 (= $x47 true)))
 (let (($x112 (= $x30 true)))
 (let (($x59 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x58 (= $x59 true)))
 (let (($x60 (= $x58 true)))
 (let (($x81 (= $x60 true)))
 (let (($x108 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x44 (= $x108 true)))
 (let (($x92 (= $x44 true)))
 (let (($x36 (= $x92 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x159)))
 (let (($x76 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (= $x76 true)))
 (let (($x40 (= $x11 true)))
 (let (($x7 (= ?x56 input.dst.llvm-%n)))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x199 (= $x35 true)))
 (let (($x46 (= $x199 true)))
 (let (($x160 (= $x46 true)))
 (let (($x33 (and $x160 $x77)))
 (let (($x26 (and $x33 $x40)))
 (let (($x39 (and $x26 $x36)))
 (let (($x115 (and $x39 $x81)))
 (let (($x68 (and $x115 $x112)))
 (let (($x78 (and $x68 $x72)))
 (let (($x120 (and $x78 $x116)))
 (let (($x123 (and $x120 $x113)))
 (let (($x105 (and $x123 $x121)))
 (let (($x94 (and $x105 $x50)))
 (let (($x130 (and $x94 $x129)))
 (let (($x135 (and $x130 $x134)))
 (let (($x140 (and $x135 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x153 (and $x145 $x150)))
 (let (($x157 (and $x153 $x177)))
 (let (($x181 (and $x157 $x180)))
 (let (($x52 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x52) $x181)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x41 $x168)))
 (let (($x54 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x84 (and $x54 $x154)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x167 (and $x19 $x84)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x6 $x167)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x152 (and $x15 $x170)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x184 (and $x27 $x152)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x185 (and $x17 $x184)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x62 (and $x8 $x185)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x175 (and $x24 $x62)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x151 (and $x51 $x175)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x12 $x151)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x85 $x162)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x63 (and $x67 $x164)))
 (let (($x171 (=> $x63 $x203)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x198 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x166 (ite $x198 ?x158 (_ bv0 32))))
 (let ((?x201 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x174 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x193 (ite $x174 ?x201 ?x166)))
 (let (($x202 (bvule ?x193 (_ bv10 32))))
 (let (($x197 (= $x202 true)))
 (let (($x203 (= $x197 true)))
 (let (($x189 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1307X)))
 (=> $x153 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1307X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1306X)))
 (= $x153 false)))
 ))
 (let (($x163 (and $x172 $x189)))
 (let (($x155 (= $x163 true)))
 (let ((?x141 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x141)))
 (let (($x144 (= ?x142 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x135)))
 (let (($x137 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x113 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x10)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x127 $x102)))
 (let (($x74 (and $x117 $x49)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x106 $x74)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x99)))))))
 (let (($x111 (and $x126 $x93)))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x112 (= $x30 true)))
 (let (($x68 (= $x112 true)))
 (let (($x71 (= $x68 true)))
 (let (($x81 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x81 true)))
 (let (($x82 (= $x115 true)))
 (let (($x83 (= $x82 true)))
 (let (($x36 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x39 (= $x36 true)))
 (let (($x59 (= $x39 true)))
 (let (($x58 (= $x59 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x42)))
 (let (($x26 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x26 true)))
 (let (($x44 (= $x108 true)))
 (let (($x33 (= ?x77 input.dst.llvm-%n)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x46 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x160 (= $x46 true)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x25 true)))
 (let (($x35 (= $x179 true)))
 (let (($x199 (= $x35 true)))
 (let (($x56 (and $x199 $x159)))
 (let (($x40 (and $x56 $x11)))
 (let (($x92 (and $x40 $x44)))
 (let (($x60 (and $x92 $x58)))
 (let (($x47 (and $x60 $x83)))
 (let (($x80 (and $x47 $x71)))
 (let (($x116 (and $x80 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x86 (and $x88 $x107)))
 (let (($x50 (and $x86 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x140 (and $x134 $x139)))
 (let (($x147 (and $x140 $x146)))
 (let (($x180 (and $x147 $x155)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x48) $x180)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x57 $x168)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x84 (and $x22 $x154)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x167 (and $x14 $x84)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x28 $x167)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x152 (and $x23 $x170)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x184 (and $x18 $x152)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x185 (and $x9 $x184)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x62 (and $x31 $x185)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x175 (and $x21 $x62)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x151 (and $x16 $x175)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x38 $x151)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x29 $x162)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x63 (and $x69 $x164)))
 (let (($x171 (=> $x63 $x203)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x198 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x166 (ite $x198 ?x158 (_ bv0 32))))
 (let ((?x201 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x174 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x193 (ite $x174 ?x201 ?x166)))
 (let (($x202 (bvule ?x193 (_ bv10 32))))
 (let (($x197 (= $x202 true)))
 (let (($x203 (= $x197 true)))
 (let (($x189 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1307X)))
 (=> $x153 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1307X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1306X)))
 (= $x153 false)))
 ))
 (let (($x163 (and $x172 $x189)))
 (let (($x155 (= $x163 true)))
 (let ((?x141 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x141)))
 (let (($x144 (= ?x142 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x135)))
 (let (($x137 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x104 (= $x94 true)))
 (let (($x90 (= $x104 true)))
 (let (($x128 (= $x90 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x114 (= $x105 true)))
 (let (($x98 (= $x114 true)))
 (let (($x87 (= $x98 true)))
 (let (($x113 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let (($x107 (= $x122 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x10)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x127 $x102)))
 (let (($x74 (and $x117 $x49)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x106 $x74)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x99)))))))
 (let (($x111 (and $x126 $x93)))
 (let (($x110 (= $x111 true)))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x112 (= $x30 true)))
 (let (($x68 (= $x112 true)))
 (let (($x71 (= $x68 true)))
 (let (($x81 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x81 true)))
 (let (($x82 (= $x115 true)))
 (let (($x83 (= $x82 true)))
 (let (($x36 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x39 (= $x36 true)))
 (let (($x59 (= $x39 true)))
 (let (($x58 (= $x59 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x42)))
 (let (($x26 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x26 true)))
 (let (($x44 (= $x108 true)))
 (let (($x33 (= ?x77 input.dst.llvm-%n)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let (($x46 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x160 (= $x46 true)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x25 true)))
 (let (($x35 (= $x179 true)))
 (let (($x199 (= $x35 true)))
 (let (($x56 (and $x199 $x159)))
 (let (($x40 (and $x56 $x11)))
 (let (($x92 (and $x40 $x44)))
 (let (($x60 (and $x92 $x58)))
 (let (($x47 (and $x60 $x83)))
 (let (($x80 (and $x47 $x71)))
 (let (($x116 (and $x80 $x109)))
 (let (($x88 (and $x116 $x13)))
 (let (($x86 (and $x88 $x107)))
 (let (($x50 (and $x86 $x87)))
 (let (($x129 (and $x50 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x140 (and $x134 $x139)))
 (let (($x147 (and $x140 $x146)))
 (let (($x180 (and $x147 $x155)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x48) $x180)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x57 $x168)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x84 (and $x22 $x154)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x167 (and $x14 $x84)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x28 $x167)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x152 (and $x23 $x170)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x184 (and $x18 $x152)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x185 (and $x9 $x184)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x62 (and $x31 $x185)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x175 (and $x21 $x62)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x151 (and $x16 $x175)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x38 $x151)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x29 $x162)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x63 (and $x69 $x164)))
 (let (($x171 (=> $x63 $x203)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000011a0)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000011a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000011a0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x185 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x175 (ite $x185 ?x62 (_ bv0 32))))
 (let ((?x184 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x152 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x151 (ite $x152 ?x184 ?x175)))
 (let (($x162 (bvuge ?x151 (_ bv1 32))))
 (let (($x164 (= $x162 true)))
 (let (($x63 (= $x164 true)))
 (let (($x145 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1492X)))
 (=> $x131 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1492X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1491X)))
 (= $x131 false)))
 ))
 (let (($x146 (and $x135 $x145)))
 (let (($x147 (= $x146 true)))
 (let ((?x114 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x114)))
 (let (($x50 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x50 true)))
 (let (($x104 (= $x94 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x123)))
 (let (($x107 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x107 true)))
 (let (($x121 (= $x86 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x116 (= $x109 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x93 (= $x74 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x124)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x119 $x43)))
 (let (($x126 (and $x70 $x64)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x115 $x126)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x71)))))))
 (let (($x106 (and $x103 $x78)))
 (let (($x127 (= $x106 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x92 (= $x44 true)))
 (let (($x36 (= $x92 true)))
 (let (($x39 (= $x36 true)))
 (let (($x76 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x11 (= $x76 true)))
 (let (($x40 (= $x11 true)))
 (let (($x26 (= $x40 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x199)))
 (let (($x7 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x160 (= ?x46 input.dst.llvm-%n)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x52 true)))
 (let (($x25 (= $x100 true)))
 (let (($x179 (= $x25 true)))
 (let (($x56 (and $x179 $x159)))
 (let (($x33 (and $x56 $x77)))
 (let (($x108 (and $x33 $x26)))
 (let (($x59 (and $x108 $x39)))
 (let (($x102 (and $x59 $x73)))
 (let (($x111 (and $x102 $x93)))
 (let (($x120 (and $x111 $x116)))
 (let (($x113 (and $x120 $x88)))
 (let (($x105 (and $x113 $x121)))
 (let (($x90 (and $x105 $x104)))
 (let (($x150 (and $x90 $x147)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x41) $x150)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x45 $x165)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x195 (and $x19 $x172)))
 (let (($x91 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x191 (and $x91 $x195)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x15 $x191)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x189 (and $x27 $x32)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x20 $x189)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x155 (and $x5 $x163)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x180 (and $x24 $x155)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x168 (and $x51 $x180)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x154 (and $x12 $x168)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x84 (and $x85 $x154)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x167 (and $x75 $x84)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x170 (and $x79 $x167)))
 (let (($x174 (=> $x170 $x63)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x185 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x175 (ite $x185 ?x62 (_ bv0 32))))
 (let ((?x184 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x152 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x151 (ite $x152 ?x184 ?x175)))
 (let (($x162 (bvuge ?x151 (_ bv1 32))))
 (let (($x164 (= $x162 true)))
 (let (($x63 (= $x164 true)))
 (let (($x145 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1492X)))
 (=> $x131 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1492X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1491X)))
 (= $x131 false)))
 ))
 (let (($x146 (and $x135 $x145)))
 (let (($x147 (= $x146 true)))
 (let ((?x114 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x114)))
 (let (($x50 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x50 true)))
 (let (($x104 (= $x94 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x123)))
 (let (($x107 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x107 true)))
 (let (($x121 (= $x86 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x116 (= $x109 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x93 (= $x74 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x124)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x119 $x43)))
 (let (($x126 (and $x70 $x64)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x115 $x126)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x71)))))))
 (let (($x106 (and $x103 $x78)))
 (let (($x127 (= $x106 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x92 (= $x44 true)))
 (let (($x36 (= $x92 true)))
 (let (($x39 (= $x36 true)))
 (let (($x76 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x11 (= $x76 true)))
 (let (($x40 (= $x11 true)))
 (let (($x26 (= $x40 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x199)))
 (let (($x7 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x160 (= ?x46 input.dst.llvm-%n)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x52 true)))
 (let (($x25 (= $x100 true)))
 (let (($x179 (= $x25 true)))
 (let (($x56 (and $x179 $x159)))
 (let (($x33 (and $x56 $x77)))
 (let (($x108 (and $x33 $x26)))
 (let (($x59 (and $x108 $x39)))
 (let (($x102 (and $x59 $x73)))
 (let (($x111 (and $x102 $x93)))
 (let (($x120 (and $x111 $x116)))
 (let (($x113 (and $x120 $x88)))
 (let (($x105 (and $x113 $x121)))
 (let (($x90 (and $x105 $x104)))
 (let (($x150 (and $x90 $x147)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x41) $x150)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x45 $x165)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x195 (and $x19 $x172)))
 (let (($x91 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x191 (and $x91 $x195)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x15 $x191)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x189 (and $x27 $x32)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x20 $x189)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x155 (and $x5 $x163)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x180 (and $x24 $x155)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x168 (and $x51 $x180)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x154 (and $x12 $x168)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x84 (and $x85 $x154)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x167 (and $x75 $x84)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x170 (and $x79 $x167)))
 (let (($x174 (=> $x170 $x63)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 146 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x140 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x128 (ite $x140 ?x138 (_ bv0 32))))
 (let ((?x132 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x60 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x129 (ite $x60 ?x132 ?x128)))
 (let (($x133 (bvsge ?x129 (_ bv1 32))))
 (let (($x141 (= $x133 true)))
 (let (($x137 (= $x141 true)))
 (let (($x163 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1533X)))
 (=> $x135 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1533X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1532X)))
 (= $x135 false)))
 ))
 (let (($x155 (and $x145 $x163)))
 (let (($x180 (= $x155 true)))
 (let ((?x114 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x114)))
 (let (($x50 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x50 true)))
 (let (($x104 (= $x94 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x123)))
 (let (($x107 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x107 true)))
 (let (($x121 (= $x86 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x116 (= $x109 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x93 (= $x74 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x124)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x119 $x43)))
 (let (($x126 (and $x70 $x64)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x83 $x126)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x80)))))))
 (let (($x106 (and $x115 $x78)))
 (let (($x127 (= $x106 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x108 (= $x26 true)))
 (let (($x44 (= $x108 true)))
 (let (($x92 (= $x44 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x33 (= $x77 true)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x179)))
 (let (($x159 (= ?x35 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x159 true)))
 (let (($x7 (= $x56 true)))
 (let (($x199 (= ?x35 input.dst.llvm-%n)))
 (let (($x46 (= $x199 true)))
 (let (($x160 (= $x46 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x48 true)))
 (let (($x52 (= $x181 true)))
 (let (($x100 (= $x52 true)))
 (let (($x53 (and $x100 $x160)))
 (let (($x42 (and $x53 $x7)))
 (let (($x40 (and $x42 $x11)))
 (let (($x36 (and $x40 $x92)))
 (let (($x102 (and $x36 $x73)))
 (let (($x111 (and $x102 $x93)))
 (let (($x120 (and $x111 $x116)))
 (let (($x113 (and $x120 $x88)))
 (let (($x105 (and $x113 $x121)))
 (let (($x90 (and $x105 $x104)))
 (let (($x168 (and $x90 $x180)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and (not $x57) $x168)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x54 $x84)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x170 (and $x14 $x167)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x152 (and $x6 $x170)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x184 (and $x23 $x152)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x185 (and $x18 $x184)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x62 (and $x17 $x185)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x175 (and $x8 $x62)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x151 (and $x21 $x175)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x162 (and $x16 $x151)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x164 (and $x38 $x162)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x63 (and $x29 $x164)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x174 (and $x67 $x63)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x201 (and $x58 $x174)))
 (let (($x142 (=> $x201 $x137)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x140 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x128 (ite $x140 ?x138 (_ bv0 32))))
 (let ((?x132 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x60 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x129 (ite $x60 ?x132 ?x128)))
 (let (($x133 (bvsge ?x129 (_ bv1 32))))
 (let (($x141 (= $x133 true)))
 (let (($x137 (= $x141 true)))
 (let (($x163 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1533X)))
 (=> $x135 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1533X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1532X)))
 (= $x135 false)))
 ))
 (let (($x155 (and $x145 $x163)))
 (let (($x180 (= $x155 true)))
 (let ((?x114 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x114)))
 (let (($x50 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x50 true)))
 (let (($x104 (= $x94 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x123)))
 (let (($x107 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x107 true)))
 (let (($x121 (= $x86 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x96 (= $x34 true)))
 (let (($x13 (= $x96 true)))
 (let (($x88 (= $x13 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x37 (= $x110 true)))
 (let (($x109 (= $x37 true)))
 (let (($x116 (= $x109 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x93 (= $x74 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x124)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x119 $x43)))
 (let (($x126 (and $x70 $x64)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x83 $x126)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x80)))))))
 (let (($x106 (and $x115 $x78)))
 (let (($x127 (= $x106 true)))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x108 (= $x26 true)))
 (let (($x44 (= $x108 true)))
 (let (($x92 (= $x44 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x33 (= $x77 true)))
 (let (($x76 (= $x33 true)))
 (let (($x11 (= $x76 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x179)))
 (let (($x159 (= ?x35 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x159 true)))
 (let (($x7 (= $x56 true)))
 (let (($x199 (= ?x35 input.dst.llvm-%n)))
 (let (($x46 (= $x199 true)))
 (let (($x160 (= $x46 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x48 true)))
 (let (($x52 (= $x181 true)))
 (let (($x100 (= $x52 true)))
 (let (($x53 (and $x100 $x160)))
 (let (($x42 (and $x53 $x7)))
 (let (($x40 (and $x42 $x11)))
 (let (($x36 (and $x40 $x92)))
 (let (($x102 (and $x36 $x73)))
 (let (($x111 (and $x102 $x93)))
 (let (($x120 (and $x111 $x116)))
 (let (($x113 (and $x120 $x88)))
 (let (($x105 (and $x113 $x121)))
 (let (($x90 (and $x105 $x104)))
 (let (($x168 (and $x90 $x180)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and (not $x57) $x168)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x54 $x84)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x170 (and $x14 $x167)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x152 (and $x6 $x170)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x184 (and $x23 $x152)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x185 (and $x18 $x184)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x62 (and $x17 $x185)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x175 (and $x8 $x62)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x151 (and $x21 $x175)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x162 (and $x16 $x151)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x164 (and $x38 $x162)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x63 (and $x29 $x164)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x174 (and $x67 $x63)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x201 (and $x58 $x174)))
 (let (($x142 (=> $x201 $x137)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05480003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x138 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x129 (ite $x138 ?x128 (_ bv0 32))))
 (let ((?x140 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x132 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x133 (ite $x132 ?x140 ?x129)))
 (let (($x141 (bvsge ?x133 (_ bv0 32))))
 (let (($x137 (= $x141 true)))
 (let (($x142 (= $x137 true)))
 (let (($x163 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1728X)))
 (=> $x114 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1728X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1727X)))
 (= $x114 false)))
 ))
 (let (($x155 (and $x94 $x163)))
 (let (($x180 (= $x155 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x96)))
 (let (($x113 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x110)))
 (let (($x109 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x109 true)))
 (let (($x120 (= $x116 true)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x93 (= $x74 true)))
 (let (($x127 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x102 (= $x73 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x125 $x82)))
 (let (($x99 (and $x83 $x118)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x108 $x99)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x112)))))))
 (let (($x70 (and $x89 $x43)))
 (let (($x124 (= $x70 true)))
 (let (($x64 (= $x124 true)))
 (let (($x126 (= $x64 true)))
 (let (($x7 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x33 (= $x77 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x100)))
 (let (($x160 (= ?x25 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x179 (= ?x25 input.dst.llvm-%n)))
 (let (($x35 (= $x179 true)))
 (let (($x199 (= $x35 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x41 true)))
 (let (($x48 (= $x153 true)))
 (let (($x181 (= $x48 true)))
 (let (($x46 (and $x181 $x199)))
 (let (($x56 (and $x46 $x159)))
 (let (($x76 (and $x56 $x33)))
 (let (($x78 (and $x76 $x126)))
 (let (($x117 (and $x78 $x102)))
 (let (($x111 (and $x117 $x93)))
 (let (($x34 (and $x111 $x120)))
 (let (($x107 (and $x34 $x122)))
 (let (($x168 (and $x107 $x180)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and (not $x45) $x168)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x22 $x167)))
 (let (($x91 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x152 (and $x91 $x170)))
 (let (($x28 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x28 $x152)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x185 (and $x27 $x184)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x62 (and $x20 $x185)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x175 (and $x9 $x62)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x151 (and $x31 $x175)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x162 (and $x51 $x151)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x12 $x162)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x63 (and $x85 $x164)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x174 (and $x75 $x63)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x69 $x174)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x60 (and $x39 $x201)))
 (let (($x176 (=> $x60 $x142)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x138 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x129 (ite $x138 ?x128 (_ bv0 32))))
 (let ((?x140 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x132 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x133 (ite $x132 ?x140 ?x129)))
 (let (($x141 (bvsge ?x133 (_ bv0 32))))
 (let (($x137 (= $x141 true)))
 (let (($x142 (= $x137 true)))
 (let (($x163 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1728X)))
 (=> $x114 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1728X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1727X)))
 (= $x114 false)))
 ))
 (let (($x155 (and $x94 $x163)))
 (let (($x180 (= $x155 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x96)))
 (let (($x113 (= ?x13 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x113 true)))
 (let (($x122 (= $x123 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x110)))
 (let (($x109 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x109 true)))
 (let (($x120 (= $x116 true)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x49 (= $x10 true)))
 (let (($x74 (= $x49 true)))
 (let (($x93 (= $x74 true)))
 (let (($x127 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x95 (= $x127 true)))
 (let (($x73 (= $x95 true)))
 (let (($x102 (= $x73 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x125 $x82)))
 (let (($x99 (and $x83 $x118)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x108 $x99)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x112)))))))
 (let (($x70 (and $x89 $x43)))
 (let (($x124 (= $x70 true)))
 (let (($x64 (= $x124 true)))
 (let (($x126 (= $x64 true)))
 (let (($x7 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x33 (= $x77 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x100)))
 (let (($x160 (= ?x25 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x179 (= ?x25 input.dst.llvm-%n)))
 (let (($x35 (= $x179 true)))
 (let (($x199 (= $x35 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x41 true)))
 (let (($x48 (= $x153 true)))
 (let (($x181 (= $x48 true)))
 (let (($x46 (and $x181 $x199)))
 (let (($x56 (and $x46 $x159)))
 (let (($x76 (and $x56 $x33)))
 (let (($x78 (and $x76 $x126)))
 (let (($x117 (and $x78 $x102)))
 (let (($x111 (and $x117 $x93)))
 (let (($x34 (and $x111 $x120)))
 (let (($x107 (and $x34 $x122)))
 (let (($x168 (and $x107 $x180)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and (not $x45) $x168)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x22 $x167)))
 (let (($x91 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x152 (and $x91 $x170)))
 (let (($x28 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x28 $x152)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x185 (and $x27 $x184)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x62 (and $x20 $x185)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x175 (and $x9 $x62)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x151 (and $x31 $x175)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x162 (and $x51 $x151)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x12 $x162)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x63 (and $x85 $x164)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x174 (and $x75 $x63)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x69 $x174)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x60 (and $x39 $x201)))
 (let (($x176 (=> $x60 $x142)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (bvuge ?x141 (_ bv1 32))))
 (let (($x142 (= $x137 true)))
 (let (($x176 (= $x142 true)))
 (let (($x170 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1933X)))
 (=> $x122 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1933X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1932X)))
 (= $x122 false)))
 ))
 (let (($x152 (and $x50 $x170)))
 (let (($x184 (= $x152 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x109)))
 (let (($x120 (= ?x116 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x74 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x93 (= $x74 true)))
 (let (($x111 (= $x93 true)))
 (let (($x110 (= $x111 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x73 true)))
 (let (($x117 (= $x102 true)))
 (let (($x10 (= $x117 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x99)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x115 $x119)))
 (let (($x70 (and $x118 $x43)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x36 $x70)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x68)))))))
 (let (($x64 (and $x103 $x124)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x7 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x33 (= $x77 true)))
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x52)))
 (let (($x160 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x179 (= ?x100 input.dst.llvm-%n)))
 (let (($x35 (= $x179 true)))
 (let (($x199 (= $x35 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x57)))
 (let (($x153 (= ?x154 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x153 true)))
 (let (($x181 (= $x48 true)))
 (let (($x46 (and $x181 $x199)))
 (let (($x56 (and $x46 $x159)))
 (let (($x76 (and $x56 $x33)))
 (let (($x127 (and $x76 $x106)))
 (let (($x49 (and $x127 $x10)))
 (let (($x37 (and $x49 $x110)))
 (let (($x13 (and $x37 $x96)))
 (let (($x185 (and $x13 $x184)))
 (let (($x54 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and (not $x54) $x185)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and $x19 $x175)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x162 (and $x6 $x151)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x164 (and $x15 $x162)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x63 (and $x18 $x164)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x174 (and $x17 $x63)))
 (let (($x5 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x201 (and $x5 $x174)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x60 (and $x24 $x201)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x132 (and $x16 $x60)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x140 (and $x38 $x132)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x138 (and $x29 $x140)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x128 (and $x67 $x138)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x129 (and $x79 $x128)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x133 (and $x11 $x129)))
 (let (($x59 (=> $x133 $x176)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (bvuge ?x141 (_ bv1 32))))
 (let (($x142 (= $x137 true)))
 (let (($x176 (= $x142 true)))
 (let (($x170 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1933X)))
 (=> $x122 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1933X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1932X)))
 (= $x122 false)))
 ))
 (let (($x152 (and $x50 $x170)))
 (let (($x184 (= $x152 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x109)))
 (let (($x120 (= ?x116 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x120 true)))
 (let (($x96 (= $x34 true)))
 (let (($x74 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x93 (= $x74 true)))
 (let (($x111 (= $x93 true)))
 (let (($x110 (= $x111 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x73 true)))
 (let (($x117 (= $x102 true)))
 (let (($x10 (= $x117 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x99)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x115 $x119)))
 (let (($x70 (and $x118 $x43)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x36 $x70)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x68)))))))
 (let (($x64 (and $x103 $x124)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x7 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x42 (= $x7 true)))
 (let (($x77 (= $x42 true)))
 (let (($x33 (= $x77 true)))
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x52)))
 (let (($x160 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x160 true)))
 (let (($x159 (= $x53 true)))
 (let (($x179 (= ?x100 input.dst.llvm-%n)))
 (let (($x35 (= $x179 true)))
 (let (($x199 (= $x35 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x57)))
 (let (($x153 (= ?x154 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x153 true)))
 (let (($x181 (= $x48 true)))
 (let (($x46 (and $x181 $x199)))
 (let (($x56 (and $x46 $x159)))
 (let (($x76 (and $x56 $x33)))
 (let (($x127 (and $x76 $x106)))
 (let (($x49 (and $x127 $x10)))
 (let (($x37 (and $x49 $x110)))
 (let (($x13 (and $x37 $x96)))
 (let (($x185 (and $x13 $x184)))
 (let (($x54 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and (not $x54) $x185)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and $x19 $x175)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x162 (and $x6 $x151)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x164 (and $x15 $x162)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x63 (and $x18 $x164)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x174 (and $x17 $x63)))
 (let (($x5 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x201 (and $x5 $x174)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x60 (and $x24 $x201)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x132 (and $x16 $x60)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x140 (and $x38 $x132)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x138 (and $x29 $x140)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x128 (and $x67 $x138)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x129 (and $x79 $x128)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x133 (and $x11 $x129)))
 (let (($x59 (=> $x133 $x176)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x176 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x40 (ite $x176 ?x59 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x137 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x92 (ite $x137 ?x142 ?x40)))
 (let ((?x107 (bvmul (_ bv4294967295 32) ?x92)))
 (let ((?x163 (bvneg ?x107)))
 (let (($x88 (= ?x163 ?x32)))
 (let (($x113 (= $x88 true)))
 (let (($x170 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2092X)))
 (= $x37 false)))
 ))
 (let (($x114 (forall ((input.ind-%var2093X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2093X)))
 (=> $x37 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2093X) (_ bv0 32)))))
 ))
 (let (($x152 (and $x114 $x170)))
 (let (($x184 (= $x152 true)))
 (let ((?x95 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x95)))
 (let (($x117 (= ?x73 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x70)))
 (let (($x64 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x83 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x83 true)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x68)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x125 $x71)))
 (let (($x89 (and $x112 $x80)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x35 $x89)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x7)))))))
 (let (($x108 (and $x81 $x26)))
 (let (($x103 (= $x108 true)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x62)))
 (let (($x153 (= ?x45 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (= $x153 true)))
 (let (($x181 (= $x48 true)))
 (let (($x57 (= ?x45 input.dst.llvm-%n)))
 (let (($x154 (= $x57 true)))
 (let (($x41 (= $x154 true)))
 (let (($x52 (and $x41 $x181)))
 (let (($x115 (and $x52 $x36)))
 (let (($x43 (and $x115 $x99)))
 (let (($x106 (and $x43 $x78)))
 (let (($x74 (and $x106 $x49)))
 (let (($x185 (and $x74 $x184)))
 (let (($x22 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and (not $x22) $x185)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and $x14 $x151)))
 (let (($x28 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x164 (and $x28 $x162)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x63 (and $x23 $x164)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x174 (and $x20 $x63)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x201 (and $x9 $x174)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x60 (and $x8 $x201)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x132 (and $x21 $x60)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x140 (and $x12 $x132)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x138 (and $x85 $x140)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x128 (and $x75 $x138)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x129 (and $x69 $x128)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x133 (and $x58 $x129)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x141 (and $x39 $x133)))
 (let (($x105 (=> $x141 $x113)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x176 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x40 (ite $x176 ?x59 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x137 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x92 (ite $x137 ?x142 ?x40)))
 (let ((?x107 (bvmul (_ bv4294967295 32) ?x92)))
 (let ((?x163 (bvneg ?x107)))
 (let (($x88 (= ?x163 ?x32)))
 (let (($x113 (= $x88 true)))
 (let (($x170 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2092X)))
 (= $x37 false)))
 ))
 (let (($x114 (forall ((input.ind-%var2093X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2093X)))
 (=> $x37 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2093X) (_ bv0 32)))))
 ))
 (let (($x152 (and $x114 $x170)))
 (let (($x184 (= $x152 true)))
 (let ((?x95 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x95)))
 (let (($x117 (= ?x73 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x70)))
 (let (($x64 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x83 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x83 true)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x68)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x125 $x71)))
 (let (($x89 (and $x112 $x80)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x35 $x89)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x7)))))))
 (let (($x108 (and $x81 $x26)))
 (let (($x103 (= $x108 true)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x62)))
 (let (($x153 (= ?x45 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (= $x153 true)))
 (let (($x181 (= $x48 true)))
 (let (($x57 (= ?x45 input.dst.llvm-%n)))
 (let (($x154 (= $x57 true)))
 (let (($x41 (= $x154 true)))
 (let (($x52 (and $x41 $x181)))
 (let (($x115 (and $x52 $x36)))
 (let (($x43 (and $x115 $x99)))
 (let (($x106 (and $x43 $x78)))
 (let (($x74 (and $x106 $x49)))
 (let (($x185 (and $x74 $x184)))
 (let (($x22 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and (not $x22) $x185)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and $x14 $x151)))
 (let (($x28 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x164 (and $x28 $x162)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x63 (and $x23 $x164)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x174 (and $x20 $x63)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x201 (and $x9 $x174)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x60 (and $x8 $x201)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x132 (and $x21 $x60)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x140 (and $x12 $x132)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x138 (and $x85 $x140)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x128 (and $x75 $x138)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x129 (and $x69 $x128)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x133 (and $x58 $x129)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x141 (and $x39 $x133)))
 (let (($x105 (=> $x141 $x113)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x25 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x34 (ite $x25 ?x109 (_ bv0 32))))
 (let ((?x155 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x105 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x93 (ite $x105 ?x155 ?x34)))
 (let ((?x116 (bvmul (_ bv4294967295 32) ?x93)))
 (let ((?x189 (bvneg ?x116)))
 (let (($x96 (= ?x189 ?x168)))
 (let (($x111 (= $x96 true)))
 (let (($x60 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2134X)))
 (=> $x123 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2134X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var2133X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2133X)))
 (= $x123 false)))
 ))
 (let (($x132 (and $x170 $x60)))
 (let (($x140 (= $x132 true)))
 (let ((?x95 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x95)))
 (let (($x117 (= ?x73 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x70)))
 (let (($x64 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x83 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x83 true)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x68)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x125 $x71)))
 (let (($x89 (and $x112 $x80)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x46 $x89)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x42)))))))
 (let (($x108 (and $x35 $x26)))
 (let (($x103 (= $x108 true)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x175)))
 (let (($x154 (= ?x54 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x154 true)))
 (let (($x153 (= $x41 true)))
 (let (($x45 (= ?x54 input.dst.llvm-%n)))
 (let (($x84 (= $x45 true)))
 (let (($x57 (= $x84 true)))
 (let (($x48 (and $x57 $x153)))
 (let (($x115 (and $x48 $x36)))
 (let (($x43 (and $x115 $x99)))
 (let (($x106 (and $x43 $x78)))
 (let (($x74 (and $x106 $x49)))
 (let (($x138 (and $x74 $x140)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and (not $x19) $x138)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and $x91 $x129)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x141 (and $x15 $x133)))
 (let (($x27 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x137 (and $x27 $x141)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x17 $x137)))
 (let (($x5 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x176 (and $x5 $x142)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x59 (and $x31 $x176)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x40 (and $x51 $x59)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x92 (and $x38 $x40)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x107 (and $x29 $x92)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x163 (and $x67 $x107)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x32 (and $x79 $x163)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x88 (and $x44 $x32)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x113 (and $x11 $x88)))
 (let (($x13 (=> $x113 $x111)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x25 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x34 (ite $x25 ?x109 (_ bv0 32))))
 (let ((?x155 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x105 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x93 (ite $x105 ?x155 ?x34)))
 (let ((?x116 (bvmul (_ bv4294967295 32) ?x93)))
 (let ((?x189 (bvneg ?x116)))
 (let (($x96 (= ?x189 ?x168)))
 (let (($x111 (= $x96 true)))
 (let (($x60 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2134X)))
 (=> $x123 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2134X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var2133X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2133X)))
 (= $x123 false)))
 ))
 (let (($x132 (and $x170 $x60)))
 (let (($x140 (= $x132 true)))
 (let ((?x95 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x95)))
 (let (($x117 (= ?x73 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x117 true)))
 (let (($x49 (= $x10 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x70)))
 (let (($x64 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x83 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x83 true)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x68)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x125 $x71)))
 (let (($x89 (and $x112 $x80)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x46 $x89)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x42)))))))
 (let (($x108 (and $x35 $x26)))
 (let (($x103 (= $x108 true)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x175)))
 (let (($x154 (= ?x54 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x154 true)))
 (let (($x153 (= $x41 true)))
 (let (($x45 (= ?x54 input.dst.llvm-%n)))
 (let (($x84 (= $x45 true)))
 (let (($x57 (= $x84 true)))
 (let (($x48 (and $x57 $x153)))
 (let (($x115 (and $x48 $x36)))
 (let (($x43 (and $x115 $x99)))
 (let (($x106 (and $x43 $x78)))
 (let (($x74 (and $x106 $x49)))
 (let (($x138 (and $x74 $x140)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and (not $x19) $x138)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and $x91 $x129)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x141 (and $x15 $x133)))
 (let (($x27 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x137 (and $x27 $x141)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x17 $x137)))
 (let (($x5 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x176 (and $x5 $x142)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x59 (and $x31 $x176)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x40 (and $x51 $x59)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x92 (and $x38 $x40)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x107 (and $x29 $x92)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x163 (and $x67 $x107)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x32 (and $x79 $x163)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x88 (and $x44 $x32)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x113 (and $x11 $x88)))
 (let (($x13 (=> $x113 $x111)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (not $x93)))
 (let (($x109 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (not $x109)))
 (let (($x189 (or $x34 $x116)))
 (let (($x168 (= $x189 true)))
 (let (($x96 (= $x168 true)))
 (let (($x129 (forall ((input.ind-%var2175X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2175X)))
 (=> $x10 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2175X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var2174X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2174X)))
 (= $x10 false)))
 ))
 (let (($x133 (and $x123 $x129)))
 (let (($x141 (= $x133 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x124)))
 (let (($x78 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (= $x78 true)))
 (let (($x127 (= $x106 true)))
 (let ((?x108 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x108)))
 (let (($x119 (= ?x103 input.dst.llvm-%n)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let (($x97 (= ?x103 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x125)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x76 $x199)))
 (let (($x30 (and $x46 $x65)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x154 $x30)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x159)))))))
 (let (($x112 (and $x33 $x71)))
 (let (($x68 (= $x112 true)))
 (let (($x80 (= $x68 true)))
 (let (($x89 (= $x80 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x19)))
 (let (($x175 (= ?x128 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x175 true)))
 (let (($x62 (= $x54 true)))
 (let (($x26 (and $x62 $x89)))
 (let (($x82 (and $x26 $x115)))
 (let (($x43 (and $x82 $x99)))
 (let (($x95 (and $x43 $x127)))
 (let (($x137 (and $x95 $x141)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x6 $x137)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x23 $x142)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x59 (and $x18 $x176)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x40 (and $x9 $x59)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x92 (and $x8 $x40)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x107 (and $x24 $x92)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x16 $x107)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x32 (and $x85 $x163)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x88 (and $x75 $x32)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x113 (and $x69 $x88)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x105 (and $x58 $x113)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x155 (and $x100 $x105)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x25 (and $x39 $x155)))
 (let (($x111 (=> $x25 $x96)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (not $x93)))
 (let (($x109 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (not $x109)))
 (let (($x189 (or $x34 $x116)))
 (let (($x168 (= $x189 true)))
 (let (($x96 (= $x168 true)))
 (let (($x129 (forall ((input.ind-%var2175X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2175X)))
 (=> $x10 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2175X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var2174X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2174X)))
 (= $x10 false)))
 ))
 (let (($x133 (and $x123 $x129)))
 (let (($x141 (= $x133 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x124)))
 (let (($x78 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (= $x78 true)))
 (let (($x127 (= $x106 true)))
 (let ((?x108 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x108)))
 (let (($x119 (= ?x103 input.dst.llvm-%n)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let (($x97 (= ?x103 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x125)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x76 $x199)))
 (let (($x30 (and $x46 $x65)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x154 $x30)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x159)))))))
 (let (($x112 (and $x33 $x71)))
 (let (($x68 (= $x112 true)))
 (let (($x80 (= $x68 true)))
 (let (($x89 (= $x80 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x19)))
 (let (($x175 (= ?x128 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x175 true)))
 (let (($x62 (= $x54 true)))
 (let (($x26 (and $x62 $x89)))
 (let (($x82 (and $x26 $x115)))
 (let (($x43 (and $x82 $x99)))
 (let (($x95 (and $x43 $x127)))
 (let (($x137 (and $x95 $x141)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x6 $x137)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x23 $x142)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x59 (and $x18 $x176)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x40 (and $x9 $x59)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x92 (and $x8 $x40)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x107 (and $x24 $x92)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x16 $x107)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x32 (and $x85 $x163)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x88 (and $x75 $x32)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x113 (and $x69 $x88)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x105 (and $x58 $x113)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x155 (and $x100 $x105)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x25 (and $x39 $x155)))
 (let (($x111 (=> $x25 $x96)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 112 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x162 (ite $x52 ?x122 (_ bv0 32))))
 (let ((?x94 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x152 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x185 (ite $x152 ?x94 ?x162)))
 (let ((?x110 (bvmul (_ bv4294967295 32) ?x185)))
 (let ((?x37 (bvneg ?x110)))
 (let (($x164 (= ?x37 ?x114)))
 (let (($x184 (= $x164 true)))
 (let (($x109 (forall ((input.ind-%var2181X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2181X)))
 (=> $x137 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2181X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2180X)))
 (= $x137 false)))
 ))
 (let (($x34 (and $x40 $x109)))
 (let (($x93 (= $x34 true)))
 (let ((?x117 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x117)))
 (let (($x123 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x123 true)))
 (let (($x140 (= $x174 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x124)))
 (let (($x126 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let (($x43 (= $x99 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x65 $x112)))
 (let (($x26 (and $x68 $x89)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x159 $x26)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x154)))))))
 (let (($x103 (and $x125 $x108)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x19)))
 (let (($x41 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (= $x41 true)))
 (let (($x77 (= $x153 true)))
 (let (($x175 (= ?x128 input.dst.llvm-%n)))
 (let (($x54 (= $x175 true)))
 (let (($x62 (= $x54 true)))
 (let (($x48 (and $x62 $x77)))
 (let (($x82 (and $x48 $x115)))
 (let (($x70 (and $x82 $x43)))
 (let (($x127 (and $x70 $x106)))
 (let (($x138 (and $x127 $x140)))
 (let (($x116 (and $x138 $x93)))
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x91) $x116)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x28 $x168)))
 (let (($x27 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x111 (and $x27 $x96)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x13 (and $x20 $x111)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x84 (and $x5 $x13)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x49 (and $x31 $x84)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x201 (and $x21 $x49)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x151 (and $x12 $x201)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x73 (and $x29 $x151)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x102 (and $x67 $x73)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x74 (and $x79 $x102)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x60 (and $x44 $x74)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x181 $x60)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x132 (and $x11 $x170)))
 (let (($x63 (=> $x132 $x184)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x162 (ite $x52 ?x122 (_ bv0 32))))
 (let ((?x94 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x152 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x185 (ite $x152 ?x94 ?x162)))
 (let ((?x110 (bvmul (_ bv4294967295 32) ?x185)))
 (let ((?x37 (bvneg ?x110)))
 (let (($x164 (= ?x37 ?x114)))
 (let (($x184 (= $x164 true)))
 (let (($x109 (forall ((input.ind-%var2181X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2181X)))
 (=> $x137 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2181X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2180X)))
 (= $x137 false)))
 ))
 (let (($x34 (and $x40 $x109)))
 (let (($x93 (= $x34 true)))
 (let ((?x117 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x117)))
 (let (($x123 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x123 true)))
 (let (($x140 (= $x174 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x124)))
 (let (($x126 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let (($x43 (= $x99 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x65 $x112)))
 (let (($x26 (and $x68 $x89)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x159 $x26)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x154)))))))
 (let (($x103 (and $x125 $x108)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x19)))
 (let (($x41 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (= $x41 true)))
 (let (($x77 (= $x153 true)))
 (let (($x175 (= ?x128 input.dst.llvm-%n)))
 (let (($x54 (= $x175 true)))
 (let (($x62 (= $x54 true)))
 (let (($x48 (and $x62 $x77)))
 (let (($x82 (and $x48 $x115)))
 (let (($x70 (and $x82 $x43)))
 (let (($x127 (and $x70 $x106)))
 (let (($x138 (and $x127 $x140)))
 (let (($x116 (and $x138 $x93)))
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x91) $x116)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x28 $x168)))
 (let (($x27 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x111 (and $x27 $x96)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x13 (and $x20 $x111)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x84 (and $x5 $x13)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x49 (and $x31 $x84)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x201 (and $x21 $x49)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x151 (and $x12 $x201)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x73 (and $x29 $x151)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x102 (and $x67 $x73)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x74 (and $x79 $x102)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x60 (and $x44 $x74)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x181 $x60)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x132 (and $x11 $x170)))
 (let (($x63 (=> $x132 $x184)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x179 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x88 (ite $x179 ?x142 (_ bv0 32))))
 (let ((?x50 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x63 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x163 (ite $x63 ?x50 ?x88)))
 (let ((?x129 (bvmul (_ bv4294967295 32) ?x163)))
 (let ((?x133 (bvneg ?x129)))
 (let (($x113 (= ?x133 ?x176)))
 (let (($x107 (= $x113 true)))
 (let (($x201 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2222X)))
 (=> $x40 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2222X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var2221X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2221X)))
 (= $x40 false)))
 ))
 (let (($x151 (and $x109 $x201)))
 (let (($x73 (= $x151 true)))
 (let ((?x117 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x117)))
 (let (($x123 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x123 true)))
 (let (($x140 (= $x174 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x124)))
 (let (($x126 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let (($x43 (= $x99 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x65 $x112)))
 (let (($x26 (and $x68 $x89)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x7 $x26)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x76)))))))
 (let (($x103 (and $x159 $x108)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let ((?x189 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x189)))
 (let (($x54 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x54 true)))
 (let (($x41 (= $x62 true)))
 (let (($x128 (= ?x14 input.dst.llvm-%n)))
 (let (($x22 (= $x128 true)))
 (let (($x175 (= $x22 true)))
 (let (($x153 (and $x175 $x41)))
 (let (($x82 (and $x153 $x115)))
 (let (($x70 (and $x82 $x43)))
 (let (($x127 (and $x70 $x106)))
 (let (($x138 (and $x127 $x140)))
 (let (($x102 (and $x138 $x73)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and (not $x6) $x102)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x15 $x60)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x132 (and $x18 $x170)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x152 (and $x17 $x132)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x94 (and $x8 $x152)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x52 (and $x24 $x94)))
 (let (($x51 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x122 (and $x51 $x52)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x162 (and $x38 $x122)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x185 (and $x75 $x162)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x110 (and $x69 $x185)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x37 (and $x58 $x110)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x114 (and $x100 $x37)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x45 $x114)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x184 (and $x39 $x164)))
 (let (($x105 (=> $x184 $x107)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x179 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x88 (ite $x179 ?x142 (_ bv0 32))))
 (let ((?x50 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x63 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x163 (ite $x63 ?x50 ?x88)))
 (let ((?x129 (bvmul (_ bv4294967295 32) ?x163)))
 (let ((?x133 (bvneg ?x129)))
 (let (($x113 (= ?x133 ?x176)))
 (let (($x107 (= $x113 true)))
 (let (($x201 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2222X)))
 (=> $x40 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2222X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var2221X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2221X)))
 (= $x40 false)))
 ))
 (let (($x151 (and $x109 $x201)))
 (let (($x73 (= $x151 true)))
 (let ((?x117 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x117)))
 (let (($x123 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x123 true)))
 (let (($x140 (= $x174 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x124)))
 (let (($x126 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x119 true)))
 (let (($x99 (= $x118 true)))
 (let (($x43 (= $x99 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x65 $x112)))
 (let (($x26 (and $x68 $x89)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x7 $x26)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x76)))))))
 (let (($x103 (and $x159 $x108)))
 (let (($x97 (= $x103 true)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let ((?x189 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x189)))
 (let (($x54 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x54 true)))
 (let (($x41 (= $x62 true)))
 (let (($x128 (= ?x14 input.dst.llvm-%n)))
 (let (($x22 (= $x128 true)))
 (let (($x175 (= $x22 true)))
 (let (($x153 (and $x175 $x41)))
 (let (($x82 (and $x153 $x115)))
 (let (($x70 (and $x82 $x43)))
 (let (($x127 (and $x70 $x106)))
 (let (($x138 (and $x127 $x140)))
 (let (($x102 (and $x138 $x73)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and (not $x6) $x102)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x15 $x60)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x132 (and $x18 $x170)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x152 (and $x17 $x132)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x94 (and $x8 $x152)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x52 (and $x24 $x94)))
 (let (($x51 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x122 (and $x51 $x52)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x162 (and $x38 $x122)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x185 (and $x75 $x162)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x110 (and $x69 $x185)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x37 (and $x58 $x110)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x114 (and $x100 $x37)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x45 $x114)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x184 (and $x39 $x164)))
 (let (($x105 (=> $x184 $x107)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (not $x142)))
 (let (($x163 (= $x88 false)))
 (let (($x129 (= $x163 true)))
 (let (($x60 (forall ((input.ind-%var2263X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2263X)))
 (=> $x174 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2263X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var2262X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2262X)))
 (= $x174 false)))
 ))
 (let (($x170 (and $x40 $x60)))
 (let (($x132 (= $x170 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x64)))
 (let (($x106 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x106 true)))
 (let (($x95 (= $x127 true)))
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x128)))
 (let (($x118 (= ?x22 input.dst.llvm-%n)))
 (let (($x99 (= $x118 true)))
 (let (($x43 (= $x99 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x89)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x30 $x68)))
 (let (($x108 (and $x80 $x26)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x47 $x108)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x35)))))))
 (let (($x97 (and $x65 $x103)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let (($x82 (= $x115 true)))
 (let (($x175 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x175 true)))
 (let (($x62 (= $x54 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x6)))
 (let (($x189 (= ?x74 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x189 true)))
 (let (($x19 (= $x14 true)))
 (let (($x41 (and $x19 $x62)))
 (let (($x83 (and $x41 $x82)))
 (let (($x70 (and $x83 $x43)))
 (let (($x117 (and $x70 $x95)))
 (let (($x152 (and $x117 $x132)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x23 $x152)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x52 (and $x20 $x94)))
 (let (($x9 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x122 (and $x9 $x52)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x162 (and $x31 $x122)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x185 (and $x21 $x162)))
 (let (($x16 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x16 $x185)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x37 (and $x85 $x110)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x114 (and $x67 $x37)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x79 $x114)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x184 (and $x44 $x164)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x63 (and $x181 $x184)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x50 (and $x160 $x63)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x179 (and $x11 $x50)))
 (let (($x133 (=> $x179 $x129)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (not $x142)))
 (let (($x163 (= $x88 false)))
 (let (($x129 (= $x163 true)))
 (let (($x60 (forall ((input.ind-%var2263X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2263X)))
 (=> $x174 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2263X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var2262X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2262X)))
 (= $x174 false)))
 ))
 (let (($x170 (and $x40 $x60)))
 (let (($x132 (= $x170 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x64)))
 (let (($x106 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x106 true)))
 (let (($x95 (= $x127 true)))
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x128)))
 (let (($x118 (= ?x22 input.dst.llvm-%n)))
 (let (($x99 (= $x118 true)))
 (let (($x43 (= $x99 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x89)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x30 $x68)))
 (let (($x108 (and $x80 $x26)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x47 $x108)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x35)))))))
 (let (($x97 (and $x65 $x103)))
 (let (($x36 (= $x97 true)))
 (let (($x115 (= $x36 true)))
 (let (($x82 (= $x115 true)))
 (let (($x175 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x175 true)))
 (let (($x62 (= $x54 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x6)))
 (let (($x189 (= ?x74 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x189 true)))
 (let (($x19 (= $x14 true)))
 (let (($x41 (and $x19 $x62)))
 (let (($x83 (and $x41 $x82)))
 (let (($x70 (and $x83 $x43)))
 (let (($x117 (and $x70 $x95)))
 (let (($x152 (and $x117 $x132)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x23 $x152)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x52 (and $x20 $x94)))
 (let (($x9 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x122 (and $x9 $x52)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x162 (and $x31 $x122)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x185 (and $x21 $x162)))
 (let (($x16 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x16 $x185)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x37 (and $x85 $x110)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x114 (and $x67 $x37)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x79 $x114)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x184 (and $x44 $x164)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x63 (and $x181 $x184)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x50 (and $x160 $x63)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x179 (and $x11 $x50)))
 (let (($x133 (=> $x179 $x129)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (or $x120 $x138)))
 (let (($x109 (= $x201 true)))
 (let (($x151 (= $x109 true)))
 (let (($x114 (forall ((input.ind-%var2352X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2352X)))
 (=> $x84 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2352X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var2351X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2351X)))
 (= $x84 false)))
 ))
 (let (($x164 (and $x170 $x114)))
 (let (($x184 (= $x164 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x126)))
 (let (($x127 (= ?x78 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x127 true)))
 (let (($x117 (= $x95 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x97)))
 (let (($x99 (= ?x36 input.dst.llvm-%n)))
 (let (($x43 (= $x99 true)))
 (let (($x70 (= $x43 true)))
 (let (($x115 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (= $x115 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x30)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x159 $x56)))
 (let (($x112 (and $x47 $x71)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x175 $x112)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x154)))))))
 (let (($x80 (and $x125 $x68)))
 (let (($x89 (= $x80 true)))
 (let (($x26 (= $x89 true)))
 (let (($x108 (= $x26 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x28)))
 (let (($x91 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x91 true)))
 (let (($x14 (= $x189 true)))
 (let (($x103 (and $x14 $x108)))
 (let (($x119 (and $x103 $x83)))
 (let (($x124 (and $x119 $x70)))
 (let (($x123 (and $x124 $x117)))
 (let (($x63 (and $x123 $x184)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and $x27 $x63)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x179 (and $x17 $x50)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x142 (and $x5 $x179)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x88 (and $x24 $x142)))
 (let (($x51 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x51 $x88)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x129 (and $x12 $x163)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x133 (and $x29 $x129)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x176 (and $x69 $x133)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x46 (and $x58 $x176)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x140 (and $x100 $x46)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x49 (and $x45 $x140)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x168 (and $x61 $x49)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x10 (and $x160 $x168)))
 (let (($x34 (=> $x10 $x151)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (or $x120 $x138)))
 (let (($x109 (= $x201 true)))
 (let (($x151 (= $x109 true)))
 (let (($x114 (forall ((input.ind-%var2352X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2352X)))
 (=> $x84 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2352X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var2351X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2351X)))
 (= $x84 false)))
 ))
 (let (($x164 (and $x170 $x114)))
 (let (($x184 (= $x164 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x126)))
 (let (($x127 (= ?x78 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x127 true)))
 (let (($x117 (= $x95 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x97)))
 (let (($x99 (= ?x36 input.dst.llvm-%n)))
 (let (($x43 (= $x99 true)))
 (let (($x70 (= $x43 true)))
 (let (($x115 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (= $x115 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x30)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x159 $x56)))
 (let (($x112 (and $x47 $x71)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x175 $x112)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x154)))))))
 (let (($x80 (and $x125 $x68)))
 (let (($x89 (= $x80 true)))
 (let (($x26 (= $x89 true)))
 (let (($x108 (= $x26 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x28)))
 (let (($x91 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x91 true)))
 (let (($x14 (= $x189 true)))
 (let (($x103 (and $x14 $x108)))
 (let (($x119 (and $x103 $x83)))
 (let (($x124 (and $x119 $x70)))
 (let (($x123 (and $x124 $x117)))
 (let (($x63 (and $x123 $x184)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and $x27 $x63)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x179 (and $x17 $x50)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x142 (and $x5 $x179)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x88 (and $x24 $x142)))
 (let (($x51 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x51 $x88)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x129 (and $x12 $x163)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x133 (and $x29 $x129)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x176 (and $x69 $x133)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x46 (and $x58 $x176)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x140 (and $x100 $x46)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x49 (and $x45 $x140)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x168 (and $x61 $x49)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x10 (and $x160 $x168)))
 (let (($x34 (=> $x10 $x151)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 110 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x105 true)))
 (let (($x48 (= $x167 true)))
 (let (($x201 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2364X)))
 (=> $x179 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2364X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2363X)))
 (= $x179 false)))
 ))
 (let (($x109 (and $x129 $x201)))
 (let (($x151 (= $x109 true)))
 (let ((?x60 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x60)))
 (let (($x110 (= ?x170 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x110 true)))
 (let (($x114 (= $x37 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x64)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x118 $x70)))
 (let (($x78 (and $x124 $x126)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x71 $x78)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x103)))))))
 (let (($x127 (and $x119 $x106)))
 (let (($x95 (= $x127 true)))
 (let (($x117 (= $x95 true)))
 (let (($x123 (= $x117 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x76)))
 (let (($x175 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (= $x175 true)))
 (let (($x53 (= $x159 true)))
 (let (($x57 (= ?x81 input.dst.llvm-%n)))
 (let (($x35 (= $x57 true)))
 (let (($x125 (= $x35 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x199)))
 (let (($x42 (= ?x41 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x42 true)))
 (let (($x33 (= $x7 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x74)))
 (let (($x189 (= $x91 true)))
 (let (($x14 (= $x189 true)))
 (let (($x54 (= $x14 true)))
 (let (($x154 (and $x54 $x33)))
 (let (($x22 (and $x154 $x125)))
 (let (($x65 (and $x22 $x53)))
 (let (($x40 (and $x65 $x123)))
 (let (($x164 (and $x40 $x114)))
 (let (($x34 (and $x164 $x151)))
 (let (($x15 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and $x15 $x34)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x18 $x113)))
 (let (($x9 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x128 (and $x9 $x19)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x8 $x128)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x122 (and $x21 $x73)))
 (let (($x16 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x94 (and $x16 $x122)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x174 (and $x38 $x94)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x59 (and $x75 $x174)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x102 (and $x79 $x59)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x162 (and $x44 $x102)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x152 (and $x181 $x162)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x185 (and $x77 $x152)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x25 (and $x153 $x185)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x107 (and $x39 $x25)))
 (let (($x32 (=> $x107 $x48)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x105 true)))
 (let (($x48 (= $x167 true)))
 (let (($x201 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2364X)))
 (=> $x179 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2364X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2363X)))
 (= $x179 false)))
 ))
 (let (($x109 (and $x129 $x201)))
 (let (($x151 (= $x109 true)))
 (let ((?x60 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x60)))
 (let (($x110 (= ?x170 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x110 true)))
 (let (($x114 (= $x37 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x64)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x118 $x70)))
 (let (($x78 (and $x124 $x126)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x71 $x78)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x103)))))))
 (let (($x127 (and $x119 $x106)))
 (let (($x95 (= $x127 true)))
 (let (($x117 (= $x95 true)))
 (let (($x123 (= $x117 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x76)))
 (let (($x175 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (= $x175 true)))
 (let (($x53 (= $x159 true)))
 (let (($x57 (= ?x81 input.dst.llvm-%n)))
 (let (($x35 (= $x57 true)))
 (let (($x125 (= $x35 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x199)))
 (let (($x42 (= ?x41 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x42 true)))
 (let (($x33 (= $x7 true)))
 (let (($x74 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x74)))
 (let (($x189 (= $x91 true)))
 (let (($x14 (= $x189 true)))
 (let (($x54 (= $x14 true)))
 (let (($x154 (and $x54 $x33)))
 (let (($x22 (and $x154 $x125)))
 (let (($x65 (and $x22 $x53)))
 (let (($x40 (and $x65 $x123)))
 (let (($x164 (and $x40 $x114)))
 (let (($x34 (and $x164 $x151)))
 (let (($x15 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and $x15 $x34)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x18 $x113)))
 (let (($x9 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x128 (and $x9 $x19)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x8 $x128)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x122 (and $x21 $x73)))
 (let (($x16 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x94 (and $x16 $x122)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x174 (and $x38 $x94)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x59 (and $x75 $x174)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x102 (and $x79 $x59)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x162 (and $x44 $x102)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x152 (and $x181 $x162)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x185 (and $x77 $x152)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x25 (and $x153 $x185)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x107 (and $x39 $x25)))
 (let (($x32 (=> $x107 $x48)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 116 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (not $x32)))
 (let (($x47 (or $x32 $x96)))
 (let (($x142 (= $x47 true)))
 (let (($x49 (= $x142 true)))
 (let (($x113 (forall ((input.ind-%var2370X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2370X)))
 (=> $x37 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2370X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var2369X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2369X)))
 (= $x37 false)))
 ))
 (let (($x19 (and $x179 $x113)))
 (let (($x128 (= $x19 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x127)))
 (let (($x123 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x123 true)))
 (let (($x84 (= $x40 true)))
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x14)))
 (let (($x124 (= ?x54 input.dst.llvm-%n)))
 (let (($x64 (= $x124 true)))
 (let (($x126 (= $x64 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x36)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x26 $x103)))
 (let (($x82 (and $x97 $x115)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x76 $x82)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x159)))))))
 (let (($x30 (and $x80 $x119)))
 (let (($x71 (= $x30 true)))
 (let (($x118 (= $x71 true)))
 (let (($x99 (= $x118 true)))
 (let (($x62 (= ?x54 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x62 true)))
 (let (($x41 (= $x199 true)))
 (let ((?x15 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x15)))
 (let (($x74 (= ?x28 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x74 true)))
 (let (($x189 (= $x91 true)))
 (let (($x42 (and $x189 $x41)))
 (let (($x43 (and $x42 $x99)))
 (let (($x78 (and $x43 $x126)))
 (let (($x60 (and $x78 $x84)))
 (let (($x73 (and $x60 $x128)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and $x20 $x73)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x94 (and $x5 $x122)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x174 (and $x31 $x94)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x59 (and $x51 $x174)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x102 (and $x12 $x59)))
 (let (($x85 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x162 (and $x85 $x102)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x152 (and $x67 $x162)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x185 (and $x58 $x152)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x25 (and $x100 $x185)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x107 (and $x45 $x25)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x105 (and $x61 $x107)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x167 (and $x23 $x105)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x48 (and $x11 $x167)))
 (let (($x46 (=> $x48 $x49)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (not $x32)))
 (let (($x47 (or $x32 $x96)))
 (let (($x142 (= $x47 true)))
 (let (($x49 (= $x142 true)))
 (let (($x113 (forall ((input.ind-%var2370X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2370X)))
 (=> $x37 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2370X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var2369X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2369X)))
 (= $x37 false)))
 ))
 (let (($x19 (and $x179 $x113)))
 (let (($x128 (= $x19 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x127)))
 (let (($x123 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x123 true)))
 (let (($x84 (= $x40 true)))
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x14)))
 (let (($x124 (= ?x54 input.dst.llvm-%n)))
 (let (($x64 (= $x124 true)))
 (let (($x126 (= $x64 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x36)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x26 $x103)))
 (let (($x82 (and $x97 $x115)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x76 $x82)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x159)))))))
 (let (($x30 (and $x80 $x119)))
 (let (($x71 (= $x30 true)))
 (let (($x118 (= $x71 true)))
 (let (($x99 (= $x118 true)))
 (let (($x62 (= ?x54 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x62 true)))
 (let (($x41 (= $x199 true)))
 (let ((?x15 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x15)))
 (let (($x74 (= ?x28 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x74 true)))
 (let (($x189 (= $x91 true)))
 (let (($x42 (and $x189 $x41)))
 (let (($x43 (and $x42 $x99)))
 (let (($x78 (and $x43 $x126)))
 (let (($x60 (and $x78 $x84)))
 (let (($x73 (and $x60 $x128)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and $x20 $x73)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x94 (and $x5 $x122)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x174 (and $x31 $x94)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x59 (and $x51 $x174)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x102 (and $x12 $x59)))
 (let (($x85 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x162 (and $x85 $x102)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x152 (and $x67 $x162)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x185 (and $x58 $x152)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x25 (and $x100 $x185)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x107 (and $x45 $x25)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x105 (and $x61 $x107)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x167 (and $x23 $x105)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x48 (and $x11 $x167)))
 (let (($x46 (=> $x48 $x49)))
 (not $x46)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 110 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x65)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x22 $x159)))
 (let (($x68 (and $x53 $x112)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x35 $x68)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x54)))))))
 (let (($x46 (and $x57 $x80)))
 (let (($x184 (= $x46 true)))
 (let (($x33 (= $x184 true)))
 (let (($x94 (forall ((input.ind-%var2376X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2376X)))
 (=> $x84 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2376X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var2375X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2375X)))
 (= $x84 false)))
 ))
 (let (($x174 (and $x50 $x94)))
 (let (($x59 (= $x174 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x30 (concat ?x115 (concat ?x89 ?x26)))))
 (let (($x78 (= ?x71 input.dst.llvm-%n)))
 (let (($x106 (= $x78 true)))
 (let (($x127 (= $x106 true)))
 (let (($x118 (= input.dst.llvm-%n ?x71)))
 (let (($x70 (and (and (and $x57 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x80) $x118)))
 (let (($x124 (= $x70 true)))
 (let (($x64 (= $x124 true)))
 (let (($x126 (= $x64 true)))
 (let (($x95 (and $x126 $x127)))
 (let (($x102 (and $x95 $x59)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and $x17 $x102)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x152 (and $x8 $x162)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x185 (and $x24 $x152)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x25 (and $x16 $x185)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x107 (and $x38 $x25)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x105 (and $x29 $x107)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x167 (and $x69 $x105)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x48 (and $x44 $x167)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x32 (and $x181 $x48)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x96 (and $x77 $x32)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x47 (and $x153 $x96)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x142 (and $x56 $x47)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x49 (and $x39 $x142)))
 (let (($x114 (=> $x49 $x33)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x65)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x22 $x159)))
 (let (($x68 (and $x53 $x112)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x35 $x68)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x54)))))))
 (let (($x46 (and $x57 $x80)))
 (let (($x184 (= $x46 true)))
 (let (($x33 (= $x184 true)))
 (let (($x94 (forall ((input.ind-%var2376X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2376X)))
 (=> $x84 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2376X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var2375X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2375X)))
 (= $x84 false)))
 ))
 (let (($x174 (and $x50 $x94)))
 (let (($x59 (= $x174 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x30 (concat ?x115 (concat ?x89 ?x26)))))
 (let (($x78 (= ?x71 input.dst.llvm-%n)))
 (let (($x106 (= $x78 true)))
 (let (($x127 (= $x106 true)))
 (let (($x118 (= input.dst.llvm-%n ?x71)))
 (let (($x70 (and (and (and $x57 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x80) $x118)))
 (let (($x124 (= $x70 true)))
 (let (($x64 (= $x124 true)))
 (let (($x126 (= $x64 true)))
 (let (($x95 (and $x126 $x127)))
 (let (($x102 (and $x95 $x59)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and $x17 $x102)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x152 (and $x8 $x162)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x185 (and $x24 $x152)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x25 (and $x16 $x185)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x107 (and $x38 $x25)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x105 (and $x29 $x107)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x167 (and $x69 $x105)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x48 (and $x44 $x167)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x32 (and $x181 $x48)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x96 (and $x77 $x32)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x47 (and $x153 $x96)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x142 (and $x56 $x47)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x49 (and $x39 $x142)))
 (let (($x114 (=> $x49 $x33)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x19)))
 (let (($x128 (= ?x120 input.dst.llvm-%n)))
 (let (($x163 (= $x128 true)))
 (let (($x32 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2382X)))
 (=> $x73 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2382X) (_ bv0 32)))))
 ))
 (let (($x59 (forall ((input.ind-%var2381X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2381X)))
 (= $x73 false)))
 ))
 (let (($x96 (and $x59 $x32)))
 (let (($x47 (= $x96 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x82 (concat ?x89 (concat ?x97 ?x119)))))
 (let (($x127 (= ?x71 input.dst.llvm-%n)))
 (let (($x95 (= $x127 true)))
 (let (($x40 (= $x95 true)))
 (let (($x118 (= input.dst.llvm-%n ?x71)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x65)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x22 $x159)))
 (let (($x68 (and $x53 $x112)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x35 $x68)))
 (let (($x81 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x199)))))))
 (let (($x64 (and (and (and $x99 $x81) $x80) $x118)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x84 (and $x106 $x40)))
 (let (($x142 (and $x84 $x47)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (and $x9 $x142)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x46 (and $x31 $x49)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x21 $x46)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x33 (and $x12 $x184)))
 (let (($x85 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x85 $x33)))
 (let (($x75 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x138 (and $x75 $x114)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x18 (and $x79 $x138)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x76 (and $x100 $x18)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x60 (and $x45 $x76)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x113 (and $x61 $x60)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x151 (and $x23 $x113)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x117 (and $x7 $x151)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x123 (and $x11 $x117)))
 (let (($x140 (=> $x123 $x163)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x19)))
 (let (($x128 (= ?x120 input.dst.llvm-%n)))
 (let (($x163 (= $x128 true)))
 (let (($x32 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2382X)))
 (=> $x73 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2382X) (_ bv0 32)))))
 ))
 (let (($x59 (forall ((input.ind-%var2381X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2381X)))
 (= $x73 false)))
 ))
 (let (($x96 (and $x59 $x32)))
 (let (($x47 (= $x96 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x82 (concat ?x89 (concat ?x97 ?x119)))))
 (let (($x127 (= ?x71 input.dst.llvm-%n)))
 (let (($x95 (= $x127 true)))
 (let (($x40 (= $x95 true)))
 (let (($x118 (= input.dst.llvm-%n ?x71)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x65)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x22 $x159)))
 (let (($x68 (and $x53 $x112)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x35 $x68)))
 (let (($x81 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x199)))))))
 (let (($x64 (and (and (and $x99 $x81) $x80) $x118)))
 (let (($x126 (= $x64 true)))
 (let (($x78 (= $x126 true)))
 (let (($x106 (= $x78 true)))
 (let (($x84 (and $x106 $x40)))
 (let (($x142 (and $x84 $x47)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (and $x9 $x142)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x46 (and $x31 $x49)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x21 $x46)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x33 (and $x12 $x184)))
 (let (($x85 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x85 $x33)))
 (let (($x75 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x138 (and $x75 $x114)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x18 (and $x79 $x138)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x76 (and $x100 $x18)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x60 (and $x45 $x76)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x113 (and $x61 $x60)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x151 (and $x23 $x113)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x117 (and $x7 $x151)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x123 (and $x11 $x117)))
 (let (($x140 (=> $x123 $x163)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x50)))
 (let (($x107 (= ?x94 input.spec-%var-n-1)))
 (let (($x162 (= $x107 true)))
 (let (($x60 (forall ((input.ind-%var2388X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2388X)))
 (=> $x167 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2388X) (_ bv0 32)))))
 ))
 (let (($x47 (forall ((input.ind-%var2387X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2387X)))
 (= $x167 false)))
 ))
 (let (($x113 (and $x47 $x60)))
 (let (($x151 (= $x113 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x6 (concat ?x42 (concat ?x62 ?x14)))))
 (let (($x78 (= input.dst.llvm-%n ?x81)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x71)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x97 $x36)))
 (let (($x64 (and $x26 $x118)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x159 $x64)))
 (let (($x125 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x43)))))))
 (let (($x95 (and (and (and $x30 $x125) $x126) $x78)))
 (let (($x40 (= $x95 true)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let (($x83 (= ?x81 input.dst.llvm-%n)))
 (let (($x35 (= $x83 true)))
 (let (($x22 (= $x35 true)))
 (let (($x73 (and $x22 $x34)))
 (let (($x117 (and $x73 $x151)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x5 $x117)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x110 (and $x24 $x123)))
 (let (($x51 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x19 (and $x51 $x110)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x120 (and $x38 $x19)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x128 (and $x29 $x120)))
 (let (($x67 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x67 $x128)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x140 (and $x58 $x163)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x170 (and $x181 $x140)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x28 (and $x77 $x170)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x154 (and $x153 $x28)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x122 (and $x56 $x154)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x25 (and $x20 $x122)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x152 (and $x39 $x25)))
 (let (($x105 (=> $x152 $x162)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x50)))
 (let (($x107 (= ?x94 input.spec-%var-n-1)))
 (let (($x162 (= $x107 true)))
 (let (($x60 (forall ((input.ind-%var2388X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2388X)))
 (=> $x167 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2388X) (_ bv0 32)))))
 ))
 (let (($x47 (forall ((input.ind-%var2387X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2387X)))
 (= $x167 false)))
 ))
 (let (($x113 (and $x47 $x60)))
 (let (($x151 (= $x113 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x6 (concat ?x42 (concat ?x62 ?x14)))))
 (let (($x78 (= input.dst.llvm-%n ?x81)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x71)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x97 $x36)))
 (let (($x64 (and $x26 $x118)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x159 $x64)))
 (let (($x125 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x43)))))))
 (let (($x95 (and (and (and $x30 $x125) $x126) $x78)))
 (let (($x40 (= $x95 true)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let (($x83 (= ?x81 input.dst.llvm-%n)))
 (let (($x35 (= $x83 true)))
 (let (($x22 (= $x35 true)))
 (let (($x73 (and $x22 $x34)))
 (let (($x117 (and $x73 $x151)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x5 $x117)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x110 (and $x24 $x123)))
 (let (($x51 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x19 (and $x51 $x110)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x120 (and $x38 $x19)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x128 (and $x29 $x120)))
 (let (($x67 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x67 $x128)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x140 (and $x58 $x163)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x170 (and $x181 $x140)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x28 (and $x77 $x170)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x154 (and $x153 $x28)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x122 (and $x56 $x154)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x25 (and $x20 $x122)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x152 (and $x39 $x25)))
 (let (($x105 (=> $x152 $x162)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x176 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x132 (ite $x176 ?x10 (_ bv0 32))))
 (let ((?x168 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x88 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x116 (ite $x88 ?x168 ?x132)))
 (let ((?x141 (bvmul (_ bv4294967295 32) ?x116)))
 (let ((?x137 (bvneg ?x141)))
 (let (($x111 (= ?x137 ?x155)))
 (let (($x93 (= $x111 true)))
 (let (($x175 (forall ((input.ind-%var2394X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2394X)))
 (=> $x140 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2394X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var2393X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2393X)))
 (= $x140 false)))
 ))
 (let (($x189 (and $x122 $x175)))
 (let (($x48 (= $x189 true)))
 (let ((?x60 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x60)))
 (let (($x117 (= ?x113 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x117 true)))
 (let (($x110 (= $x123 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x185)))
 (let (($x96 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x96 true)))
 (let (($x184 (= $x47 true)))
 (let (($x95 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x95 true)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x97)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x108 $x106)))
 (let (($x36 (and $x159 $x119)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x83 $x36)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x80)))))))
 (let (($x71 (and $x115 $x26)))
 (let (($x118 (= $x71 true)))
 (let (($x64 (= $x118 true)))
 (let (($x126 (= $x64 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x27)))
 (let (($x54 (= ?x99 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x54 true)))
 (let (($x14 (= $x62 true)))
 (let (($x199 (= ?x99 input.dst.llvm-%n)))
 (let (($x41 (= $x199 true)))
 (let (($x42 (= $x41 true)))
 (let (($x91 (and $x42 $x14)))
 (let (($x127 (and $x91 $x126)))
 (let (($x73 (and $x127 $x34)))
 (let (($x18 (and $x73 $x184)))
 (let (($x19 (and $x18 $x110)))
 (let (($x33 (and $x19 $x48)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and (not $x9) $x33)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (and $x8 $x174)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x32 (and $x21 $x59)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x114 (and $x16 $x32)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x49 (and $x85 $x114)))
 (let (($x75 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x138 (and $x75 $x49)))
 (let (($x69 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x69 $x138)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x52 (and $x44 $x102)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x164 (and $x45 $x52)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x201 (and $x61 $x164)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x129 (and $x23 $x201)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x109 (and $x7 $x129)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x133 (and $x17 $x109)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x63 (and $x11 $x133)))
 (let (($x13 (=> $x63 $x93)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x176 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x132 (ite $x176 ?x10 (_ bv0 32))))
 (let ((?x168 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x88 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x116 (ite $x88 ?x168 ?x132)))
 (let ((?x141 (bvmul (_ bv4294967295 32) ?x116)))
 (let ((?x137 (bvneg ?x141)))
 (let (($x111 (= ?x137 ?x155)))
 (let (($x93 (= $x111 true)))
 (let (($x175 (forall ((input.ind-%var2394X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2394X)))
 (=> $x140 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2394X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var2393X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2393X)))
 (= $x140 false)))
 ))
 (let (($x189 (and $x122 $x175)))
 (let (($x48 (= $x189 true)))
 (let ((?x60 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x60)))
 (let (($x117 (= ?x113 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x117 true)))
 (let (($x110 (= $x123 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x185)))
 (let (($x96 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x96 true)))
 (let (($x184 (= $x47 true)))
 (let (($x95 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x95 true)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x97)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x108 $x106)))
 (let (($x36 (and $x159 $x119)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x83 $x36)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x80)))))))
 (let (($x71 (and $x115 $x26)))
 (let (($x118 (= $x71 true)))
 (let (($x64 (= $x118 true)))
 (let (($x126 (= $x64 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x27)))
 (let (($x54 (= ?x99 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x54 true)))
 (let (($x14 (= $x62 true)))
 (let (($x199 (= ?x99 input.dst.llvm-%n)))
 (let (($x41 (= $x199 true)))
 (let (($x42 (= $x41 true)))
 (let (($x91 (and $x42 $x14)))
 (let (($x127 (and $x91 $x126)))
 (let (($x73 (and $x127 $x34)))
 (let (($x18 (and $x73 $x184)))
 (let (($x19 (and $x18 $x110)))
 (let (($x33 (and $x19 $x48)))
 (let (($x9 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and (not $x9) $x33)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (and $x8 $x174)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x32 (and $x21 $x59)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x114 (and $x16 $x32)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x49 (and $x85 $x114)))
 (let (($x75 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x138 (and $x75 $x49)))
 (let (($x69 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x69 $x138)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x52 (and $x44 $x102)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x164 (and $x45 $x52)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x201 (and $x61 $x164)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x129 (and $x23 $x201)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x109 (and $x7 $x129)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x133 (and $x17 $x109)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x63 (and $x11 $x133)))
 (let (($x13 (=> $x63 $x93)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x81 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x94 (ite $x81 ?x170 (_ bv0 32))))
 (let ((?x92 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x13 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x37 (ite $x13 ?x92 ?x94)))
 (let ((?x120 (bvmul (_ bv4294967295 32) ?x37)))
 (let ((?x128 (bvneg ?x120)))
 (let (($x107 (= ?x128 ?x28)))
 (let (($x152 (= $x107 true)))
 (let (($x102 (forall ((input.ind-%var2435X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2435X)))
 (=> $x122 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2435X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var2434X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2434X)))
 (= $x122 false)))
 ))
 (let (($x52 (and $x175 $x102)))
 (let (($x164 (= $x52 true)))
 (let ((?x60 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x60)))
 (let (($x117 (= ?x113 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x117 true)))
 (let (($x110 (= $x123 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x185)))
 (let (($x96 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x96 true)))
 (let (($x184 (= $x47 true)))
 (let (($x95 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x95 true)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x97)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x108 $x106)))
 (let (($x36 (and $x159 $x119)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x22 $x36)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x124)))))))
 (let (($x71 (and $x83 $x26)))
 (let (($x118 (= $x71 true)))
 (let (($x64 (= $x118 true)))
 (let (($x126 (= $x64 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x46)))
 (let (($x41 (= ?x15 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x41 true)))
 (let (($x54 (= $x42 true)))
 (let (($x99 (= ?x15 input.dst.llvm-%n)))
 (let (($x6 (= $x99 true)))
 (let (($x199 (= $x6 true)))
 (let (($x62 (and $x199 $x54)))
 (let (($x127 (and $x62 $x126)))
 (let (($x73 (and $x127 $x34)))
 (let (($x18 (and $x73 $x184)))
 (let (($x19 (and $x18 $x110)))
 (let (($x201 (and $x19 $x164)))
 (let (($x5 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (and (not $x5) $x201)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and $x31 $x109)))
 (let (($x51 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x63 (and $x51 $x133)))
 (let (($x12 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x88 (and $x12 $x63)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x168 (and $x29 $x88)))
 (let (($x67 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x176 (and $x67 $x168)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x10 (and $x79 $x176)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x132 (and $x100 $x10)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x116 (and $x77 $x132)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x141 (and $x153 $x116)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x137 (and $x56 $x141)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x155 (and $x20 $x137)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x111 (and $x74 $x155)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x93 (and $x39 $x111)))
 (let (($x162 (=> $x93 $x152)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x81 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x94 (ite $x81 ?x170 (_ bv0 32))))
 (let ((?x92 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x13 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x37 (ite $x13 ?x92 ?x94)))
 (let ((?x120 (bvmul (_ bv4294967295 32) ?x37)))
 (let ((?x128 (bvneg ?x120)))
 (let (($x107 (= ?x128 ?x28)))
 (let (($x152 (= $x107 true)))
 (let (($x102 (forall ((input.ind-%var2435X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2435X)))
 (=> $x122 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2435X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var2434X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2434X)))
 (= $x122 false)))
 ))
 (let (($x52 (and $x175 $x102)))
 (let (($x164 (= $x52 true)))
 (let ((?x60 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x60)))
 (let (($x117 (= ?x113 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x117 true)))
 (let (($x110 (= $x123 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x185)))
 (let (($x96 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x96 true)))
 (let (($x184 (= $x47 true)))
 (let (($x95 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x95 true)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x97)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x108 $x106)))
 (let (($x36 (and $x159 $x119)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x22 $x36)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x124)))))))
 (let (($x71 (and $x83 $x26)))
 (let (($x118 (= $x71 true)))
 (let (($x64 (= $x118 true)))
 (let (($x126 (= $x64 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x46)))
 (let (($x41 (= ?x15 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x41 true)))
 (let (($x54 (= $x42 true)))
 (let (($x99 (= ?x15 input.dst.llvm-%n)))
 (let (($x6 (= $x99 true)))
 (let (($x199 (= $x6 true)))
 (let (($x62 (and $x199 $x54)))
 (let (($x127 (and $x62 $x126)))
 (let (($x73 (and $x127 $x34)))
 (let (($x18 (and $x73 $x184)))
 (let (($x19 (and $x18 $x110)))
 (let (($x201 (and $x19 $x164)))
 (let (($x5 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (and (not $x5) $x201)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and $x31 $x109)))
 (let (($x51 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x63 (and $x51 $x133)))
 (let (($x12 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x88 (and $x12 $x63)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x168 (and $x29 $x88)))
 (let (($x67 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x176 (and $x67 $x168)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x10 (and $x79 $x176)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x132 (and $x100 $x10)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x116 (and $x77 $x132)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x141 (and $x153 $x116)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x137 (and $x56 $x141)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x155 (and $x20 $x137)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x111 (and $x74 $x155)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x93 (and $x39 $x111)))
 (let (($x162 (=> $x93 $x152)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (not $x37)))
 (let (($x170 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (not $x170)))
 (let (($x128 (or $x94 $x120)))
 (let (($x28 (= $x128 true)))
 (let (($x107 (= $x28 true)))
 (let (($x109 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2476X)))
 (=> $x123 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2476X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var2475X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2475X)))
 (= $x123 false)))
 ))
 (let (($x133 (and $x122 $x109)))
 (let (($x63 (= $x133 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x167)))
 (let (($x184 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x184 true)))
 (let (($x76 (= $x18 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x71)))
 (let (($x40 (= ?x118 input.dst.llvm-%n)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let (($x64 (= ?x118 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x64 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x108)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x103 $x35)))
 (let (($x125 (and $x22 $x30)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x41 $x125)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x89)))))))
 (let (($x159 (and $x43 $x106)))
 (let (($x97 (= $x159 true)))
 (let (($x119 (= $x97 true)))
 (let (($x36 (= $x119 true)))
 (let ((?x5 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x5)))
 (let (($x46 (= ?x129 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x46 true)))
 (let (($x27 (= $x15 true)))
 (let (($x26 (and $x27 $x36)))
 (let (($x78 (and $x26 $x127)))
 (let (($x73 (and $x78 $x34)))
 (let (($x60 (and $x73 $x76)))
 (let (($x88 (and $x60 $x63)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x24 $x88)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x16 $x168)))
 (let (($x38 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x10 (and $x38 $x176)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x132 (and $x75 $x10)))
 (let (($x69 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x69 $x132)))
 (let (($x58 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x58 $x116)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x137 (and $x181 $x141)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x61 $x137)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x111 (and $x23 $x155)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x93 (and $x7 $x111)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x13 (and $x17 $x93)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x92 (and $x57 $x13)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x81 (and $x11 $x92)))
 (let (($x152 (=> $x81 $x107)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (not $x37)))
 (let (($x170 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (not $x170)))
 (let (($x128 (or $x94 $x120)))
 (let (($x28 (= $x128 true)))
 (let (($x107 (= $x28 true)))
 (let (($x109 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2476X)))
 (=> $x123 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2476X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var2475X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2475X)))
 (= $x123 false)))
 ))
 (let (($x133 (and $x122 $x109)))
 (let (($x63 (= $x133 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x167)))
 (let (($x184 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x184 true)))
 (let (($x76 (= $x18 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x71)))
 (let (($x40 (= ?x118 input.dst.llvm-%n)))
 (let (($x84 (= $x40 true)))
 (let (($x34 (= $x84 true)))
 (let (($x64 (= ?x118 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x64 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x108)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x103 $x35)))
 (let (($x125 (and $x22 $x30)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x41 $x125)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x89)))))))
 (let (($x159 (and $x43 $x106)))
 (let (($x97 (= $x159 true)))
 (let (($x119 (= $x97 true)))
 (let (($x36 (= $x119 true)))
 (let ((?x5 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x5)))
 (let (($x46 (= ?x129 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x46 true)))
 (let (($x27 (= $x15 true)))
 (let (($x26 (and $x27 $x36)))
 (let (($x78 (and $x26 $x127)))
 (let (($x73 (and $x78 $x34)))
 (let (($x60 (and $x73 $x76)))
 (let (($x88 (and $x60 $x63)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x24 $x88)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x16 $x168)))
 (let (($x38 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x10 (and $x38 $x176)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x132 (and $x75 $x10)))
 (let (($x69 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x69 $x132)))
 (let (($x58 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x58 $x116)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x137 (and $x181 $x141)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x61 $x137)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x111 (and $x23 $x155)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x93 (and $x7 $x111)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x13 (and $x17 $x93)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x92 (and $x57 $x13)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x81 (and $x11 $x92)))
 (let (($x152 (=> $x81 $x107)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 112 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (or $x138 $x174)))
 (let (($x151 (= $x113 true)))
 (let (($x19 (= $x151 true)))
 (let (($x155 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2482X)))
 (=> $x49 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2482X) (_ bv0 32)))))
 ))
 (let (($x133 (forall ((input.ind-%var2481X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2481X)))
 (= $x49 false)))
 ))
 (let (($x111 (and $x133 $x155)))
 (let (($x93 (= $x111 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x96)))
 (let (($x18 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x18 true)))
 (let (($x60 (= $x76 true)))
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x118)))
 (let (($x84 (= ?x64 input.dst.llvm-%n)))
 (let (($x34 (= $x84 true)))
 (let (($x73 (= $x34 true)))
 (let (($x126 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x126 true)))
 (let (($x78 (= $x127 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x30)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x115 $x22)))
 (let (($x106 (and $x108 $x125)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x68 $x106)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x80)))))))
 (let (($x97 (and $x103 $x159)))
 (let (($x119 (= $x97 true)))
 (let (($x36 (= $x119 true)))
 (let (($x26 (= $x36 true)))
 (let ((?x8 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x8)))
 (let (($x9 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x9 true)))
 (let (($x15 (= $x46 true)))
 (let (($x71 (and $x15 $x26)))
 (let (($x95 (and $x71 $x78)))
 (let (($x185 (and $x95 $x73)))
 (let (($x117 (and $x185 $x60)))
 (let (($x13 (and $x117 $x93)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x21 $x13)))
 (let (($x12 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x81 (and $x12 $x92)))
 (let (($x85 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x85 $x81)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x94 (and $x67 $x170)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x37 (and $x79 $x94)))
 (let (($x44 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x120 (and $x44 $x37)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x128 (and $x45 $x120)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x28 (and $x153 $x128)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x107 (and $x56 $x28)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x152 (and $x20 $x107)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x74 $x152)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x6 (and $x14 $x162)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x110 (and $x39 $x6)))
 (let (($x102 (=> $x110 $x19)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (or $x138 $x174)))
 (let (($x151 (= $x113 true)))
 (let (($x19 (= $x151 true)))
 (let (($x155 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2482X)))
 (=> $x49 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2482X) (_ bv0 32)))))
 ))
 (let (($x133 (forall ((input.ind-%var2481X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2481X)))
 (= $x49 false)))
 ))
 (let (($x111 (and $x133 $x155)))
 (let (($x93 (= $x111 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x96)))
 (let (($x18 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x18 true)))
 (let (($x60 (= $x76 true)))
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x118)))
 (let (($x84 (= ?x64 input.dst.llvm-%n)))
 (let (($x34 (= $x84 true)))
 (let (($x73 (= $x34 true)))
 (let (($x126 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x126 true)))
 (let (($x78 (= $x127 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x30)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x115 $x22)))
 (let (($x106 (and $x108 $x125)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x68 $x106)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x80)))))))
 (let (($x97 (and $x103 $x159)))
 (let (($x119 (= $x97 true)))
 (let (($x36 (= $x119 true)))
 (let (($x26 (= $x36 true)))
 (let ((?x8 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x8)))
 (let (($x9 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x9 true)))
 (let (($x15 (= $x46 true)))
 (let (($x71 (and $x15 $x26)))
 (let (($x95 (and $x71 $x78)))
 (let (($x185 (and $x95 $x73)))
 (let (($x117 (and $x185 $x60)))
 (let (($x13 (and $x117 $x93)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x21 $x13)))
 (let (($x12 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x81 (and $x12 $x92)))
 (let (($x85 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x85 $x81)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x94 (and $x67 $x170)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x37 (and $x79 $x94)))
 (let (($x44 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x120 (and $x44 $x37)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x128 (and $x45 $x120)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x28 (and $x153 $x128)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x107 (and $x56 $x28)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x152 (and $x20 $x107)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x74 $x152)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x6 (and $x14 $x162)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x110 (and $x39 $x6)))
 (let (($x102 (=> $x110 $x19)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x189 true)))
 (let (($x91 (= $x142 true)))
 (let (($x174 (forall ((input.ind-%var2493X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2493X)))
 (= $x92 false)))
 ))
 (let (($x152 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2494X)))
 (=> $x92 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2494X) (_ bv0 32)))))
 ))
 (let (($x113 (and $x152 $x174)))
 (let (($x151 (= $x113 true)))
 (let ((?x49 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x49)))
 (let (($x176 (= ?x109 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x176 true)))
 (let (($x137 (= $x141 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x185)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x95 $x34)))
 (let (($x96 (and $x73 $x167)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x30 $x96)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x26)))))))
 (let (($x184 (and $x78 $x47)))
 (let (($x18 (= $x184 true)))
 (let (($x76 (= $x18 true)))
 (let (($x60 (= $x76 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x80)))
 (let (($x54 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x54 true)))
 (let (($x115 (= $x68 true)))
 (let (($x124 (= ?x112 input.dst.llvm-%n)))
 (let (($x43 (= $x124 true)))
 (let (($x199 (= $x43 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x53)))
 (let (($x70 (= ?x41 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x70 true)))
 (let (($x65 (= $x89 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (not $x5)))
 (let (($x9 (= $x129 true)))
 (let (($x46 (= $x9 true)))
 (let (($x15 (= $x46 true)))
 (let (($x82 (and $x15 $x65)))
 (let (($x103 (and $x82 $x199)))
 (let (($x83 (and $x103 $x115)))
 (let (($x117 (and $x83 $x60)))
 (let (($x155 (and $x117 $x137)))
 (let (($x19 (and $x155 $x151)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (and $x24 $x19)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x51 $x102)))
 (let (($x38 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x42 (and $x38 $x175)))
 (let (($x29 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x164 (and $x29 $x42)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x10 (and $x69 $x164)))
 (let (($x58 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x168 (and $x58 $x10)))
 (let (($x100 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x123 (and $x100 $x168)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x154 (and $x77 $x123)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x201 (and $x23 $x154)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x132 (and $x7 $x201)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x88 (and $x17 $x132)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x57 $x88)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x179 (and $x99 $x116)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x52 (and $x11 $x179)))
 (let (($x50 (=> $x52 $x91)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x189 true)))
 (let (($x91 (= $x142 true)))
 (let (($x174 (forall ((input.ind-%var2493X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2493X)))
 (= $x92 false)))
 ))
 (let (($x152 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2494X)))
 (=> $x92 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2494X) (_ bv0 32)))))
 ))
 (let (($x113 (and $x152 $x174)))
 (let (($x151 (= $x113 true)))
 (let ((?x49 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x49)))
 (let (($x176 (= ?x109 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x176 true)))
 (let (($x137 (= $x141 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x185)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x95 $x34)))
 (let (($x96 (and $x73 $x167)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x30 $x96)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x26)))))))
 (let (($x184 (and $x78 $x47)))
 (let (($x18 (= $x184 true)))
 (let (($x76 (= $x18 true)))
 (let (($x60 (= $x76 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x80)))
 (let (($x54 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x54 true)))
 (let (($x115 (= $x68 true)))
 (let (($x124 (= ?x112 input.dst.llvm-%n)))
 (let (($x43 (= $x124 true)))
 (let (($x199 (= $x43 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x53)))
 (let (($x70 (= ?x41 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x70 true)))
 (let (($x65 (= $x89 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (not $x5)))
 (let (($x9 (= $x129 true)))
 (let (($x46 (= $x9 true)))
 (let (($x15 (= $x46 true)))
 (let (($x82 (and $x15 $x65)))
 (let (($x103 (and $x82 $x199)))
 (let (($x83 (and $x103 $x115)))
 (let (($x117 (and $x83 $x60)))
 (let (($x155 (and $x117 $x137)))
 (let (($x19 (and $x155 $x151)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (and $x24 $x19)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x51 $x102)))
 (let (($x38 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x42 (and $x38 $x175)))
 (let (($x29 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x164 (and $x29 $x42)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x10 (and $x69 $x164)))
 (let (($x58 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x168 (and $x58 $x10)))
 (let (($x100 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x123 (and $x100 $x168)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x154 (and $x77 $x123)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x201 (and $x23 $x154)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x132 (and $x7 $x201)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x88 (and $x17 $x132)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x57 $x88)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x179 (and $x99 $x116)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x52 (and $x11 $x179)))
 (let (($x50 (=> $x52 $x91)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 116 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171533/query
