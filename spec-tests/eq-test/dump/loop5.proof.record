==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= true false)))
 (let (($x125 (= $x124 true)))
 (let (($x107 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x93 false)))
 ))
 (let (($x108 (and $x97 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x58 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x57 $x77)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x79 (and $x71 $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x12 (concat ?x43 ?x32)))))
 (let (($x53 (= ?x51 input.dst.llvm-%n)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x83 (and $x55 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x110 (and $x88 $x109)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x10 $x110)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x112 (and $x17 $x111)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x14 $x112)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x114 (and $x5 $x113)))
 (let (($x25 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x115 (and $x25 $x114)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x117 (and $x44 $x116)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x118 (and $x31 $x117)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x119 (and $x19 $x118)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x120 (and $x46 $x119)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x121 (and $x34 $x120)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x8 $x121)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x123 (and $x24 $x122)))
 (let (($x126 (=> $x123 $x125)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= true false)))
 (let (($x125 (= $x124 true)))
 (let (($x107 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x93 false)))
 ))
 (let (($x108 (and $x97 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x58 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x57 $x77)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x79 (and $x71 $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x12 (concat ?x43 ?x32)))))
 (let (($x53 (= ?x51 input.dst.llvm-%n)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x83 (and $x55 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x110 (and $x88 $x109)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x10 $x110)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x112 (and $x17 $x111)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x14 $x112)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x114 (and $x5 $x113)))
 (let (($x25 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x115 (and $x25 $x114)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x117 (and $x44 $x116)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x118 (and $x31 $x117)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x119 (and $x19 $x118)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x120 (and $x46 $x119)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x121 (and $x34 $x120)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x8 $x121)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x123 (and $x24 $x122)))
 (let (($x126 (=> $x123 $x125)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00028010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00028013)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00028010)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x99 (= $x103 true)))
 (let (($x119 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x105 false)))
 ))
 (let (($x120 (and $x109 $x119)))
 (let (($x121 (= $x120 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x85 (concat ?x82 (concat ?x78 ?x76)))))
 (let (($x87 (= ?x86 input.dst.llvm-%n)))
 (let (($x88 (= $x87 true)))
 (let (($x92 (= $x88 true)))
 (let (($x71 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x57 (= $x71 true)))
 (let (($x58 (= $x57 true)))
 (let (($x72 (= $x58 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x61)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x54 $x60)))
 (let (($x64 (and $x70 $x63)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x29 $x64)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x43)))))))
 (let (($x65 (and $x53 $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x73 (and $x68 $x72)))
 (let (($x93 (and $x73 $x92)))
 (let (($x122 (and $x93 $x121)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x22 $x122)))
 (let (($x38 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x124 (and $x38 $x123)))
 (let (($x36 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x125 (and $x36 $x124)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x126 (and $x35 $x125)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x127 (and $x13 $x126)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x56 (and $x41 $x127)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x33 (and $x26 $x56)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x94 (and $x45 $x33)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x102 (and $x47 $x94)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x100 (and $x18 $x102)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x89 (and $x20 $x100)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x91 (and $x21 $x89)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x95 (and $x24 $x91)))
 (let (($x104 (=> $x95 $x99)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x99 (= $x103 true)))
 (let (($x119 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x105 false)))
 ))
 (let (($x120 (and $x109 $x119)))
 (let (($x121 (= $x120 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x85 (concat ?x82 (concat ?x78 ?x76)))))
 (let (($x87 (= ?x86 input.dst.llvm-%n)))
 (let (($x88 (= $x87 true)))
 (let (($x92 (= $x88 true)))
 (let (($x71 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x57 (= $x71 true)))
 (let (($x58 (= $x57 true)))
 (let (($x72 (= $x58 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x61)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x54 $x60)))
 (let (($x64 (and $x70 $x63)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x29 $x64)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x43)))))))
 (let (($x65 (and $x53 $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x73 (and $x68 $x72)))
 (let (($x93 (and $x73 $x92)))
 (let (($x122 (and $x93 $x121)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x22 $x122)))
 (let (($x38 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x124 (and $x38 $x123)))
 (let (($x36 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x125 (and $x36 $x124)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x126 (and $x35 $x125)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x127 (and $x13 $x126)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x56 (and $x41 $x127)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x33 (and $x26 $x56)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x94 (and $x45 $x33)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x102 (and $x47 $x94)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x100 (and $x18 $x102)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x89 (and $x20 $x100)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x91 (and $x21 $x89)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x95 (and $x24 $x91)))
 (let (($x104 (=> $x95 $x99)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x111)))
 (let (($x98 (= ?x116 input.dst.llvm-%n)))
 (let (($x128 (= $x98 true)))
 (let (($x100 (forall ((input.ind-%var201X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var201X)))
 (=> $x118 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var201X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var200X)))
 (= $x118 false)))
 ))
 (let (($x89 (and $x122 $x100)))
 (let (($x91 (= $x89 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x88 (concat ?x83 (concat ?x77 ?x81)))))
 (let (($x93 (= ?x92 input.dst.llvm-%n)))
 (let (($x101 (= $x93 true)))
 (let (($x105 (= $x101 true)))
 (let (($x58 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x72 (= $x58 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x64)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x61)))
 (let (($x65 (and $x63 $x62)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x27 $x65)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x30)))))))
 (let (($x67 (and $x55 $x66)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x71 (= $x69 true)))
 (let (($x84 (and $x71 $x74)))
 (let (($x108 (and $x84 $x105)))
 (let (($x95 (and $x108 $x91)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x22 $x95)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x99 (and $x14 $x103)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x104 (and $x15 $x99)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x90 (and $x25 $x104)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x48 $x90)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x9 (and $x39 $x10)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x75 (and $x49 $x9)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x106 (and $x19 $x75)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x114 (and $x46 $x106)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x112 (and $x34 $x114)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x96 (and $x8 $x112)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x97 (and $x24 $x96)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x107 (and $x6 $x97)))
 (let (($x129 (=> $x107 $x128)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x111)))
 (let (($x98 (= ?x116 input.dst.llvm-%n)))
 (let (($x128 (= $x98 true)))
 (let (($x100 (forall ((input.ind-%var201X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var201X)))
 (=> $x118 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var201X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var200X)))
 (= $x118 false)))
 ))
 (let (($x89 (and $x122 $x100)))
 (let (($x91 (= $x89 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x88 (concat ?x83 (concat ?x77 ?x81)))))
 (let (($x93 (= ?x92 input.dst.llvm-%n)))
 (let (($x101 (= $x93 true)))
 (let (($x105 (= $x101 true)))
 (let (($x58 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x72 (= $x58 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x64)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x61)))
 (let (($x65 (and $x63 $x62)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x27 $x65)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x30)))))))
 (let (($x67 (and $x55 $x66)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x71 (= $x69 true)))
 (let (($x84 (and $x71 $x74)))
 (let (($x108 (and $x84 $x105)))
 (let (($x95 (and $x108 $x91)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x22 $x95)))
 (let (($x14 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x99 (and $x14 $x103)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x104 (and $x15 $x99)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x90 (and $x25 $x104)))
 (let (($x48 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x48 $x90)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x9 (and $x39 $x10)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x75 (and $x49 $x9)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x106 (and $x19 $x75)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x114 (and $x46 $x106)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x112 (and $x34 $x114)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x96 (and $x8 $x112)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x97 (and $x24 $x96)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x107 (and $x6 $x97)))
 (let (($x129 (=> $x107 $x128)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x113)))
 (let (($x56 (= ?x120 input.spec-%var-n-1)))
 (let (($x124 (= $x56 true)))
 (let (($x114 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x94 false)))
 ))
 (let (($x112 (and $x91 $x114)))
 (let (($x96 (= $x112 true)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (= $x101 true)))
 (let (($x108 (= $x105 true)))
 (let (($x117 (= $x108 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x79)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x62 $x88)))
 (let (($x82 (and $x76 $x83)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x64 $x82)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x57)))))))
 (let (($x81 (and $x85 $x77)))
 (let (($x78 (= $x81 true)))
 (let (($x86 (= $x78 true)))
 (let (($x92 (= $x86 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x52 (concat ?x53 (concat ?x16 ?x42)))))
 (let (($x60 (= ?x27 input.dst.llvm-%n)))
 (let (($x70 (= $x60 true)))
 (let (($x61 (= $x70 true)))
 (let (($x93 (and $x61 $x92)))
 (let (($x118 (and $x93 $x117)))
 (let (($x97 (and $x118 $x96)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x28 $x97)))
 (let (($x36 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x115 (and $x36 $x107)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x111 (and $x5 $x115)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x116 (and $x13 $x111)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x98 (and $x41 $x116)))
 (let (($x44 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x128 (and $x44 $x98)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x129 (and $x31 $x128)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x130 (and $x47 $x129)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x50 (and $x18 $x130)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x80 (and $x20 $x50)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x119 (and $x23 $x80)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x127 (and $x21 $x119)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x125 (and $x37 $x127)))
 (let (($x33 (=> $x125 $x124)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x113)))
 (let (($x56 (= ?x120 input.spec-%var-n-1)))
 (let (($x124 (= $x56 true)))
 (let (($x114 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x94 false)))
 ))
 (let (($x112 (and $x91 $x114)))
 (let (($x96 (= $x112 true)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (= $x101 true)))
 (let (($x108 (= $x105 true)))
 (let (($x117 (= $x108 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x79)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x62 $x88)))
 (let (($x82 (and $x76 $x83)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x64 $x82)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x57)))))))
 (let (($x81 (and $x85 $x77)))
 (let (($x78 (= $x81 true)))
 (let (($x86 (= $x78 true)))
 (let (($x92 (= $x86 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x52 (concat ?x53 (concat ?x16 ?x42)))))
 (let (($x60 (= ?x27 input.dst.llvm-%n)))
 (let (($x70 (= $x60 true)))
 (let (($x61 (= $x70 true)))
 (let (($x93 (and $x61 $x92)))
 (let (($x118 (and $x93 $x117)))
 (let (($x97 (and $x118 $x96)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x28 $x97)))
 (let (($x36 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x115 (and $x36 $x107)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x111 (and $x5 $x115)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x116 (and $x13 $x111)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x98 (and $x41 $x116)))
 (let (($x44 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x128 (and $x44 $x98)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x129 (and $x31 $x128)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x130 (and $x47 $x129)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x50 (and $x18 $x130)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x80 (and $x20 $x50)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x119 (and $x23 $x80)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x127 (and $x21 $x119)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x125 (and $x37 $x127)))
 (let (($x33 (=> $x125 $x124)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x122 (= $x121 true)))
 (let (($x100 (= $x122 true)))
 (let (($x50 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x75 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x75 false)))
 ))
 (let (($x80 (and $x96 $x50)))
 (let (($x119 (= $x80 true)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (= $x108 true)))
 (let (($x118 (= $x117 true)))
 (let (($x126 (= $x118 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x82)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x67 $x79)))
 (let (($x81 (and $x83 $x77)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x84 $x81)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x73)))))))
 (let (($x86 (and $x88 $x78)))
 (let (($x92 (= $x86 true)))
 (let (($x93 (= $x92 true)))
 (let (($x101 (= $x93 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x27 (concat ?x16 (concat ?x30 ?x55)))))
 (let (($x70 (= ?x59 input.dst.llvm-%n)))
 (let (($x61 (= $x70 true)))
 (let (($x65 (= $x61 true)))
 (let (($x105 (and $x65 $x101)))
 (let (($x94 (and $x105 $x126)))
 (let (($x127 (and $x94 $x119)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x38 $x127)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x109 (and $x15 $x125)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x35 $x109)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x120 (and $x48 $x113)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x56 (and $x39 $x120)))
 (let (($x26 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x124 (and $x26 $x56)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x33 (and $x45 $x124)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x110 (and $x46 $x33)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x63 (and $x34 $x110)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x40 (and $x8 $x63)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x102 (and $x24 $x40)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x90 (and $x11 $x102)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x99 (and $x12 $x90)))
 (let (($x10 (=> $x99 $x100)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x122 (= $x121 true)))
 (let (($x100 (= $x122 true)))
 (let (($x50 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x75 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x75 false)))
 ))
 (let (($x80 (and $x96 $x50)))
 (let (($x119 (= $x80 true)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (= $x108 true)))
 (let (($x118 (= $x117 true)))
 (let (($x126 (= $x118 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x82)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x67 $x79)))
 (let (($x81 (and $x83 $x77)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x84 $x81)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x73)))))))
 (let (($x86 (and $x88 $x78)))
 (let (($x92 (= $x86 true)))
 (let (($x93 (= $x92 true)))
 (let (($x101 (= $x93 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x27 (concat ?x16 (concat ?x30 ?x55)))))
 (let (($x70 (= ?x59 input.dst.llvm-%n)))
 (let (($x61 (= $x70 true)))
 (let (($x65 (= $x61 true)))
 (let (($x105 (and $x65 $x101)))
 (let (($x94 (and $x105 $x126)))
 (let (($x127 (and $x94 $x119)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x38 $x127)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x109 (and $x15 $x125)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x35 $x109)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x120 (and $x48 $x113)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x56 (and $x39 $x120)))
 (let (($x26 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x124 (and $x26 $x56)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x33 (and $x45 $x124)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x110 (and $x46 $x33)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x63 (and $x34 $x110)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x40 (and $x8 $x63)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x102 (and $x24 $x40)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x90 (and $x11 $x102)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x99 (and $x12 $x90)))
 (let (($x10 (=> $x99 $x100)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x189 (= $x188 false)))
 (let (($x190 (= $x189 true)))
 (let (($x171 (forall ((input.ind-%var227X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var227X)))
 (=> $x157 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var227X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var226X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var226X)))
 (= $x157 false)))
 ))
 (let (($x172 (and $x161 $x171)))
 (let (($x173 (= $x172 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x150 (= ?x29 input.dst.llvm-%n)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x145 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x10)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x90 $x122)))
 (let (($x66 (and $x100 $x103)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x80 $x66)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x56)))))))
 (let (($x106 (and $x102 $x54)))
 (let (($x116 (= $x106 true)))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x75 true)))
 (let (($x96 (= $x112 true)))
 (let (($x117 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x118 (= $x117 true)))
 (let (($x126 (= $x118 true)))
 (let (($x93 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x101 (= $x93 true)))
 (let (($x105 (= $x101 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x81 (= $x77 true)))
 (let (($x78 (= $x81 true)))
 (let (($x86 (= $x78 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x76 (= $x67 true)))
 (let (($x79 (= $x76 true)))
 (let (($x83 (= $x79 true)))
 (let (($x85 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x64 (= $x85 true)))
 (let (($x62 (= $x64 true)))
 (let (($x88 (= $x62 true)))
 (let (($x58 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x72 (= $x58 true)))
 (let (($x57 (= $x72 true)))
 (let (($x73 (= $x57 true)))
 (let (($x61 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x65 (= $x61 true)))
 (let (($x69 (= $x65 true)))
 (let (($x71 (= $x69 true)))
 (let (($x51 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x42 (= $x51 true)))
 (let (($x59 (= $x42 true)))
 (let (($x60 (= $x59 true)))
 (let (($x32 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x16 (= $x32 true)))
 (let (($x52 (= $x16 true)))
 (let (($x30 (= $x52 true)))
 (let (($x43 (= ?x29 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x55 (and $x27 $x30)))
 (let (($x70 (and $x55 $x60)))
 (let (($x87 (and $x70 $x71)))
 (let (($x74 (and $x87 $x73)))
 (let (($x84 (and $x74 $x88)))
 (let (($x82 (and $x84 $x83)))
 (let (($x92 (and $x82 $x86)))
 (let (($x108 (and $x92 $x105)))
 (let (($x94 (and $x108 $x126)))
 (let (($x111 (and $x94 $x96)))
 (let (($x91 (and $x111 $x89)))
 (let (($x9 (and $x91 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x153 (and $x148 $x152)))
 (let (($x174 (and $x153 $x173)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x14 $x174)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x5 $x175)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x177 (and $x25 $x176)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x178 (and $x41 $x177)))
 (let (($x44 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x179 (and $x44 $x178)))
 (let (($x49 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x180 (and $x49 $x179)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x181 (and $x19 $x180)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x182 (and $x18 $x181)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x183 (and $x20 $x182)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x184 (and $x6 $x183)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x185 (and $x8 $x184)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x186 (and $x17 $x185)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x23 $x186)))
 (let (($x191 (=> $x187 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x189 (= $x188 false)))
 (let (($x190 (= $x189 true)))
 (let (($x171 (forall ((input.ind-%var227X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var227X)))
 (=> $x157 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var227X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var226X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var226X)))
 (= $x157 false)))
 ))
 (let (($x172 (and $x161 $x171)))
 (let (($x173 (= $x172 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x150 (= ?x29 input.dst.llvm-%n)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x145 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x10)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x90 $x122)))
 (let (($x66 (and $x100 $x103)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x80 $x66)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x56)))))))
 (let (($x106 (and $x102 $x54)))
 (let (($x116 (= $x106 true)))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x75 true)))
 (let (($x96 (= $x112 true)))
 (let (($x117 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x118 (= $x117 true)))
 (let (($x126 (= $x118 true)))
 (let (($x93 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x101 (= $x93 true)))
 (let (($x105 (= $x101 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x81 (= $x77 true)))
 (let (($x78 (= $x81 true)))
 (let (($x86 (= $x78 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x76 (= $x67 true)))
 (let (($x79 (= $x76 true)))
 (let (($x83 (= $x79 true)))
 (let (($x85 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x64 (= $x85 true)))
 (let (($x62 (= $x64 true)))
 (let (($x88 (= $x62 true)))
 (let (($x58 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x72 (= $x58 true)))
 (let (($x57 (= $x72 true)))
 (let (($x73 (= $x57 true)))
 (let (($x61 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x65 (= $x61 true)))
 (let (($x69 (= $x65 true)))
 (let (($x71 (= $x69 true)))
 (let (($x51 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x42 (= $x51 true)))
 (let (($x59 (= $x42 true)))
 (let (($x60 (= $x59 true)))
 (let (($x32 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x16 (= $x32 true)))
 (let (($x52 (= $x16 true)))
 (let (($x30 (= $x52 true)))
 (let (($x43 (= ?x29 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x55 (and $x27 $x30)))
 (let (($x70 (and $x55 $x60)))
 (let (($x87 (and $x70 $x71)))
 (let (($x74 (and $x87 $x73)))
 (let (($x84 (and $x74 $x88)))
 (let (($x82 (and $x84 $x83)))
 (let (($x92 (and $x82 $x86)))
 (let (($x108 (and $x92 $x105)))
 (let (($x94 (and $x108 $x126)))
 (let (($x111 (and $x94 $x96)))
 (let (($x91 (and $x111 $x89)))
 (let (($x9 (and $x91 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x153 (and $x148 $x152)))
 (let (($x174 (and $x153 $x173)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x14 $x174)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x176 (and $x5 $x175)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x177 (and $x25 $x176)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x178 (and $x41 $x177)))
 (let (($x44 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x179 (and $x44 $x178)))
 (let (($x49 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x180 (and $x49 $x179)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x181 (and $x19 $x180)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x182 (and $x18 $x181)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x183 (and $x20 $x182)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x184 (and $x6 $x183)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x185 (and $x8 $x184)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x186 (and $x17 $x185)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x23 $x186)))
 (let (($x191 (=> $x187 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (not $x164)))
 (let (($x166 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (=> $x166 $x154)))
 (let (($x159 (= $x155 true)))
 (let (($x167 (= $x159 true)))
 (let (($x178 (forall ((input.ind-%var578X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var578X)))
 (=> $x156 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var578X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var577X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var577X)))
 (= $x156 false)))
 ))
 (let (($x179 (and $x165 $x178)))
 (let (($x180 (= $x179 true)))
 (let ((?x140 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x140)))
 (let (($x147 (= ?x141 input.dst.llvm-%n)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x142 (= ?x141 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x136 (= ?x135 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x9 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x9 true)))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x98 (= $x114 true)))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x106 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x116 (= $x106 true)))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x100 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x80 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x33 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x113 (= $x125 true)))
 (let (($x120 (= $x113 true)))
 (let (($x109 (= $x120 true)))
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x111 (= $x96 true)))
 (let (($x119 (= $x111 true)))
 (let (($x127 (= $x119 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x101)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x78 $x92)))
 (let (($x108 (and $x93 $x105)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x73 $x108)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x67)))))))
 (let (($x118 (and $x81 $x117)))
 (let (($x126 (= $x118 true)))
 (let (($x94 (= $x126 true)))
 (let (($x104 (= $x94 true)))
 (let (($x65 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x69 (= $x65 true)))
 (let (($x71 (= $x69 true)))
 (let (($x87 (= $x71 true)))
 (let (($x42 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x59 (= $x42 true)))
 (let (($x60 (= $x59 true)))
 (let (($x70 (= $x60 true)))
 (let (($x16 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x52 (= $x16 true)))
 (let (($x30 (= $x52 true)))
 (let (($x55 (= $x30 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x7 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x51 (and $x53 $x55)))
 (let (($x61 (and $x51 $x70)))
 (let (($x68 (and $x61 $x87)))
 (let (($x75 (and $x68 $x104)))
 (let (($x40 (and $x75 $x127)))
 (let (($x56 (and $x40 $x109)))
 (let (($x50 (and $x56 $x102)))
 (let (($x122 (and $x50 $x121)))
 (let (($x54 (and $x122 $x66)))
 (let (($x91 (and $x54 $x89)))
 (let (($x95 (and $x91 $x128)))
 (let (($x133 (and $x95 $x132)))
 (let (($x139 (and $x133 $x138)))
 (let (($x145 (and $x139 $x144)))
 (let (($x150 (and $x145 $x149)))
 (let (($x181 (and $x150 $x180)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x36 $x181)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x183 (and $x35 $x182)))
 (let (($x13 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x13 $x183)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x185 (and $x39 $x184)))
 (let (($x26 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x186 (and $x26 $x185)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x187 (and $x24 $x186)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x188 (and $x47 $x187)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x189 (and $x45 $x188)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x190 (and $x31 $x189)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x191 (and $x46 $x190)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x192 (and $x17 $x191)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x130 (and $x18 $x192)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x158 (and $x12 $x130)))
 (let (($x163 (=> $x158 $x167)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (not $x164)))
 (let (($x166 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (=> $x166 $x154)))
 (let (($x159 (= $x155 true)))
 (let (($x167 (= $x159 true)))
 (let (($x178 (forall ((input.ind-%var578X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var578X)))
 (=> $x156 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var578X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var577X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var577X)))
 (= $x156 false)))
 ))
 (let (($x179 (and $x165 $x178)))
 (let (($x180 (= $x179 true)))
 (let ((?x140 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x140)))
 (let (($x147 (= ?x141 input.dst.llvm-%n)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x142 (= ?x141 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x136 (= ?x135 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x9 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x123 (= $x9 true)))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x98 (= $x114 true)))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x106 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x116 (= $x106 true)))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x100 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x80 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x33 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x113 (= $x125 true)))
 (let (($x120 (= $x113 true)))
 (let (($x109 (= $x120 true)))
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x111 (= $x96 true)))
 (let (($x119 (= $x111 true)))
 (let (($x127 (= $x119 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x101)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x78 $x92)))
 (let (($x108 (and $x93 $x105)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x73 $x108)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x67)))))))
 (let (($x118 (and $x81 $x117)))
 (let (($x126 (= $x118 true)))
 (let (($x94 (= $x126 true)))
 (let (($x104 (= $x94 true)))
 (let (($x65 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x69 (= $x65 true)))
 (let (($x71 (= $x69 true)))
 (let (($x87 (= $x71 true)))
 (let (($x42 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x59 (= $x42 true)))
 (let (($x60 (= $x59 true)))
 (let (($x70 (= $x60 true)))
 (let (($x16 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x52 (= $x16 true)))
 (let (($x30 (= $x52 true)))
 (let (($x55 (= $x30 true)))
 (let ((?x28 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x7 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x51 (and $x53 $x55)))
 (let (($x61 (and $x51 $x70)))
 (let (($x68 (and $x61 $x87)))
 (let (($x75 (and $x68 $x104)))
 (let (($x40 (and $x75 $x127)))
 (let (($x56 (and $x40 $x109)))
 (let (($x50 (and $x56 $x102)))
 (let (($x122 (and $x50 $x121)))
 (let (($x54 (and $x122 $x66)))
 (let (($x91 (and $x54 $x89)))
 (let (($x95 (and $x91 $x128)))
 (let (($x133 (and $x95 $x132)))
 (let (($x139 (and $x133 $x138)))
 (let (($x145 (and $x139 $x144)))
 (let (($x150 (and $x145 $x149)))
 (let (($x181 (and $x150 $x180)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x36 $x181)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x183 (and $x35 $x182)))
 (let (($x13 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x184 (and $x13 $x183)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x185 (and $x39 $x184)))
 (let (($x26 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x186 (and $x26 $x185)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x187 (and $x24 $x186)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x188 (and $x47 $x187)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x189 (and $x45 $x188)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x190 (and $x31 $x189)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x191 (and $x46 $x190)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x192 (and $x17 $x191)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x130 (and $x18 $x192)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x158 (and $x12 $x130)))
 (let (($x163 (=> $x158 $x167)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x200 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x194 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x196 (ite $x194 ?x195 (_ bv0 32))))
 (let ((?x193 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x97 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x197 (ite $x97 ?x193 ?x196)))
 (let ((?x198 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x199 (bvneg ?x198)))
 (let (($x201 (= ?x199 ?x200)))
 (let (($x202 (= $x201 true)))
 (let (($x166 (forall ((input.ind-%var619X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var619X)))
 (=> $x181 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var619X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var618X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var618X)))
 (= $x181 false)))
 ))
 (let (($x164 (and $x185 $x166)))
 (let (($x154 (= $x164 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x120 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x111 true)))
 (let (($x127 (= $x119 true)))
 (let (($x40 (= $x127 true)))
 (let (($x94 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x94 true)))
 (let (($x75 (= $x104 true)))
 (let (($x112 (= $x75 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x105 true)))
 (let (($x117 (= $x108 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x83)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x84 $x76)))
 (let (($x81 (and $x79 $x82)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x59 $x81)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x87)))))))
 (let (($x73 (and $x88 $x57)))
 (let (($x78 (= $x73 true)))
 (let (($x86 (= $x78 true)))
 (let (($x92 (= $x86 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x32 (= ?x29 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x32 true)))
 (let (($x52 (= $x16 true)))
 (let (($x7 (= ?x29 input.dst.llvm-%n)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x30 (and $x53 $x52)))
 (let (($x93 (and $x30 $x92)))
 (let (($x126 (and $x93 $x118)))
 (let (($x96 (and $x126 $x112)))
 (let (($x125 (and $x96 $x40)))
 (let (($x33 (and $x125 $x124)))
 (let (($x80 (and $x33 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x155 (and $x177 $x154)))
 (let (($x14 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and (not $x14) $x155)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x15 $x167)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x25 $x163)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x72 (and $x48 $x168)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x157 (and $x44 $x72)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x173 (and $x22 $x157)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x171 (and $x6 $x173)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x151 (and $x129 $x171)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x152 (and $x21 $x151)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x160 (and $x20 $x152)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x174 (and $x34 $x160)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x170 (and $x8 $x174)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x175 (and $x49 $x170)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x162 (and $x58 $x175)))
 (let (($x203 (=> $x162 $x202)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x200 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x194 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x196 (ite $x194 ?x195 (_ bv0 32))))
 (let ((?x193 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x97 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x197 (ite $x97 ?x193 ?x196)))
 (let ((?x198 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x199 (bvneg ?x198)))
 (let (($x201 (= ?x199 ?x200)))
 (let (($x202 (= $x201 true)))
 (let (($x166 (forall ((input.ind-%var619X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var619X)))
 (=> $x181 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var619X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var618X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var618X)))
 (= $x181 false)))
 ))
 (let (($x164 (and $x185 $x166)))
 (let (($x154 (= $x164 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x120 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x111 true)))
 (let (($x127 (= $x119 true)))
 (let (($x40 (= $x127 true)))
 (let (($x94 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x94 true)))
 (let (($x75 (= $x104 true)))
 (let (($x112 (= $x75 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x105 true)))
 (let (($x117 (= $x108 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x83)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x84 $x76)))
 (let (($x81 (and $x79 $x82)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x59 $x81)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x87)))))))
 (let (($x73 (and $x88 $x57)))
 (let (($x78 (= $x73 true)))
 (let (($x86 (= $x78 true)))
 (let (($x92 (= $x86 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x32 (= ?x29 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x32 true)))
 (let (($x52 (= $x16 true)))
 (let (($x7 (= ?x29 input.dst.llvm-%n)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x30 (and $x53 $x52)))
 (let (($x93 (and $x30 $x92)))
 (let (($x126 (and $x93 $x118)))
 (let (($x96 (and $x126 $x112)))
 (let (($x125 (and $x96 $x40)))
 (let (($x33 (and $x125 $x124)))
 (let (($x80 (and $x33 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x155 (and $x177 $x154)))
 (let (($x14 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and (not $x14) $x155)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x15 $x167)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x25 $x163)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x72 (and $x48 $x168)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x157 (and $x44 $x72)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x173 (and $x22 $x157)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x171 (and $x6 $x173)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x151 (and $x129 $x171)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x152 (and $x21 $x151)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x160 (and $x20 $x152)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x174 (and $x34 $x160)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x170 (and $x8 $x174)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x175 (and $x49 $x170)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x162 (and $x58 $x175)))
 (let (($x203 (=> $x162 $x202)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x190 (ite $x51 ?x182 (_ bv0 32))))
 (let ((?x204 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x203 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x188 (ite $x203 ?x204 ?x190)))
 (let ((?x178 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x179 (bvneg ?x178)))
 (let (($x191 (= ?x179 ?x183)))
 (let (($x187 (= $x191 true)))
 (let (($x171 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var695X)))
 (=> $x185 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var694X)))
 (= $x185 false)))
 ))
 (let (($x151 (and $x166 $x171)))
 (let (($x152 (= $x151 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x120 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x111 true)))
 (let (($x127 (= $x119 true)))
 (let (($x40 (= $x127 true)))
 (let (($x94 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x94 true)))
 (let (($x75 (= $x104 true)))
 (let (($x112 (= $x75 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x105 true)))
 (let (($x117 (= $x108 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x83)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x84 $x76)))
 (let (($x81 (and $x79 $x82)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x70 $x81)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x68)))))))
 (let (($x73 (and $x59 $x57)))
 (let (($x78 (= $x73 true)))
 (let (($x86 (= $x78 true)))
 (let (($x92 (= $x86 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x159)))
 (let (($x27 (= ?x38 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x27 true)))
 (let (($x32 (= $x53 true)))
 (let (($x29 (= ?x38 input.dst.llvm-%n)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let (($x16 (and $x7 $x32)))
 (let (($x93 (and $x16 $x92)))
 (let (($x126 (and $x93 $x118)))
 (let (($x96 (and $x126 $x112)))
 (let (($x125 (and $x96 $x40)))
 (let (($x33 (and $x125 $x124)))
 (let (($x80 (and $x33 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x160 (and $x177 $x152)))
 (let (($x36 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and (not $x36) $x160)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x5 $x170)))
 (let (($x13 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x162 (and $x13 $x175)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x97 (and $x41 $x162)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x193 (and $x26 $x97)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x194 (and $x24 $x193)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x195 (and $x19 $x194)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x196 (and $x11 $x195)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x197 (and $x31 $x196)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x198 (and $x46 $x197)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x199 (and $x17 $x198)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x200 (and $x18 $x199)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x23 $x200)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x202 (and $x55 $x201)))
 (let (($x192 (=> $x202 $x187)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x190 (ite $x51 ?x182 (_ bv0 32))))
 (let ((?x204 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x203 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x188 (ite $x203 ?x204 ?x190)))
 (let ((?x178 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x179 (bvneg ?x178)))
 (let (($x191 (= ?x179 ?x183)))
 (let (($x187 (= $x191 true)))
 (let (($x171 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var695X)))
 (=> $x185 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var694X)))
 (= $x185 false)))
 ))
 (let (($x151 (and $x166 $x171)))
 (let (($x152 (= $x151 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x120 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x111 true)))
 (let (($x127 (= $x119 true)))
 (let (($x40 (= $x127 true)))
 (let (($x94 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x94 true)))
 (let (($x75 (= $x104 true)))
 (let (($x112 (= $x75 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x105 true)))
 (let (($x117 (= $x108 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x83)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x84 $x76)))
 (let (($x81 (and $x79 $x82)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x70 $x81)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x68)))))))
 (let (($x73 (and $x59 $x57)))
 (let (($x78 (= $x73 true)))
 (let (($x86 (= $x78 true)))
 (let (($x92 (= $x86 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x159)))
 (let (($x27 (= ?x38 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x27 true)))
 (let (($x32 (= $x53 true)))
 (let (($x29 (= ?x38 input.dst.llvm-%n)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let (($x16 (and $x7 $x32)))
 (let (($x93 (and $x16 $x92)))
 (let (($x126 (and $x93 $x118)))
 (let (($x96 (and $x126 $x112)))
 (let (($x125 (and $x96 $x40)))
 (let (($x33 (and $x125 $x124)))
 (let (($x80 (and $x33 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x160 (and $x177 $x152)))
 (let (($x36 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and (not $x36) $x160)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x5 $x170)))
 (let (($x13 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x162 (and $x13 $x175)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x97 (and $x41 $x162)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x193 (and $x26 $x97)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x194 (and $x24 $x193)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x195 (and $x19 $x194)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x196 (and $x11 $x195)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x197 (and $x31 $x196)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x198 (and $x46 $x197)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x199 (and $x17 $x198)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x200 (and $x18 $x199)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x23 $x200)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x202 (and $x55 $x201)))
 (let (($x192 (=> $x202 $x187)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x30 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x163 (ite $x30 ?x189 (_ bv0 32))))
 (let ((?x169 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x192 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x155 (ite $x192 ?x169 ?x163)))
 (let (($x180 (bvuge ?x155 (_ bv1 32))))
 (let (($x181 (= $x180 true)))
 (let (($x130 (= $x181 true)))
 (let (($x195 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var736X)))
 (=> $x166 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var736X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var735X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var735X)))
 (= $x166 false)))
 ))
 (let (($x196 (and $x171 $x195)))
 (let (($x197 (= $x196 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x127 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x93 $x56)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x94)))))))
 (let (($x33 (and $x119 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x83 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x82 (= $x83 true)))
 (let (($x81 (= $x82 true)))
 (let (($x57 (= $x81 true)))
 (let (($x84 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x84 true)))
 (let (($x67 (= $x62 true)))
 (let (($x76 (= $x67 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x87)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x88 true)))
 (let (($x60 (= $x59 true)))
 (let (($x68 (= ?x71 input.dst.llvm-%n)))
 (let (($x74 (= $x68 true)))
 (let (($x85 (= $x74 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x64 (= $x16 true)))
 (let (($x61 (= $x64 true)))
 (let (($x42 (= $x61 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x14 true)))
 (let (($x38 (= $x159 true)))
 (let (($x28 (= $x38 true)))
 (let (($x32 (and $x28 $x53)))
 (let (($x69 (and $x32 $x42)))
 (let (($x77 (and $x69 $x85)))
 (let (($x70 (and $x77 $x60)))
 (let (($x79 (and $x70 $x76)))
 (let (($x73 (and $x79 $x57)))
 (let (($x50 (and $x73 $x102)))
 (let (($x100 (and $x50 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x198 (and $x177 $x197)))
 (let (($x15 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x15) $x198)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and $x35 $x200)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x202 (and $x48 $x201)))
 (let (($x39 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x203 (and $x39 $x202)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x204 (and $x22 $x203)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x51 (and $x6 $x204)))
 (let (($x47 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x182 (and $x47 $x51)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x190 (and $x45 $x182)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x188 (and $x20 $x190)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x178 (and $x34 $x188)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x179 (and $x8 $x178)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x183 (and $x49 $x179)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x191 (and $x37 $x183)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x52 $x191)))
 (let (($x168 (=> $x187 $x130)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x30 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x163 (ite $x30 ?x189 (_ bv0 32))))
 (let ((?x169 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x192 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x155 (ite $x192 ?x169 ?x163)))
 (let (($x180 (bvuge ?x155 (_ bv1 32))))
 (let (($x181 (= $x180 true)))
 (let (($x130 (= $x181 true)))
 (let (($x195 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var736X)))
 (=> $x166 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var736X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var735X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var735X)))
 (= $x166 false)))
 ))
 (let (($x196 (and $x171 $x195)))
 (let (($x197 (= $x196 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x127 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x93 $x56)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x94)))))))
 (let (($x33 (and $x119 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x83 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x82 (= $x83 true)))
 (let (($x81 (= $x82 true)))
 (let (($x57 (= $x81 true)))
 (let (($x84 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x84 true)))
 (let (($x67 (= $x62 true)))
 (let (($x76 (= $x67 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x87)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x88 true)))
 (let (($x60 (= $x59 true)))
 (let (($x68 (= ?x71 input.dst.llvm-%n)))
 (let (($x74 (= $x68 true)))
 (let (($x85 (= $x74 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x64 (= $x16 true)))
 (let (($x61 (= $x64 true)))
 (let (($x42 (= $x61 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x14 true)))
 (let (($x38 (= $x159 true)))
 (let (($x28 (= $x38 true)))
 (let (($x32 (and $x28 $x53)))
 (let (($x69 (and $x32 $x42)))
 (let (($x77 (and $x69 $x85)))
 (let (($x70 (and $x77 $x60)))
 (let (($x79 (and $x70 $x76)))
 (let (($x73 (and $x79 $x57)))
 (let (($x50 (and $x73 $x102)))
 (let (($x100 (and $x50 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x198 (and $x177 $x197)))
 (let (($x15 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x15) $x198)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and $x35 $x200)))
 (let (($x48 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x202 (and $x48 $x201)))
 (let (($x39 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x203 (and $x39 $x202)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x204 (and $x22 $x203)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x51 (and $x6 $x204)))
 (let (($x47 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x182 (and $x47 $x51)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x190 (and $x45 $x182)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x188 (and $x20 $x190)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x178 (and $x34 $x188)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x179 (and $x8 $x178)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x183 (and $x49 $x179)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x191 (and $x37 $x183)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x187 (and $x52 $x191)))
 (let (($x168 (=> $x187 $x130)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 176 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x160 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x175 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x184 (ite $x175 ?x160 (_ bv0 32))))
 (let ((?x167 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x86 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x185 (ite $x86 ?x167 ?x184)))
 (let (($x157 (bvsle ?x185 (_ bv3 32))))
 (let (($x162 (= $x157 true)))
 (let (($x152 (= $x162 true)))
 (let (($x182 (forall ((input.ind-%var777X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var777X)))
 (=> $x171 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var777X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var776X)))
 (= $x171 false)))
 ))
 (let (($x190 (and $x195 $x182)))
 (let (($x188 (= $x190 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x127 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x105 $x56)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x104)))))))
 (let (($x33 (and $x93 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x76 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x79 (= $x76 true)))
 (let (($x83 (= $x79 true)))
 (let (($x82 (= $x83 true)))
 (let (($x60 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x60 true)))
 (let (($x84 (= $x70 true)))
 (let (($x62 (= $x84 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x69)))
 (let (($x85 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x85 true)))
 (let (($x88 (= $x77 true)))
 (let (($x87 (= ?x65 input.dst.llvm-%n)))
 (let (($x71 (= $x87 true)))
 (let (($x68 (= $x71 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x32 (= $x53 true)))
 (let (($x16 (= $x32 true)))
 (let (($x64 (= $x16 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x29 (= $x28 true)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x36 true)))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x27 (and $x159 $x7)))
 (let (($x61 (and $x27 $x64)))
 (let (($x74 (and $x61 $x68)))
 (let (($x59 (and $x74 $x88)))
 (let (($x67 (and $x59 $x62)))
 (let (($x81 (and $x67 $x82)))
 (let (($x50 (and $x81 $x102)))
 (let (($x100 (and $x50 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x178 (and $x177 $x188)))
 (let (($x5 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (and (not $x5) $x178)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x25 $x183)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x187 (and $x41 $x191)))
 (let (($x44 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x192 (and $x44 $x187)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x169 (and $x24 $x192)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x30 (and $x19 $x169)))
 (let (($x129 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x189 (and $x129 $x30)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x21 $x189)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x46 $x163)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x180 (and $x17 $x155)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x181 (and $x18 $x180)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x130 (and $x23 $x181)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x168 (and $x12 $x130)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x154 (and $x78 $x168)))
 (let (($x97 (=> $x154 $x152)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x160 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x175 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x184 (ite $x175 ?x160 (_ bv0 32))))
 (let ((?x167 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x86 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x185 (ite $x86 ?x167 ?x184)))
 (let (($x157 (bvsle ?x185 (_ bv3 32))))
 (let (($x162 (= $x157 true)))
 (let (($x152 (= $x162 true)))
 (let (($x182 (forall ((input.ind-%var777X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var777X)))
 (=> $x171 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var777X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var776X)))
 (= $x171 false)))
 ))
 (let (($x190 (and $x195 $x182)))
 (let (($x188 (= $x190 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x127 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x105 $x56)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x104)))))))
 (let (($x33 (and $x93 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x76 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x79 (= $x76 true)))
 (let (($x83 (= $x79 true)))
 (let (($x82 (= $x83 true)))
 (let (($x60 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x60 true)))
 (let (($x84 (= $x70 true)))
 (let (($x62 (= $x84 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x69)))
 (let (($x85 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x85 true)))
 (let (($x88 (= $x77 true)))
 (let (($x87 (= ?x65 input.dst.llvm-%n)))
 (let (($x71 (= $x87 true)))
 (let (($x68 (= $x71 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x32 (= $x53 true)))
 (let (($x16 (= $x32 true)))
 (let (($x64 (= $x16 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x29 (= $x28 true)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x36 true)))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x27 (and $x159 $x7)))
 (let (($x61 (and $x27 $x64)))
 (let (($x74 (and $x61 $x68)))
 (let (($x59 (and $x74 $x88)))
 (let (($x67 (and $x59 $x62)))
 (let (($x81 (and $x67 $x82)))
 (let (($x50 (and $x81 $x102)))
 (let (($x100 (and $x50 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x114 (and $x106 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x178 (and $x177 $x188)))
 (let (($x5 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x183 (and (not $x5) $x178)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x25 $x183)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x187 (and $x41 $x191)))
 (let (($x44 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x192 (and $x44 $x187)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x169 (and $x24 $x192)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x30 (and $x19 $x169)))
 (let (($x129 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x189 (and $x129 $x30)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x21 $x189)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x46 $x163)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x180 (and $x17 $x155)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x181 (and $x18 $x180)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x130 (and $x23 $x181)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x168 (and $x12 $x130)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x154 (and $x78 $x168)))
 (let (($x97 (=> $x154 $x152)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x201 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x158 (ite $x201 ?x198 (_ bv0 32))))
 (let ((?x170 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x73 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x166 (ite $x73 ?x170 ?x158)))
 (let (($x193 (bvule ?x166 (_ bv4 32))))
 (let (($x202 (= $x193 true)))
 (let (($x197 (= $x202 true)))
 (let (($x189 (forall ((input.ind-%var962X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var962X)))
 (=> $x195 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var962X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var961X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var961X)))
 (= $x195 false)))
 ))
 (let (($x163 (and $x182 $x189)))
 (let (($x155 (= $x163 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x100 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x105 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x111 $x56)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x104)))))))
 (let (($x33 (and $x101 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x84 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x84 true)))
 (let (($x67 (= $x62 true)))
 (let (($x76 (= $x67 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x88 (= $x77 true)))
 (let (($x59 (= $x88 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x64)))
 (let (($x71 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x71 true)))
 (let (($x74 (= $x68 true)))
 (let (($x42 (= ?x61 input.dst.llvm-%n)))
 (let (($x69 (= $x42 true)))
 (let (($x65 (= $x69 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x159 (= $x14 true)))
 (let (($x38 (= $x159 true)))
 (let (($x28 (= $x38 true)))
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x199 (= $x15 true)))
 (let (($x36 (= $x199 true)))
 (let (($x174 (= $x36 true)))
 (let (($x29 (and $x174 $x28)))
 (let (($x32 (and $x29 $x53)))
 (let (($x87 (and $x32 $x65)))
 (let (($x85 (and $x87 $x74)))
 (let (($x70 (and $x85 $x60)))
 (let (($x79 (and $x70 $x76)))
 (let (($x50 (and $x79 $x102)))
 (let (($x122 (and $x50 $x121)))
 (let (($x54 (and $x122 $x66)))
 (let (($x114 (and $x54 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x180 (and $x177 $x155)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and (not $x35) $x180)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x13 $x130)))
 (let (($x39 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x154 (and $x39 $x168)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x86 (and $x26 $x154)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x167 (and $x6 $x86)))
 (let (($x47 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x175 (and $x47 $x167)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x160 (and $x11 $x175)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x184 (and $x31 $x160)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x185 (and $x34 $x184)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x157 (and $x8 $x185)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x162 (and $x49 $x157)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x152 (and $x37 $x162)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x97 (and $x55 $x152)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x164 (and $x57 $x97)))
 (let (($x203 (=> $x164 $x197)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x201 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x158 (ite $x201 ?x198 (_ bv0 32))))
 (let ((?x170 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x73 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x166 (ite $x73 ?x170 ?x158)))
 (let (($x193 (bvule ?x166 (_ bv4 32))))
 (let (($x202 (= $x193 true)))
 (let (($x197 (= $x202 true)))
 (let (($x189 (forall ((input.ind-%var962X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var962X)))
 (=> $x195 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var962X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var961X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var961X)))
 (= $x195 false)))
 ))
 (let (($x163 (and $x182 $x189)))
 (let (($x155 (= $x163 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x153)))
 (let (($x165 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x165 true)))
 (let (($x176 (= $x172 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x145)))
 (let (($x147 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x135 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x123 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x100 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x105 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x111 $x56)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x104)))))))
 (let (($x33 (and $x101 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x84 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x84 true)))
 (let (($x67 (= $x62 true)))
 (let (($x76 (= $x67 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x88 (= $x77 true)))
 (let (($x59 (= $x88 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x64)))
 (let (($x71 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x71 true)))
 (let (($x74 (= $x68 true)))
 (let (($x42 (= ?x61 input.dst.llvm-%n)))
 (let (($x69 (= $x42 true)))
 (let (($x65 (= $x69 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x159 (= $x14 true)))
 (let (($x38 (= $x159 true)))
 (let (($x28 (= $x38 true)))
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x199 (= $x15 true)))
 (let (($x36 (= $x199 true)))
 (let (($x174 (= $x36 true)))
 (let (($x29 (and $x174 $x28)))
 (let (($x32 (and $x29 $x53)))
 (let (($x87 (and $x32 $x65)))
 (let (($x85 (and $x87 $x74)))
 (let (($x70 (and $x85 $x60)))
 (let (($x79 (and $x70 $x76)))
 (let (($x50 (and $x79 $x102)))
 (let (($x122 (and $x50 $x121)))
 (let (($x54 (and $x122 $x66)))
 (let (($x114 (and $x54 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x139 (and $x134 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x150 (and $x144 $x149)))
 (let (($x177 (and $x150 $x176)))
 (let (($x180 (and $x177 $x155)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and (not $x35) $x180)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x13 $x130)))
 (let (($x39 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x154 (and $x39 $x168)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x86 (and $x26 $x154)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x167 (and $x6 $x86)))
 (let (($x47 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x175 (and $x47 $x167)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x160 (and $x11 $x175)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x184 (and $x31 $x160)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x185 (and $x34 $x184)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x157 (and $x8 $x185)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x162 (and $x49 $x157)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x152 (and $x37 $x162)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x97 (and $x55 $x152)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x164 (and $x57 $x97)))
 (let (($x203 (=> $x164 $x197)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x178 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x171 (ite $x178 ?x173 (_ bv0 32))))
 (let ((?x191 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x200 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x204 (ite $x200 ?x191 ?x171)))
 (let (($x187 (bvule ?x204 (_ bv9 32))))
 (let (($x188 (= $x187 true)))
 (let (($x192 (= $x188 true)))
 (let (($x184 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1147X)))
 (=> $x183 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1147X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1146X)))
 (= $x183 false)))
 ))
 (let (($x185 (and $x163 $x184)))
 (let (($x157 (= $x185 true)))
 (let ((?x156 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x156)))
 (let (($x172 (= ?x161 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x172 true)))
 (let (($x177 (= $x176 true)))
 (let ((?x146 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x146)))
 (let (($x148 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x141 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x136 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x131 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x107 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x9 (= $x95 true)))
 (let (($x115 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x114 (= $x91 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x109)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x127 $x113)))
 (let (($x124 (and $x120 $x56)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x93 $x124)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x112)))))))
 (let (($x110 (and $x105 $x33)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x84 (= $x70 true)))
 (let (($x62 (= $x84 true)))
 (let (($x67 (= $x62 true)))
 (let (($x85 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x77 (= $x85 true)))
 (let (($x88 (= $x77 true)))
 (let (($x59 (= $x88 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x43)))
 (let (($x87 (= ?x7 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x87 true)))
 (let (($x68 (= $x71 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x61 (= $x64 true)))
 (let (($x42 (= $x61 true)))
 (let (($x69 (= $x42 true)))
 (let (($x27 (= ?x7 input.dst.llvm-%n)))
 (let (($x53 (= $x27 true)))
 (let (($x32 (= $x53 true)))
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x38 (= $x159 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x5 true)))
 (let (($x15 (= $x179 true)))
 (let (($x199 (= $x15 true)))
 (let (($x28 (and $x199 $x38)))
 (let (($x16 (and $x28 $x32)))
 (let (($x65 (and $x16 $x69)))
 (let (($x74 (and $x65 $x68)))
 (let (($x60 (and $x74 $x59)))
 (let (($x76 (and $x60 $x67)))
 (let (($x80 (and $x76 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x98 (and $x106 $x114)))
 (let (($x123 (and $x98 $x9)))
 (let (($x135 (and $x123 $x134)))
 (let (($x140 (and $x135 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x153 (and $x145 $x150)))
 (let (($x194 (and $x153 $x177)))
 (let (($x162 (and $x194 $x157)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x25) $x162)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x48 $x97)))
 (let (($x44 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x44 $x164)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x22 $x73)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x201 (and $x19 $x170)))
 (let (($x129 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x198 (and $x129 $x201)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x158 (and $x45 $x198)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x166 (and $x20 $x158)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x193 (and $x17 $x166)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x202 (and $x18 $x193)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x197 (and $x23 $x202)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x203 (and $x12 $x197)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x151 (and $x52 $x203)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x82 (and $x83 $x151)))
 (let (($x196 (=> $x82 $x192)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x178 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x171 (ite $x178 ?x173 (_ bv0 32))))
 (let ((?x191 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x200 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x204 (ite $x200 ?x191 ?x171)))
 (let (($x187 (bvule ?x204 (_ bv9 32))))
 (let (($x188 (= $x187 true)))
 (let (($x192 (= $x188 true)))
 (let (($x184 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1147X)))
 (=> $x183 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1147X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1146X)))
 (= $x183 false)))
 ))
 (let (($x185 (and $x163 $x184)))
 (let (($x157 (= $x185 true)))
 (let ((?x156 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x156)))
 (let (($x172 (= ?x161 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x172 true)))
 (let (($x177 (= $x176 true)))
 (let ((?x146 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x146)))
 (let (($x148 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x141 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x136 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x131 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x107 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x9 (= $x95 true)))
 (let (($x115 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x114 (= $x91 true)))
 (let (($x10 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x54 (= $x66 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x109)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x127 $x113)))
 (let (($x124 (and $x120 $x56)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x93 $x124)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x112)))))))
 (let (($x110 (and $x105 $x33)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x84 (= $x70 true)))
 (let (($x62 (= $x84 true)))
 (let (($x67 (= $x62 true)))
 (let (($x85 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x77 (= $x85 true)))
 (let (($x88 (= $x77 true)))
 (let (($x59 (= $x88 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x43)))
 (let (($x87 (= ?x7 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x87 true)))
 (let (($x68 (= $x71 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x61 (= $x64 true)))
 (let (($x42 (= $x61 true)))
 (let (($x69 (= $x42 true)))
 (let (($x27 (= ?x7 input.dst.llvm-%n)))
 (let (($x53 (= $x27 true)))
 (let (($x32 (= $x53 true)))
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x38 (= $x159 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x5 true)))
 (let (($x15 (= $x179 true)))
 (let (($x199 (= $x15 true)))
 (let (($x28 (and $x199 $x38)))
 (let (($x16 (and $x28 $x32)))
 (let (($x65 (and $x16 $x69)))
 (let (($x74 (and $x65 $x68)))
 (let (($x60 (and $x74 $x59)))
 (let (($x76 (and $x60 $x67)))
 (let (($x80 (and $x76 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x106 (and $x100 $x54)))
 (let (($x98 (and $x106 $x114)))
 (let (($x123 (and $x98 $x9)))
 (let (($x135 (and $x123 $x134)))
 (let (($x140 (and $x135 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x153 (and $x145 $x150)))
 (let (($x194 (and $x153 $x177)))
 (let (($x162 (and $x194 $x157)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x25) $x162)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x48 $x97)))
 (let (($x44 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x44 $x164)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x22 $x73)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x201 (and $x19 $x170)))
 (let (($x129 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x198 (and $x129 $x201)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x158 (and $x45 $x198)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x166 (and $x20 $x158)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x193 (and $x17 $x166)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x202 (and $x18 $x193)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x197 (and $x23 $x202)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x203 (and $x12 $x197)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x151 (and $x52 $x203)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x82 (and $x83 $x151)))
 (let (($x196 (=> $x82 $x192)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x178 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x171 (ite $x178 ?x173 (_ bv0 32))))
 (let ((?x191 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x200 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x204 (ite $x200 ?x191 ?x171)))
 (let (($x187 (bvule ?x204 (_ bv10 32))))
 (let (($x188 (= $x187 true)))
 (let (($x192 (= $x188 true)))
 (let (($x160 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1342X)))
 (=> $x153 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1342X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var1341X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1341X)))
 (= $x153 false)))
 ))
 (let (($x184 (and $x172 $x160)))
 (let (($x185 (= $x184 true)))
 (let ((?x141 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x141)))
 (let (($x144 (= ?x142 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x135)))
 (let (($x137 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x123 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x100 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x93 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x118 $x56)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x112)))))))
 (let (($x33 (and $x92 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x88 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x88 true)))
 (let (($x60 (= $x59 true)))
 (let (($x70 (= $x60 true)))
 (let (($x71 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x68 (= $x71 true)))
 (let (($x74 (= $x68 true)))
 (let (($x85 (= $x74 true)))
 (let (($x61 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x42 (= $x61 true)))
 (let (($x69 (= $x42 true)))
 (let (($x65 (= $x69 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x38)))
 (let (($x53 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (= $x53 true)))
 (let (($x16 (= $x32 true)))
 (let (($x29 (= ?x28 input.dst.llvm-%n)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x199 (= $x15 true)))
 (let (($x36 (= $x199 true)))
 (let (($x174 (= $x36 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x35 true)))
 (let (($x5 (= $x181 true)))
 (let (($x179 (= $x5 true)))
 (let (($x14 (and $x179 $x174)))
 (let (($x27 (and $x14 $x7)))
 (let (($x64 (and $x27 $x16)))
 (let (($x87 (and $x64 $x65)))
 (let (($x77 (and $x87 $x85)))
 (let (($x84 (and $x77 $x70)))
 (let (($x50 (and $x84 $x102)))
 (let (($x122 (and $x50 $x121)))
 (let (($x54 (and $x122 $x66)))
 (let (($x114 (and $x54 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x140 (and $x134 $x139)))
 (let (($x147 (and $x140 $x146)))
 (let (($x157 (and $x147 $x185)))
 (let (($x13 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x13) $x157)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x41 $x97)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x26 $x164)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x24 $x73)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x201 (and $x47 $x170)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x198 (and $x11 $x201)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x158 (and $x21 $x198)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x166 (and $x46 $x158)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x193 (and $x8 $x166)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x202 (and $x49 $x193)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x197 (and $x37 $x202)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x203 (and $x55 $x197)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x151 (and $x78 $x203)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x82 (and $x79 $x151)))
 (let (($x196 (=> $x82 $x192)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x178 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x171 (ite $x178 ?x173 (_ bv0 32))))
 (let ((?x191 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x200 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x204 (ite $x200 ?x191 ?x171)))
 (let (($x187 (bvule ?x204 (_ bv10 32))))
 (let (($x188 (= $x187 true)))
 (let (($x192 (= $x188 true)))
 (let (($x160 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1342X)))
 (=> $x153 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1342X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var1341X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1341X)))
 (= $x153 false)))
 ))
 (let (($x184 (and $x172 $x160)))
 (let (($x185 (= $x184 true)))
 (let ((?x141 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x141)))
 (let (($x144 (= ?x142 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x135)))
 (let (($x137 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x123 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x131 (= $x123 true)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x107 (= $x98 true)))
 (let (($x128 (= $x107 true)))
 (let (($x95 (= $x128 true)))
 (let (($x116 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x115 (= $x116 true)))
 (let (($x89 (= $x115 true)))
 (let (($x91 (= $x89 true)))
 (let (($x100 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let (($x66 (= $x103 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x93 $x125)))
 (let (($x56 (and $x113 $x109)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x118 $x56)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x112)))))))
 (let (($x33 (and $x92 $x124)))
 (let (($x110 (= $x33 true)))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x88 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x88 true)))
 (let (($x60 (= $x59 true)))
 (let (($x70 (= $x60 true)))
 (let (($x71 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x68 (= $x71 true)))
 (let (($x74 (= $x68 true)))
 (let (($x85 (= $x74 true)))
 (let (($x61 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x42 (= $x61 true)))
 (let (($x69 (= $x42 true)))
 (let (($x65 (= $x69 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x38)))
 (let (($x53 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (= $x53 true)))
 (let (($x16 (= $x32 true)))
 (let (($x29 (= ?x28 input.dst.llvm-%n)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x199 (= $x15 true)))
 (let (($x36 (= $x199 true)))
 (let (($x174 (= $x36 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x35 true)))
 (let (($x5 (= $x181 true)))
 (let (($x179 (= $x5 true)))
 (let (($x14 (and $x179 $x174)))
 (let (($x27 (and $x14 $x7)))
 (let (($x64 (and $x27 $x16)))
 (let (($x87 (and $x64 $x65)))
 (let (($x77 (and $x87 $x85)))
 (let (($x84 (and $x77 $x70)))
 (let (($x50 (and $x84 $x102)))
 (let (($x122 (and $x50 $x121)))
 (let (($x54 (and $x122 $x66)))
 (let (($x114 (and $x54 $x91)))
 (let (($x9 (and $x114 $x95)))
 (let (($x134 (and $x9 $x133)))
 (let (($x140 (and $x134 $x139)))
 (let (($x147 (and $x140 $x146)))
 (let (($x157 (and $x147 $x185)))
 (let (($x13 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x13) $x157)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x41 $x97)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x26 $x164)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x24 $x73)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x201 (and $x47 $x170)))
 (let (($x11 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x198 (and $x11 $x201)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x158 (and $x21 $x198)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x166 (and $x46 $x158)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x193 (and $x8 $x166)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x202 (and $x49 $x193)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x197 (and $x37 $x202)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x203 (and $x55 $x197)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x151 (and $x78 $x203)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x82 (and $x79 $x151)))
 (let (($x196 (=> $x82 $x192)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x166 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x202 (ite $x166 ?x193 (_ bv0 32))))
 (let ((?x158 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x198 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x197 (ite $x198 ?x158 ?x202)))
 (let (($x203 (bvsge ?x197 (_ bv1 32))))
 (let (($x151 (= $x203 true)))
 (let (($x82 (= $x151 true)))
 (let (($x145 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1527X)))
 (=> $x131 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1527X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1526X)))
 (= $x131 false)))
 ))
 (let (($x146 (and $x135 $x145)))
 (let (($x147 (= $x146 true)))
 (let ((?x115 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x115)))
 (let (($x114 (= ?x89 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x114 true)))
 (let (($x107 (= $x98 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x10)))
 (let (($x66 (= ?x103 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x66 true)))
 (let (($x106 (= $x54 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x120 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x101)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x117 $x96)))
 (let (($x92 (and $x119 $x81)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x68 $x92)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x70)))))))
 (let (($x118 (and $x75 $x76)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x40 (= $x127 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x16 true)))
 (let (($x61 (= $x64 true)))
 (let (($x42 (= $x61 true)))
 (let (($x43 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x179)))
 (let (($x159 (= ?x15 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x159 true)))
 (let (($x28 (= $x38 true)))
 (let (($x199 (= ?x15 input.dst.llvm-%n)))
 (let (($x36 (= $x199 true)))
 (let (($x174 (= $x36 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (= $x25 true)))
 (let (($x35 (= $x152 true)))
 (let (($x181 (= $x35 true)))
 (let (($x14 (and $x181 $x174)))
 (let (($x29 (and $x14 $x28)))
 (let (($x32 (and $x29 $x53)))
 (let (($x69 (and $x32 $x42)))
 (let (($x125 (and $x69 $x40)))
 (let (($x33 (and $x125 $x124)))
 (let (($x80 (and $x33 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x116 (and $x100 $x106)))
 (let (($x128 (and $x116 $x107)))
 (let (($x150 (and $x128 $x147)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x48) $x150)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x39 $x165)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x182 (and $x22 $x172)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x168 (and $x6 $x182)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x175 (and $x129 $x168)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x160 (and $x45 $x175)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x184 (and $x31 $x160)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x185 (and $x34 $x184)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x157 (and $x18 $x185)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x97 (and $x23 $x157)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x164 (and $x12 $x97)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x73 (and $x52 $x164)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x57 $x73)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x201 (and $x62 $x170)))
 (let (($x200 (=> $x201 $x82)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x166 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x202 (ite $x166 ?x193 (_ bv0 32))))
 (let ((?x158 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x198 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x197 (ite $x198 ?x158 ?x202)))
 (let (($x203 (bvsge ?x197 (_ bv1 32))))
 (let (($x151 (= $x203 true)))
 (let (($x82 (= $x151 true)))
 (let (($x145 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1527X)))
 (=> $x131 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1527X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1526X)))
 (= $x131 false)))
 ))
 (let (($x146 (and $x135 $x145)))
 (let (($x147 (= $x146 true)))
 (let ((?x115 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x115)))
 (let (($x114 (= ?x89 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x114 true)))
 (let (($x107 (= $x98 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x10)))
 (let (($x66 (= ?x103 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x66 true)))
 (let (($x106 (= $x54 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x99 (= $x90 true)))
 (let (($x121 (= $x99 true)))
 (let (($x122 (= $x121 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x63 (= $x110 true)))
 (let (($x102 (= $x63 true)))
 (let (($x50 (= $x102 true)))
 (let (($x120 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x101)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x117 $x96)))
 (let (($x92 (and $x119 $x81)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x68 $x92)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x70)))))))
 (let (($x118 (and $x75 $x76)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x40 (= $x127 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x16 true)))
 (let (($x61 (= $x64 true)))
 (let (($x42 (= $x61 true)))
 (let (($x43 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x7 (= $x43 true)))
 (let (($x27 (= $x7 true)))
 (let (($x53 (= $x27 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x179)))
 (let (($x159 (= ?x15 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x159 true)))
 (let (($x28 (= $x38 true)))
 (let (($x199 (= ?x15 input.dst.llvm-%n)))
 (let (($x36 (= $x199 true)))
 (let (($x174 (= $x36 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (= $x25 true)))
 (let (($x35 (= $x152 true)))
 (let (($x181 (= $x35 true)))
 (let (($x14 (and $x181 $x174)))
 (let (($x29 (and $x14 $x28)))
 (let (($x32 (and $x29 $x53)))
 (let (($x69 (and $x32 $x42)))
 (let (($x125 (and $x69 $x40)))
 (let (($x33 (and $x125 $x124)))
 (let (($x80 (and $x33 $x50)))
 (let (($x100 (and $x80 $x122)))
 (let (($x116 (and $x100 $x106)))
 (let (($x128 (and $x116 $x107)))
 (let (($x150 (and $x128 $x147)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x48) $x150)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x39 $x165)))
 (let (($x22 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x182 (and $x22 $x172)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x168 (and $x6 $x182)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x175 (and $x129 $x168)))
 (let (($x45 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x160 (and $x45 $x175)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x184 (and $x31 $x160)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x185 (and $x34 $x184)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x157 (and $x18 $x185)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x97 (and $x23 $x157)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x164 (and $x12 $x97)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x73 (and $x52 $x164)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x57 $x73)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x201 (and $x62 $x170)))
 (let (($x200 (=> $x201 $x82)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05480003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x193 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x197 (ite $x193 ?x202 (_ bv0 32))))
 (let ((?x166 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x158 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x203 (ite $x158 ?x166 ?x197)))
 (let (($x151 (bvsge ?x203 (_ bv0 32))))
 (let (($x82 (= $x151 true)))
 (let (($x200 (= $x82 true)))
 (let (($x145 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1722X)))
 (=> $x115 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1722X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1721X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1721X)))
 (= $x115 false)))
 ))
 (let (($x146 (and $x98 $x145)))
 (let (($x147 (= $x146 true)))
 (let ((?x99 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x99)))
 (let (($x100 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x110)))
 (let (($x102 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x102 true)))
 (let (($x80 (= $x50 true)))
 (let (($x120 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let (($x93 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x127 (= $x93 true)))
 (let (($x40 (= $x127 true)))
 (let (($x125 (= $x40 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x117)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x111 $x71)))
 (let (($x112 (and $x68 $x104)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x64 $x112)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x77)))))))
 (let (($x119 (and $x94 $x96)))
 (let (($x101 (= $x119 true)))
 (let (($x81 (= $x101 true)))
 (let (($x92 (= $x81 true)))
 (let (($x28 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x29 (= $x28 true)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let ((?x181 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x181)))
 (let (($x174 (= ?x5 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x179 (= ?x5 input.dst.llvm-%n)))
 (let (($x15 (= $x179 true)))
 (let (($x199 (= $x15 true)))
 (let (($x13 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x13 true)))
 (let (($x25 (= $x162 true)))
 (let (($x152 (= $x25 true)))
 (let (($x36 (and $x152 $x199)))
 (let (($x38 (and $x36 $x159)))
 (let (($x27 (and $x38 $x7)))
 (let (($x76 (and $x27 $x92)))
 (let (($x113 (and $x76 $x125)))
 (let (($x33 (and $x113 $x124)))
 (let (($x90 (and $x33 $x80)))
 (let (($x66 (and $x90 $x103)))
 (let (($x150 (and $x66 $x147)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and (not $x41) $x150)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x44 $x172)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x24 $x182)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x175 (and $x19 $x168)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x160 (and $x11 $x175)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x184 (and $x21 $x160)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x185 (and $x20 $x184)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x157 (and $x17 $x185)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x97 (and $x49 $x157)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x37 $x97)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x73 (and $x55 $x164)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x170 (and $x78 $x73)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x83 $x170)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x198 (and $x65 $x201)))
 (let (($x191 (=> $x198 $x200)))
 (not $x191)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x193 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x197 (ite $x193 ?x202 (_ bv0 32))))
 (let ((?x166 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x158 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x203 (ite $x158 ?x166 ?x197)))
 (let (($x151 (bvsge ?x203 (_ bv0 32))))
 (let (($x82 (= $x151 true)))
 (let (($x200 (= $x82 true)))
 (let (($x145 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1722X)))
 (=> $x115 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1722X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1721X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1721X)))
 (= $x115 false)))
 ))
 (let (($x146 (and $x98 $x145)))
 (let (($x147 (= $x146 true)))
 (let ((?x99 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x99)))
 (let (($x100 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x100 true)))
 (let (($x103 (= $x10 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x110)))
 (let (($x102 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x102 true)))
 (let (($x80 (= $x50 true)))
 (let (($x120 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x109 (= $x120 true)))
 (let (($x56 (= $x109 true)))
 (let (($x124 (= $x56 true)))
 (let (($x93 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x127 (= $x93 true)))
 (let (($x40 (= $x127 true)))
 (let (($x125 (= $x40 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x117)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x111 $x71)))
 (let (($x112 (and $x68 $x104)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x64 $x112)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x77)))))))
 (let (($x119 (and $x94 $x96)))
 (let (($x101 (= $x119 true)))
 (let (($x81 (= $x101 true)))
 (let (($x92 (= $x81 true)))
 (let (($x28 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x29 (= $x28 true)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let ((?x181 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x181)))
 (let (($x174 (= ?x5 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x179 (= ?x5 input.dst.llvm-%n)))
 (let (($x15 (= $x179 true)))
 (let (($x199 (= $x15 true)))
 (let (($x13 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x13 true)))
 (let (($x25 (= $x162 true)))
 (let (($x152 (= $x25 true)))
 (let (($x36 (and $x152 $x199)))
 (let (($x38 (and $x36 $x159)))
 (let (($x27 (and $x38 $x7)))
 (let (($x76 (and $x27 $x92)))
 (let (($x113 (and $x76 $x125)))
 (let (($x33 (and $x113 $x124)))
 (let (($x90 (and $x33 $x80)))
 (let (($x66 (and $x90 $x103)))
 (let (($x150 (and $x66 $x147)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and (not $x41) $x150)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x44 $x172)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x24 $x182)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x175 (and $x19 $x168)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x160 (and $x11 $x175)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x184 (and $x21 $x160)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x185 (and $x20 $x184)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x157 (and $x17 $x185)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x97 (and $x49 $x157)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x37 $x97)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x73 (and $x55 $x164)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x170 (and $x78 $x73)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x83 $x170)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x198 (and $x65 $x201)))
 (let (($x191 (=> $x198 $x200)))
 (not $x191)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x151 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (bvuge ?x151 (_ bv1 32))))
 (let (($x200 (= $x82 true)))
 (let (($x191 (= $x200 true)))
 (let (($x182 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1927X)))
 (=> $x103 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1927X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1926X)))
 (= $x103 false)))
 ))
 (let (($x168 (and $x114 $x182)))
 (let (($x175 (= $x168 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x102)))
 (let (($x80 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x56 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x124 (= $x56 true)))
 (let (($x33 (= $x124 true)))
 (let (($x110 (= $x33 true)))
 (let (($x40 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (= $x40 true)))
 (let (($x113 (= $x125 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x112)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x75 $x117)))
 (let (($x119 (and $x104 $x96)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x69 $x119)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x88)))))))
 (let (($x81 (and $x105 $x101)))
 (let (($x92 (= $x81 true)))
 (let (($x76 (= $x92 true)))
 (let (($x118 (= $x76 true)))
 (let (($x28 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x29 (= $x28 true)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x35)))
 (let (($x174 (= ?x181 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x179 (= ?x181 input.dst.llvm-%n)))
 (let (($x15 (= $x179 true)))
 (let (($x199 (= $x15 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x48)))
 (let (($x162 (= ?x153 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x162 true)))
 (let (($x152 (= $x25 true)))
 (let (($x36 (and $x152 $x199)))
 (let (($x38 (and $x36 $x159)))
 (let (($x27 (and $x38 $x7)))
 (let (($x93 (and $x27 $x118)))
 (let (($x109 (and $x93 $x120)))
 (let (($x63 (and $x109 $x110)))
 (let (($x121 (and $x63 $x99)))
 (let (($x160 (and $x121 $x175)))
 (let (($x39 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and (not $x39) $x160)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and $x26 $x185)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x97 (and $x6 $x157)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x164 (and $x47 $x97)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x73 (and $x45 $x164)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x170 (and $x31 $x73)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x201 (and $x46 $x170)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x198 (and $x8 $x201)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x158 (and $x23 $x198)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x166 (and $x12 $x158)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x193 (and $x52 $x166)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x202 (and $x57 $x193)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x197 (and $x79 $x202)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x203 (and $x53 $x197)))
 (let (($x87 (=> $x203 $x191)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x151 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (bvuge ?x151 (_ bv1 32))))
 (let (($x200 (= $x82 true)))
 (let (($x191 (= $x200 true)))
 (let (($x182 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1927X)))
 (=> $x103 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1927X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1926X)))
 (= $x103 false)))
 ))
 (let (($x168 (and $x114 $x182)))
 (let (($x175 (= $x168 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x102)))
 (let (($x80 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x80 true)))
 (let (($x99 (= $x90 true)))
 (let (($x56 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x124 (= $x56 true)))
 (let (($x33 (= $x124 true)))
 (let (($x110 (= $x33 true)))
 (let (($x40 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (= $x40 true)))
 (let (($x113 (= $x125 true)))
 (let (($x120 (= $x113 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x112)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x75 $x117)))
 (let (($x119 (and $x104 $x96)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x69 $x119)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x88)))))))
 (let (($x81 (and $x105 $x101)))
 (let (($x92 (= $x81 true)))
 (let (($x76 (= $x92 true)))
 (let (($x118 (= $x76 true)))
 (let (($x28 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x29 (= $x28 true)))
 (let (($x43 (= $x29 true)))
 (let (($x7 (= $x43 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x35)))
 (let (($x174 (= ?x181 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x174 true)))
 (let (($x159 (= $x14 true)))
 (let (($x179 (= ?x181 input.dst.llvm-%n)))
 (let (($x15 (= $x179 true)))
 (let (($x199 (= $x15 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x48)))
 (let (($x162 (= ?x153 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x162 true)))
 (let (($x152 (= $x25 true)))
 (let (($x36 (and $x152 $x199)))
 (let (($x38 (and $x36 $x159)))
 (let (($x27 (and $x38 $x7)))
 (let (($x93 (and $x27 $x118)))
 (let (($x109 (and $x93 $x120)))
 (let (($x63 (and $x109 $x110)))
 (let (($x121 (and $x63 $x99)))
 (let (($x160 (and $x121 $x175)))
 (let (($x39 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and (not $x39) $x160)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and $x26 $x185)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x97 (and $x6 $x157)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x164 (and $x47 $x97)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x73 (and $x45 $x164)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x170 (and $x31 $x73)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x201 (and $x46 $x170)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x198 (and $x8 $x201)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x158 (and $x23 $x198)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x166 (and $x12 $x158)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x193 (and $x52 $x166)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x202 (and $x57 $x193)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x197 (and $x79 $x202)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x203 (and $x53 $x197)))
 (let (($x87 (=> $x203 $x191)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x191 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x32 (ite $x191 ?x87 (_ bv0 32))))
 (let ((?x200 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x82 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x42 (ite $x82 ?x200 ?x32)))
 (let ((?x66 (bvmul (_ bv4294967295 32) ?x42)))
 (let ((?x145 (bvneg ?x66)))
 (let (($x122 (= ?x145 ?x143)))
 (let (($x100 (= $x122 true)))
 (let (($x182 (forall ((input.ind-%var2086X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2086X)))
 (= $x63 false)))
 ))
 (let (($x115 (forall ((input.ind-%var2087X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2087X)))
 (=> $x63 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2087X) (_ bv0 32)))))
 ))
 (let (($x168 (and $x115 $x182)))
 (let (($x175 (= $x168 true)))
 (let ((?x127 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x127)))
 (let (($x113 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x113 true)))
 (let (($x109 (= $x120 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x119)))
 (let (($x81 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x81 true)))
 (let (($x76 (= $x92 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x68 true)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x88)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x111 $x60)))
 (let (($x94 (and $x77 $x70)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x15 $x94)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x28)))))))
 (let (($x64 (and $x126 $x16)))
 (let (($x105 (= $x64 true)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x184)))
 (let (($x162 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (= $x162 true)))
 (let (($x152 (= $x25 true)))
 (let (($x48 (= ?x41 input.dst.llvm-%n)))
 (let (($x153 (= $x48 true)))
 (let (($x13 (= $x153 true)))
 (let (($x35 (and $x13 $x152)))
 (let (($x75 (and $x35 $x69)))
 (let (($x96 (and $x75 $x112)))
 (let (($x118 (and $x96 $x76)))
 (let (($x56 (and $x118 $x109)))
 (let (($x160 (and $x56 $x175)))
 (let (($x44 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and (not $x44) $x160)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and $x22 $x157)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x164 (and $x19 $x97)))
 (let (($x129 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x129 $x164)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x21 $x73)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x201 (and $x20 $x170)))
 (let (($x34 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x198 (and $x34 $x201)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x158 (and $x18 $x198)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x166 (and $x37 $x158)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x193 (and $x55 $x166)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x202 (and $x78 $x193)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x197 (and $x83 $x202)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x203 (and $x62 $x197)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x151 (and $x65 $x203)))
 (let (($x116 (=> $x151 $x100)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x191 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x32 (ite $x191 ?x87 (_ bv0 32))))
 (let ((?x200 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x82 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x42 (ite $x82 ?x200 ?x32)))
 (let ((?x66 (bvmul (_ bv4294967295 32) ?x42)))
 (let ((?x145 (bvneg ?x66)))
 (let (($x122 (= ?x145 ?x143)))
 (let (($x100 (= $x122 true)))
 (let (($x182 (forall ((input.ind-%var2086X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2086X)))
 (= $x63 false)))
 ))
 (let (($x115 (forall ((input.ind-%var2087X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2087X)))
 (=> $x63 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2087X) (_ bv0 32)))))
 ))
 (let (($x168 (and $x115 $x182)))
 (let (($x175 (= $x168 true)))
 (let ((?x127 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x127)))
 (let (($x113 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x113 true)))
 (let (($x109 (= $x120 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x119)))
 (let (($x81 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x81 true)))
 (let (($x76 (= $x92 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x68 true)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x88)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x111 $x60)))
 (let (($x94 (and $x77 $x70)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x15 $x94)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x28)))))))
 (let (($x64 (and $x126 $x16)))
 (let (($x105 (= $x64 true)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x184)))
 (let (($x162 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (= $x162 true)))
 (let (($x152 (= $x25 true)))
 (let (($x48 (= ?x41 input.dst.llvm-%n)))
 (let (($x153 (= $x48 true)))
 (let (($x13 (= $x153 true)))
 (let (($x35 (and $x13 $x152)))
 (let (($x75 (and $x35 $x69)))
 (let (($x96 (and $x75 $x112)))
 (let (($x118 (and $x96 $x76)))
 (let (($x56 (and $x118 $x109)))
 (let (($x160 (and $x56 $x175)))
 (let (($x44 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and (not $x44) $x160)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and $x22 $x157)))
 (let (($x19 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x164 (and $x19 $x97)))
 (let (($x129 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x129 $x164)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x21 $x73)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x201 (and $x20 $x170)))
 (let (($x34 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x198 (and $x34 $x201)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x158 (and $x18 $x198)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x166 (and $x37 $x158)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x193 (and $x55 $x166)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x202 (and $x78 $x193)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x197 (and $x83 $x202)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x203 (and $x62 $x197)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x151 (and $x65 $x203)))
 (let (($x116 (=> $x151 $x100)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x5 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x90 (ite $x5 ?x102 (_ bv0 32))))
 (let ((?x146 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x116 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x124 (ite $x116 ?x146 ?x90)))
 (let ((?x50 (bvmul (_ bv4294967295 32) ?x124)))
 (let ((?x144 (bvneg ?x50)))
 (let (($x99 (= ?x144 ?x150)))
 (let (($x33 (= $x99 true)))
 (let (($x198 (forall ((input.ind-%var2128X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2128X)))
 (=> $x10 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2128X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var2127X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2127X)))
 (= $x10 false)))
 ))
 (let (($x158 (and $x182 $x198)))
 (let (($x166 (= $x158 true)))
 (let ((?x127 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x127)))
 (let (($x113 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x113 true)))
 (let (($x109 (= $x120 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x119)))
 (let (($x81 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x81 true)))
 (let (($x76 (= $x92 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x68 true)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x88)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x111 $x60)))
 (let (($x94 (and $x77 $x70)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x36 $x94)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x29)))))))
 (let (($x64 (and $x15 $x16)))
 (let (($x105 (= $x64 true)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let ((?x185 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x185)))
 (let (($x153 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x153 true)))
 (let (($x162 (= $x13 true)))
 (let (($x41 (= ?x39 input.dst.llvm-%n)))
 (let (($x165 (= $x41 true)))
 (let (($x48 (= $x165 true)))
 (let (($x25 (and $x48 $x162)))
 (let (($x75 (and $x25 $x69)))
 (let (($x96 (and $x75 $x112)))
 (let (($x118 (and $x96 $x76)))
 (let (($x56 (and $x118 $x109)))
 (let (($x193 (and $x56 $x166)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x197 (and (not $x26) $x193)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x24 $x197)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x151 (and $x47 $x203)))
 (let (($x11 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x82 (and $x11 $x151)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x200 (and $x31 $x82)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x191 (and $x46 $x200)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x87 (and $x17 $x191)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x32 (and $x49 $x87)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x42 (and $x12 $x32)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x66 (and $x52 $x42)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x145 (and $x57 $x66)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x143 (and $x79 $x145)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x61 $x143)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x100 (and $x53 $x122)))
 (let (($x121 (=> $x100 $x33)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x5 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x90 (ite $x5 ?x102 (_ bv0 32))))
 (let ((?x146 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x116 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x124 (ite $x116 ?x146 ?x90)))
 (let ((?x50 (bvmul (_ bv4294967295 32) ?x124)))
 (let ((?x144 (bvneg ?x50)))
 (let (($x99 (= ?x144 ?x150)))
 (let (($x33 (= $x99 true)))
 (let (($x198 (forall ((input.ind-%var2128X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2128X)))
 (=> $x10 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2128X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var2127X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2127X)))
 (= $x10 false)))
 ))
 (let (($x158 (and $x182 $x198)))
 (let (($x166 (= $x158 true)))
 (let ((?x127 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x127)))
 (let (($x113 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x113 true)))
 (let (($x109 (= $x120 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x119)))
 (let (($x81 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x81 true)))
 (let (($x76 (= $x92 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x68 true)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x88)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x111 $x60)))
 (let (($x94 (and $x77 $x70)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x36 $x94)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x29)))))))
 (let (($x64 (and $x15 $x16)))
 (let (($x105 (= $x64 true)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let ((?x185 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x185)))
 (let (($x153 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x153 true)))
 (let (($x162 (= $x13 true)))
 (let (($x41 (= ?x39 input.dst.llvm-%n)))
 (let (($x165 (= $x41 true)))
 (let (($x48 (= $x165 true)))
 (let (($x25 (and $x48 $x162)))
 (let (($x75 (and $x25 $x69)))
 (let (($x96 (and $x75 $x112)))
 (let (($x118 (and $x96 $x76)))
 (let (($x56 (and $x118 $x109)))
 (let (($x193 (and $x56 $x166)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x197 (and (not $x26) $x193)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x24 $x197)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x151 (and $x47 $x203)))
 (let (($x11 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x82 (and $x11 $x151)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x200 (and $x31 $x82)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x191 (and $x46 $x200)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x87 (and $x17 $x191)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x32 (and $x49 $x87)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x42 (and $x12 $x32)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x66 (and $x52 $x42)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x145 (and $x57 $x66)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x143 (and $x79 $x145)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x61 $x143)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x100 (and $x53 $x122)))
 (let (($x121 (=> $x100 $x33)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (not $x90)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x102 $x124)))
 (let (($x144 (= $x50 true)))
 (let (($x150 (= $x144 true)))
 (let (($x197 (forall ((input.ind-%var2169X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2169X)))
 (=> $x120 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2169X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var2168X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2168X)))
 (= $x120 false)))
 ))
 (let (($x203 (and $x10 $x197)))
 (let (($x151 (= $x203 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x104)))
 (let (($x76 (= ?x112 input.dst.llvm-%n)))
 (let (($x118 (= $x76 true)))
 (let (($x93 (= $x118 true)))
 (let (($x96 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (= $x96 true)))
 (let (($x101 (= $x119 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x105)))
 (let (($x75 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x75 true)))
 (let (($x68 (= $x71 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x111)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x27 $x199)))
 (let (($x59 (and $x36 $x74)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x153 $x59)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x159)))))))
 (let (($x77 (and $x7 $x60)))
 (let (($x88 (= $x77 true)))
 (let (($x70 (= $x88 true)))
 (let (($x94 (= $x70 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x26)))
 (let (($x185 (= ?x202 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x185 true)))
 (let (($x184 (= $x39 true)))
 (let (($x16 (and $x184 $x94)))
 (let (($x117 (and $x16 $x68)))
 (let (($x81 (and $x117 $x101)))
 (let (($x127 (and $x81 $x93)))
 (let (($x82 (and $x127 $x151)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and $x6 $x82)))
 (let (($x129 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x191 (and $x129 $x200)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x87 (and $x45 $x191)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x20 $x87)))
 (let (($x34 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x42 (and $x34 $x32)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x66 (and $x8 $x42)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x23 $x66)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x143 (and $x55 $x145)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x122 (and $x78 $x143)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x100 (and $x83 $x122)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x62 $x100)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x146 (and $x181 $x116)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x5 (and $x65 $x146)))
 (let (($x99 (=> $x5 $x150)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (not $x90)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x102 $x124)))
 (let (($x144 (= $x50 true)))
 (let (($x150 (= $x144 true)))
 (let (($x197 (forall ((input.ind-%var2169X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2169X)))
 (=> $x120 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2169X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var2168X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2168X)))
 (= $x120 false)))
 ))
 (let (($x203 (and $x10 $x197)))
 (let (($x151 (= $x203 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x104)))
 (let (($x76 (= ?x112 input.dst.llvm-%n)))
 (let (($x118 (= $x76 true)))
 (let (($x93 (= $x118 true)))
 (let (($x96 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (= $x96 true)))
 (let (($x101 (= $x119 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x105)))
 (let (($x75 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x75 true)))
 (let (($x68 (= $x71 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x111)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x27 $x199)))
 (let (($x59 (and $x36 $x74)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x153 $x59)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x159)))))))
 (let (($x77 (and $x7 $x60)))
 (let (($x88 (= $x77 true)))
 (let (($x70 (= $x88 true)))
 (let (($x94 (= $x70 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x26)))
 (let (($x185 (= ?x202 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x185 true)))
 (let (($x184 (= $x39 true)))
 (let (($x16 (and $x184 $x94)))
 (let (($x117 (and $x16 $x68)))
 (let (($x81 (and $x117 $x101)))
 (let (($x127 (and $x81 $x93)))
 (let (($x82 (and $x127 $x151)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and $x6 $x82)))
 (let (($x129 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x191 (and $x129 $x200)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x87 (and $x45 $x191)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x20 $x87)))
 (let (($x34 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x42 (and $x34 $x32)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x66 (and $x8 $x42)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x23 $x66)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x143 (and $x55 $x145)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x122 (and $x78 $x143)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x100 (and $x83 $x122)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x62 $x100)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x146 (and $x181 $x116)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x5 (and $x65 $x146)))
 (let (($x99 (=> $x5 $x150)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x103 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x35 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x97 (ite $x35 ?x103 (_ bv0 32))))
 (let ((?x98 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x121 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x160 (ite $x121 ?x98 ?x97)))
 (let ((?x110 (bvmul (_ bv4294967295 32) ?x160)))
 (let ((?x63 (bvneg ?x110)))
 (let (($x164 (= ?x63 ?x115)))
 (let (($x175 (= $x164 true)))
 (let (($x102 (forall ((input.ind-%var2175X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2175X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2175X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var2174X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2174X)))
 (= $x82 false)))
 ))
 (let (($x90 (and $x32 $x102)))
 (let (($x124 (= $x90 true)))
 (let ((?x113 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x113)))
 (let (($x10 (= ?x120 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x10 true)))
 (let (($x166 (= $x170 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x101)))
 (let (($x92 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x92 true)))
 (let (($x118 (= $x76 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let (($x96 (= $x112 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x70)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x74 $x77)))
 (let (($x16 (and $x88 $x94)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x159 $x16)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x153)))))))
 (let (($x105 (and $x111 $x64)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let (($x75 (= $x69 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x26)))
 (let (($x13 (= ?x202 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (= $x13 true)))
 (let (($x43 (= $x162 true)))
 (let (($x185 (= ?x202 input.dst.llvm-%n)))
 (let (($x39 (= $x185 true)))
 (let (($x184 (= $x39 true)))
 (let (($x25 (and $x184 $x43)))
 (let (($x71 (and $x25 $x75)))
 (let (($x119 (and $x71 $x96)))
 (let (($x93 (and $x119 $x118)))
 (let (($x193 (and $x93 $x166)))
 (let (($x50 (and $x193 $x124)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and (not $x24) $x50)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x19 $x150)))
 (let (($x11 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x33 (and $x11 $x99)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x165 (and $x21 $x33)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x109 (and $x46 $x165)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x201 (and $x17 $x109)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x157 (and $x18 $x201)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x40 (and $x37 $x157)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x52 $x40)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x56 (and $x57 $x125)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x198 (and $x79 $x56)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x182 (and $x61 $x198)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x158 (and $x152 $x182)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x168 (and $x53 $x158)))
 (let (($x73 (=> $x168 $x175)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x103 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x35 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x97 (ite $x35 ?x103 (_ bv0 32))))
 (let ((?x98 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x121 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x160 (ite $x121 ?x98 ?x97)))
 (let ((?x110 (bvmul (_ bv4294967295 32) ?x160)))
 (let ((?x63 (bvneg ?x110)))
 (let (($x164 (= ?x63 ?x115)))
 (let (($x175 (= $x164 true)))
 (let (($x102 (forall ((input.ind-%var2175X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2175X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2175X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var2174X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2174X)))
 (= $x82 false)))
 ))
 (let (($x90 (and $x32 $x102)))
 (let (($x124 (= $x90 true)))
 (let ((?x113 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x113)))
 (let (($x10 (= ?x120 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x10 true)))
 (let (($x166 (= $x170 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x101)))
 (let (($x92 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x92 true)))
 (let (($x118 (= $x76 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let (($x96 (= $x112 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x70)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x74 $x77)))
 (let (($x16 (and $x88 $x94)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x159 $x16)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x153)))))))
 (let (($x105 (and $x111 $x64)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let (($x75 (= $x69 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x26)))
 (let (($x13 (= ?x202 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (= $x13 true)))
 (let (($x43 (= $x162 true)))
 (let (($x185 (= ?x202 input.dst.llvm-%n)))
 (let (($x39 (= $x185 true)))
 (let (($x184 (= $x39 true)))
 (let (($x25 (and $x184 $x43)))
 (let (($x71 (and $x25 $x75)))
 (let (($x119 (and $x71 $x96)))
 (let (($x93 (and $x119 $x118)))
 (let (($x193 (and $x93 $x166)))
 (let (($x50 (and $x193 $x124)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and (not $x24) $x50)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x19 $x150)))
 (let (($x11 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x33 (and $x11 $x99)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x165 (and $x21 $x33)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x109 (and $x46 $x165)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x201 (and $x17 $x109)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x157 (and $x18 $x201)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x40 (and $x37 $x157)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x52 $x40)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x56 (and $x57 $x125)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x198 (and $x79 $x56)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x182 (and $x61 $x198)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x158 (and $x152 $x182)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x168 (and $x53 $x158)))
 (let (($x73 (=> $x168 $x175)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x179 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x122 (ite $x179 ?x200 (_ bv0 32))))
 (let ((?x114 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x73 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x145 (ite $x73 ?x114 ?x122)))
 (let ((?x197 (bvmul (_ bv4294967295 32) ?x145)))
 (let ((?x203 (bvneg ?x197)))
 (let (($x100 (= ?x203 ?x191)))
 (let (($x66 (= $x100 true)))
 (let (($x157 (forall ((input.ind-%var2216X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2216X)))
 (=> $x32 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2216X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var2215X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2215X)))
 (= $x32 false)))
 ))
 (let (($x40 (and $x102 $x157)))
 (let (($x125 (= $x40 true)))
 (let ((?x113 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x113)))
 (let (($x10 (= ?x120 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x10 true)))
 (let (($x166 (= $x170 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x101)))
 (let (($x92 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x92 true)))
 (let (($x118 (= $x76 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let (($x96 (= $x112 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x70)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x74 $x77)))
 (let (($x16 (and $x88 $x94)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x28 $x16)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x27)))))))
 (let (($x105 (and $x159 $x64)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let (($x75 (= $x69 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x144)))
 (let (($x39 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (= $x39 true)))
 (let (($x13 (= $x184 true)))
 (let (($x202 (= ?x22 input.dst.llvm-%n)))
 (let (($x44 (= $x202 true)))
 (let (($x185 (= $x44 true)))
 (let (($x162 (and $x185 $x13)))
 (let (($x71 (and $x162 $x75)))
 (let (($x119 (and $x71 $x96)))
 (let (($x93 (and $x119 $x118)))
 (let (($x193 (and $x93 $x166)))
 (let (($x56 (and $x193 $x125)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and (not $x6) $x56)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and $x47 $x182)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x45 $x158)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x31 $x168)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x98 (and $x34 $x121)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x35 (and $x8 $x98)))
 (let (($x49 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x103 (and $x49 $x35)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x97 (and $x12 $x103)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x160 (and $x78 $x97)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x110 (and $x83 $x160)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x63 (and $x62 $x110)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x115 (and $x181 $x63)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x41 $x115)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x175 (and $x65 $x164)))
 (let (($x116 (=> $x175 $x66)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x179 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x122 (ite $x179 ?x200 (_ bv0 32))))
 (let ((?x114 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x73 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x145 (ite $x73 ?x114 ?x122)))
 (let ((?x197 (bvmul (_ bv4294967295 32) ?x145)))
 (let ((?x203 (bvneg ?x197)))
 (let (($x100 (= ?x203 ?x191)))
 (let (($x66 (= $x100 true)))
 (let (($x157 (forall ((input.ind-%var2216X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2216X)))
 (=> $x32 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2216X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var2215X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2215X)))
 (= $x32 false)))
 ))
 (let (($x40 (and $x102 $x157)))
 (let (($x125 (= $x40 true)))
 (let ((?x113 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x113)))
 (let (($x10 (= ?x120 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x10 true)))
 (let (($x166 (= $x170 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x101)))
 (let (($x92 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x92 true)))
 (let (($x118 (= $x76 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x117 true)))
 (let (($x112 (= $x104 true)))
 (let (($x96 (= $x112 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x70)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x74 $x77)))
 (let (($x16 (and $x88 $x94)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x28 $x16)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x27)))))))
 (let (($x105 (and $x159 $x64)))
 (let (($x84 (= $x105 true)))
 (let (($x69 (= $x84 true)))
 (let (($x75 (= $x69 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x144)))
 (let (($x39 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (= $x39 true)))
 (let (($x13 (= $x184 true)))
 (let (($x202 (= ?x22 input.dst.llvm-%n)))
 (let (($x44 (= $x202 true)))
 (let (($x185 (= $x44 true)))
 (let (($x162 (and $x185 $x13)))
 (let (($x71 (and $x162 $x75)))
 (let (($x119 (and $x71 $x96)))
 (let (($x93 (and $x119 $x118)))
 (let (($x193 (and $x93 $x166)))
 (let (($x56 (and $x193 $x125)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and (not $x6) $x56)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and $x47 $x182)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x168 (and $x45 $x158)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x31 $x168)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x98 (and $x34 $x121)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x35 (and $x8 $x98)))
 (let (($x49 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x103 (and $x49 $x35)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x97 (and $x12 $x103)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x160 (and $x78 $x97)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x110 (and $x83 $x160)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x63 (and $x62 $x110)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x115 (and $x181 $x63)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x164 (and $x41 $x115)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x175 (and $x65 $x164)))
 (let (($x116 (=> $x175 $x66)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x200 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (not $x200)))
 (let (($x145 (= $x122 false)))
 (let (($x197 (= $x145 true)))
 (let (($x182 (forall ((input.ind-%var2257X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2257X)))
 (=> $x170 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2257X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var2256X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2256X)))
 (= $x170 false)))
 ))
 (let (($x158 (and $x32 $x182)))
 (let (($x168 (= $x158 true)))
 (let ((?x202 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x202)))
 (let (($x118 (= ?x44 input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x104)))
 (let (($x119 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x119 true)))
 (let (($x81 (= $x101 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x94)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x59 $x88)))
 (let (($x64 (and $x70 $x16)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x85 $x64)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x15)))))))
 (let (($x84 (and $x74 $x105)))
 (let (($x69 (= $x84 true)))
 (let (($x75 (= $x69 true)))
 (let (($x71 (= $x75 true)))
 (let (($x185 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x185 true)))
 (let (($x184 (= $x39 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x6)))
 (let (($x144 (= ?x198 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x144 true)))
 (let (($x26 (= $x22 true)))
 (let (($x13 (and $x26 $x184)))
 (let (($x68 (and $x13 $x71)))
 (let (($x92 (and $x68 $x81)))
 (let (($x113 (and $x92 $x127)))
 (let (($x121 (and $x113 $x168)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x129 $x121)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x35 (and $x21 $x98)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x103 (and $x20 $x35)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x17 $x103)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x160 (and $x18 $x97)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x23 $x160)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x63 (and $x55 $x110)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x115 (and $x57 $x63)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x79 $x115)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x175 (and $x61 $x164)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x73 (and $x152 $x175)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x114 (and $x174 $x73)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x179 (and $x43 $x114)))
 (let (($x203 (=> $x179 $x197)))
 (not $x203))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x200 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (not $x200)))
 (let (($x145 (= $x122 false)))
 (let (($x197 (= $x145 true)))
 (let (($x182 (forall ((input.ind-%var2257X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2257X)))
 (=> $x170 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2257X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var2256X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2256X)))
 (= $x170 false)))
 ))
 (let (($x158 (and $x32 $x182)))
 (let (($x168 (= $x158 true)))
 (let ((?x202 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x202)))
 (let (($x118 (= ?x44 input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x104)))
 (let (($x119 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x119 true)))
 (let (($x81 (= $x101 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x94)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x59 $x88)))
 (let (($x64 (and $x70 $x16)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x85 $x64)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x15)))))))
 (let (($x84 (and $x74 $x105)))
 (let (($x69 (= $x84 true)))
 (let (($x75 (= $x69 true)))
 (let (($x71 (= $x75 true)))
 (let (($x185 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x185 true)))
 (let (($x184 (= $x39 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x6)))
 (let (($x144 (= ?x198 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x144 true)))
 (let (($x26 (= $x22 true)))
 (let (($x13 (and $x26 $x184)))
 (let (($x68 (and $x13 $x71)))
 (let (($x92 (and $x68 $x81)))
 (let (($x113 (and $x92 $x127)))
 (let (($x121 (and $x113 $x168)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x129 $x121)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x35 (and $x21 $x98)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x103 (and $x20 $x35)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x17 $x103)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x160 (and $x18 $x97)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x23 $x160)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x63 (and $x55 $x110)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x115 (and $x57 $x63)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x164 (and $x79 $x115)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x175 (and $x61 $x164)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x73 (and $x152 $x175)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x114 (and $x174 $x73)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x179 (and $x43 $x114)))
 (let (($x203 (=> $x179 $x197)))
 (not $x203))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x157 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (not $x80)))
 (let (($x102 (=> $x193 $x157)))
 (let (($x40 (= $x102 true)))
 (let (($x90 (= $x40 true)))
 (let (($x115 (forall ((input.ind-%var2345X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2345X)))
 (= $x109 false)))
 ))
 (let (($x103 (forall ((input.ind-%var2346X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2346X)))
 (=> $x109 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2346X) (_ bv0 32)))))
 ))
 (let (($x164 (and $x103 $x115)))
 (let (($x175 (= $x164 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x96)))
 (let (($x93 (= ?x119 input.dst.llvm-%n)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let (($x101 (= ?x119 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x101 true)))
 (let (($x92 (= $x81 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x69)))
 (let (($x68 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x68 true)))
 (let (($x104 (= $x117 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x159 $x38)))
 (let (($x77 (and $x85 $x60)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x185 $x77)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x153)))))))
 (let (($x70 (and $x111 $x88)))
 (let (($x94 (= $x70 true)))
 (let (($x16 (= $x94 true)))
 (let (($x64 (= $x16 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x19)))
 (let (($x24 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x24 true)))
 (let (($x22 (= $x144 true)))
 (let (($x105 (and $x22 $x64)))
 (let (($x112 (and $x105 $x104)))
 (let (($x76 (and $x112 $x92)))
 (let (($x10 (and $x76 $x113)))
 (let (($x73 (and $x10 $x175)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x11 $x73)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x179 (and $x31 $x114)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x200 (and $x46 $x179)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x122 (and $x8 $x200)))
 (let (($x49 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x145 (and $x49 $x122)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x197 (and $x37 $x145)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x203 (and $x52 $x197)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x191 (and $x83 $x203)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x36 (and $x62 $x191)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x166 (and $x181 $x36)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x201 (and $x41 $x166)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x150 (and $x53 $x201)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x120 (and $x174 $x150)))
 (let (($x100 (=> $x120 $x90)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x157 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (not $x80)))
 (let (($x102 (=> $x193 $x157)))
 (let (($x40 (= $x102 true)))
 (let (($x90 (= $x40 true)))
 (let (($x115 (forall ((input.ind-%var2345X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2345X)))
 (= $x109 false)))
 ))
 (let (($x103 (forall ((input.ind-%var2346X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2346X)))
 (=> $x109 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2346X) (_ bv0 32)))))
 ))
 (let (($x164 (and $x103 $x115)))
 (let (($x175 (= $x164 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x96)))
 (let (($x93 (= ?x119 input.dst.llvm-%n)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let (($x101 (= ?x119 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x101 true)))
 (let (($x92 (= $x81 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x69)))
 (let (($x68 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x68 true)))
 (let (($x104 (= $x117 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x159 $x38)))
 (let (($x77 (and $x85 $x60)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x185 $x77)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x153)))))))
 (let (($x70 (and $x111 $x88)))
 (let (($x94 (= $x70 true)))
 (let (($x16 (= $x94 true)))
 (let (($x64 (= $x16 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x19)))
 (let (($x24 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x24 true)))
 (let (($x22 (= $x144 true)))
 (let (($x105 (and $x22 $x64)))
 (let (($x112 (and $x105 $x104)))
 (let (($x76 (and $x112 $x92)))
 (let (($x10 (and $x76 $x113)))
 (let (($x73 (and $x10 $x175)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x11 $x73)))
 (let (($x31 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x179 (and $x31 $x114)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x200 (and $x46 $x179)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x122 (and $x8 $x200)))
 (let (($x49 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x145 (and $x49 $x122)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x197 (and $x37 $x145)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x203 (and $x52 $x197)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x191 (and $x83 $x203)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x36 (and $x62 $x191)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x166 (and $x181 $x36)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x201 (and $x41 $x166)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x150 (and $x53 $x201)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x120 (and $x174 $x150)))
 (let (($x100 (=> $x120 $x90)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 111 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x116 true)))
 (let (($x25 (= $x172 true)))
 (let (($x157 (forall ((input.ind-%var2358X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2358X)))
 (=> $x179 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2358X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var2357X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2357X)))
 (= $x179 false)))
 ))
 (let (($x102 (and $x197 $x157)))
 (let (($x40 (= $x102 true)))
 (let ((?x182 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x182)))
 (let (($x103 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x103 true)))
 (let (($x115 (= $x63 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x81)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x104 $x119)))
 (let (($x76 (and $x101 $x92)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x60 $x76)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x105)))))))
 (let (($x93 (and $x117 $x118)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let (($x10 (= $x113 true)))
 (let ((?x111 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x111)))
 (let (($x185 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x185 true)))
 (let (($x14 (= $x159 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x199)))
 (let (($x27 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x27 true)))
 (let (($x48 (= $x126 true)))
 (let (($x29 (= ?x13 input.dst.llvm-%n)))
 (let (($x28 (= $x29 true)))
 (let (($x7 (= $x28 true)))
 (let (($x198 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (not $x198)))
 (let (($x144 (= $x24 true)))
 (let (($x22 (= $x144 true)))
 (let (($x39 (= $x22 true)))
 (let (($x153 (and $x39 $x7)))
 (let (($x15 (and $x153 $x48)))
 (let (($x74 (and $x15 $x14)))
 (let (($x32 (and $x74 $x10)))
 (let (($x164 (and $x32 $x115)))
 (let (($x90 (and $x164 $x40)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (and $x47 $x90)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x45 $x100)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x26 (and $x20 $x66)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x202 (and $x34 $x26)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x125 (and $x18 $x202)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x158 (and $x23 $x125)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x170 (and $x12 $x158)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x56 (and $x78 $x170)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x160 (and $x79 $x56)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x110 (and $x61 $x160)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x168 (and $x152 $x110)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x87 (and $x58 $x168)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x121 (and $x43 $x87)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x5 (and $x162 $x121)))
 (let (($x143 (=> $x5 $x25)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x116 true)))
 (let (($x25 (= $x172 true)))
 (let (($x157 (forall ((input.ind-%var2358X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2358X)))
 (=> $x179 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2358X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var2357X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2357X)))
 (= $x179 false)))
 ))
 (let (($x102 (and $x197 $x157)))
 (let (($x40 (= $x102 true)))
 (let ((?x182 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x182)))
 (let (($x103 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x103 true)))
 (let (($x115 (= $x63 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x81)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x104 $x119)))
 (let (($x76 (and $x101 $x92)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x60 $x76)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x105)))))))
 (let (($x93 (and $x117 $x118)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let (($x10 (= $x113 true)))
 (let ((?x111 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x111)))
 (let (($x185 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x185 true)))
 (let (($x14 (= $x159 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x199)))
 (let (($x27 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x27 true)))
 (let (($x48 (= $x126 true)))
 (let (($x29 (= ?x13 input.dst.llvm-%n)))
 (let (($x28 (= $x29 true)))
 (let (($x7 (= $x28 true)))
 (let (($x198 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (not $x198)))
 (let (($x144 (= $x24 true)))
 (let (($x22 (= $x144 true)))
 (let (($x39 (= $x22 true)))
 (let (($x153 (and $x39 $x7)))
 (let (($x15 (and $x153 $x48)))
 (let (($x74 (and $x15 $x14)))
 (let (($x32 (and $x74 $x10)))
 (let (($x164 (and $x32 $x115)))
 (let (($x90 (and $x164 $x40)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (and $x47 $x90)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x45 $x100)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x26 (and $x20 $x66)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x202 (and $x34 $x26)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x125 (and $x18 $x202)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x158 (and $x23 $x125)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x170 (and $x12 $x158)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x56 (and $x78 $x170)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x160 (and $x79 $x56)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x110 (and $x61 $x160)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x168 (and $x152 $x110)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x87 (and $x58 $x168)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x121 (and $x43 $x87)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x5 (and $x162 $x121)))
 (let (($x143 (=> $x5 $x25)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 116 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (not $x143)))
 (let (($x85 (or $x143 $x99)))
 (let (($x200 (= $x85 true)))
 (let (($x201 (= $x200 true)))
 (let (($x100 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2364X)))
 (=> $x63 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2364X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2363X)))
 (= $x63 false)))
 ))
 (let (($x66 (and $x179 $x100)))
 (let (($x26 (= $x66 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x22)))
 (let (($x10 (= ?x39 input.dst.llvm-%n)))
 (let (($x32 (= $x10 true)))
 (let (($x109 (= $x32 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x101)))
 (let (($x76 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x76 true)))
 (let (($x93 (= $x118 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x69)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x16 $x105)))
 (let (($x71 (and $x84 $x75)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x27 $x71)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x159)))))))
 (let (($x59 (and $x70 $x117)))
 (let (($x60 (= $x59 true)))
 (let (($x104 (= $x60 true)))
 (let (($x112 (= $x104 true)))
 (let (($x184 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x184 true)))
 (let (($x13 (= $x199 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x47)))
 (let (($x198 (= ?x19 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x198 true)))
 (let (($x144 (= $x24 true)))
 (let (($x29 (and $x144 $x13)))
 (let (($x96 (and $x29 $x112)))
 (let (($x127 (and $x96 $x93)))
 (let (($x182 (and $x127 $x109)))
 (let (($x202 (and $x182 $x26)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x21 $x202)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x158 (and $x46 $x125)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x17 $x158)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x56 (and $x49 $x170)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x160 (and $x37 $x56)))
 (let (($x55 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x55 $x160)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x168 (and $x57 $x110)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x87 (and $x62 $x168)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x121 (and $x181 $x87)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x5 (and $x41 $x121)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x53 $x5)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x172 (and $x129 $x116)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x25 (and $x65 $x172)))
 (let (($x36 (=> $x25 $x201)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (not $x143)))
 (let (($x85 (or $x143 $x99)))
 (let (($x200 (= $x85 true)))
 (let (($x201 (= $x200 true)))
 (let (($x100 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2364X)))
 (=> $x63 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2364X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let (($x63 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2363X)))
 (= $x63 false)))
 ))
 (let (($x66 (and $x179 $x100)))
 (let (($x26 (= $x66 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x22)))
 (let (($x10 (= ?x39 input.dst.llvm-%n)))
 (let (($x32 (= $x10 true)))
 (let (($x109 (= $x32 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x101)))
 (let (($x76 (= ?x81 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x76 true)))
 (let (($x93 (= $x118 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x69)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x16 $x105)))
 (let (($x71 (and $x84 $x75)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x27 $x71)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x159)))))))
 (let (($x59 (and $x70 $x117)))
 (let (($x60 (= $x59 true)))
 (let (($x104 (= $x60 true)))
 (let (($x112 (= $x104 true)))
 (let (($x184 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x184 true)))
 (let (($x13 (= $x199 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x47)))
 (let (($x198 (= ?x19 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x198 true)))
 (let (($x144 (= $x24 true)))
 (let (($x29 (and $x144 $x13)))
 (let (($x96 (and $x29 $x112)))
 (let (($x127 (and $x96 $x93)))
 (let (($x182 (and $x127 $x109)))
 (let (($x202 (and $x182 $x26)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x21 $x202)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x158 (and $x46 $x125)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x17 $x158)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x56 (and $x49 $x170)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x160 (and $x37 $x56)))
 (let (($x55 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x55 $x160)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x168 (and $x57 $x110)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x87 (and $x62 $x168)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x121 (and $x181 $x87)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x5 (and $x41 $x121)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x53 $x5)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x172 (and $x129 $x116)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x25 (and $x65 $x172)))
 (let (($x36 (=> $x25 $x201)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 110 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x7)))
 (let (($x193 (= ?x115 input.dst.llvm-%n)))
 (let (($x166 (= $x193 true)))
 (let (($x170 (forall ((input.ind-%var2370X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2370X)))
 (=> $x182 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2370X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var2369X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2369X)))
 (= $x182 false)))
 ))
 (let (($x56 (and $x179 $x170)))
 (let (($x160 (= $x56 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x92 (concat ?x119 (concat ?x60 ?x117)))))
 (let (($x118 (= ?x76 input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (= $x64 true)))
 (let (($x105 (= $x94 true)))
 (let (($x84 (= $x105 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x159)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x68 $x185)))
 (let (($x74 (and $x111 $x14)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x47 $x74)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x39)))))))
 (let (($x88 (and $x48 $x77)))
 (let (($x70 (= $x88 true)))
 (let (($x153 (= $x70 true)))
 (let (($x27 (= $x153 true)))
 (let (($x69 (and $x27 $x84)))
 (let (($x113 (and $x69 $x127)))
 (let (($x110 (and $x113 $x160)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x31 $x110)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x87 (and $x34 $x168)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x8 $x87)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x5 (and $x23 $x121)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x12 $x5)))
 (let (($x52 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x52 $x116)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x25 (and $x83 $x172)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x143 (and $x61 $x25)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x99 (and $x152 $x143)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x85 (and $x58 $x99)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x200 (and $x43 $x85)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x38 $x200)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x36 (and $x162 $x201)))
 (let (($x98 (=> $x36 $x166)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x7)))
 (let (($x193 (= ?x115 input.dst.llvm-%n)))
 (let (($x166 (= $x193 true)))
 (let (($x170 (forall ((input.ind-%var2370X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2370X)))
 (=> $x182 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2370X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var2369X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2369X)))
 (= $x182 false)))
 ))
 (let (($x56 (and $x179 $x170)))
 (let (($x160 (= $x56 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x92 (concat ?x119 (concat ?x60 ?x117)))))
 (let (($x118 (= ?x76 input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (= $x64 true)))
 (let (($x105 (= $x94 true)))
 (let (($x84 (= $x105 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x159)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x68 $x185)))
 (let (($x74 (and $x111 $x14)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x47 $x74)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x39)))))))
 (let (($x88 (and $x48 $x77)))
 (let (($x70 (= $x88 true)))
 (let (($x153 (= $x70 true)))
 (let (($x27 (= $x153 true)))
 (let (($x69 (and $x27 $x84)))
 (let (($x113 (and $x69 $x127)))
 (let (($x110 (and $x113 $x160)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x31 $x110)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x87 (and $x34 $x168)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x8 $x87)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x5 (and $x23 $x121)))
 (let (($x12 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x12 $x5)))
 (let (($x52 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x52 $x116)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x25 (and $x83 $x172)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x143 (and $x61 $x25)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x99 (and $x152 $x143)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x85 (and $x58 $x99)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x200 (and $x43 $x85)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x201 (and $x38 $x200)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x36 (and $x162 $x201)))
 (let (($x98 (=> $x36 $x166)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x32)))
 (let (($x26 (= ?x63 input.spec-%var-n-1)))
 (let (($x40 (= $x26 true)))
 (let (($x99 (forall ((input.ind-%var2376X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2376X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2376X) (_ bv0 32)))))
 ))
 (let (($x160 (forall ((input.ind-%var2375X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2375X)))
 (= $x125 false)))
 ))
 (let (($x85 (and $x160 $x99)))
 (let (($x200 (= $x85 true)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let (($x109 (= $x113 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x96)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x14 $x92)))
 (let (($x59 (and $x112 $x119)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x159 $x59)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x16)))))))
 (let (($x117 (and $x75 $x60)))
 (let (($x104 (= $x117 true)))
 (let (($x101 (= $x104 true)))
 (let (($x76 (= $x101 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x11 (concat ?x199 (concat ?x22 ?x198)))))
 (let (($x15 (= ?x47 input.dst.llvm-%n)))
 (let (($x44 (= $x15 true)))
 (let (($x185 (= $x44 true)))
 (let (($x118 (and $x185 $x76)))
 (let (($x182 (and $x118 $x109)))
 (let (($x201 (and $x182 $x200)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (and $x20 $x201)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x175 (and $x17 $x36)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x7 (and $x18 $x175)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x115 (and $x37 $x7)))
 (let (($x55 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x193 (and $x55 $x115)))
 (let (($x78 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x166 (and $x78 $x193)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x98 (and $x79 $x166)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x35 (and $x181 $x98)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x45 (and $x41 $x35)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x71 (and $x53 $x45)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x103 (and $x129 $x71)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x66 (and $x28 $x103)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x90 (and $x65 $x66)))
 (let (($x202 (=> $x90 $x40)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x32)))
 (let (($x26 (= ?x63 input.spec-%var-n-1)))
 (let (($x40 (= $x26 true)))
 (let (($x99 (forall ((input.ind-%var2376X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2376X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2376X) (_ bv0 32)))))
 ))
 (let (($x160 (forall ((input.ind-%var2375X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2375X)))
 (= $x125 false)))
 ))
 (let (($x85 (and $x160 $x99)))
 (let (($x200 (= $x85 true)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let (($x109 (= $x113 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x96)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x14 $x92)))
 (let (($x59 (and $x112 $x119)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x159 $x59)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x16)))))))
 (let (($x117 (and $x75 $x60)))
 (let (($x104 (= $x117 true)))
 (let (($x101 (= $x104 true)))
 (let (($x76 (= $x101 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x11 (concat ?x199 (concat ?x22 ?x198)))))
 (let (($x15 (= ?x47 input.dst.llvm-%n)))
 (let (($x44 (= $x15 true)))
 (let (($x185 (= $x44 true)))
 (let (($x118 (and $x185 $x76)))
 (let (($x182 (and $x118 $x109)))
 (let (($x201 (and $x182 $x200)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (and $x20 $x201)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x175 (and $x17 $x36)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x7 (and $x18 $x175)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x115 (and $x37 $x7)))
 (let (($x55 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x193 (and $x55 $x115)))
 (let (($x78 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x166 (and $x78 $x193)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x98 (and $x79 $x166)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x35 (and $x181 $x98)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x45 (and $x41 $x35)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x71 (and $x53 $x45)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x103 (and $x129 $x71)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x66 (and $x28 $x103)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x90 (and $x65 $x66)))
 (let (($x202 (=> $x90 $x40)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x146 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x191 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x97 (ite $x191 ?x120 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x50 (ite $x122 ?x150 ?x97)))
 (let ((?x151 (bvmul (_ bv4294967295 32) ?x50)))
 (let ((?x82 (bvneg ?x151)))
 (let (($x33 (= ?x82 ?x146)))
 (let (($x124 (= $x33 true)))
 (let (($x145 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2382X)))
 (=> $x166 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2382X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var2381X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2381X)))
 (= $x166 false)))
 ))
 (let (($x111 (and $x71 $x145)))
 (let (($x6 (= $x111 true)))
 (let ((?x143 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x143)))
 (let (($x200 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x200 true)))
 (let (($x36 (= $x201 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x182)))
 (let (($x125 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x125 true)))
 (let (($x160 (= $x56 true)))
 (let (($x118 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x92)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x84 $x14)))
 (let (($x96 (and $x81 $x112)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x15 $x96)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x153)))))))
 (let (($x59 (and $x105 $x119)))
 (let (($x60 (= $x59 true)))
 (let (($x117 (= $x60 true)))
 (let (($x104 (= $x117 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x29)))
 (let (($x144 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x144 true)))
 (let (($x198 (= $x22 true)))
 (let (($x39 (= ?x48 input.dst.llvm-%n)))
 (let (($x184 (= $x39 true)))
 (let (($x199 (= $x184 true)))
 (let (($x24 (and $x199 $x198)))
 (let (($x101 (and $x24 $x104)))
 (let (($x109 (and $x101 $x113)))
 (let (($x121 (and $x109 $x160)))
 (let (($x175 (and $x121 $x36)))
 (let (($x158 (and $x175 $x6)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (and (not $x31) $x158)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x46 $x87)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x179 (and $x8 $x114)))
 (let (($x49 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x49 $x179)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x116 (and $x12 $x170)))
 (let (($x52 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x168 (and $x52 $x116)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x57 $x168)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x80 (and $x62 $x172)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x164 (and $x152 $x80)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x157 (and $x58 $x164)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x197 (and $x43 $x157)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x102 (and $x38 $x197)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x203 (and $x21 $x102)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x73 (and $x162 $x203)))
 (let (($x165 (=> $x73 $x124)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x146 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x191 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x97 (ite $x191 ?x120 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x50 (ite $x122 ?x150 ?x97)))
 (let ((?x151 (bvmul (_ bv4294967295 32) ?x50)))
 (let ((?x82 (bvneg ?x151)))
 (let (($x33 (= ?x82 ?x146)))
 (let (($x124 (= $x33 true)))
 (let (($x145 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2382X)))
 (=> $x166 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2382X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var2381X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2381X)))
 (= $x166 false)))
 ))
 (let (($x111 (and $x71 $x145)))
 (let (($x6 (= $x111 true)))
 (let ((?x143 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x143)))
 (let (($x200 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x200 true)))
 (let (($x36 (= $x201 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x182)))
 (let (($x125 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x125 true)))
 (let (($x160 (= $x56 true)))
 (let (($x118 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x92)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x84 $x14)))
 (let (($x96 (and $x81 $x112)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x15 $x96)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x153)))))))
 (let (($x59 (and $x105 $x119)))
 (let (($x60 (= $x59 true)))
 (let (($x117 (= $x60 true)))
 (let (($x104 (= $x117 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x29)))
 (let (($x144 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x144 true)))
 (let (($x198 (= $x22 true)))
 (let (($x39 (= ?x48 input.dst.llvm-%n)))
 (let (($x184 (= $x39 true)))
 (let (($x199 (= $x184 true)))
 (let (($x24 (and $x199 $x198)))
 (let (($x101 (and $x24 $x104)))
 (let (($x109 (and $x101 $x113)))
 (let (($x121 (and $x109 $x160)))
 (let (($x175 (and $x121 $x36)))
 (let (($x158 (and $x175 $x6)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (and (not $x31) $x158)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x46 $x87)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x179 (and $x8 $x114)))
 (let (($x49 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x170 (and $x49 $x179)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x116 (and $x12 $x170)))
 (let (($x52 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x168 (and $x52 $x116)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x57 $x168)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x80 (and $x62 $x172)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x164 (and $x152 $x80)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x157 (and $x58 $x164)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x197 (and $x43 $x157)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x102 (and $x38 $x197)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x203 (and $x21 $x102)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x73 (and $x162 $x203)))
 (let (($x165 (=> $x73 $x124)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x47 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x32 (ite $x47 ?x98 (_ bv0 32))))
 (let ((?x42 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x165 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x90 (ite $x165 ?x42 ?x32)))
 (let ((?x7 (bvmul (_ bv4294967295 32) ?x90)))
 (let ((?x115 (bvneg ?x7)))
 (let (($x63 (= ?x115 ?x35)))
 (let (($x66 (= $x63 true)))
 (let (($x172 (forall ((input.ind-%var2423X (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2423X)))
 (=> $x71 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2423X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var2422X (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2422X)))
 (= $x71 false)))
 ))
 (let (($x80 (and $x145 $x172)))
 (let (($x164 (= $x80 true)))
 (let ((?x143 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x143)))
 (let (($x200 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x200 true)))
 (let (($x36 (= $x201 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x182)))
 (let (($x125 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x125 true)))
 (let (($x160 (= $x56 true)))
 (let (($x118 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x92)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x84 $x14)))
 (let (($x96 (and $x81 $x112)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x185 $x96)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x27)))))))
 (let (($x59 (and $x15 $x119)))
 (let (($x60 (= $x59 true)))
 (let (($x117 (= $x60 true)))
 (let (($x104 (= $x117 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x5)))
 (let (($x184 (= ?x126 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x184 true)))
 (let (($x144 (= $x199 true)))
 (let (($x48 (= ?x126 input.dst.llvm-%n)))
 (let (($x11 (= $x48 true)))
 (let (($x39 (= $x11 true)))
 (let (($x22 (and $x39 $x144)))
 (let (($x101 (and $x22 $x104)))
 (let (($x109 (and $x101 $x113)))
 (let (($x121 (and $x109 $x160)))
 (let (($x175 (and $x121 $x36)))
 (let (($x157 (and $x175 $x164)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (and (not $x20) $x157)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x34 $x102)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x18 $x203)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x122 (and $x23 $x73)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x150 (and $x55 $x122)))
 (let (($x78 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x191 (and $x78 $x150)))
 (let (($x83 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x120 (and $x83 $x191)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x97 (and $x61 $x120)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x50 (and $x41 $x97)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x151 (and $x53 $x50)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x82 (and $x129 $x151)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x146 (and $x28 $x82)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x33 (and $x19 $x146)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x124 (and $x65 $x33)))
 (let (($x26 (=> $x124 $x66)))
 (not $x26))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x47 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x32 (ite $x47 ?x98 (_ bv0 32))))
 (let ((?x42 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x165 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x90 (ite $x165 ?x42 ?x32)))
 (let ((?x7 (bvmul (_ bv4294967295 32) ?x90)))
 (let ((?x115 (bvneg ?x7)))
 (let (($x63 (= ?x115 ?x35)))
 (let (($x66 (= $x63 true)))
 (let (($x172 (forall ((input.ind-%var2423X (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2423X)))
 (=> $x71 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2423X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var2422X (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2422X)))
 (= $x71 false)))
 ))
 (let (($x80 (and $x145 $x172)))
 (let (($x164 (= $x80 true)))
 (let ((?x143 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x143)))
 (let (($x200 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x200 true)))
 (let (($x36 (= $x201 true)))
 (let ((?x182 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x182)))
 (let (($x125 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x125 true)))
 (let (($x160 (= $x56 true)))
 (let (($x118 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x118 true)))
 (let (($x127 (= $x93 true)))
 (let (($x113 (= $x127 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x92)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x84 $x14)))
 (let (($x96 (and $x81 $x112)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x185 $x96)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x27)))))))
 (let (($x59 (and $x15 $x119)))
 (let (($x60 (= $x59 true)))
 (let (($x117 (= $x60 true)))
 (let (($x104 (= $x117 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x5)))
 (let (($x184 (= ?x126 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x184 true)))
 (let (($x144 (= $x199 true)))
 (let (($x48 (= ?x126 input.dst.llvm-%n)))
 (let (($x11 (= $x48 true)))
 (let (($x39 (= $x11 true)))
 (let (($x22 (and $x39 $x144)))
 (let (($x101 (and $x22 $x104)))
 (let (($x109 (and $x101 $x113)))
 (let (($x121 (and $x109 $x160)))
 (let (($x175 (and $x121 $x36)))
 (let (($x157 (and $x175 $x164)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (and (not $x20) $x157)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x34 $x102)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x18 $x203)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x122 (and $x23 $x73)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x150 (and $x55 $x122)))
 (let (($x78 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x191 (and $x78 $x150)))
 (let (($x83 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x120 (and $x83 $x191)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x97 (and $x61 $x120)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x50 (and $x41 $x97)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x151 (and $x53 $x50)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x82 (and $x129 $x151)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x146 (and $x28 $x82)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x33 (and $x19 $x146)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x124 (and $x65 $x33)))
 (let (($x26 (=> $x124 $x66)))
 (not $x26))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (not $x32)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (=> $x98 $x90)))
 (let (($x115 (= $x7 true)))
 (let (($x35 (= $x115 true)))
 (let (($x102 (forall ((input.ind-%var2464X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2464X)))
 (=> $x201 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2464X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var2463X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2463X)))
 (= $x201 false)))
 ))
 (let (($x203 (and $x71 $x102)))
 (let (($x73 (= $x203 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x127)))
 (let (($x160 (= ?x113 input.dst.llvm-%n)))
 (let (($x121 (= $x160 true)))
 (let (($x25 (= $x121 true)))
 (let (($x109 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (= $x109 true)))
 (let (($x100 (= $x182 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x60)))
 (let (($x101 (= ?x117 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x101 true)))
 (let (($x118 (= $x76 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x84)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x64 $x44)))
 (let (($x159 (and $x185 $x75)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x184 $x159)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x81 (and $x16 $x14)))
 (let (($x92 (= $x81 true)))
 (let (($x112 (= $x92 true)))
 (let (($x96 (= $x112 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x20)))
 (let (($x5 (= ?x197 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x5 true)))
 (let (($x29 (= $x126 true)))
 (let (($x119 (and $x29 $x96)))
 (let (($x93 (and $x119 $x118)))
 (let (($x125 (and $x93 $x100)))
 (let (($x143 (and $x125 $x25)))
 (let (($x122 (and $x143 $x73)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and $x17 $x122)))
 (let (($x49 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x191 (and $x49 $x150)))
 (let (($x37 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x37 $x191)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x52 $x120)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x50 (and $x57 $x97)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x151 (and $x79 $x50)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x82 (and $x181 $x151)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x146 (and $x58 $x82)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x33 (and $x43 $x146)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x124 (and $x38 $x33)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x165 (and $x21 $x124)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x42 (and $x13 $x165)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x47 (and $x162 $x42)))
 (let (($x63 (=> $x47 $x35)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (not $x32)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (=> $x98 $x90)))
 (let (($x115 (= $x7 true)))
 (let (($x35 (= $x115 true)))
 (let (($x102 (forall ((input.ind-%var2464X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2464X)))
 (=> $x201 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2464X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var2463X (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2463X)))
 (= $x201 false)))
 ))
 (let (($x203 (and $x71 $x102)))
 (let (($x73 (= $x203 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x127)))
 (let (($x160 (= ?x113 input.dst.llvm-%n)))
 (let (($x121 (= $x160 true)))
 (let (($x25 (= $x121 true)))
 (let (($x109 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (= $x109 true)))
 (let (($x100 (= $x182 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x60)))
 (let (($x101 (= ?x117 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x101 true)))
 (let (($x118 (= $x76 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x84)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x64 $x44)))
 (let (($x159 (and $x185 $x75)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x184 $x159)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x81 (and $x16 $x14)))
 (let (($x92 (= $x81 true)))
 (let (($x112 (= $x92 true)))
 (let (($x96 (= $x112 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x20)))
 (let (($x5 (= ?x197 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x5 true)))
 (let (($x29 (= $x126 true)))
 (let (($x119 (and $x29 $x96)))
 (let (($x93 (and $x119 $x118)))
 (let (($x125 (and $x93 $x100)))
 (let (($x143 (and $x125 $x25)))
 (let (($x122 (and $x143 $x73)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and $x17 $x122)))
 (let (($x49 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x191 (and $x49 $x150)))
 (let (($x37 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x37 $x191)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x52 $x120)))
 (let (($x57 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x50 (and $x57 $x97)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x151 (and $x79 $x50)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x82 (and $x181 $x151)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x146 (and $x58 $x82)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x33 (and $x43 $x146)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x124 (and $x38 $x33)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x165 (and $x21 $x124)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x42 (and $x13 $x165)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x47 (and $x162 $x42)))
 (let (($x63 (=> $x47 $x35)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 111 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (not $x87)))
 (let (($x175 (=> $x99 $x85)))
 (let (($x172 (= $x175 true)))
 (let (($x145 (= $x172 true)))
 (let (($x146 (forall ((input.ind-%var2470X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2470X)))
 (=> $x116 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2470X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var2469X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2469X)))
 (= $x116 false)))
 ))
 (let (($x33 (and $x203 $x146)))
 (let (($x124 (= $x33 true)))
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x113)))
 (let (($x121 (= ?x109 input.dst.llvm-%n)))
 (let (($x25 (= $x121 true)))
 (let (($x143 (= $x25 true)))
 (let (($x182 (= ?x109 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (= $x182 true)))
 (let (($x125 (= $x100 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x117)))
 (let (($x76 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x76 true)))
 (let (($x93 (= $x118 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x75)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x105 $x185)))
 (let (($x14 (and $x84 $x159)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x14)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x153)))))))
 (let (($x92 (and $x64 $x81)))
 (let (($x112 (= $x92 true)))
 (let (($x96 (= $x112 true)))
 (let (($x119 (= $x96 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x46)))
 (let (($x31 (= ?x20 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x31 true)))
 (let (($x126 (= $x5 true)))
 (let (($x59 (and $x126 $x119)))
 (let (($x127 (and $x59 $x93)))
 (let (($x56 (and $x127 $x125)))
 (let (($x200 (and $x56 $x143)))
 (let (($x165 (and $x200 $x124)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and $x8 $x165)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x47 (and $x23 $x42)))
 (let (($x12 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x98 (and $x12 $x47)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x78 $x98)))
 (let (($x83 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x90 (and $x83 $x32)))
 (let (($x62 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x7 (and $x62 $x90)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x115 (and $x152 $x7)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x35 (and $x53 $x115)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x63 (and $x129 $x35)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x66 (and $x28 $x63)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x11 (and $x19 $x66)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x36 (and $x198 $x11)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x168 (and $x65 $x36)))
 (let (($x80 (=> $x168 $x145)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (not $x87)))
 (let (($x175 (=> $x99 $x85)))
 (let (($x172 (= $x175 true)))
 (let (($x145 (= $x172 true)))
 (let (($x146 (forall ((input.ind-%var2470X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2470X)))
 (=> $x116 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2470X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var2469X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2469X)))
 (= $x116 false)))
 ))
 (let (($x33 (and $x203 $x146)))
 (let (($x124 (= $x33 true)))
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x113)))
 (let (($x121 (= ?x109 input.dst.llvm-%n)))
 (let (($x25 (= $x121 true)))
 (let (($x143 (= $x25 true)))
 (let (($x182 (= ?x109 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (= $x182 true)))
 (let (($x125 (= $x100 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x117)))
 (let (($x76 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x76 true)))
 (let (($x93 (= $x118 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x75)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x105 $x185)))
 (let (($x14 (and $x84 $x159)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x14)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x153)))))))
 (let (($x92 (and $x64 $x81)))
 (let (($x112 (= $x92 true)))
 (let (($x96 (= $x112 true)))
 (let (($x119 (= $x96 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x46)))
 (let (($x31 (= ?x20 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x31 true)))
 (let (($x126 (= $x5 true)))
 (let (($x59 (and $x126 $x119)))
 (let (($x127 (and $x59 $x93)))
 (let (($x56 (and $x127 $x125)))
 (let (($x200 (and $x56 $x143)))
 (let (($x165 (and $x200 $x124)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and $x8 $x165)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x47 (and $x23 $x42)))
 (let (($x12 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x98 (and $x12 $x47)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x78 $x98)))
 (let (($x83 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x90 (and $x83 $x32)))
 (let (($x62 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x7 (and $x62 $x90)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x115 (and $x152 $x7)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x35 (and $x53 $x115)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x63 (and $x129 $x35)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x66 (and $x28 $x63)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x11 (and $x19 $x66)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x36 (and $x198 $x11)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x168 (and $x65 $x36)))
 (let (($x80 (=> $x168 $x145)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 111 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x26 true)))
 (let (($x24 (= $x110 true)))
 (let (($x99 (forall ((input.ind-%var2481X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2481X)))
 (= $x42 false)))
 ))
 (let (($x66 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2482X)))
 (=> $x42 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2482X) (_ bv0 32)))))
 ))
 (let (($x85 (and $x66 $x99)))
 (let (($x175 (= $x85 true)))
 (let ((?x116 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x116)))
 (let (($x191 (= ?x102 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x191 true)))
 (let (($x82 (= $x151 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x182)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x118 $x113)))
 (let (($x125 (and $x109 $x100)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x75 $x125)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x119)))))))
 (let (($x160 (and $x76 $x56)))
 (let (($x121 (= $x160 true)))
 (let (($x25 (= $x121 true)))
 (let (($x143 (= $x25 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x39)))
 (let (($x144 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x144 true)))
 (let (($x105 (= $x70 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x184 (bvneg ?x74)))
 (let (($x153 (= ?x184 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x153 true)))
 (let (($x27 (= $x88 true)))
 (let (($x68 (= ?x184 input.dst.llvm-%n)))
 (let (($x69 (= $x68 true)))
 (let (($x77 (= $x69 true)))
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (not $x20)))
 (let (($x31 (= $x197 true)))
 (let (($x5 (= $x31 true)))
 (let (($x126 (= $x5 true)))
 (let (($x94 (and $x126 $x77)))
 (let (($x16 (and $x94 $x27)))
 (let (($x15 (and $x16 $x105)))
 (let (($x200 (and $x15 $x143)))
 (let (($x146 (and $x200 $x82)))
 (let (($x172 (and $x146 $x175)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and $x17 $x172)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x18 $x145)))
 (let (($x37 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x111 (and $x37 $x80)))
 (let (($x55 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x199 (and $x55 $x111)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x164 (and $x57 $x199)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x120 (and $x79 $x164)))
 (let (($x61 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x150 (and $x61 $x120)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x201 (and $x41 $x150)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x45 (and $x43 $x201)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x157 (and $x38 $x45)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x97 (and $x21 $x157)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x122 (and $x13 $x97)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x50 (and $x48 $x122)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x202 (and $x162 $x50)))
 (let (($x10 (=> $x202 $x24)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x26 true)))
 (let (($x24 (= $x110 true)))
 (let (($x99 (forall ((input.ind-%var2481X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2481X)))
 (= $x42 false)))
 ))
 (let (($x66 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2482X)))
 (=> $x42 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2482X) (_ bv0 32)))))
 ))
 (let (($x85 (and $x66 $x99)))
 (let (($x175 (= $x85 true)))
 (let ((?x116 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x116)))
 (let (($x191 (= ?x102 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x191 true)))
 (let (($x82 (= $x151 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x182)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x118 $x113)))
 (let (($x125 (and $x109 $x100)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x75 $x125)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x119)))))))
 (let (($x160 (and $x76 $x56)))
 (let (($x121 (= $x160 true)))
 (let (($x25 (= $x121 true)))
 (let (($x143 (= $x25 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x39)))
 (let (($x144 (= ?x64 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x144 true)))
 (let (($x105 (= $x70 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x184 (bvneg ?x74)))
 (let (($x153 (= ?x184 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x153 true)))
 (let (($x27 (= $x88 true)))
 (let (($x68 (= ?x184 input.dst.llvm-%n)))
 (let (($x69 (= $x68 true)))
 (let (($x77 (= $x69 true)))
 (let (($x20 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (not $x20)))
 (let (($x31 (= $x197 true)))
 (let (($x5 (= $x31 true)))
 (let (($x126 (= $x5 true)))
 (let (($x94 (and $x126 $x77)))
 (let (($x16 (and $x94 $x27)))
 (let (($x15 (and $x16 $x105)))
 (let (($x200 (and $x15 $x143)))
 (let (($x146 (and $x200 $x82)))
 (let (($x172 (and $x146 $x175)))
 (let (($x17 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and $x17 $x172)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x18 $x145)))
 (let (($x37 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x111 (and $x37 $x80)))
 (let (($x55 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x199 (and $x55 $x111)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x164 (and $x57 $x199)))
 (let (($x79 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x120 (and $x79 $x164)))
 (let (($x61 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x150 (and $x61 $x120)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x201 (and $x41 $x150)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x45 (and $x43 $x201)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x157 (and $x38 $x45)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x97 (and $x21 $x157)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x122 (and $x13 $x97)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x50 (and $x48 $x122)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x202 (and $x162 $x50)))
 (let (($x10 (=> $x202 $x24)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 116 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498413/query
