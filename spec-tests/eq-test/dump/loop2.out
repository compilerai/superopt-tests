argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=loop2.proof
argv[9] = --spec-iospecs=loop2.iospecs
argv[10] = loop2.spec
argv[11] = loop2.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.1494356
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/loop2.c
argv[10] = -o
argv[11] = par_tmpdir/loop2.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/loop2.spec.etfg
argv[11] = par_tmpdir/loop2.c.bc
argv[12] = -o
argv[13] = par_tmpdir/loop2.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 68 time spent: 0:0:0 [0.000129s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 119 time spent: 0:0:0 [0.000216s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 641 time spent: 0:0:0 [0.002557s total; 0.000004 per start]
expr_simplify_solver: num_starts 56 time spent: 0:0:0 [0.006200s total; 0.000111 per start]
expr_simplify_syntactic: num_starts 56 time spent: 0:0:0 [0.002025s total; 0.000036 per start]
expr_simplify_using_lhs_set_helper: num_starts 73 time spent: 0:0:0 [0.017377s total; 0.000238 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 168 time spent: 0:0:0 [0.017203s total; 0.000102 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 48 time spent: 0:0:0 [0.000233s total; 0.000005 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
canonicalize_expr_tree: num_starts 39 time spent: 0:0:0 [0.000571s total; 0.000015 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
get_arithmetic_addsub_atoms: num_starts 44 time spent: 0:0:0 [0.000043s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 60 time spent: 0:0:0 [0.000749s total; 0.000012 per start]
expr_is_consts_struct_constant: num_starts 131 time spent: 0:0:0 [0.000129s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1461 time spent: 0:0:0 [0.018776s total; 0.000013 per start]
expr_do_simplify_helper_cache: num_starts 1461 time spent: 0:0:0 [0.000913s total; 0.000001 per start]
array_constant_equals: num_starts 3 time spent: 0:0:0 [0.000009s total; 0.000003 per start]
sort_dfa_canonical: num_starts 142169 time spent: 0:0:1 [1.185003s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 23 time spent: 0:0:0 [0.007039s total; 0.000306 per start]
combo_dfa_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.045561s total; 0.000701 per start]
alias_val_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.014517s total; 0.000223 per start]
get_sprel_map_from_avail_exprs: num_starts 86 time spent: 0:0:0 [0.005482s total; 0.000064 per start]
update_memlabels_for_memslot_locs: num_starts 20 time spent: 0:0:0 [0.000087s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 130 time spent: 0:0:0 [0.005298s total; 0.000041 per start]
compute_simplified_loc_exprs_for_edge: num_starts 382 time spent: 0:0:0 [0.026115s total; 0.000068 per start]
compute_locs_definitely_written_on_edge: num_starts 130 time spent: 0:0:0 [0.000044s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 28 time spent: 0:0:0 [0.005444s total; 0.000194 per start]
edge_update_memlabel_map_for_mlvars: num_starts 65 time spent: 0:0:0 [0.000410s total; 0.000006 per start]
add_new_locs_based_on_edge: num_starts 65 time spent: 0:0:0 [0.008957s total; 0.000138 per start]
expand_locset_to_include_slots_for_memmask: num_starts 45 time spent: 0:0:0 [0.000089s total; 0.000002 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 6e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 8e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 1.6e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 2.1e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 2.1e-05s (num_starts 22; 0.0000s/start)
lr_status_meet.: 2.1e-05s (num_starts 31; 0.0000s/start)
add_extra_node_at_start_pc.: 2.7e-05s (num_starts 1; 0.0000s/start)
expr_is_callee_save_const.: 3e-05s (num_starts 26; 0.0000s/start)
context_constructor.solver.: 4.6e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5.6e-05s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.6e-05s (num_starts 2; 0.0000s/start)
graph_locs_add_all_indvars.: 7.7e-05s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 7.9e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 8.5e-05s (num_starts 1; 0.0001s/start)
main.3.: 8.5e-05s (num_starts 1; 0.0001s/start)
propagate_sprels.: 8.7e-05s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 9.7e-05s (num_starts 10; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000106s (num_starts 5; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000112s (num_starts 33; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000146s (num_starts 1; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000149s (num_starts 33; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000171s (num_starts 2; 0.0001s/start)
graph_locs_add_all_local_vars.: 0.000172s (num_starts 1; 0.0002s/start)
expr_represents_llvm_undef.: 0.000179s (num_starts 28; 0.0000s/start)
determinize_value_expr_map.: 0.000184s (num_starts 228; 0.0000s/start)
populate_locid2expr_map.: 0.000211s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000295s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000303s (num_starts 65; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000312s (num_starts 65; 0.0000s/start)
canonicalize_llvm_nextpcs.: 0.000366s (num_starts 1; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.000392s (num_starts 1; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000407s (num_starts 1; 0.0004s/start)
sp_version_relations_val_t::meet.: 0.000423s (num_starts 759; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000428s (num_starts 66; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.000436s (num_starts 45; 0.0000s/start)
compute_z3_expr.: 0.000451s (num_starts 28; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000495s (num_starts 1; 0.0005s/start)
expr_linear_relation_holds::visit.var.: 0.000575s (num_starts 28; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000623s (num_starts 65; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.00099s (num_starts 1; 0.0010s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.001045s (num_starts 552; 0.0000s/start)
populate_simplified_to_state.: 0.001073s (num_starts 3; 0.0004s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001195s (num_starts 51; 0.0000s/start)
create_closure_matrix.: 0.001288s (num_starts 85; 0.0000s/start)
query:convert_from_z3.: 0.00143s (num_starts 28; 0.0001s/start)
graph_visit_exprs.: 0.001462s (num_starts 4; 0.0004s/start)
compute_lr_status_for_expr.: 0.001513s (num_starts 36; 0.0000s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.001598s (num_starts 31; 0.0001s/start)
query:convert_to_z3.: 0.001606s (num_starts 28; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.001657s (num_starts 31; 0.0001s/start)
tfg::collect_assumes_around_edge.: 0.001706s (num_starts 119; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002041s (num_starts 1; 0.0020s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002209s (num_starts 1; 0.0022s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.002761s (num_starts 1; 0.0028s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.00349s (num_starts 65; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.004101s (num_starts 1; 0.0041s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.004188s (num_starts 1; 0.0042s/start)
query:simplify-z3.: 0.004192s (num_starts 66; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.004209s (num_starts 2; 0.0021s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.004264s (num_starts 1; 0.0043s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.004426s (num_starts 1; 0.0044s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004456s (num_starts 68; 0.0001s/start)
graph_to_stream.: 0.00448s (num_starts 1; 0.0045s/start)
compute_new_lr_status_on_locs.: 0.004488s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00456s (num_starts 2; 0.0023s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004665s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.: 0.00478s (num_starts 2; 0.0024s/start)
populate_dominator_and_postdominator_relations.: 0.005418s (num_starts 2; 0.0027s/start)
populate_simplified_assets.: 0.005715s (num_starts 6; 0.0010s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.005799s (num_starts 65; 0.0001s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.006081s (num_starts 1; 0.0061s/start)
populate_branch_affecting_locs.: 0.006103s (num_starts 2; 0.0031s/start)
graph_identify_back_edges.: 0.006321s (num_starts 6; 0.0011s/start)
create_sp_version_relations_lattice_at_pc.: 0.006592s (num_starts 85; 0.0001s/start)
graph_identify_natural_loops.: 0.006637s (num_starts 6; 0.0011s/start)
populate_transitive_closure.: 0.006913s (num_starts 1; 0.0069s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.007022s (num_starts 1; 0.0070s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.007751s (num_starts 641; 0.0000s/start)
avail_exprs_create_submap.: 0.00807s (num_starts 195; 0.0000s/start)
compute_regions.: 0.010678s (num_starts 6; 0.0018s/start)
find_dominators.: 0.010995s (num_starts 10; 0.0011s/start)
tfg_preprocess.dst.llvm.foo.: 0.011938s (num_starts 1; 0.0119s/start)
tfg::tfg_preprocess.: 0.011941s (num_starts 1; 0.0119s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.012722s (num_starts 65; 0.0002s/start)
main.2.: 0.013093s (num_starts 1; 0.0131s/start)
populate_loc_liveness.: 0.013759s (num_starts 2; 0.0069s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.014636s (num_starts 65; 0.0002s/start)
get_tfg.: 0.016252s (num_starts 1; 0.0163s/start)
get_function_tfg_map.foo.: 0.016288s (num_starts 1; 0.0163s/start)
get_function_tfg_map.: 0.016292s (num_starts 1; 0.0163s/start)
populate_locs_potentially_modified_on_edge.: 0.017398s (num_starts 3; 0.0058s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.017459s (num_starts 73; 0.0002s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.017745s (num_starts 1; 0.0177s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.017749s (num_starts 1; 0.0177s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.017754s (num_starts 1; 0.0178s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.017761s (num_starts 1; 0.0178s/start)
tfg_constructor.src.spec.foo.: 0.017765s (num_starts 1; 0.0178s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.021167s (num_starts 641; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.022166s (num_starts 641; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.023127s (num_starts 3; 0.0077s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.025676s (num_starts 641; 0.0000s/start)
tfg_postprocess_after_pointsto_analysis.: 0.038377s (num_starts 1; 0.0384s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.045657s (num_starts 65; 0.0007s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.047284s (num_starts 1; 0.0473s/start)
ftmap_run_pointsto_analysis.: 0.104572s (num_starts 1; 0.1046s/start)
parse_consts_db.: 7.06984s (num_starts 1; 7.0698s/start)
main.: 7.27101s (num_starts 1; 7.2710s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:08 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:15 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file loop2.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:23 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:23 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:23 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:23 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial4-prove3...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:23 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:23 : foo.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A2 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:23 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A2.B2: Propagated 3 out of 5 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A2.B2: Added the 3 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A2.B2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce151
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce151
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce151
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:23 : Added correlation to the product-TFG foo.A2.B2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce151
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce151
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce151
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:23 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove3...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:24 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:24 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27


<MSG>0:24 : foo.A2.B2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A2.B2 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Propagated 6 out of 17 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:24 : foo.A2.B2.C1: Added the 6 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:24 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : Added correlation to the product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:24 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:25 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:25 : foo.A2.B2.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:25 : foo.A2.B2.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:25 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:25 : Checking equivalence proof...</MSG>
<MSG>0:25 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 2.54s, query:smt.: 0.704609s (num_starts 30; 0.0235s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 1.82463s (num_starts 61; 0.0299s/start)ftmap_run_pointsto_analysis.: 0.143227s (num_starts 2; 0.0716s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 2e-06s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 4e-06s (num_starts 1; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 5e-06s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 5e-06s (num_starts 1; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 5e-06s (num_starts 3; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 9e-06s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.1e-05s (num_starts 1; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.2e-05s (num_starts 3; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 1.3e-05s (num_starts 12; 0.0000s/start)
remove_complex_bv_exprs.: 1.4e-05s (num_starts 1; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 1.4e-05s (num_starts 1; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 1.5e-05s (num_starts 19; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.6e-05s (num_starts 5; 0.0000s/start)
ce_perform_memory_fuzzing.: 1.9e-05s (num_starts 16; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 2.4e-05s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 2.7e-05s (num_starts 19; 0.0000s/start)
prove_trivial.: 2.7e-05s (num_starts 32; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 2.8e-05s (num_starts 1; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 2.9e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 3.1e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 3.1e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 3.6e-05s (num_starts 2; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.2e-05s (num_starts 3; 0.0000s/start)
determinize_value_expr_map.: 5.8e-05s (num_starts 28; 0.0000s/start)
expr_is_hidden_reg.: 7.1e-05s (num_starts 94; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.3e-05s (num_starts 1; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 7.6e-05s (num_starts 15; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 9.8e-05s (num_starts 16; 0.0000s/start)
lr_status_meet.: 0.0001s (num_starts 180; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.000102s (num_starts 61; 0.0000s/start)
expr_is_callee_save_const.: 0.000106s (num_starts 106; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000113s (num_starts 70; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000138s (num_starts 3; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.00016s (num_starts 29; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000165s (num_starts 40; 0.0000s/start)
populate_locid2expr_map.: 0.000177s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.00018s (num_starts 22; 0.0000s/start)
proof_query_is_trivial_helper.: 0.00018s (num_starts 72; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000182s (num_starts 2; 0.0001s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000184s (num_starts 29; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000186s (num_starts 40; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000197s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000202s (num_starts 2; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.00021s (num_starts 38; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000211s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000217s (num_starts 2; 0.0001s/start)
compute_bv_bool_eqclass.: 0.00022s (num_starts 1; 0.0002s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000221s (num_starts 15; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000228s (num_starts 2; 0.0001s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000229s (num_starts 1; 0.0002s/start)
graph_locs_add_local_vars_for_edge.: 0.000242s (num_starts 22; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000247s (num_starts 27; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.00027s (num_starts 509; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000278s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000287s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000289s (num_starts 1; 0.0003s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000296s (num_starts 6; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000306s (num_starts 9; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000434s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000434s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000436s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000438s (num_starts 1; 0.0004s/start)
def_analysis::xfer_and_meet.: 0.000439s (num_starts 31; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00044s (num_starts 1; 0.0004s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.000441s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000443s (num_starts 1; 0.0004s/start)
collect_assumes_around_edge.: 0.000456s (num_starts 3; 0.0002s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.000457s (num_starts 90; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00046s (num_starts 1; 0.0005s/start)
set_result_and_counter_example.: 0.000472s (num_starts 30; 0.0000s/start)
identify_address_taken_local_variables.: 0.000473s (num_starts 1; 0.0005s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000481s (num_starts 90; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000498s (num_starts 2; 0.0002s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.000564s (num_starts 19; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000598s (num_starts 62; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.00061s (num_starts 40; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.00063s (num_starts 1; 0.0006s/start)
expr_represents_llvm_undef.: 0.000643s (num_starts 110; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.000649s (num_starts 3; 0.0002s/start)
construct_linear_combination_exprs.: 0.00065s (num_starts 28; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000651s (num_starts 50; 0.0000s/start)
ldr_decomposition.: 0.000679s (num_starts 15; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.000682s (num_starts 61; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000693s (num_starts 8; 0.0001s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000709s (num_starts 79; 0.0000s/start)
proof_query_is_trivial.: 0.000718s (num_starts 70; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.00072s (num_starts 1; 0.0007s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000743s (num_starts 5; 0.0001s/start)
get_unrolled_loop_paths_from.: 0.00075s (num_starts 1; 0.0008s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000751s (num_starts 1; 0.0008s/start)
populate_dominator_and_postdominator_relations.: 0.000767s (num_starts 2; 0.0004s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.000768s (num_starts 15; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.000774s (num_starts 64; 0.0000s/start)
populate_simplified_to_state.: 0.000828s (num_starts 3; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000866s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000869s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00087s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.000872s (num_starts 1; 0.0009s/start)
tfg_edge_composition_get_assumes.: 0.000875s (num_starts 64; 0.0000s/start)
create_closure_matrix.: 0.000876s (num_starts 102; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000883s (num_starts 5; 0.0002s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.000887s (num_starts 221; 0.0000s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000907s (num_starts 5; 0.0002s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.000916s (num_starts 29; 0.0000s/start)
parse_yices_model.: 0.000936s (num_starts 1; 0.0009s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.000993s (num_starts 1; 0.0010s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001006s (num_starts 2; 0.0005s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.001055s (num_starts 1; 0.0011s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001122s (num_starts 79; 0.0000s/start)
graph_locs_add_all_specvars.: 0.001351s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.001401s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.001403s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned;-trivial.: 0.001405s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.001409s (num_starts 2; 0.0007s/start)
removeMostPromising.: 0.001409s (num_starts 10; 0.0001s/start)
bv_const_ref_map2expr_map.: 0.001412s (num_starts 28; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.001412s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned.: 0.001418s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.00143s (num_starts 2; 0.0007s/start)
corr_graph_enumerate_correlations.: 0.001518s (num_starts 5; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001583s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.001586s (num_starts 1; 0.0016s/start)
pth_collect_simplified_preds_using_atom_func.: 0.001647s (num_starts 61; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.001744s (num_starts 3; 0.0006s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.001816s (num_starts 2; 0.0009s/start)
populate_simplified_assets.: 0.001821s (num_starts 6; 0.0003s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001826s (num_starts 40; 0.0000s/start)
parse_cvc4_model.: 0.001858s (num_starts 1; 0.0019s/start)
graph_visit_exprs.: 0.001893s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001942s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.001947s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.00195s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001952s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001954s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.001958s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.001963s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001968s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.001972s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.00198s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.001986s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.001992s (num_starts 3; 0.0007s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.002008s (num_starts 125; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002029s (num_starts 110; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00208s (num_starts 3; 0.0007s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002115s (num_starts 1194; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002132s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.002135s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.002139s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002141s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.002147s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.002154s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 0.002163s (num_starts 3; 0.0007s/start)
generate_aliasing_constraints_from_expr.: 0.002163s (num_starts 712; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.002169s (num_starts 3; 0.0007s/start)
tfg::populate_loc_definedness.: 0.002185s (num_starts 3; 0.0007s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.002361s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002442s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.002477s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.002485s (num_starts 4; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002486s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.0025s (num_starts 2; 0.0013s/start)
graph_visit_exprs_and_keys.: 0.002788s (num_starts 2; 0.0014s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.002798s (num_starts 1; 0.0028s/start)
get_sprel_map_pair_at_pc.: 0.002843s (num_starts 38; 0.0001s/start)
graph_identify_back_edges.: 0.003167s (num_starts 21; 0.0002s/start)
populate_locs_potentially_modified_on_edge.: 0.003287s (num_starts 3; 0.0011s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.003455s (num_starts 64; 0.0001s/start)
graph_identify_natural_loops.: 0.00346s (num_starts 21; 0.0002s/start)
find_dominators.: 0.003502s (num_starts 25; 0.0001s/start)
compute_ssa_vars_renaming_map.: 0.003739s (num_starts 2; 0.0019s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.003941s (num_starts 29; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.003972s (num_starts 102; 0.0000s/start)
collect_assumes_around_path_helper.: 0.003993s (num_starts 90; 0.0000s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.003998s (num_starts 65; 0.0001s/start)
populate_branch_affecting_locs.: 0.004046s (num_starts 3; 0.0013s/start)
graph_with_paths::collect_assumes_around_path.: 0.004279s (num_starts 90; 0.0000s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.004503s (num_starts 29; 0.0002s/start)
check_node_stability_after_CE_addition.: 0.004617s (num_starts 32; 0.0001s/start)
ldr_decompose_and_linear_solve.: 0.004678s (num_starts 15; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004951s (num_starts 6; 0.0008s/start)
bv_linear_solve.: 0.004952s (num_starts 15; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.005008s (num_starts 2; 0.0025s/start)
query:bv_solve.: 0.005035s (num_starts 15; 0.0003s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.005104s (num_starts 31; 0.0002s/start)
compute_expr_eqclasses_at_pc.: 0.005112s (num_starts 1; 0.0051s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.005121s (num_starts 3; 0.0017s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.005551s (num_starts 3; 0.0019s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.005639s (num_starts 105; 0.0001s/start)
cg_add_node.: 0.005704s (num_starts 3; 0.0019s/start)
predicate_canonicalized.: 0.005876s (num_starts 28; 0.0002s/start)
bv_solve_returning_intermediate_structures.: 0.005999s (num_starts 15; 0.0004s/start)
counter_example_falsifies_preds.: 0.006066s (num_starts 58; 0.0001s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.006237s (num_starts 42; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.006318s (num_starts 220; 0.0000s/start)
populate_transitive_closure.: 0.006464s (num_starts 27; 0.0002s/start)
bvsolve_cache_query.miss1.: 0.006857s (num_starts 15; 0.0005s/start)
expr_substitute_using_available_exprs_submap.: 0.006866s (num_starts 186; 0.0000s/start)
bvsolve_cache_query.: 0.006983s (num_starts 15; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007007s (num_starts 1; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.007011s (num_starts 1; 0.0070s/start)
compute_lr_status_for_expr.: 0.007453s (num_starts 195; 0.0000s/start)
create_new_corr_graph_edge.new_node.: 0.007486s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.007493s (num_starts 4; 0.0019s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.007525s (num_starts 20; 0.0004s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.007593s (num_starts 20; 0.0004s/start)
tfg_suffixpath_get_expr_helper.: 0.007608s (num_starts 20; 0.0004s/start)
create_new_corr_graph_edge.: 0.00767s (num_starts 3; 0.0026s/start)
compute_vars_reaching_definitions.: 0.008016s (num_starts 2; 0.0040s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.00808s (num_starts 180; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.008358s (num_starts 180; 0.0000s/start)
compute_regions.: 0.008412s (num_starts 21; 0.0004s/start)
solve_for_bv_points.: 0.008494s (num_starts 15; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008594s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.008619s (num_starts 2; 0.0043s/start)
gen_pred_from_coeff_row.simplify.: 0.009016s (num_starts 28; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009027s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009032s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.009042s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.009051s (num_starts 3; 0.0030s/start)
lhs_set_sort.: 0.00911s (num_starts 38; 0.0002s/start)
collect_aliasing_constraints_around_path_helper.: 0.009154s (num_starts 106; 0.0001s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.009551s (num_starts 18; 0.0005s/start)
collect_aliasing_constraints_around_path.: 0.009714s (num_starts 66; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.009798s (num_starts 3; 0.0033s/start)
counter_example_satisfies_preds.: 0.010115s (num_starts 354; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.010228s (num_starts 15; 0.0007s/start)
collect_inductive_preds_around_path.: 0.010298s (num_starts 61; 0.0002s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.010735s (num_starts 4; 0.0027s/start)
populate_loc_liveness.: 0.011119s (num_starts 3; 0.0037s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.011383s (num_starts 79; 0.0001s/start)
get_next_potential_correlations.: 0.012768s (num_starts 3; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.013845s (num_starts 6; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.013856s (num_starts 6; 0.0023s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.014653s (num_starts 1; 0.0147s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.014788s (num_starts 19; 0.0008s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.015027s (num_starts 79; 0.0002s/start)
counter_example_evaluate_preds.: 0.015243s (num_starts 412; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.016024s (num_starts 6; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016033s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.016109s (num_starts 4; 0.0040s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.016125s (num_starts 79; 0.0002s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.016446s (num_starts 120; 0.0001s/start)
compute_new_lr_status_on_locs.: 0.017499s (num_starts 79; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.017518s (num_starts 1024; 0.0000s/start)
gen_pred_from_coeff_row.: 0.018001s (num_starts 28; 0.0006s/start)
compute_preds_for_bv_points.: 0.01826s (num_starts 5; 0.0037s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.018294s (num_starts 9; 0.0020s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018481s (num_starts 6; 0.0031s/start)
do_ssa_transformation.: 0.01849s (num_starts 2; 0.0092s/start)
tfg_relax_pointsto_vals_on_edge.: 0.018502s (num_starts 17; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.018574s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.018812s (num_starts 8; 0.0024s/start)
query:convert_from_z3.: 0.019365s (num_starts 451; 0.0000s/start)
query:convert_to_z3.: 0.020318s (num_starts 451; 0.0000s/start)
graph_to_stream.: 0.021015s (num_starts 4; 0.0053s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.021258s (num_starts 89; 0.0002s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.021775s (num_starts 59; 0.0004s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.021953s (num_starts 16; 0.0014s/start)
avail_exprs_create_submap.: 0.022314s (num_starts 237; 0.0001s/start)
apply_mask_and_overlay_array_constant.: 0.023174s (num_starts 16; 0.0014s/start)
get_unrolled_paths_from.: 0.023765s (num_starts 15; 0.0016s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.023786s (num_starts 14; 0.0017s/start)
tfg_postprocess_after_pointsto_analysis.: 0.024308s (num_starts 2; 0.0122s/start)
compute_z3_expr.: 0.025716s (num_starts 481; 0.0001s/start)
put_smtlib_string_in_file.: 0.026192s (num_starts 60; 0.0004s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.032122s (num_starts 38; 0.0008s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.034819s (num_starts 12; 0.0029s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.034892s (num_starts 1064; 0.0000s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.035634s (num_starts 38; 0.0009s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.036391s (num_starts 1024; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.036543s (num_starts 1; 0.0365s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.03655s (num_starts 1; 0.0365s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.036556s (num_starts 1; 0.0366s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.036563s (num_starts 1; 0.0366s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.036568s (num_starts 1; 0.0366s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.036581s (num_starts 1; 0.0366s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.037021s (num_starts 2; 0.0185s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.037034s (num_starts 2; 0.0185s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.04143s (num_starts 79; 0.0005s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.046008s (num_starts 1024; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.050423s (num_starts 62; 0.0008s/start)
decide_hoare_triple_helper;-trivial.: 0.05148s (num_starts 32; 0.0016s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.052504s (num_starts 78; 0.0007s/start)
query:simplify-z3.: 0.056723s (num_starts 912; 0.0001s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.068301s (num_starts 393; 0.0002s/start)
propagate_nodece_across_edge.: 0.070018s (num_starts 8; 0.0088s/start)
graph_ec_apply_trans_funs_helper.0.: 0.070948s (num_starts 167; 0.0004s/start)
graph_ec_apply_trans_funs_helper.: 0.072336s (num_starts 172; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.072772s (num_starts 172; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.073361s (num_starts 172; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.073912s (num_starts 172; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077147s (num_starts 2; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077155s (num_starts 2; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.077168s (num_starts 2; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.077175s (num_starts 2; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082616s (num_starts 1; 0.0826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082619s (num_starts 1; 0.0826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.082627s (num_starts 1; 0.0826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.082631s (num_starts 1; 0.0826s/start)
edge_composition_apply_trans_funs_on_pred.: 0.084947s (num_starts 61; 0.0014s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.086249s (num_starts 78; 0.0011s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086674s (num_starts 2; 0.0433s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086682s (num_starts 2; 0.0433s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086693s (num_starts 2; 0.0433s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086705s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086714s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.086726s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.086737s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 0.086746s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.086757s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.086769s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087347s (num_starts 1; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087354s (num_starts 1; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087361s (num_starts 1; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.089323s (num_starts 4; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.089335s (num_starts 4; 0.0223s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.089354s (num_starts 4; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098425s (num_starts 3; 0.0328s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098436s (num_starts 3; 0.0328s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.098451s (num_starts 3; 0.0328s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.098462s (num_starts 3; 0.0328s/start)
guarded_predicate_set_and.: 0.099754s (num_starts 29; 0.0034s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.099909s (num_starts 3; 0.0333s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.106867s (num_starts 62; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113038s (num_starts 2; 0.0565s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11334s (num_starts 1; 0.1133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113347s (num_starts 1; 0.1133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.113367s (num_starts 1; 0.1134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.11337s (num_starts 1; 0.1134s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.113442s (num_starts 3; 0.0378s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113903s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113903s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113904s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113906s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.113929s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.113931s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.113938s (num_starts 1; 0.1139s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.114408s (num_starts 2; 0.0572s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.115556s (num_starts 4; 0.0289s/start)
parse_z3_model.: 0.11702s (num_starts 17; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118434s (num_starts 2; 0.0592s/start)
read_counter_examples_from_channel.: 0.121411s (num_starts 9; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.123458s (num_starts 4; 0.0309s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.131217s (num_starts 3; 0.0437s/start)
ce_reconcile_sorts_and_values.: 0.134943s (num_starts 19; 0.0071s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.139459s (num_starts 10; 0.0139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.142881s (num_starts 2; 0.0714s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.142889s (num_starts 2; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.142896s (num_starts 2; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.142905s (num_starts 2; 0.0715s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.142919s (num_starts 2; 0.0715s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned.: 0.142926s (num_starts 2; 0.0715s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.142939s (num_starts 2; 0.0715s/start)
ftmap_run_pointsto_analysis.: 0.143227s (num_starts 2; 0.0716s/start)
tfg_run_pointsto_analysis.: 0.143542s (num_starts 2; 0.0718s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.144358s (num_starts 4; 0.0361s/start)
corr_graph::add_edge().: 0.146671s (num_starts 3; 0.0489s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.155275s (num_starts 3; 0.0518s/start)
corr_graph_add_correlation.: 0.15539s (num_starts 3; 0.0518s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.155602s (num_starts 16; 0.0097s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.155835s (num_starts 42; 0.0037s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.155935s (num_starts 2; 0.0780s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.157778s (num_starts 3; 0.0526s/start)
tfg_populate_structs_after_ssa_construction.: 0.160154s (num_starts 2; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168656s (num_starts 3; 0.0562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168668s (num_starts 3; 0.0562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.17117s (num_starts 7; 0.0245s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 0.171184s (num_starts 7; 0.0245s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.171857s (num_starts 32; 0.0054s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.172041s (num_starts 32; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175537s (num_starts 5; 0.0351s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175552s (num_starts 5; 0.0351s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.175655s (num_starts 5; 0.0351s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.175671s (num_starts 5; 0.0351s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.181588s (num_starts 2; 0.0908s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.182543s (num_starts 1; 0.1825s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188019s (num_starts 2; 0.0940s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18803s (num_starts 2; 0.0940s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188035s (num_starts 2; 0.0940s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.188054s (num_starts 2; 0.0940s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.188061s (num_starts 2; 0.0940s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.188075s (num_starts 2; 0.0940s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.193863s (num_starts 319; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195943s (num_starts 2; 0.0980s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.196016s (num_starts 2; 0.0980s/start)
counter_example_translate_on_edge_composition_helper.: 0.196982s (num_starts 286; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.231438s (num_starts 4; 0.0579s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.239052s (num_starts 8; 0.0299s/start)
check_wfconds_on_edge.: 0.269714s (num_starts 7; 0.0385s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.275375s (num_starts 3; 0.0918s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.277414s (num_starts 6; 0.0462s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281612s (num_starts 5; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.286829s (num_starts 11; 0.0261s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.309852s (num_starts 3; 0.1033s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.309946s (num_starts 3; 0.1033s/start)
dst_edge_composition_proves_false.: 0.322296s (num_starts 3; 0.1074s/start)
get_next_dst_edge_composition_to_correlate.: 0.332643s (num_starts 4; 0.0832s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.338066s (num_starts 9; 0.0376s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342875s (num_starts 6; 0.0571s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342904s (num_starts 6; 0.0572s/start)
decide_hoare_triple.: 0.351568s (num_starts 5; 0.0703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.356809s (num_starts 12; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.356849s (num_starts 12; 0.0297s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.358539s (num_starts 3; 0.1195s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.368925s (num_starts 6; 0.0615s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 0.384339s (num_starts 25; 0.0154s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.407988s (num_starts 8; 0.0510s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.408302s (num_starts 8; 0.0510s/start)
check_equivalence_proof.: 0.421195s (num_starts 1; 0.4212s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.461221s (num_starts 8; 0.0577s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.480416s (num_starts 16; 0.0300s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.512964s (num_starts 17; 0.0302s/start)
check_preds_on_edge_compositions.: 0.524245s (num_starts 10; 0.0524s/start)
query:smt.: 0.704609s (num_starts 30; 0.0235s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.742891s (num_starts 13; 0.0571s/start)
decide_hoare_triple_helper;per-query-type;linear.: 0.767168s (num_starts 27; 0.0284s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.792066s (num_starts 12; 0.0660s/start)
spawn_smt_query.: 0.826346s (num_starts 30; 0.0275s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry).: 0.82763s (num_starts 24; 0.0345s/start)
update_invariant_state_for_edges.: 1.28774s (num_starts 3; 0.4292s/start)
cg_check_new_cg_ec.: 1.29012s (num_starts 3; 0.4300s/start)
correl_entry_apply.: 1.29025s (num_starts 3; 0.4301s/start)
solver_provable.: 1.38473s (num_starts 29; 0.0477s/start)
expr_is_provable.: 1.39381s (num_starts 29; 0.0481s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 1.39441s (num_starts 29; 0.0481s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 1.39626s (num_starts 29; 0.0481s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 1.39718s (num_starts 29; 0.0482s/start)
solver_satisfiable-cache-miss.: 1.41122s (num_starts 30; 0.0470s/start)
solver_satisfiable.: 1.41142s (num_starts 30; 0.0470s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 1.50257s (num_starts 29; 0.0518s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 1.53085s (num_starts 38; 0.0403s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 1.53182s (num_starts 38; 0.0403s/start)
expandProductCFG.: 1.6364s (num_starts 4; 0.4091s/start)
is_expr_equal_using_lhs_set_and_precond.: 1.63705s (num_starts 38; 0.0431s/start)
prove.: 1.63742s (num_starts 38; 0.0431s/start)
prove_spawn_and_join_helper.: 1.63769s (num_starts 38; 0.0431s/start)
prove_spawn_and_join.: 1.68993s (num_starts 38; 0.0445s/start)
prove_wrapper.proof_query_not_trivial.: 1.69581s (num_starts 38; 0.0446s/start)
prove_wrapper.: 1.7103s (num_starts 70; 0.0244s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.77084s (num_starts 29; 0.0611s/start)
decide_hoare_triple_check_ub.: 1.80087s (num_starts 61; 0.0295s/start)
decide_hoare_triple_helper.: 1.82463s (num_starts 61; 0.0299s/start)
bestFirstSearch.: 1.83109s (num_starts 1; 1.8311s/start)
decide_hoare_triple_with_alias_cons.: 1.98094s (num_starts 61; 0.0325s/start)
Time taken for equivalence check.: 2.25453s (num_starts 1; 2.2545s/start)

counters:
# of paths enumerated.: 12
# of paths expanded.: 3
# of queries to linear solver.: 15
# of smt-solver-queries.: 30
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 17
total-correlation-possibilities.: 7
total-correlation-possibilities-mod-lsprels.: 7
total-correlations-explored.: 4

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 8
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 17
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 5
final-CG-super-edges.: 0
src-edges.: 16
src-nodes.: 14
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 1.45
final-CG-time-to-total-time-ratio.: 0.79
query-time-to-total-time-ratio.: 0.30

Context stats:
exprs: count: 145142
sorts: count: 148
num_proof_queries: 38
num_proof_queries_answered_by_syntactic_check: 9
cache_stats:
m_simplify:
	----------- total:	5256
	        hit ratio:	0.953767
m_simplify_solver:
	----------- total:	1081
	        hit ratio:	0.570768
m_z3_solver_substitution:
	----------- total:	461
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	464
	        hit ratio:	0
m_expr_size:
	----------- total:	5784
	        hit ratio:	0.902835
m_expr_evaluates_to_constant_visitor:
	----------- total:	6829
	        hit ratio:	0.553668
m_sort_dfa_canonicalize:
	----------- total:	78985
	        hit ratio:	0.999835
m_expr_convert_to_iexpr:
	----------- total:	389
	        hit ratio:	0.542416

z3_solver expr_query_cache entry size: 30
	----------- total:	30
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[ 9.6790, 11.1068) (avg.  9.6925)        : 2
[11.1068, 12.7453) (avg. 11.8980)        : 1
[12.7453, 14.6254) (avg. 13.2380)        : 3
[14.6254, 16.7830) (avg. 15.5008)        : 5
[16.7830, 19.2587) (avg. 17.6460)        : 1
[19.2587, 22.0998) (avg. 20.3225)        : 2
[22.0998, 25.3599) (avg. 23.8733)        : 3
[25.3599, 29.1009) (avg. 27.8860)        : 4
[29.1009, 33.3938) (avg. 32.4985)        : 2
[33.3938, 38.3200) (avg. 35.6157)        : 7
histogram (number of quantifiers in query)
[0, 2) (avg. 0)                          : 1
[2, 3) (avg. 2)                          : 29
[3, 4) (avg. 0)                          : 0
[4, 5) (avg. 0)                          : 0
[5, 6) (avg. 0)                          : 0
[6, 8) (avg. 0)                          : 0
[8, 9) (avg. 0)                          : 0
[9, 10) (avg. 0)                         : 0
[10, 11) (avg. 0)                        : 0
[11, 12) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 40,  54) (avg.  40)                    : 1
[ 54,  68) (avg.   0)                    : 0
[ 68,  81) (avg.   0)                    : 0
[ 81,  95) (avg.   0)                    : 0
[ 95, 108) (avg. 102)                    : 7
[108, 122) (avg. 111)                    : 8
[122, 136) (avg. 125)                    : 8
[136, 149) (avg. 145)                    : 5
[149, 163) (avg.   0)                    : 0
[163, 176) (avg. 166)                    : 1
Top 10 highest time taking queries:
1. [0.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_2.1
2. [0.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%6%bbentry_Lfor.cond%1%bbentry.dstToPC.E0%0%d.from_pcL3%6%bbentry_Lfor.cond%.0
3. [0.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
4. [0.035s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
5. [0.035s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.Lfor.cond%1%bbentry.from_pcL0%0%d_L0%0%d.cond_apply_set_.0
6. [0.034s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%6%bbentry_Lfor.cond%1%bbentry.dstToPC.Lfor.cond%1%bbentry.from_pcL3%6%bbent.0
7. [0.034s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-unsigned.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_.0
8. [0.033s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.4.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
9. [0.032s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
10. [0.029s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.7.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_2.2

<MSG>0:25 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 128 time spent: 0:0:0 [0.002756s total; 0.000022 per start]
tfg_computeWP: num_starts 542 time spent: 0:0:0 [0.062598s total; 0.000115 per start]
tfg_get_simplified_to_state_for_edge: num_starts 1647 time spent: 0:0:0 [0.003351s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1614 time spent: 0:0:0 [0.003280s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 758 time spent: 0:0:0 [0.001567s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 19 time spent: 0:0:0 [0.130434s total; 0.006865 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 6 time spent: 0:0:0 [0.120547s total; 0.020091 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 334 time spent: 0:0:0 [0.183994s total; 0.000551 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 58 time spent: 0:0:0 [0.019294s total; 0.000333 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 279 time spent: 0:0:0 [0.158807s total; 0.000569 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1127 time spent: 0:0:0 [0.164071s total; 0.000146 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 279 time spent: 0:0:0 [0.008560s total; 0.000031 per start]
tfg_graph_get_vars_written_on_edge: num_starts 279 time spent: 0:0:0 [0.006583s total; 0.000024 per start]
cg_with_rank_add_CE_at_pc: num_starts 32 time spent: 0:0:0 [0.060190s total; 0.001881 per start]
graph_with_ce_add_CE_at_pc: num_starts 22 time spent: 0:0:0 [0.000488s total; 0.000022 per start]
graph_with_guessing_add_CE_at_pc: num_starts 32 time spent: 0:0:0 [0.059490s total; 0.001859 per start]
point_set_add_point_using_CE: num_starts 120 time spent: 0:0:0 [0.015958s total; 0.000133 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 120 time spent: 0:0:0 [0.016282s total; 0.000136 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 18 time spent: 0:0:0 [0.054195s total; 0.003011 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 18 time spent: 0:0:0 [0.037415s total; 0.002079 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2115 time spent: 0:0:0 [0.021639s total; 0.000010 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 240 time spent: 0:0:0 [0.007175s total; 0.000030 per start]
expr_simplify_solver: num_starts 1124 time spent: 0:0:0 [0.103664s total; 0.000092 per start]
expr_simplify_syntactic: num_starts 1124 time spent: 0:0:0 [0.023478s total; 0.000021 per start]
expr_simplify_select_on_store: num_starts 2 time spent: 0:0:0 [0.008070s total; 0.004035 per start]
expr_simplify_using_lhs_set_helper: num_starts 382 time spent: 0:0:0 [0.207223s total; 0.000542 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 2089 time spent: 0:0:0 [0.204806s total; 0.000098 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 1083 time spent: 0:0:0 [0.005460s total; 0.000005 per start]
expr_simplify_eq: num_starts 242 time spent: 0:0:0 [0.002660s total; 0.000011 per start]
expr_simplify_or: num_starts 17 time spent: 0:0:0 [0.000025s total; 0.000001 per start]
expr_simplify_and: num_starts 67 time spent: 0:0:0 [0.000669s total; 0.000010 per start]
expr_simplify_andnot1: num_starts 16 time spent: 0:0:0 [0.000202s total; 0.000013 per start]
expr_simplify_not: num_starts 17 time spent: 0:0:0 [0.000073s total; 0.000004 per start]
expr_simplify_implies: num_starts 36 time spent: 0:0:0 [0.000405s total; 0.000011 per start]
canonicalize_expr_tree: num_starts 496 time spent: 0:0:0 [0.013183s total; 0.000027 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 2 time spent: 0:0:0 [0.007997s total; 0.003999 per start]
get_arithmetic_addsub_atoms: num_starts 1405 time spent: 0:0:0 [0.001068s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 323 time spent: 0:0:0 [0.002856s total; 0.000009 per start]
expr_is_consts_struct_constant: num_starts 1737 time spent: 0:0:0 [0.001087s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5602 time spent: 0:0:0 [0.209584s total; 0.000037 per start]
expr_do_simplify_helper_cache: num_starts 5602 time spent: 0:0:0 [0.005326s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 902 time spent: 0:0:0 [0.171054s total; 0.000190 per start]
array_constant_equals: num_starts 373 time spent: 0:0:0 [0.000596s total; 0.000002 per start]
sort_dfa_canonical: num_starts 221128 time spent: 0:0:1 [1.227583s total; 0.000006 per start]
expr_convert_to_iexpr: num_starts 412 time spent: 0:0:0 [0.506754s total; 0.001230 per start]
combo_dfa_xfer_and_meet: num_starts 62 time spent: 0:0:0 [0.106778s total; 0.001722 per start]
alias_val_xfer_and_meet: num_starts 62 time spent: 0:0:0 [0.050306s total; 0.000811 per start]
get_sprel_map_from_avail_exprs: num_starts 87 time spent: 0:0:0 [0.009519s total; 0.000109 per start]
update_memlabels_for_memslot_locs: num_starts 23 time spent: 0:0:0 [0.000101s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 158 time spent: 0:0:0 [0.017980s total; 0.000114 per start]
compute_simplified_loc_exprs_for_edge: num_starts 382 time spent: 0:0:0 [0.048965s total; 0.000128 per start]
compute_locs_definitely_written_on_edge: num_starts 158 time spent: 0:0:0 [0.000214s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 36 time spent: 0:0:0 [0.005892s total; 0.000164 per start]
edge_update_memlabel_map_for_mlvars: num_starts 79 time spent: 0:0:0 [0.001231s total; 0.000016 per start]
add_new_locs_based_on_edge: num_starts 62 time spent: 0:0:0 [0.035658s total; 0.000575 per start]
expand_locset_to_include_slots_for_memmask: num_starts 75 time spent: 0:0:0 [0.000156s total; 0.000002 per start]
total: num_starts 1 time spent: 0:0:31 [31.819019s total; 31.819019 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 2.54s.
ftmap_run_pointsto_analysis.: 0.143227s (num_starts 2; 0.0716s/start)s.
EQ Time after pointsto analysis: 2.39917s.
EQ Time after pointsto analysis and smt_query: 0.688864s.
EQ Time after pointsto analysis and smt_query and bv-solve: 0.681881s.
Equivalence proof found. The programs are equivalent.
