argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=loop3.proof
argv[9] = --spec-iospecs=loop3.iospecs
argv[10] = loop3.spec
argv[11] = loop3.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.2171508
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/loop3.c
argv[10] = -o
argv[11] = par_tmpdir/loop3.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/loop3.spec.etfg
argv[11] = par_tmpdir/loop3.c.bc
argv[12] = -o
argv[13] = par_tmpdir/loop3.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 68 time spent: 0:0:0 [0.000116s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 102 time spent: 0:0:0 [0.000168s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 612 time spent: 0:0:0 [0.002380s total; 0.000004 per start]
expr_simplify_solver: num_starts 46 time spent: 0:0:0 [0.005334s total; 0.000116 per start]
expr_simplify_syntactic: num_starts 46 time spent: 0:0:0 [0.001975s total; 0.000043 per start]
expr_simplify_using_lhs_set_helper: num_starts 59 time spent: 0:0:0 [0.010004s total; 0.000170 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 135 time spent: 0:0:0 [0.009864s total; 0.000073 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 48 time spent: 0:0:0 [0.000221s total; 0.000005 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
canonicalize_expr_tree: num_starts 30 time spent: 0:0:0 [0.000451s total; 0.000015 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
get_arithmetic_addsub_atoms: num_starts 44 time spent: 0:0:0 [0.000040s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 60 time spent: 0:0:0 [0.000674s total; 0.000011 per start]
expr_is_consts_struct_constant: num_starts 131 time spent: 0:0:0 [0.000121s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1397 time spent: 0:0:0 [0.011347s total; 0.000008 per start]
expr_do_simplify_helper_cache: num_starts 1397 time spent: 0:0:0 [0.000949s total; 0.000001 per start]
array_constant_equals: num_starts 3 time spent: 0:0:0 [0.000008s total; 0.000003 per start]
sort_dfa_canonical: num_starts 141745 time spent: 0:0:1 [1.182814s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 8 time spent: 0:0:0 [0.001097s total; 0.000137 per start]
combo_dfa_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.043563s total; 0.000670 per start]
alias_val_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.013732s total; 0.000211 per start]
get_sprel_map_from_avail_exprs: num_starts 86 time spent: 0:0:0 [0.005295s total; 0.000062 per start]
update_memlabels_for_memslot_locs: num_starts 20 time spent: 0:0:0 [0.000083s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 130 time spent: 0:0:0 [0.005079s total; 0.000039 per start]
compute_simplified_loc_exprs_for_edge: num_starts 365 time spent: 0:0:0 [0.017530s total; 0.000048 per start]
compute_locs_definitely_written_on_edge: num_starts 130 time spent: 0:0:0 [0.000059s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 28 time spent: 0:0:0 [0.005091s total; 0.000182 per start]
edge_update_memlabel_map_for_mlvars: num_starts 65 time spent: 0:0:0 [0.000377s total; 0.000006 per start]
add_new_locs_based_on_edge: num_starts 65 time spent: 0:0:0 [0.008424s total; 0.000130 per start]
expand_locset_to_include_slots_for_memmask: num_starts 45 time spent: 0:0:0 [0.000094s total; 0.000002 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 7e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 1.4e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 1.8e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 2e-05s (num_starts 22; 0.0000s/start)
lr_status_meet.: 2.1e-05s (num_starts 31; 0.0000s/start)
expr_is_callee_save_const.: 2.8e-05s (num_starts 26; 0.0000s/start)
context_constructor.solver.: 3.6e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 3.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.3e-05s (num_starts 1; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.3e-05s (num_starts 2; 0.0000s/start)
compute_sprel_relations.: 7.1e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 7.1e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_indvars.: 7.2e-05s (num_starts 1; 0.0001s/start)
propagate_sprels.: 7.7e-05s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 9.1e-05s (num_starts 10; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 9.4e-05s (num_starts 33; 0.0000s/start)
main.3.: 9.7e-05s (num_starts 1; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 9.8e-05s (num_starts 5; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000115s (num_starts 1; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.00013s (num_starts 33; 0.0000s/start)
determinize_value_expr_map.: 0.00014s (num_starts 177; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000153s (num_starts 1; 0.0002s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000168s (num_starts 2; 0.0001s/start)
expr_represents_llvm_undef.: 0.000177s (num_starts 28; 0.0000s/start)
populate_locid2expr_map.: 0.000202s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000259s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000285s (num_starts 65; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000294s (num_starts 65; 0.0000s/start)
canonicalize_llvm_nextpcs.: 0.000311s (num_starts 1; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.000346s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000367s (num_starts 1; 0.0004s/start)
def_analysis::xfer_and_meet.: 0.000402s (num_starts 66; 0.0000s/start)
compute_z3_expr.: 0.000408s (num_starts 28; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000415s (num_starts 759; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.000424s (num_starts 45; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000441s (num_starts 1; 0.0004s/start)
expr_linear_relation_holds::visit.var.: 0.000514s (num_starts 28; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000589s (num_starts 65; 0.0000s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.000715s (num_starts 1; 0.0007s/start)
populate_simplified_to_state.: 0.000787s (num_starts 3; 0.0003s/start)
populate_exit_return_values_for_llvm_method.: 0.000828s (num_starts 1; 0.0008s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.001015s (num_starts 552; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001231s (num_starts 51; 0.0000s/start)
create_closure_matrix.: 0.001271s (num_starts 85; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001311s (num_starts 102; 0.0000s/start)
graph_visit_exprs.: 0.001365s (num_starts 4; 0.0003s/start)
query:convert_from_z3.: 0.00137s (num_starts 28; 0.0000s/start)
compute_lr_status_for_expr.: 0.00143s (num_starts 36; 0.0000s/start)
query:convert_to_z3.: 0.001458s (num_starts 28; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.001504s (num_starts 31; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.001538s (num_starts 1; 0.0015s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.001563s (num_starts 31; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001968s (num_starts 1; 0.0020s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002075s (num_starts 1; 0.0021s/start)
populate_transitive_closure.: 0.002579s (num_starts 1; 0.0026s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.003311s (num_starts 65; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.003689s (num_starts 2; 0.0018s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.003763s (num_starts 1; 0.0038s/start)
query:simplify-z3.: 0.00382s (num_starts 58; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.004004s (num_starts 1; 0.0040s/start)
tfg::populate_loc_definedness.before_solve.: 0.004019s (num_starts 2; 0.0020s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.004028s (num_starts 612; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.004145s (num_starts 1; 0.0041s/start)
populate_simplified_assets.: 0.004219s (num_starts 6; 0.0007s/start)
graph_to_stream.: 0.004272s (num_starts 1; 0.0043s/start)
compute_new_lr_status_on_locs.: 0.004283s (num_starts 65; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.004291s (num_starts 1; 0.0043s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004344s (num_starts 68; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00435s (num_starts 2; 0.0022s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004445s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.: 0.004555s (num_starts 2; 0.0023s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.004926s (num_starts 1; 0.0049s/start)
graph_identify_back_edges.: 0.005286s (num_starts 6; 0.0009s/start)
graph_identify_natural_loops.: 0.005555s (num_starts 6; 0.0009s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.005579s (num_starts 65; 0.0001s/start)
populate_branch_affecting_locs.: 0.006036s (num_starts 2; 0.0030s/start)
create_sp_version_relations_lattice_at_pc.: 0.006371s (num_starts 85; 0.0001s/start)
avail_exprs_create_submap.: 0.007709s (num_starts 195; 0.0000s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.007925s (num_starts 1; 0.0079s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.00793s (num_starts 1; 0.0079s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.007934s (num_starts 1; 0.0079s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.007939s (num_starts 1; 0.0079s/start)
tfg_constructor.src.spec.foo.: 0.007942s (num_starts 1; 0.0079s/start)
find_dominators.: 0.008379s (num_starts 10; 0.0008s/start)
populate_locs_potentially_modified_on_edge.: 0.008839s (num_starts 3; 0.0029s/start)
compute_regions.: 0.009052s (num_starts 6; 0.0015s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.01006s (num_starts 59; 0.0002s/start)
tfg_preprocess.dst.llvm.foo.: 0.011471s (num_starts 1; 0.0115s/start)
tfg::tfg_preprocess.: 0.011473s (num_starts 1; 0.0115s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.012187s (num_starts 65; 0.0002s/start)
main.2.: 0.012635s (num_starts 1; 0.0126s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.013071s (num_starts 3; 0.0044s/start)
populate_loc_liveness.: 0.013213s (num_starts 2; 0.0066s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.013344s (num_starts 612; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.013842s (num_starts 65; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.014229s (num_starts 612; 0.0000s/start)
get_tfg.: 0.015355s (num_starts 1; 0.0154s/start)
get_function_tfg_map.foo.: 0.015385s (num_starts 1; 0.0154s/start)
get_function_tfg_map.: 0.015388s (num_starts 1; 0.0154s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.017478s (num_starts 612; 0.0000s/start)
tfg_postprocess_after_pointsto_analysis.: 0.03652s (num_starts 1; 0.0365s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.04366s (num_starts 65; 0.0007s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.045238s (num_starts 1; 0.0452s/start)
ftmap_run_pointsto_analysis.: 0.100041s (num_starts 1; 0.1000s/start)
parse_consts_db.: 6.82616s (num_starts 1; 6.8262s/start)
main.: 6.99094s (num_starts 1; 6.9909s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:21 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:21 : Reading in SPEC-LLVM I/O specification from file loop3.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: foo...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:21 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:21 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:21 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L3%12%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L3%12%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L3%12%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L3%15%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L3%15%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L3%15%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:21 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%12%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:21 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:21 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:21 : Creating ssa-path for the src-tfg path L0%0%d --> L3%12%bbentry ending at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Adding a CG edge composition using the src path L0%0%d --> L3%12%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%12%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%12%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%12%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%12%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Computing loop hoisting select expressions at toPC L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Adding node L3%12%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:21 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:21 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:21 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:21 : foo.A2: Propagated 3 out of 3 counter-examples across edge L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : foo.A2: Added the 3 propagated CEs at PC L3%12%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:21 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:21 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:21 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%12%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%12%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding a CG edge composition using the src path L0%0%d --> L3%12%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%12%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%12%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%12%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%12%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%12%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3


<MSG>0:21 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%12%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry, A (line 3 at column 21))
                L3%12%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%12%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%12%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%12%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%12%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%12%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%12%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3


<MSG>0:21 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:21 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:21 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial4-prove3...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%12%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%12%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:21 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:21 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%12%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%12%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:21 : foo.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:21 : foo.A2 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:21 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Considering 2 paths to src pc L3%12%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L3%12%bbentry=>L3%12%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L3%12%bbentry=>L3%12%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Found 2 feasible correlations for paths to src pc L3%12%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:21 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%12%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry, A (line 3 at column 21))
                L3%12%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%12%bbentry=>L3%12%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:21 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:21 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:21 : Creating ssa-path for the src-tfg path L3%12%bbentry --> L3%12%bbentry ending at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Adding a CG edge composition using the src path L3%12%bbentry --> L3%12%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Identifying common alloc-deallocs in the src path L3%12%bbentry --> L3%12%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Identified no common alloc-deallocs in the src path L3%12%bbentry --> L3%12%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%12%bbentry_Lfor.cond%1%bbentry and toPC L3%12%bbentry_Lfor.cond%1%bbentry, src path L3%12%bbentry --> L3%12%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2.B2: Getting alloca-ptrs on edge L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2.B2: Found no alloca-ptrs on edge L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2.B2: Adding edge L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:21 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:21 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:21 : foo.A2.B2: Propagated 4 out of 6 counter-examples across edge L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : foo.A2.B2: Added the 4 propagated CEs at PC L3%12%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:21 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:21 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:21 : foo.A2.B2: Computing CG regions after the addition of the edge L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%12%bbentry_Lfor.cond%1%bbentry and toPC L3%12%bbentry_Lfor.cond%1%bbentry, src path L3%12%bbentry --> L3%12%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding a CG edge composition using the src path L3%12%bbentry --> L3%12%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:21 : Added correlation to the product-TFG foo.A2.B2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%12%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry => C L3%12%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry, A (line 3 at column 21))
                L3%12%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%12%bbentry=>L3%12%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%12%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%12%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:21 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:21 : Constructed infer_invariants_dfa with initial worklist L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:21 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%12%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:21 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:22 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:22 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%12%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:22 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:22 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39


<MSG>0:22 : foo.A2.B2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:22 : foo.A2.B2 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:22 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L3%12%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%12%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%12%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry => C L3%12%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry, A (line 3 at column 21))
                L3%12%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 20 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%12%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L3%12%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L3%12%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L3%12%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L3%12%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:22 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%12%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%12%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Adding edge L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Propagated 5 out of 20 counter-examples across edge L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:22 : foo.A2.B2.C1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:22 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%12%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%12%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L3%12%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:22 : Added correlation to the product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%12%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry => C L3%12%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%12%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry, A (line 3 at column 21))
                L3%12%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 20 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%12%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:22 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:22 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%12%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:22 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:22 : foo.A2.B2.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:22 : foo.A2.B2.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:22 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:22 : Checking equivalence proof...</MSG>
<MSG>0:22 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%12%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%12%bbentry ; 4-->input.spec-%var-n-0.L3%12%bbentry ; 5-->input.spec-%var-r-0.L3%12%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%12%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%12%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:z3v487.ce138      3.:cvc4.ce107
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%12%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:cvc4.ce285
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39      2.:yices.ce41
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce138      2.:z3.ce209      3.:z3.ce361
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:cvc4.ce3      1.:z3v487.ce39

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%12%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry => C L3%12%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%12%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            L3%12%bbentry_Lfor.cond%1%bbentry (C L3%12%bbentry, A (line 3 at column 21))
                L3%12%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 20 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 1.16s, query:smt.: 0.2719s (num_starts 24; 0.0113s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 0.712623s (num_starts 60; 0.0119s/start)ftmap_run_pointsto_analysis.: 0.07729s (num_starts 2; 0.0386s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 2e-06s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 2e-06s (num_starts 1; 0.0000s/start)
prune_dst_memslots.: 4e-06s (num_starts 1; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 4e-06s (num_starts 3; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 6e-06s (num_starts 5; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 8e-06s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 1e-05s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.3e-05s (num_starts 5; 0.0000s/start)
remove_complex_bv_exprs.: 1.3e-05s (num_starts 1; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 1.4e-05s (num_starts 19; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 1.4e-05s (num_starts 14; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 1.4e-05s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1.5e-05s (num_starts 19; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.6e-05s (num_starts 3; 0.0000s/start)
prove_trivial.: 2.3e-05s (num_starts 30; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 2.4e-05s (num_starts 1; 0.0000s/start)
ce_perform_memory_fuzzing.: 2.6e-05s (num_starts 21; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 2.8e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 3e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L3%12%bbentry_Lfor.cond%1%bbentry.: 3.1e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%12%bbentry_Lfor.cond%1%bbentry.: 3.9e-05s (num_starts 3; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 4.1e-05s (num_starts 1; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 4.2e-05s (num_starts 3; 0.0000s/start)
determinize_value_expr_map.: 5e-05s (num_starts 23; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 7.4e-05s (num_starts 62; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.7e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 8.3e-05s (num_starts 84; 0.0000s/start)
collect_dst_to_src_submap_preds.: 8.4e-05s (num_starts 60; 0.0000s/start)
lr_status_meet.: 9.4e-05s (num_starts 126; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 9.7e-05s (num_starts 19; 0.0000s/start)
expr_is_callee_save_const.: 0.000102s (num_starts 96; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000105s (num_starts 16; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000113s (num_starts 3; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry.: 0.000122s (num_starts 2; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000126s (num_starts 32; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000138s (num_starts 8; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.00014s (num_starts 1; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000144s (num_starts 40; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000144s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000148s (num_starts 2; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.000149s (num_starts 30; 0.0000s/start)
compute_bv_bool_eqclass.: 0.000149s (num_starts 1; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000149s (num_starts 17; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000153s (num_starts 30; 0.0000s/start)
proof_query_is_trivial_helper.: 0.000153s (num_starts 74; 0.0000s/start)
propagate_sprels.: 0.000157s (num_starts 2; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000163s (num_starts 2; 0.0001s/start)
sp_version_relations_val_t::meet.: 0.000163s (num_starts 280; 0.0000s/start)
populate_locid2expr_map.: 0.000168s (num_starts 2; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000182s (num_starts 40; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.0002s (num_starts 6; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000229s (num_starts 25; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000236s (num_starts 17; 0.0000s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000237s (num_starts 1; 0.0002s/start)
graph_locs_add_all_local_vars.: 0.000249s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000274s (num_starts 24; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000284s (num_starts 9; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000321s (num_starts 1; 0.0003s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000323s (num_starts 30; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000339s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000343s (num_starts 1; 0.0003s/start)
set_result_and_counter_example.: 0.000343s (num_starts 24; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000344s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000346s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000349s (num_starts 1; 0.0003s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.00035s (num_starts 89; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000363s (num_starts 1; 0.0004s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000367s (num_starts 89; 0.0000s/start)
collect_assumes_around_edge.: 0.000388s (num_starts 3; 0.0001s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000412s (num_starts 8; 0.0001s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.000429s (num_starts 2; 0.0002s/start)
graph_locs_add_all_llvmvars.: 0.00046s (num_starts 2; 0.0002s/start)
identify_address_taken_local_variables.: 0.000468s (num_starts 1; 0.0005s/start)
populate_dominator_and_postdominator_relations.: 0.000496s (num_starts 2; 0.0002s/start)
graph_with_guessing_sync_preds.: 0.000498s (num_starts 60; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000506s (num_starts 40; 0.0000s/start)
proof_query_is_trivial.: 0.000533s (num_starts 62; 0.0000s/start)
create_closure_matrix.: 0.000562s (num_starts 62; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000565s (num_starts 269; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.000577s (num_starts 40; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000605s (num_starts 1; 0.0006s/start)
expr_represents_llvm_undef.: 0.000618s (num_starts 103; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000636s (num_starts 47; 0.0000s/start)
populate_simplified_to_state.: 0.000656s (num_starts 3; 0.0002s/start)
construct_linear_combination_exprs.: 0.000668s (num_starts 28; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.00067s (num_starts 52; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000692s (num_starts 1; 0.0007s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.000709s (num_starts 3; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000724s (num_starts 1; 0.0007s/start)
tfg_edge_composition_get_assumes.: 0.000746s (num_starts 52; 0.0000s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.00077s (num_starts 23; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.00077s (num_starts 5; 0.0002s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.000799s (num_starts 30; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.000856s (num_starts 1; 0.0009s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000912s (num_starts 47; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000936s (num_starts 5; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000961s (num_starts 5; 0.0002s/start)
graph_locs_add_all_specvars.: 0.000973s (num_starts 2; 0.0005s/start)
ldr_decomposition.: 0.000983s (num_starts 19; 0.0001s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001047s (num_starts 1; 0.0010s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001057s (num_starts 2; 0.0005s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001058s (num_starts 24; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.001058s (num_starts 3; 0.0004s/start)
removeMostPromising.: 0.001065s (num_starts 10; 0.0001s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.001101s (num_starts 19; 0.0001s/start)
corr_graph_enumerate_correlations.: 0.001217s (num_starts 5; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.001333s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.001335s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned;-trivial.: 0.001337s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.00134s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.001346s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned.: 0.001351s (num_starts 2; 0.0007s/start)
generate_aliasing_constraints_from_expr.: 0.001354s (num_starts 512; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.001359s (num_starts 2; 0.0007s/start)
bv_const_ref_map2expr_map.: 0.001374s (num_starts 28; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001378s (num_starts 3; 0.0005s/start)
populate_simplified_assets.: 0.001469s (num_starts 6; 0.0002s/start)
tfg::populate_loc_definedness.: 0.001471s (num_starts 3; 0.0005s/start)
graph_visit_exprs.: 0.001513s (num_starts 3; 0.0005s/start)
get_sprel_map_pair_at_pc.: 0.00157s (num_starts 32; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.00162s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001672s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001672s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.001675s (num_starts 1; 0.0017s/start)
expr_linear_relation_holds::visit.var.: 0.001897s (num_starts 103; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001931s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.001935s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.001937s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001941s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.00195s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.001957s (num_starts 3; 0.0007s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.001961s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.00197s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001982s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.001986s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.001989s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001992s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002001s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.002008s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.002014s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002021s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002104s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.00211s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.002113s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002117s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.002126s (num_starts 3; 0.0007s/start)
compute_ssa_vars_renaming_map.: 0.00213s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.002133s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 0.00214s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.002145s (num_starts 3; 0.0007s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.002153s (num_starts 24; 0.0001s/start)
graph_visit_exprs_and_keys.: 0.00224s (num_starts 2; 0.0011s/start)
tfg_suffixpath_get_expr_helper.: 0.002381s (num_starts 16; 0.0001s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.002391s (num_starts 3; 0.0008s/start)
graph_identify_back_edges.: 0.002399s (num_starts 21; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.002411s (num_starts 186; 0.0000s/start)
find_dominators.: 0.002504s (num_starts 25; 0.0001s/start)
graph_identify_natural_loops.: 0.002593s (num_starts 21; 0.0001s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.002606s (num_starts 30; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.002637s (num_starts 4; 0.0007s/start)
expr_substitute_using_available_exprs_submap.: 0.00264s (num_starts 127; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.002643s (num_starts 4; 0.0007s/start)
populate_branch_affecting_locs.: 0.002659s (num_starts 3; 0.0009s/start)
populate_locs_potentially_modified_on_edge.: 0.002662s (num_starts 3; 0.0009s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.002815s (num_starts 30; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.002828s (num_starts 52; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.00295s (num_starts 60; 0.0000s/start)
compute_vars_reaching_definitions.: 0.002977s (num_starts 2; 0.0015s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.003013s (num_starts 1; 0.0030s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.003265s (num_starts 112; 0.0000s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.003295s (num_starts 53; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.00352s (num_starts 62; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.003628s (num_starts 155; 0.0000s/start)
compute_expr_eqclasses_at_pc.: 0.003883s (num_starts 1; 0.0039s/start)
populate_transitive_closure.: 0.003967s (num_starts 27; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.004145s (num_starts 3; 0.0014s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.00423s (num_starts 20; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004241s (num_starts 6; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004247s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004251s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.004258s (num_starts 3; 0.0014s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.004266s (num_starts 20; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.004267s (num_starts 3; 0.0014s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.004321s (num_starts 3; 0.0014s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004438s (num_starts 28; 0.0002s/start)
cg_add_node.: 0.00449s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.004691s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.004695s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.004698s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.0047s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.004705s (num_starts 2; 0.0024s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%12%bbentry_Lfor.cond%1%bbentry.: 0.004849s (num_starts 3; 0.0016s/start)
collect_assumes_around_path_helper.: 0.004925s (num_starts 89; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.005156s (num_starts 89; 0.0001s/start)
collect_aliasing_constraints_around_path_helper.: 0.005337s (num_starts 106; 0.0001s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.005471s (num_starts 18; 0.0003s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.005633s (num_starts 3; 0.0019s/start)
collect_aliasing_constraints_around_path.: 0.005716s (num_starts 66; 0.0001s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.00573s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.005731s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.005733s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-trivial.: 0.005736s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.005739s (num_starts 1; 0.0057s/start)
predicate_canonicalized.: 0.005859s (num_starts 28; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005904s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005909s (num_starts 4; 0.0015s/start)
lhs_set_sort.: 0.005955s (num_starts 32; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005971s (num_starts 4; 0.0015s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.006015s (num_starts 47; 0.0001s/start)
ldr_decompose_and_linear_solve.: 0.006144s (num_starts 19; 0.0003s/start)
compute_lr_status_for_expr.: 0.006305s (num_starts 134; 0.0000s/start)
create_new_corr_graph_edge.new_node.: 0.006402s (num_starts 2; 0.0032s/start)
compute_regions.: 0.006509s (num_starts 21; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.006538s (num_starts 47; 0.0001s/start)
bv_linear_solve.: 0.006547s (num_starts 19; 0.0003s/start)
create_new_corr_graph_edge.: 0.006565s (num_starts 3; 0.0022s/start)
query:bv_solve.: 0.006659s (num_starts 19; 0.0004s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.006812s (num_starts 126; 0.0001s/start)
get_next_potential_correlations.: 0.006814s (num_starts 3; 0.0023s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.007025s (num_starts 126; 0.0001s/start)
check_node_stability_after_CE_addition.: 0.007172s (num_starts 39; 0.0002s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.007395s (num_starts 133; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.007717s (num_starts 47; 0.0002s/start)
bv_solve_returning_intermediate_structures.: 0.007962s (num_starts 19; 0.0004s/start)
query:convert_to_z3.: 0.008186s (num_starts 165; 0.0000s/start)
collect_inductive_preds_around_path.: 0.008381s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.008465s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.008467s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.008471s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.008474s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.008477s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.008486s (num_starts 1; 0.0085s/start)
gen_pred_from_coeff_row.simplify.: 0.008688s (num_starts 28; 0.0003s/start)
avail_exprs_create_submap.: 0.008728s (num_starts 141; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.008835s (num_starts 2; 0.0044s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.008841s (num_starts 2; 0.0044s/start)
counter_example_falsifies_preds.: 0.008923s (num_starts 71; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.009054s (num_starts 743; 0.0000s/start)
bvsolve_cache_query.miss1.: 0.009124s (num_starts 19; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.009137s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.009139s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.009144s (num_starts 1; 0.0091s/start)
bvsolve_cache_query.: 0.009312s (num_starts 19; 0.0005s/start)
counter_example_satisfies_preds.: 0.009391s (num_starts 343; 0.0000s/start)
query:convert_from_z3.: 0.009584s (num_starts 165; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.009663s (num_starts 1; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.009664s (num_starts 1; 0.0097s/start)
do_ssa_transformation.: 0.010133s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.01056s (num_starts 4; 0.0026s/start)
populate_loc_liveness.: 0.010563s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear.: 0.01057s (num_starts 4; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.01083s (num_starts 2; 0.0054s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.011108s (num_starts 4; 0.0028s/start)
solve_for_bv_points.: 0.011381s (num_starts 19; 0.0006s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.011565s (num_starts 17; 0.0007s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.012146s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.012172s (num_starts 6; 0.0020s/start)
compute_new_lr_status_on_locs.: 0.013223s (num_starts 47; 0.0003s/start)
compute_z3_expr.: 0.01324s (num_starts 189; 0.0001s/start)
graph_to_stream.: 0.013349s (num_starts 4; 0.0033s/start)
put_smtlib_string_in_file.: 0.01362s (num_starts 48; 0.0003s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.013888s (num_starts 19; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.014377s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.014386s (num_starts 3; 0.0048s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.014423s (num_starts 79; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.015309s (num_starts 8; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.015327s (num_starts 8; 0.0019s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.015373s (num_starts 1; 0.0154s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.015402s (num_starts 1; 0.0154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.015404s (num_starts 1; 0.0154s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.015407s (num_starts 1; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.015409s (num_starts 1; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.015412s (num_starts 1; 0.0154s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.016002s (num_starts 337; 0.0000s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.016141s (num_starts 77; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.016755s (num_starts 2; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.016762s (num_starts 2; 0.0084s/start)
counter_example_evaluate_preds.: 0.017309s (num_starts 414; 0.0000s/start)
gen_pred_from_coeff_row.: 0.017588s (num_starts 28; 0.0006s/start)
get_unrolled_paths_from.: 0.017779s (num_starts 15; 0.0012s/start)
compute_preds_for_bv_points.: 0.01783s (num_starts 5; 0.0036s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.017869s (num_starts 9; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear.: 0.018396s (num_starts 4; 0.0046s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.018751s (num_starts 783; 0.0000s/start)
parse_z3_model.: 0.01896s (num_starts 8; 0.0024s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.019355s (num_starts 47; 0.0004s/start)
tfg_relax_pointsto_vals_on_edge.: 0.019467s (num_starts 17; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.019719s (num_starts 1; 0.0197s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.019721s (num_starts 1; 0.0197s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.019725s (num_starts 1; 0.0197s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.019728s (num_starts 1; 0.0197s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.019851s (num_starts 743; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.019931s (num_starts 1; 0.0199s/start)
propagate_nodece_across_edge.: 0.02038s (num_starts 9; 0.0023s/start)
tfg_postprocess_after_pointsto_analysis.: 0.020502s (num_starts 2; 0.0103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.021157s (num_starts 2; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.021164s (num_starts 2; 0.0106s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 0.02117s (num_starts 2; 0.0106s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.021176s (num_starts 2; 0.0106s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.021184s (num_starts 2; 0.0106s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.022044s (num_starts 152; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.022317s (num_starts 2; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.022319s (num_starts 2; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.022325s (num_starts 2; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.022331s (num_starts 2; 0.0112s/start)
parse_yices_model.: 0.022515s (num_starts 8; 0.0028s/start)
parse_cvc4_model.: 0.02285s (num_starts 8; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.025813s (num_starts 12; 0.0022s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.02604s (num_starts 70; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.026193s (num_starts 30; 0.0009s/start)
check_wfconds_on_edge.L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry.: 0.026907s (num_starts 3; 0.0090s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.027272s (num_starts 743; 0.0000s/start)
query:simplify-z3.: 0.027521s (num_starts 332; 0.0001s/start)
graph_ec_apply_trans_funs_helper.0.: 0.028472s (num_starts 156; 0.0002s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.028721s (num_starts 32; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.028849s (num_starts 2; 0.0144s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.028853s (num_starts 2; 0.0144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.028888s (num_starts 2; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.028991s (num_starts 8; 0.0036s/start)
graph_ec_apply_trans_funs_helper.: 0.029685s (num_starts 161; 0.0002s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.030025s (num_starts 161; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.030081s (num_starts 18; 0.0017s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.030455s (num_starts 161; 0.0002s/start)
computeWP_for_pred_across_ec.: 0.03089s (num_starts 161; 0.0002s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.031419s (num_starts 32; 0.0010s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.031687s (num_starts 16; 0.0020s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.031875s (num_starts 23; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.03197s (num_starts 3; 0.0107s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.031973s (num_starts 3; 0.0107s/start)
apply_mask_and_overlay_array_constant.: 0.033512s (num_starts 23; 0.0015s/start)
guarded_predicate_set_and.: 0.034152s (num_starts 30; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.034842s (num_starts 6; 0.0058s/start)
check_wfconds_on_edge.L3%12%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.036217s (num_starts 2; 0.0181s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.036732s (num_starts 5; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.036747s (num_starts 5; 0.0073s/start)
edge_composition_apply_trans_funs_on_pred.: 0.038776s (num_starts 60; 0.0006s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.039219s (num_starts 77; 0.0005s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.042145s (num_starts 35; 0.0012s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.042376s (num_starts 35; 0.0012s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.047983s (num_starts 30; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.049167s (num_starts 4; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04919s (num_starts 4; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.049202s (num_starts 4; 0.0123s/start)
decide_hoare_triple_helper;-trivial.: 0.055305s (num_starts 37; 0.0015s/start)
check_wfconds_on_edge.: 0.063313s (num_starts 7; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear.: 0.064568s (num_starts 12; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.0646s (num_starts 12; 0.0054s/start)
read_counter_examples_from_channel.: 0.065768s (num_starts 8; 0.0082s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%12%bbentry_Lfor.cond%1%bbentry.: 0.066045s (num_starts 3; 0.0220s/start)
check_equivalence_proof.: 0.06788s (num_starts 1; 0.0679s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%12%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.068343s (num_starts 15; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069724s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069727s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.069734s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.069739s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07003s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070031s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070031s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070032s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.070036s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.070041s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.070051s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.070422s (num_starts 2; 0.0352s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071077s (num_starts 1; 0.0711s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071081s (num_starts 1; 0.0711s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.071095s (num_starts 1; 0.0711s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.071098s (num_starts 1; 0.0711s/start)
counter_example_translate_on_edge_composition_helper.: 0.072832s (num_starts 345; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);linear.: 0.075262s (num_starts 16; 0.0047s/start)
ftmap_run_pointsto_analysis.: 0.07729s (num_starts 2; 0.0386s/start)
tfg_run_pointsto_analysis.: 0.077568s (num_starts 2; 0.0388s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077638s (num_starts 3; 0.0259s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077644s (num_starts 3; 0.0259s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear.: 0.080315s (num_starts 7; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 0.080328s (num_starts 7; 0.0115s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.080443s (num_starts 230; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.080626s (num_starts 21; 0.0038s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.080846s (num_starts 41; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083092s (num_starts 2; 0.0415s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083098s (num_starts 2; 0.0415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083102s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083106s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.083119s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned.: 0.083128s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.083142s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.08449s (num_starts 4; 0.0211s/start)
tfg_populate_structs_after_ssa_construction.: 0.086439s (num_starts 2; 0.0432s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%12%bbentry_Lfor.cond%1%bbentry.: 0.090243s (num_starts 3; 0.0301s/start)
corr_graph::add_edge().: 0.092142s (num_starts 3; 0.0307s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.093932s (num_starts 1; 0.0939s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094368s (num_starts 5; 0.0189s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.098763s (num_starts 2; 0.0494s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);linear.: 0.098797s (num_starts 11; 0.0090s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.099473s (num_starts 17; 0.0059s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.099589s (num_starts 3; 0.0332s/start)
corr_graph_add_correlation.: 0.099701s (num_starts 3; 0.0332s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.102123s (num_starts 3; 0.0340s/start)
check_preds_on_edge_compositions.: 0.106427s (num_starts 10; 0.0106s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123198s (num_starts 7; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.132661s (num_starts 2; 0.0663s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.132666s (num_starts 2; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.132673s (num_starts 2; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13268s (num_starts 2; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.132699s (num_starts 2; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.132705s (num_starts 2; 0.0664s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.132717s (num_starts 2; 0.0664s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.134676s (num_starts 5; 0.0269s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%12%bbentry_Lfor.cond%1%bbentry).: 0.135251s (num_starts 24; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.140789s (num_starts 2; 0.0704s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.140851s (num_starts 2; 0.0704s/start)
decide_hoare_triple_helper;per-query-type;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143555s (num_starts 9; 0.0160s/start)
ce_reconcile_sorts_and_values.: 0.15931s (num_starts 24; 0.0066s/start)
decide_hoare_triple_helper;per-query-type;linear.: 0.173979s (num_starts 27; 0.0064s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181211s (num_starts 6; 0.0302s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.186113s (num_starts 8; 0.0233s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%12%bbentry_Lfor.cond%1%bbentry.: 0.192085s (num_starts 9; 0.0213s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210826s (num_starts 3; 0.0703s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.210892s (num_starts 3; 0.0703s/start)
dst_edge_composition_proves_false.: 0.224378s (num_starts 3; 0.0748s/start)
decide_hoare_triple.: 0.224527s (num_starts 5; 0.0449s/start)
get_next_dst_edge_composition_to_correlate.: 0.234158s (num_starts 4; 0.0585s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.264893s (num_starts 8; 0.0331s/start)
query:smt.: 0.2719s (num_starts 24; 0.0113s/start)
decide_hoare_triple_helper;per-path;L3%12%bbentry_Lfor.cond%1%bbentry;(L3%12%bbentry_Lfor.cond%1%bbentry=>L3%12%bbentry_Lfor.cond%1%bbentry).: 0.297158s (num_starts 24; 0.0124s/start)
spawn_smt_query.: 0.33791s (num_starts 24; 0.0141s/start)
solver_provable.: 0.524788s (num_starts 30; 0.0175s/start)
expr_is_provable.: 0.530683s (num_starts 30; 0.0177s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 0.531114s (num_starts 30; 0.0177s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 0.532761s (num_starts 30; 0.0178s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 0.533539s (num_starts 30; 0.0178s/start)
update_invariant_state_for_edges.: 0.544021s (num_starts 3; 0.1813s/start)
cg_check_new_cg_ec.: 0.545964s (num_starts 3; 0.1820s/start)
correl_entry_apply.: 0.546083s (num_starts 3; 0.1820s/start)
solver_satisfiable-cache-miss.: 0.556989s (num_starts 24; 0.0232s/start)
solver_satisfiable.: 0.557147s (num_starts 31; 0.0180s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 0.570143s (num_starts 30; 0.0190s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 0.57525s (num_starts 32; 0.0180s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 0.575848s (num_starts 32; 0.0180s/start)
is_expr_equal_using_lhs_set_and_precond.: 0.596987s (num_starts 32; 0.0187s/start)
prove.: 0.597179s (num_starts 32; 0.0187s/start)
prove_spawn_and_join_helper.: 0.597318s (num_starts 32; 0.0187s/start)
prove_spawn_and_join.: 0.640301s (num_starts 32; 0.0200s/start)
prove_wrapper.proof_query_not_trivial.: 0.643661s (num_starts 32; 0.0201s/start)
prove_wrapper.: 0.650204s (num_starts 62; 0.0105s/start)
decide_hoare_triple_helper;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.655637s (num_starts 23; 0.0285s/start)
decide_hoare_triple_check_ub.: 0.692485s (num_starts 60; 0.0115s/start)
decide_hoare_triple_helper.: 0.712623s (num_starts 60; 0.0119s/start)
expandProductCFG.: 0.787632s (num_starts 4; 0.1969s/start)
decide_hoare_triple_with_alias_cons.: 0.793815s (num_starts 60; 0.0132s/start)
bestFirstSearch.: 0.93179s (num_starts 1; 0.9318s/start)
Time taken for equivalence check.: 1.00099s (num_starts 1; 1.0010s/start)

counters:
# of paths enumerated.: 12
# of paths expanded.: 3
# of queries to linear solver.: 19
# of smt-solver-queries.: 24
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%12%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%12%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%12%bbentry_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%12%bbentry_Lfor.cond%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%12%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%12%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%12%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%12%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%12%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%12%bbentry_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%12%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%12%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smt-queries-cache-hits.: 7
smt-queries-cvc4-sat.: 8
smt-queries-yices-sat.: 8
smt-queries-z3-sat.: 8
total-correlation-possibilities.: 7
total-correlation-possibilities-mod-lsprels.: 7
total-correlations-explored.: 4

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%12%bbentry_Lfor.cond%1%bbentry.: 8
final-CG-counterexamples-total-at-L3%12%bbentry_Lfor.cond%1%bbentry.: 20
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 5
final-CG-super-edges.: 0
src-edges.: 11
src-nodes.: 10
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 0.65
final-CG-time-to-total-time-ratio.: 0.69
query-time-to-total-time-ratio.: 0.27

Context stats:
exprs: count: 141369
sorts: count: 144
num_proof_queries: 32
num_proof_queries_answered_by_syntactic_check: 2
cache_stats:
m_simplify:
	----------- total:	3643
	        hit ratio:	0.954433
m_simplify_solver:
	----------- total:	611
	        hit ratio:	0.721768
m_z3_solver_substitution:
	----------- total:	167
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	170
	        hit ratio:	0
m_expr_size:
	----------- total:	3073
	        hit ratio:	0.920924
m_expr_evaluates_to_constant_visitor:
	----------- total:	2800
	        hit ratio:	0.741429
m_sort_dfa_canonicalize:
	----------- total:	19836
	        hit ratio:	0.999496
m_expr_convert_to_iexpr:
	----------- total:	260
	        hit ratio:	0.746154

z3_solver expr_query_cache entry size: 24
	----------- total:	31
	             hits:	7
	        hit ratio:	0.225806
histogram (time taken by solver in ms):
[ 2.9930,  3.8162) (avg.  3.1490)        : 4
[ 3.8162,  4.8659) (avg.  4.3337)        : 12
[ 4.8659,  6.2043) (avg.  0.0000)        : 0
[ 6.2043,  7.9109) (avg.  0.0000)        : 0
[ 7.9109, 10.0868) (avg.  0.0000)        : 0
[10.0868, 12.8613) (avg.  0.0000)        : 0
[12.8613, 16.3989) (avg.  0.0000)        : 0
[16.3989, 20.9095) (avg. 18.0410)        : 2
[20.9095, 26.6608) (avg. 22.5625)        : 2
[26.6608, 33.9940) (avg. 31.4748)        : 4
min number of quantifiers in query: 0
max number of quantifiers in query: 0
histogram (number of nodes in z3 ast)
[ 40,  51) (avg.  40)                    : 1
[ 51,  62) (avg.   0)                    : 0
[ 62,  73) (avg.  69)                    : 6
[ 73,  83) (avg.  78)                    : 6
[ 83,  94) (avg.  88)                    : 3
[ 94, 105) (avg. 100)                    : 2
[105, 115) (avg. 112)                    : 5
[115, 126) (avg.   0)                    : 0
[126, 137) (avg.   0)                    : 0
[137, 147) (avg. 137)                    : 1
Top 10 highest time taking queries:
1. [0.033s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%12%bbentry_Lfor.cond%1%bbentry.dstToPC.E0%0%d.from_pcL3%12%bbentry_Lfor.con.0
2. [0.033s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.0
3. [0.033s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-unsigned.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.cond.0
4. [0.027s] SOLVER_RES_TRUE memlabel_assertions_sat.0
5. [0.024s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1
6. [0.021s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%12%bbentry_Lfor.cond%1%bbentry.dstToPC.Lfor.cond%1%bbentry.from_pcL3%12%bbe.0
7. [0.019s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
8. [0.017s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.Lfor.cond%1%bbentry.from_pcL0%0%d_L0%0%d.cond_apply_set_.0
9. [0.005s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.wfcond.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.to_pcL3%12%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond..0
10. [0.005s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.wfcond.from_pcL3%12%bbentry_Lfor.cond%1%bbentry.to_pcL3%12%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond..1

<MSG>0:22 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 104 time spent: 0:0:0 [0.002251s total; 0.000022 per start]
tfg_computeWP: num_starts 231 time spent: 0:0:0 [0.025256s total; 0.000109 per start]
tfg_get_simplified_to_state_for_edge: num_starts 911 time spent: 0:0:0 [0.001513s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1044 time spent: 0:0:0 [0.001659s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 403 time spent: 0:0:0 [0.000682s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 24 time spent: 0:0:0 [0.096309s total; 0.004013 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 6 time spent: 0:0:0 [0.087519s total; 0.014587 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 296 time spent: 0:0:0 [0.059411s total; 0.000201 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 72 time spent: 0:0:0 [0.027469s total; 0.000382 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 251 time spent: 0:0:0 [0.040405s total; 0.000161 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1084 time spent: 0:0:0 [0.043594s total; 0.000040 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 251 time spent: 0:0:0 [0.007274s total; 0.000029 per start]
tfg_graph_get_vars_written_on_edge: num_starts 251 time spent: 0:0:0 [0.006102s total; 0.000024 per start]
cg_with_rank_add_CE_at_pc: num_starts 39 time spent: 0:0:0 [0.075643s total; 0.001940 per start]
graph_with_ce_add_CE_at_pc: num_starts 25 time spent: 0:0:0 [0.000631s total; 0.000025 per start]
graph_with_guessing_add_CE_at_pc: num_starts 39 time spent: 0:0:0 [0.074806s total; 0.001918 per start]
point_set_add_point_using_CE: num_starts 152 time spent: 0:0:0 [0.021777s total; 0.000143 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 152 time spent: 0:0:0 [0.022200s total; 0.000146 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 22 time spent: 0:0:0 [0.066775s total; 0.003035 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 22 time spent: 0:0:0 [0.043975s total; 0.001999 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1867 time spent: 0:0:0 [0.018001s total; 0.000010 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 304 time spent: 0:0:0 [0.010136s total; 0.000033 per start]
expr_simplify_solver: num_starts 644 time spent: 0:0:0 [0.045524s total; 0.000071 per start]
expr_simplify_syntactic: num_starts 644 time spent: 0:0:0 [0.021927s total; 0.000034 per start]
expr_simplify_select_on_store: num_starts 4 time spent: 0:0:0 [0.011084s total; 0.002771 per start]
expr_simplify_using_lhs_set_helper: num_starts 279 time spent: 0:0:0 [0.086973s total; 0.000312 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1281 time spent: 0:0:0 [0.085591s total; 0.000067 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 725 time spent: 0:0:0 [0.003157s total; 0.000004 per start]
expr_simplify_eq: num_starts 143 time spent: 0:0:0 [0.001408s total; 0.000010 per start]
expr_simplify_or: num_starts 16 time spent: 0:0:0 [0.000026s total; 0.000002 per start]
expr_simplify_and: num_starts 41 time spent: 0:0:0 [0.000223s total; 0.000005 per start]
expr_simplify_not: num_starts 20 time spent: 0:0:0 [0.000075s total; 0.000004 per start]
canonicalize_expr_tree: num_starts 193 time spent: 0:0:0 [0.004557s total; 0.000024 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000002s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 4 time spent: 0:0:0 [0.010989s total; 0.002747 per start]
get_arithmetic_addsub_atoms: num_starts 971 time spent: 0:0:0 [0.000825s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 244 time spent: 0:0:0 [0.002577s total; 0.000011 per start]
expr_is_consts_struct_constant: num_starts 372 time spent: 0:0:0 [0.000276s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 3925 time spent: 0:0:0 [0.087439s total; 0.000022 per start]
expr_do_simplify_helper_cache: num_starts 3925 time spent: 0:0:0 [0.003283s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 978 time spent: 0:0:0 [0.053522s total; 0.000055 per start]
array_constant_equals: num_starts 465 time spent: 0:0:0 [0.000631s total; 0.000001 per start]
sort_dfa_canonical: num_starts 161555 time spent: 0:0:1 [1.179556s total; 0.000007 per start]
expr_convert_to_iexpr: num_starts 268 time spent: 0:0:0 [0.031958s total; 0.000119 per start]
combo_dfa_xfer_and_meet: num_starts 30 time spent: 0:0:0 [0.047936s total; 0.001598 per start]
alias_val_xfer_and_meet: num_starts 30 time spent: 0:0:0 [0.026132s total; 0.000871 per start]
get_sprel_map_from_avail_exprs: num_starts 47 time spent: 0:0:0 [0.002805s total; 0.000060 per start]
update_memlabels_for_memslot_locs: num_starts 15 time spent: 0:0:0 [0.000063s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 94 time spent: 0:0:0 [0.012042s total; 0.000128 per start]
compute_simplified_loc_exprs_for_edge: num_starts 261 time spent: 0:0:0 [0.031044s total; 0.000119 per start]
compute_locs_definitely_written_on_edge: num_starts 94 time spent: 0:0:0 [0.000143s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 34 time spent: 0:0:0 [0.006253s total; 0.000184 per start]
edge_update_memlabel_map_for_mlvars: num_starts 47 time spent: 0:0:0 [0.000980s total; 0.000021 per start]
add_new_locs_based_on_edge: num_starts 30 time spent: 0:0:0 [0.017027s total; 0.000568 per start]
expand_locset_to_include_slots_for_memmask: num_starts 62 time spent: 0:0:0 [0.000123s total; 0.000002 per start]
total: num_starts 1 time spent: 0:0:29 [29.104343s total; 29.104343 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 1.17s.
ftmap_run_pointsto_analysis.: 0.07729s (num_starts 2; 0.0386s/start)s.
EQ Time after pointsto analysis: 1.08923s.
EQ Time after pointsto analysis and smt_query: 0.439022s.
EQ Time after pointsto analysis and smt_query and bv-solve: 0.42971s.
Equivalence proof found. The programs are equivalent.
