=SpecFuncIOSpecs
=FunctionName: make_list
=EntryPreconds
=pred 0
=Comment
pointer-implements-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : $llvm-arg-1 : BV:32
3 : $llvm-md : ARRAY[BV:32 -> BV:8]
4 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
5 : Lambda0 : BV:32
6 : Lambda1 : BV:32
7 : 0 : BV:32
8 : bvule(7, 5) : BOOL
9 : bvult(5, 2) : BOOL
10 : and(8, 9) : BOOL
11 : lambda(5, 10) : FUNCTION[BV:32 -> BOOL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 : BV:32
15 : bvmul(6, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 : INT
18 : 0 : BOOL
19 : select(3, 4, 12, 16, 17, 18) : BV:32
20 : lambda(6, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(11, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[List, SUM[UNIT, PROD[BV:32, DECL[List]]]]
2 : $llvm-ret : BV:32
3 : $llvm-md : ARRAY[BV:32 -> BV:8]
4 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-top : MEMLABEL
6 : 4 : INT
7 : 0 : BOOL
8 : 0 : BV:32
9 : 1 : BV:32
10 : Lambda0 : BV:32
11 : eq(10, 8) : BOOL
12 : ite(11, 8, 9) : BV:32
13 : unit : UNIT
14 : Indxform0 : BV:32
15 : select(3, 4, 5, 10, 6, 7) : BV:32
16 : prod(15, 14) : PROD[BV:32, BV:32]
17 : sum(12, 13, 16) : SUM[UNIT, PROD[BV:32, BV:32]]
18 : lambda(10, 17) : FUNCTION[BV:32 -> SUM[UNIT, PROD[BV:32, BV:32]]]
19 : Lambda1 : BV:32
20 : 4 : BV:32
21 : bvadd(19, 20) : BV:32
22 : select(3, 4, 5, 21, 6, 7) : BV:32
23 : lambda(19, 22) : FUNCTION[BV:32 -> BV:32]
24 : ind(2, 14, 23, 18) : IND[List, SUM[UNIT, PROD[BV:32, DECL[List]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
